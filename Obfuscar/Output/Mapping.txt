Renamed Types:

[Client]ICSharpCode.SharpZipLib.Zip.UseZip64 -> [Client]A.A
{
	ICSharpCode.SharpZipLib.Zip.UseZip64 [Client]ICSharpCode.SharpZipLib.Zip.UseZip64 ICSharpCode.SharpZipLib.Zip.UseZip64::Off -> A
	ICSharpCode.SharpZipLib.Zip.UseZip64 [Client]ICSharpCode.SharpZipLib.Zip.UseZip64 ICSharpCode.SharpZipLib.Zip.UseZip64::On -> a
	ICSharpCode.SharpZipLib.Zip.UseZip64 [Client]ICSharpCode.SharpZipLib.Zip.UseZip64 ICSharpCode.SharpZipLib.Zip.UseZip64::Dynamic -> B

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.UseZip64::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod -> [Client]A.a
{
	ICSharpCode.SharpZipLib.Zip.CompressionMethod [Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod ICSharpCode.SharpZipLib.Zip.CompressionMethod::Stored -> A
	ICSharpCode.SharpZipLib.Zip.CompressionMethod [Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod ICSharpCode.SharpZipLib.Zip.CompressionMethod::Deflated -> a
	ICSharpCode.SharpZipLib.Zip.CompressionMethod [Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod ICSharpCode.SharpZipLib.Zip.CompressionMethod::Deflate64 -> B
	ICSharpCode.SharpZipLib.Zip.CompressionMethod [Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod ICSharpCode.SharpZipLib.Zip.CompressionMethod::BZip2 -> b
	ICSharpCode.SharpZipLib.Zip.CompressionMethod [Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod ICSharpCode.SharpZipLib.Zip.CompressionMethod::WinZipAES -> C

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.CompressionMethod::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm -> [Client]A.B
{
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::None -> A
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::PkzipClassic -> a
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::Des -> B
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::RC2 -> b
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::TripleDes168 -> C
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::TripleDes112 -> c
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::Aes128 -> D
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::Aes192 -> d
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::Aes256 -> E
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::RC2Corrected -> e
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::Blowfish -> F
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::Twofish -> f
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::RC4 -> G
	ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm [Client]ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::Unknown -> g

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.EncryptionAlgorithm::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags -> [Client]A.b
{
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::Encrypted -> A
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::Method -> a
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::Descriptor -> B
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::ReservedPKware4 -> b
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::Patched -> C
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::StrongEncryption -> c
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::Unused7 -> D
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::Unused8 -> d
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::Unused9 -> E
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::Unused10 -> e
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::UnicodeText -> F
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::EnhancedCompress -> f
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::HeaderMasked -> G
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::ReservedPkware14 -> g
	ICSharpCode.SharpZipLib.Zip.GeneralBitFlags [Client]ICSharpCode.SharpZipLib.Zip.GeneralBitFlags ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::ReservedPkware15 -> H

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.GeneralBitFlags::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants -> [Client]A.C
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::get_DefaultCodePage[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::set_DefaultCodePage[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::ConvertToString[2]( System.Byte[], System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::ConvertToString[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::ConvertToStringExt[3]( System.Int32, System.Byte[], System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::ConvertToStringExt[2]( System.Int32, System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::ConvertToArray[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::ConvertToArray[2]( System.Int32, System.String ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipConstants::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::VersionMadeBy -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::VERSION_MADE_BY -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::VersionStrongEncryption -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::VERSION_STRONG_ENCRYPTION -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::VERSION_AES -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::VersionZip64 -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::LocalHeaderBaseSize -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::LOCHDR -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::Zip64DataDescriptorSize -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::DataDescriptorSize -> e
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::EXTHDR -> F
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::CentralHeaderBaseSize -> f
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::CENHDR -> G
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::EndOfCentralRecordBaseSize -> g
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::ENDHDR -> H
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::CryptoHeaderSize -> h
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::CRYPTO_HEADER_SIZE -> I
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::LocalHeaderSignature -> i
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::LOCSIG -> J
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::SpanningSignature -> j
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::SPANNINGSIG -> K
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::SpanningTempSignature -> k
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::SPANTEMPSIG -> L
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::DataDescriptorSignature -> l
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::EXTSIG -> M
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::CENSIG -> m
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::CentralHeaderSignature -> N
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::Zip64CentralFileHeaderSignature -> n
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::CENSIG64 -> O
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::Zip64CentralDirLocatorSignature -> o
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::ArchiveExtraDataSignature -> P
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::CentralHeaderDigitalSignature -> p
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::CENDIGITALSIG -> Q
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::EndOfCentralDirectorySignature -> q
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::ENDSIG -> R
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::defaultCodePage -> r

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipConstants::DefaultCodePage -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater -> [Client]A.c
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::Reset[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::get_Adler[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::get_TotalIn[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::get_TotalOut[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::Flush[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::Finish[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::get_IsFinished[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::get_IsNeedingInput[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::SetInput[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::SetInput[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::SetLevel[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::GetLevel[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::SetStrategy[1]( ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::Deflate[1]( System.Byte[] ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::Deflate[3]( System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::SetDictionary[1]( System.Byte[] ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::SetDictionary[3]( System.Byte[], System.Int32, System.Int32 ) -> B

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::.ctor[1]( System.Int32 ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater::.ctor[2]( System.Int32, System.Boolean ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::BEST_COMPRESSION -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::BEST_SPEED -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::DEFAULT_COMPRESSION -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::NO_COMPRESSION -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::DEFLATED -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::IS_SETDICT -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::IS_FLUSHING -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::IS_FINISHING -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::INIT_STATE -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::SETDICT_STATE -> e
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::BUSY_STATE -> F
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::FLUSHING_STATE -> f
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::FINISHING_STATE -> G
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::FINISHED_STATE -> g
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::CLOSED_STATE -> H
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::level -> h
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Deflater::noZlibHeaderOrFooter -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::state -> I
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::totalOut -> A
	ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending ICSharpCode.SharpZipLib.Zip.Compression.Deflater::pending -> A
	ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine ICSharpCode.SharpZipLib.Zip.Compression.Deflater::engine -> A

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::Adler -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::TotalIn -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Deflater::TotalOut -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Deflater::IsFinished -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Deflater::IsNeedingInput -> dropped
}

[Client]ICSharpCode.SharpZipLib.Checksums.StrangeCRC -> [Client]A.e
{
	[Client]ICSharpCode.SharpZipLib.Checksums.StrangeCRC::get_Value[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.StrangeCRC::Reset[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Checksums.StrangeCRC::Update[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.StrangeCRC::Update[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.StrangeCRC::Update[3]( System.Byte[], System.Int32, System.Int32 ) -> A

	[Client]ICSharpCode.SharpZipLib.Checksums.StrangeCRC::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Checksums.StrangeCRC::.cctor[0]( ) skipped:  special name

	System.UInt32[] [Client]System.UInt32[] ICSharpCode.SharpZipLib.Checksums.StrangeCRC::crc32Table -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Checksums.StrangeCRC::globalCrc -> A

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Checksums.StrangeCRC::Value -> dropped
}

[Client]Game.MsgRecvQueue -> [Client]A.F
{
	[Client]Game.MsgRecvQueue::Count[0]( ) -> A
	[Client]Game.MsgRecvQueue::Push[1]( Game.Msg.MsgDynamic ) -> A
	[Client]Game.MsgRecvQueue::Pop[0]( ) -> a

	[Client]Game.MsgRecvQueue::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.MsgRecvQueue::MaxMsgNum -> A
	System.Int32 [Client]System.Int32 Game.MsgRecvQueue::m_ReadIndex -> a
	System.Int32 [Client]System.Int32 Game.MsgRecvQueue::m_WriteIndex -> B
	Game.Msg.MsgDynamic[] [Client]Game.Msg.MsgDynamic[] Game.MsgRecvQueue::m_MsgNode -> A
}

[Client]Game.MsgRecvBuffer -> [Client]A.f
{
	[Client]Game.MsgRecvBuffer::get_RecvBytes[0]( ) -> A
	[Client]Game.MsgRecvBuffer::set_RecvBytes[1]( System.Int32 ) -> A
	[Client]Game.MsgRecvBuffer::get_MsgLength[0]( ) -> a
	[Client]Game.MsgRecvBuffer::set_MsgLength[1]( System.Int32 ) -> a
	[Client]Game.MsgRecvBuffer::get_Buffer[0]( ) -> B
	[Client]Game.MsgRecvBuffer::Reset[0]( ) -> b

	[Client]Game.MsgRecvBuffer::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.MsgRecvBuffer::MaxMsgLength -> A
	System.Int32 [Client]System.Int32 Game.MsgRecvBuffer::RecvBufferLength -> a
	System.Byte[] [Client]System.Byte[] Game.MsgRecvBuffer::m_Buffer -> A
	System.Int32 [Client]System.Int32 Game.MsgRecvBuffer::<RecvBytes>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.MsgRecvBuffer::<MsgLength>k__BackingField -> b

	System.Int32 [Client]System.Int32 Game.MsgRecvBuffer::RecvBytes -> dropped
	System.Int32 [Client]System.Int32 Game.MsgRecvBuffer::MsgLength -> dropped
	System.Byte[] [Client]System.Byte[] Game.MsgRecvBuffer::Buffer -> dropped
}

[Client]Game.NetworkFailState -> [Client]A.G
{
	Game.NetworkFailState [Client]Game.NetworkFailState Game.NetworkFailState::Invalid -> A
	Game.NetworkFailState [Client]Game.NetworkFailState Game.NetworkFailState::Connect -> a
	Game.NetworkFailState [Client]Game.NetworkFailState Game.NetworkFailState::Receive -> B

	System.Int32 [Client]System.Int32 Game.NetworkFailState::value__ skipped:  filtered
}

[Client]Game.Session -> [Client]A.g
{
	[Client]Game.Session::get_Instance[0]( ) -> A
	[Client]Game.Session::GetMsgCount[0]( ) -> a
	[Client]Game.Session::GetMsg[0]( ) -> B
	[Client]Game.Session::RegisterRPC[2]( System.UInt16, System.UInt16 ) -> A
	[Client]Game.Session::ResetRPCWait[1]( System.UInt16 ) -> A
	[Client]Game.Session::IsConnected[0]( ) -> b
	[Client]Game.Session::Connect[2]( System.String, System.Int32 ) -> A
	[Client]Game.Session::ConnectCallback[1]( System.IAsyncResult ) -> A
	[Client]Game.Session::ReadData[0]( ) -> C
	[Client]Game.Session::ReceiveCallback[1]( System.IAsyncResult ) -> a
	[Client]Game.Session::SendCallBack[1]( System.IAsyncResult ) -> B
	[Client]Game.Session::SendData[2]( System.Byte[], System.Int32 ) -> A
	[Client]Game.Session::Send[1]( Game.Msg.MsgBase ) -> A
	[Client]Game.Session::CloseSocket[0]( ) -> c
	[Client]Game.Session::CloseSocket[1]( System.Boolean ) -> A
	[Client]Game.Session::StartReconnect[0]( ) -> D
	[Client]Game.Session::CheckIfReconnect[0]( ) -> d
	[Client]Game.Session::Reconnect[0]( ) -> E
	[Client]Game.Session::UpdateRecvMsgTime[0]( ) -> e
	[Client]Game.Session::TryToPingServer[0]( ) -> F
	[Client]Game.Session::OnMsgSeverPingMsg[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Session::TimeToReconnect[0]( ) -> f
	[Client]Game.Session::OnReconnectManually[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.Session::ResetReconnectState[0]( ) -> G
	[Client]Game.Session::ForbidReconnect[0]( ) -> g

	[Client]Game.Session::.ctor[0]( ) skipped:  special name
	[Client]Game.Session::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Session::MaxSendMsgNum -> A
	System.Int32 [Client]System.Int32 Game.Session::SendMsgCycle -> a
	System.Int32 [Client]System.Int32 Game.Session::MaxRPCWaitTime -> B
	Game.Session [Client]Game.Session Game.Session::m_Instance -> A
	log4net.ILog [Client]log4net.ILog Game.Session::m_Log -> A
	Game.MsgRecvQueue [Client]Game.MsgRecvQueue Game.Session::m_msgQueue -> A
	Game.MsgRecvBuffer [Client]Game.MsgRecvBuffer Game.Session::m_msgBuffer -> A
	System.Net.Sockets.Socket [Client]System.Net.Sockets.Socket Game.Session::m_Socket -> A
	System.Int32 [Client]System.Int32 Game.Session::m_NetworkFailState -> b
	System.Int32 [Client]System.Int32 Game.Session::m_CurSendMsgNum -> C
	System.Int32 [Client]System.Int32 Game.Session::m_LastResetTime -> c
	System.Collections.Generic.Dictionary`2<System.UInt16,System.UInt16> [Client]System.Collections.Generic.Dictionary`2<System.UInt16,System.UInt16> Game.Session::m_RPCMsgs -> A
	System.Collections.Generic.Dictionary`2<System.UInt16,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.UInt16,System.Int32> Game.Session::m_WaitForAnswer -> A
	System.Boolean [Client]System.Boolean Game.Session::m_Reconnect -> A
	System.String [Client]System.String Game.Session::m_Host -> A
	System.Int32 [Client]System.Int32 Game.Session::m_Port -> D
	System.Boolean [Client]System.Boolean Game.Session::m_StartReconnect -> a
	Game.Session/enumReconnectState [Client]Game.Session/enumReconnectState Game.Session::m_ReconnectState -> A
	System.Single [Client]System.Single Game.Session::m_LastReconnectTime -> A
	System.Int32 [Client]System.Int32 Game.Session::m_ReconnectCount -> d
	System.Boolean [Client]System.Boolean Game.Session::m_CanShowMsgBox -> B
	System.Boolean [Client]System.Boolean Game.Session::m_IsReconnected -> b
	System.Boolean [Client]System.Boolean Game.Session::m_CanReconnect -> C
	System.Single [Client]System.Single Game.Session::m_LastRecvMsgTime -> a
	System.Int32 [Client]System.Int32 Game.Session::m_PingCount -> E
	System.Boolean [Client]System.Boolean Game.Session::m_CanCheckRecvMsgState -> c

	Game.Session [Client]Game.Session Game.Session::Instance -> dropped
}

[Client]Game.Session/enumReconnectState -> [Client]A.g/H
{
	Game.Session/enumReconnectState [Client]Game.Session/enumReconnectState Game.Session/enumReconnectState::Default -> A
	Game.Session/enumReconnectState [Client]Game.Session/enumReconnectState Game.Session/enumReconnectState::Auto -> a
	Game.Session/enumReconnectState [Client]Game.Session/enumReconnectState Game.Session/enumReconnectState::Manual -> B

	System.Int32 [Client]System.Int32 Game.Session/enumReconnectState::value__ skipped:  filtered
}

[Client]Game.Platform.Interface -> [Client]A.h
{
	[Client]Game.Platform.Interface::get_Instance[0]( ) -> n
	[Client]Game.Platform.Interface::Create[0]( ) -> O
	[Client]Game.Platform.Interface::Init[0]( ) -> A
	[Client]Game.Platform.Interface::Release[0]( ) -> a
	[Client]Game.Platform.Interface::GetPath[1]( System.String ) -> A
	[Client]Game.Platform.Interface::GetBundlePath[1]( System.String ) -> a
	[Client]Game.Platform.Interface::GetWritePath[1]( System.String ) -> B
	[Client]Game.Platform.Interface::GetTotalMemory[0]( ) -> o
	[Client]Game.Platform.Interface::GetAvailableMemory[0]( ) -> P
	[Client]Game.Platform.Interface::GetRuntime[0]( ) -> p
	[Client]Game.Platform.Interface::IsAppStoreVersion[0]( ) -> Q
	[Client]Game.Platform.Interface::GetSDKPlatform[0]( ) -> B
	[Client]Game.Platform.Interface::InitSDK[0]( ) -> b
	[Client]Game.Platform.Interface::IsSDKFinished[0]( ) -> C
	[Client]Game.Platform.Interface::Login[0]( ) -> c
	[Client]Game.Platform.Interface::Logout[0]( ) -> D
	[Client]Game.Platform.Interface::CanPay[0]( ) -> d
	[Client]Game.Platform.Interface::Pay[3]( System.String, System.Int32, System.String ) -> A
	[Client]Game.Platform.Interface::GetChannelId[0]( ) -> E
	[Client]Game.Platform.Interface::GetLoginStatus[0]( ) -> e
	[Client]Game.Platform.Interface::GetUserId[0]( ) -> F
	[Client]Game.Platform.Interface::GetUserName[0]( ) -> f
	[Client]Game.Platform.Interface::GetToken[0]( ) -> G
	[Client]Game.Platform.Interface::SetToken[2]( System.String, System.Int32 ) -> A
	[Client]Game.Platform.Interface::SetUserInfo[2]( System.String, System.String ) -> a
	[Client]Game.Platform.Interface::CheckGuestAccount[0]( ) -> g
	[Client]Game.Platform.Interface::ChangeAccount[0]( ) -> H
	[Client]Game.Platform.Interface::StartAccountHome[0]( ) -> h
	[Client]Game.Platform.Interface::StartForum[0]( ) -> I
	[Client]Game.Platform.Interface::ShowToolBar[0]( ) -> i
	[Client]Game.Platform.Interface::HideToolBar[0]( ) -> J
	[Client]Game.Platform.Interface::IsCydia[0]( ) -> j
	[Client]Game.Platform.Interface::IsPad[0]( ) -> K
	[Client]Game.Platform.Interface::IsHdVersion[0]( ) -> k
	[Client]Game.Platform.Interface::StartWebView[1]( System.String ) -> b
	[Client]Game.Platform.Interface::OpenUrl[1]( System.String ) -> C
	[Client]Game.Platform.Interface::SendSMS[2]( System.String, System.String ) -> A
	[Client]Game.Platform.Interface::SendWeibo[1]( System.String ) -> c
	[Client]Game.Platform.Interface::SendWeChat[1]( System.String ) -> D
	[Client]Game.Platform.Interface::IsUpdateState[0]( ) -> L
	[Client]Game.Platform.Interface::CheckVersion[0]( ) -> l
	[Client]Game.Platform.Interface::GetProgress[0]( ) -> M
	[Client]Game.Platform.Interface::GetCurrentState[0]( ) -> m
	[Client]Game.Platform.Interface::GetMemInfo[0]( ) -> q
	[Client]Game.Platform.Interface::GetUDID[0]( ) -> N
	[Client]Game.Platform.Interface::StandardlizePath[1]( System.String ) -> d

	[Client]Game.Platform.Interface::.ctor[0]( ) skipped:  special name
	[Client]Game.Platform.Interface::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.Platform.Interface::m_Log -> A
	Game.Platform.Interface [Client]Game.Platform.Interface Game.Platform.Interface::m_Instance -> A

	Game.Platform.Interface [Client]Game.Platform.Interface Game.Platform.Interface::Instance -> dropped
}

[Client]Game.Platform.iOS.CustomInterface -> [Client]A.I
{
	[Client]Game.Platform.iOS.CustomInterface::Init[0]( ) -> A
	[Client]Game.Platform.iOS.CustomInterface::Release[0]( ) -> a
	[Client]Game.Platform.iOS.CustomInterface::GetPath[1]( System.String ) -> A
	[Client]Game.Platform.iOS.CustomInterface::GetBundlePath[1]( System.String ) -> a
	[Client]Game.Platform.iOS.CustomInterface::GetWritePath[1]( System.String ) -> B
	[Client]Game.Platform.iOS.CustomInterface::GetSDKPlatform[0]( ) -> B
	[Client]Game.Platform.iOS.CustomInterface::InitSDK[0]( ) -> b
	[Client]Game.Platform.iOS.CustomInterface::IsSDKFinished[0]( ) -> C
	[Client]Game.Platform.iOS.CustomInterface::Login[0]( ) -> c
	[Client]Game.Platform.iOS.CustomInterface::Logout[0]( ) -> D
	[Client]Game.Platform.iOS.CustomInterface::CanPay[0]( ) -> d
	[Client]Game.Platform.iOS.CustomInterface::Pay[3]( System.String, System.Int32, System.String ) -> A
	[Client]Game.Platform.iOS.CustomInterface::GetChannelId[0]( ) -> E
	[Client]Game.Platform.iOS.CustomInterface::GetLoginStatus[0]( ) -> e
	[Client]Game.Platform.iOS.CustomInterface::GetUserId[0]( ) -> F
	[Client]Game.Platform.iOS.CustomInterface::GetUserName[0]( ) -> f
	[Client]Game.Platform.iOS.CustomInterface::GetToken[0]( ) -> G
	[Client]Game.Platform.iOS.CustomInterface::SetToken[2]( System.String, System.Int32 ) -> A
	[Client]Game.Platform.iOS.CustomInterface::CheckGuestAccount[0]( ) -> g
	[Client]Game.Platform.iOS.CustomInterface::ChangeAccount[0]( ) -> H
	[Client]Game.Platform.iOS.CustomInterface::StartAccountHome[0]( ) -> h
	[Client]Game.Platform.iOS.CustomInterface::StartForum[0]( ) -> I
	[Client]Game.Platform.iOS.CustomInterface::ShowToolBar[0]( ) -> i
	[Client]Game.Platform.iOS.CustomInterface::HideToolBar[0]( ) -> J
	[Client]Game.Platform.iOS.CustomInterface::IsCydia[0]( ) -> j
	[Client]Game.Platform.iOS.CustomInterface::IsPad[0]( ) -> K
	[Client]Game.Platform.iOS.CustomInterface::IsHdVersion[0]( ) -> k
	[Client]Game.Platform.iOS.CustomInterface::StartWebView[1]( System.String ) -> b
	[Client]Game.Platform.iOS.CustomInterface::OpenUrl[1]( System.String ) -> C
	[Client]Game.Platform.iOS.CustomInterface::SendSMS[2]( System.String, System.String ) -> A
	[Client]Game.Platform.iOS.CustomInterface::SendWeibo[1]( System.String ) -> c
	[Client]Game.Platform.iOS.CustomInterface::SendWeChat[1]( System.String ) -> D
	[Client]Game.Platform.iOS.CustomInterface::IsUpdateState[0]( ) -> L
	[Client]Game.Platform.iOS.CustomInterface::CheckVersion[0]( ) -> l
	[Client]Game.Platform.iOS.CustomInterface::GetProgress[0]( ) -> M
	[Client]Game.Platform.iOS.CustomInterface::GetCurrentState[0]( ) -> m
	[Client]Game.Platform.iOS.CustomInterface::GetUDID[0]( ) -> N
	[Client]Game.Platform.iOS.CustomInterface::GetNativePath[1]( System.String ) -> d
	[Client]Game.Platform.iOS.CustomInterface::GetUpdatePath[1]( System.String ) -> E
	[Client]Game.Platform.iOS.CustomInterface::LoadLocalInfo[2]( System.Collections.Generic.Dictionary`2<System.String,System.String>&, System.Boolean ) -> A
	[Client]Game.Platform.iOS.CustomInterface::DownloadServerList[0]( ) -> n

	[Client]Game.Platform.iOS.CustomInterface::_GetAPNType[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_HttpDownload[3]( System.String, System.String, System.String ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_CheckDownloadFinish[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_GetProgress[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_MD5Check[2]( System.String, System.String ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_InitSDK[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_GetSDKPlatform[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_Login[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_Logout[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_CanPay[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_Pay[3]( System.String, System.Int32, System.String ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_GetChannelId[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_GetLoginStatus[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_GetUserId[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_GetUserName[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_GetToken[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_GetUDID[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_CheckGuestAccount[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_ChangeAccount[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_StartAccountHome[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_StartForum[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_ShowToolBar[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_HideToolBar[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_IsCydia[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_IsPad[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_IsHdVersion[0]( ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_StartWebView[1]( System.String ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_OpenUrl[1]( System.String ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_SendWeibo[1]( System.String ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::_SendWeChat[1]( System.String ) skipped:  filtered
	[Client]Game.Platform.iOS.CustomInterface::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Platform.iOS.CustomInterface::TIMEOUT -> A
	System.Boolean [Client]System.Boolean Game.Platform.iOS.CustomInterface::m_PlatformInited -> A
	System.Int32 [Client]System.Int32 Game.Platform.iOS.CustomInterface::m_PlatformId -> a
	System.Int32 [Client]System.Int32 Game.Platform.iOS.CustomInterface::m_ChannelId -> B
	System.Boolean [Client]System.Boolean Game.Platform.iOS.CustomInterface::m_IsCydia -> a
	System.Boolean [Client]System.Boolean Game.Platform.iOS.CustomInterface::m_IsPad -> B
	System.Boolean [Client]System.Boolean Game.Platform.iOS.CustomInterface::m_IsHdVersion -> b
	System.Int32 [Client]System.Int32 Game.Platform.iOS.CustomInterface::m_Lasttime -> b
	System.String [Client]System.String Game.Platform.iOS.CustomInterface::m_DataPath -> A
	System.Boolean [Client]System.Boolean Game.Platform.iOS.CustomInterface::m_bUpdate -> C
	System.Int32 [Client]System.Int32 Game.Platform.iOS.CustomInterface::m_CurState -> C
	System.Collections.Generic.Dictionary`2<System.String,System.String> [Client]System.Collections.Generic.Dictionary`2<System.String,System.String> Game.Platform.iOS.CustomInterface::m_LocalInfo -> A
	System.Collections.Generic.Dictionary`2<System.String,System.String> [Client]System.Collections.Generic.Dictionary`2<System.String,System.String> Game.Platform.iOS.CustomInterface::m_LocalInfoUpdate -> a
	System.Collections.Generic.Dictionary`2<System.String,System.String> [Client]System.Collections.Generic.Dictionary`2<System.String,System.String> Game.Platform.iOS.CustomInterface::m_UpdateInfo -> B
}

[Client]Game.Msg.MsgBase -> [Client]A.J
{
	[Client]Game.Msg.MsgBase::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgBase::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.Msg.MsgBase::GetLength[0]( ) -> A
	[Client]Game.Msg.MsgBase::SetLength[1]( System.Int32 ) -> A
	[Client]Game.Msg.MsgBase::GetHeaderLength[0]( ) -> a
	[Client]Game.Msg.MsgBase::GetDataLength[0]( ) -> B
	[Client]Game.Msg.MsgBase::GetMsgType[0]( ) -> b
	[Client]Game.Msg.MsgBase::SetMsgType[1]( System.UInt16 ) -> A
	[Client]Game.Msg.MsgBase::GetBaseType[0]( ) -> C
	[Client]Game.Msg.MsgBase::SetBaseType[1]( System.Byte ) -> A
	[Client]Game.Msg.MsgBase::GetSubType[0]( ) -> c
	[Client]Game.Msg.MsgBase::SetSubType[1]( System.Byte ) -> a

	[Client]Game.Msg.MsgBase::.ctor[0]( ) skipped:  special name

	Game.Msg.MsgHeader [Client]Game.Msg.MsgHeader Game.Msg.MsgBase::header -> A
}

[Client]Game.Msg.MsgTeam -> [Client]A.j
{

	[Client]Game.Msg.MsgTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgTeam::BaseType -> A
}

[Client]Game.Msg.MsgClientCreateTeam -> [Client]A.K
{

	[Client]Game.Msg.MsgClientCreateTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientCreateTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientCreateTeam::Type -> A
}

[Client]Game.Msg.MsgServerAckCreateTeam -> [Client]A.k
{

	[Client]Game.Msg.MsgServerAckCreateTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckCreateTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckCreateTeam::Type -> A
}

[Client]Game.Msg.MsgClientDisbandTeam -> [Client]A.L
{

	[Client]Game.Msg.MsgClientDisbandTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientDisbandTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientDisbandTeam::Type -> A
}

[Client]Game.Msg.MsgServerAckDisbandTeam -> [Client]A.l
{

	[Client]Game.Msg.MsgServerAckDisbandTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckDisbandTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckDisbandTeam::Type -> A
}

[Client]Game.Msg.MsgClientReqJoinTeam -> [Client]A.M
{
	[Client]Game.Msg.MsgClientReqJoinTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqJoinTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqJoinTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqJoinTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqJoinTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqJoinTeam::m_uiPlayerID -> A
}

[Client]Game.Msg.MsgServerTellJoinTeam -> [Client]A.m
{
	[Client]Game.Msg.MsgServerTellJoinTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTellJoinTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTellJoinTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTellJoinTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTellJoinTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerTellJoinTeam::m_uiPlayerID -> A
	System.String [Client]System.String Game.Msg.MsgServerTellJoinTeam::m_strPlayerName -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTellJoinTeam::m_usPlayerLevel -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTellJoinTeam::m_usProfession -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerTellJoinTeam::m_btSex -> a
}

[Client]Game.Msg.MsgClientAckJoinTeam -> [Client]A.N
{
	[Client]Game.Msg.MsgClientAckJoinTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientAckJoinTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientAckJoinTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientAckJoinTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientAckJoinTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientAckJoinTeam::m_uiPlayerID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientAckJoinTeam::m_btRet -> a
}

[Client]Game.Msg.MsgClientReqInviteTeam -> [Client]A.n
{
	[Client]Game.Msg.MsgClientReqInviteTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqInviteTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqInviteTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqInviteTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqInviteTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqInviteTeam::m_uiPlayerID -> A
}

[Client]Game.Msg.MsgServerTellInviteTeam -> [Client]A.O
{
	[Client]Game.Msg.MsgServerTellInviteTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTellInviteTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTellInviteTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTellInviteTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTellInviteTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerTellInviteTeam::m_uiHeaderID -> A
	System.String [Client]System.String Game.Msg.MsgServerTellInviteTeam::m_strHeaderName -> A
	System.Collections.Generic.List`1<Game.Msg.TeamMemInfo> [Client]System.Collections.Generic.List`1<Game.Msg.TeamMemInfo> Game.Msg.MsgServerTellInviteTeam::m_oVecMemberList -> A
}

[Client]Game.Msg.MsgClientAckInviteTeam -> [Client]A.o
{
	[Client]Game.Msg.MsgClientAckInviteTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientAckInviteTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientAckInviteTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientAckInviteTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientAckInviteTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientAckInviteTeam::m_uiHeaderID -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientAckInviteTeam::m_bAccept -> A
}

[Client]Game.Msg.MsgClientReqLeaveTeam -> [Client]A.P
{

	[Client]Game.Msg.MsgClientReqLeaveTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqLeaveTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqLeaveTeam::Type -> A
}

[Client]Game.Msg.MsgServerMemberLeaveTeam -> [Client]A.p
{
	[Client]Game.Msg.MsgServerMemberLeaveTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMemberLeaveTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMemberLeaveTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMemberLeaveTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMemberLeaveTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerMemberLeaveTeam::m_uiPlayerID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerMemberLeaveTeam::m_ebtLeaveType -> a
}

[Client]Game.Msg.MsgClientReqExpelTeam -> [Client]A.Q
{
	[Client]Game.Msg.MsgClientReqExpelTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpelTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpelTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpelTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpelTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqExpelTeam::m_uiPlayerID -> A
}

[Client]Game.Msg.MsgServerNotifyTeamInfo -> [Client]A.q
{
	[Client]Game.Msg.MsgServerNotifyTeamInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyTeamInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyTeamInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyTeamInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyTeamInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyTeamInfo::m_uiHeaderID -> A
	System.String [Client]System.String Game.Msg.MsgServerNotifyTeamInfo::m_strHeaderName -> A
	System.Collections.Generic.List`1<Game.Msg.TeamMemInfo> [Client]System.Collections.Generic.List`1<Game.Msg.TeamMemInfo> Game.Msg.MsgServerNotifyTeamInfo::m_oVecMemberList -> A
}

[Client]Game.Msg.MsgServerCharJoinTeam -> [Client]A.R
{
	[Client]Game.Msg.MsgServerCharJoinTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCharJoinTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCharJoinTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCharJoinTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharJoinTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharJoinTeam::m_uiTeamID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharJoinTeam::m_uiPlayerID -> a
}

[Client]Game.Msg.MsgServerCharLeaveTeam -> [Client]A.r
{
	[Client]Game.Msg.MsgServerCharLeaveTeam::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCharLeaveTeam::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCharLeaveTeam::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCharLeaveTeam::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharLeaveTeam::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharLeaveTeam::m_uiTeamID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharLeaveTeam::m_uiPlayerID -> a
}

[Client]Game.Msg.MsgServerChangeTeamHeader -> [Client]A.S
{
	[Client]Game.Msg.MsgServerChangeTeamHeader::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerChangeTeamHeader::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerChangeTeamHeader::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerChangeTeamHeader::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerChangeTeamHeader::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerChangeTeamHeader::m_uiPlayerID -> A
}

[Client]Game.Msg.MsgClientChangeTeamHeader -> [Client]A.s
{
	[Client]Game.Msg.MsgClientChangeTeamHeader::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientChangeTeamHeader::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientChangeTeamHeader::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientChangeTeamHeader::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientChangeTeamHeader::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientChangeTeamHeader::m_uiPlayerID -> A
}

[Client]Game.Msg.MsgClientReqTeamTarget -> [Client]A.T
{
	[Client]Game.Msg.MsgClientReqTeamTarget::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqTeamTarget::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqTeamTarget::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqTeamTarget::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqTeamTarget::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqTeamTarget::m_uiCharId -> A
}

[Client]Game.Msg.MsgServerAckTeamTarget -> [Client]A.t
{
	[Client]Game.Msg.MsgServerAckTeamTarget::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckTeamTarget::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckTeamTarget::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckTeamTarget::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckTeamTarget::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckTeamTarget::m_uiCharId -> A
}

[Client]Game.Msg.MsgEctype -> [Client]A.U
{

	[Client]Game.Msg.MsgEctype::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgEctype::BaseType -> A
}

[Client]Game.Msg.MsgServerEctypeStart -> [Client]A.u
{
	[Client]Game.Msg.MsgServerEctypeStart::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerEctypeStart::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerEctypeStart::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerEctypeStart::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEctypeStart::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerEctypeStart::m_ulRemainTime -> A
}

[Client]Game.Msg.MsgServerEctypeEnd -> [Client]A.V
{
	[Client]Game.Msg.MsgServerEctypeEnd::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerEctypeEnd::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerEctypeEnd::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerEctypeEnd::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEctypeEnd::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEctypeEnd::m_uiMapID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerEctypeEnd::m_ebtGrade -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEctypeEnd::m_uiUseTime -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEctypeEnd::m_uiExp -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEctypeEnd::m_uiMoney -> b
	System.Collections.Generic.List`1<Game.Msg.SEctypeAwardList> [Client]System.Collections.Generic.List`1<Game.Msg.SEctypeAwardList> Game.Msg.MsgServerEctypeEnd::m_oVecAwardData -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEctypeEnd::m_usCommonAwardPrice -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEctypeEnd::m_usVIPAwardPrice -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEctypeEnd::m_uiDelayTime -> C
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEctypeEnd::m_uiStandardTime -> c
}

[Client]Game.Msg.MsgClientGetAward -> [Client]A.v
{

	[Client]Game.Msg.MsgClientGetAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientGetAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientGetAward::Type -> A
}

[Client]Game.Msg.MsgServerGetAward -> [Client]A.W
{
	[Client]Game.Msg.MsgServerGetAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerGetAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerGetAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerGetAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerGetAward::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerGetAward::m_uiCharID -> A
}

[Client]Game.Msg.MsgClientCallFriend -> [Client]A.w
{
	[Client]Game.Msg.MsgClientCallFriend::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientCallFriend::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientCallFriend::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientCallFriend::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientCallFriend::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientCallFriend::m_uiFriendID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientCallFriend::m_ebtCallType -> a
}

[Client]Game.Msg.MsgClientReqEctypeAward -> [Client]A.X
{
	[Client]Game.Msg.MsgClientReqEctypeAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqEctypeAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqEctypeAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqEctypeAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqEctypeAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqEctypeAward::m_ebtBoxIndex -> a
}

[Client]Game.Msg.MsgServerAckEctypeAward -> [Client]A.x
{
	[Client]Game.Msg.MsgServerAckEctypeAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckEctypeAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckEctypeAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckEctypeAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckEctypeAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckEctypeAward::m_ebtBoxIndex -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckEctypeAward::m_ebtResult -> B
	System.Collections.Generic.List`1<Game.Msg.PhysicalBoxItemData> [Client]System.Collections.Generic.List`1<Game.Msg.PhysicalBoxItemData> Game.Msg.MsgServerAckEctypeAward::m_oVecAwardList -> A
}

[Client]Game.Msg.MsgClientReqLeaveEctype -> [Client]A.Y
{
	[Client]Game.Msg.MsgClientReqLeaveEctype::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqLeaveEctype::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqLeaveEctype::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqLeaveEctype::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqLeaveEctype::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqLeaveEctype::m_uiMapID -> A
}

[Client]Game.Msg.MsgClientReqAfkEctypeInfo -> [Client]A.y
{

	[Client]Game.Msg.MsgClientReqAfkEctypeInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqAfkEctypeInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqAfkEctypeInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckAfkEctypeInfo -> [Client]A.Z
{
	[Client]Game.Msg.MsgServerAckAfkEctypeInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckAfkEctypeInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckAfkEctypeInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAfkEctypeInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckAfkEctypeInfo::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckAfkEctypeInfo::m_bInAfkEctype -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckAfkEctypeInfo::m_uiCurAfkExp -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckAfkEctypeInfo::m_uiMaxAfkExp -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckAfkEctypeInfo::m_uiDropLeftSeconds -> B
}

[Client]Game.Msg.MsgClientReqAfkEctypeSpeedUp -> [Client]A.z
{

	[Client]Game.Msg.MsgClientReqAfkEctypeSpeedUp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqAfkEctypeSpeedUp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqAfkEctypeSpeedUp::Type -> A
}

[Client]Game.Msg.MsgServerAckAfkEctypeSpeedUp -> [Client]a.A
{
	[Client]Game.Msg.MsgServerAckAfkEctypeSpeedUp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckAfkEctypeSpeedUp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckAfkEctypeSpeedUp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAfkEctypeSpeedUp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckAfkEctypeSpeedUp::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAfkEctypeSpeedUp::m_ebtDealResult -> a
}

[Client]Game.Msg.MsgClientReqAfkEctypeDirectFinish -> [Client]a.a
{

	[Client]Game.Msg.MsgClientReqAfkEctypeDirectFinish::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqAfkEctypeDirectFinish::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqAfkEctypeDirectFinish::Type -> A
}

[Client]Game.Msg.MsgServerAckAfkEctypeDirectFinish -> [Client]a.B
{
	[Client]Game.Msg.MsgServerAckAfkEctypeDirectFinish::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckAfkEctypeDirectFinish::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckAfkEctypeDirectFinish::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAfkEctypeDirectFinish::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckAfkEctypeDirectFinish::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAfkEctypeDirectFinish::m_ebtDealResult -> a
}

[Client]Game.Msg.MsgClientReqEnterAfkEctype -> [Client]a.b
{
	[Client]Game.Msg.MsgClientReqEnterAfkEctype::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqEnterAfkEctype::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqEnterAfkEctype::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqEnterAfkEctype::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqEnterAfkEctype::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqEnterAfkEctype::m_usMapID -> a
}

[Client]Game.Msg.MsgServerAckEnterAfkEctype -> [Client]a.C
{
	[Client]Game.Msg.MsgServerAckEnterAfkEctype::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckEnterAfkEctype::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckEnterAfkEctype::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckEnterAfkEctype::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckEnterAfkEctype::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckEnterAfkEctype::m_ebtResult -> a
}

[Client]Game.Msg.FamilyMemberData -> [Client]a.c
{
	[Client]Game.Msg.FamilyMemberData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.FamilyMemberData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.FamilyMemberData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyMemberData::m_uiID -> A
	System.String [Client]System.String Game.Msg.FamilyMemberData::m_strName -> A
	System.Byte [Client]System.Byte Game.Msg.FamilyMemberData::m_btProfession -> A
	System.Byte [Client]System.Byte Game.Msg.FamilyMemberData::m_btLevel -> a
	System.Byte [Client]System.Byte Game.Msg.FamilyMemberData::m_btFamilyRank -> B
	System.Byte [Client]System.Byte Game.Msg.FamilyMemberData::m_btLine -> b
	System.Boolean [Client]System.Boolean Game.Msg.FamilyMemberData::m_bOnline -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyMemberData::m_uiEnterTime -> a
	System.Byte [Client]System.Byte Game.Msg.FamilyMemberData::m_btSex -> C
	System.Byte [Client]System.Byte Game.Msg.FamilyMemberData::m_btLastOnlineM -> c
	System.Byte [Client]System.Byte Game.Msg.FamilyMemberData::m_btLastOnlineD -> D
	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyMemberData::m_uiPower -> B
}

[Client]Game.Msg.CSnapShotPlayerAll -> [Client]a.D
{
	[Client]Game.Msg.CSnapShotPlayerAll::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotPlayerAll::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotPlayerAll::.ctor[0]( ) skipped:  special name

	Game.Msg.CSnapShotFighterData [Client]Game.Msg.CSnapShotFighterData Game.Msg.CSnapShotPlayerAll::m_stFighterData -> A
	Game.Msg.CSnapShotEquipData [Client]Game.Msg.CSnapShotEquipData Game.Msg.CSnapShotPlayerAll::m_stEquipData -> A
	Game.Msg.CSnapShotPlayerData [Client]Game.Msg.CSnapShotPlayerData Game.Msg.CSnapShotPlayerAll::m_stPlayerData -> A
}

[Client]Game.Msg.CSnapShotMonsterData -> [Client]a.d
{
	[Client]Game.Msg.CSnapShotMonsterData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotMonsterData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotMonsterData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotMonsterData::m_uiMonsterID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.CSnapShotMonsterData::m_usMonsterType -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotMonsterData::m_uiMasterID -> a
	System.String [Client]System.String Game.Msg.CSnapShotMonsterData::m_strMasterName -> A
}

[Client]Game.Msg.ClientUItemData -> [Client]a.E
{
	[Client]Game.Msg.ClientUItemData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientUItemData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientUItemData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.ClientUItemData::m_ebtDataType -> A
	System.Object [Client]System.Object Game.Msg.ClientUItemData::m_oDynamicObject -> A
}

[Client]Game.Msg.ClientSEquipData -> [Client]a.e
{
	[Client]Game.Msg.ClientSEquipData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientSEquipData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientSEquipData::.ctor[0]( ) skipped:  special name

	System.UInt16[] [Client]System.UInt16[] Game.Msg.ClientSEquipData::m_ausSoulData -> A
}

[Client]Game.Msg.ClientGoldConsignInfo -> [Client]a.F
{
	[Client]Game.Msg.ClientGoldConsignInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientGoldConsignInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientGoldConsignInfo::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ClientGoldConsignInfo::m_uiID -> A
	System.Byte [Client]System.Byte Game.Msg.ClientGoldConsignInfo::m_ebtConType -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientGoldConsignInfo::m_uiLeftTime -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientGoldConsignInfo::m_usHandNum -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientGoldConsignInfo::m_uiPrice -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientGoldConsignInfo::m_uiCharID -> b
}

[Client]Game.Msg.ClientCreateInfo -> [Client]a.f
{
	[Client]Game.Msg.ClientCreateInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientCreateInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientCreateInfo::.ctor[0]( ) skipped:  special name

	System.Byte[] [Client]System.Byte[] Game.Msg.ClientCreateInfo::m_abtRoleName -> A
	System.Byte [Client]System.Byte Game.Msg.ClientCreateInfo::m_btProfession -> A
	System.Byte [Client]System.Byte Game.Msg.ClientCreateInfo::m_btSex -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientCreateInfo::m_uiBirthday -> A
	System.Byte [Client]System.Byte Game.Msg.ClientCreateInfo::m_btLineID -> B
	System.Single [Client]System.Single Game.Msg.ClientCreateInfo::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.ClientCreateInfo::m_fPosY -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientCreateInfo::m_usMapID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientCreateInfo::m_uiHairModelIndex -> a
}

[Client]Game.Msg.Constant -> [Client]a.G
{

	[Client]Game.Msg.Constant::.ctor[0]( ) skipped:  special name
	[Client]Game.Msg.Constant::.cctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.Constant::GAME_VERSION -> A
	System.Int32 [Client]System.Int32 Game.Msg.Constant::NameLength -> A
	System.Int32 [Client]System.Int32 Game.Msg.Constant::PetNameLength -> a
	System.Int32 [Client]System.Int32 Game.Msg.Constant::ACCOUNT_LENGTH -> B
	System.Int32 [Client]System.Int32 Game.Msg.Constant::PLAYER_TOKEN_LENGTH -> b
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MAX_ROLE_NUM -> C
	System.Int32 [Client]System.Int32 Game.Msg.Constant::PART_SOCKET_COUNT -> c
	System.Int32 [Client]System.Int32 Game.Msg.Constant::SOUL_ATTR_COUNT -> D
	System.Int32 [Client]System.Int32 Game.Msg.Constant::BAG_MAX_NUM -> d
	System.Int32 [Client]System.Int32 Game.Msg.Constant::TEAM_MAX_MEMBER_NUM -> E
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MAGIC_MAIN_ITEM_COUNT -> e
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MIN_PVP_LEVEL -> F
	System.Int32 [Client]System.Int32 Game.Msg.Constant::PAY_MAIL_RETURN_TIME -> f
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MAIL_HOLD_TIME -> G
	System.Int32 [Client]System.Int32 Game.Msg.Constant::AUCTION_HOLD_TIME -> g
	System.Int32 [Client]System.Int32 Game.Msg.Constant::AUCTION_SALE_FEE -> H
	System.Int32 [Client]System.Int32 Game.Msg.Constant::GOLD_CONSIGN_FEE -> h
	System.Int32 [Client]System.Int32 Game.Msg.Constant::AUCTION_HANDNUM_COUNT -> I
	System.Int32 [Client]System.Int32 Game.Msg.Constant::AUCTION_SALE_MAX_COUNT -> i
	System.Int32 [Client]System.Int32 Game.Msg.Constant::AUCTION_VIP_SALE_MAX_COUNT -> J
	System.Int32 [Client]System.Int32 Game.Msg.Constant::GOLD_CONSIGN_MAX_COUNT -> j
	System.Int32 [Client]System.Int32 Game.Msg.Constant::GOLD_CONSIGN_VIP_MAX_COUNT -> K
	System.Int32 [Client]System.Int32 Game.Msg.Constant::GOLD_CONSIGN_MAX_SERVER_COUNT -> k
	System.Int32 [Client]System.Int32 Game.Msg.Constant::GOLD_CONSIGN_HOLD_TIME -> L
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MAX_FAMILY_NAME -> l
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MAX_GUILD_NAME -> M
	System.Int32 [Client]System.Int32 Game.Msg.Constant::EXPEDITION_OPEN_LEVEL -> m
	System.Int32 [Client]System.Int32 Game.Msg.Constant::EXPEDITION_COST_MONEY -> N
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MACHINE_DESC -> n
	System.Int32 [Client]System.Int32 Game.Msg.Constant::RANK_LIST_PAGE_ITEM_COUNT -> O
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MAX_HERO_BATTLE_COUNT -> o
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MAX_HERO_BATTLE_BUY_COUNT -> P
	System.Int32 [Client]System.Int32 Game.Msg.Constant::HERO_RANK_MIN_LEVEL -> p
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MAX_INVITED_LEVEL -> Q
	System.Int32 [Client]System.Int32 Game.Msg.Constant::HERO_RANK_COUNT_PER_PAGE -> q
	System.Int32 [Client]System.Int32 Game.Msg.Constant::HERO_RANK_MAX_PAGE -> R
	System.Int32 [Client]System.Int32 Game.Msg.Constant::HERO_RANK_MIN_BATTLE_LEVEL -> r
	System.Int32 [Client]System.Int32 Game.Msg.Constant::MONSTER_ATTACK_MAX_ENTER_TIME -> S
	System.Int32 [Client]System.Int32 Game.Msg.Constant::TELEPHONEFARE_REQUIRE_LEVEL -> s
	System.Int32 [Client]System.Int32 Game.Msg.Constant::PACK_ITEM_MAX_COUNT -> T
	System.Int32 [Client]System.Int32 Game.Msg.Constant::TASK_PACK_ITEM_MAX_COUNT -> t
	System.Int32 [Client]System.Int32 Game.Msg.Constant::STORAGE_MAX_COUNT -> U
	System.Int32 [Client]System.Int32 Game.Msg.Constant::PACK_ITEM_INIT_COUNT -> u
	System.Int32 [Client]System.Int32 Game.Msg.Constant::TASK_PACK_ITEM_INIT_COUNT -> V
	System.Int32 [Client]System.Int32 Game.Msg.Constant::STORAGE_ITEM_INIT_COUNT -> v
	System.Int32 [Client]System.Int32 Game.Msg.Constant::STORAGE_MONEY_MAX_COUNT -> W
	System.String[] [Client]System.String[] Game.Msg.Constant::EquipAttrName -> A
	System.String[] [Client]System.String[] Game.Msg.Constant::EquipTypeName -> a
	System.String[] [Client]System.String[] Game.Msg.Constant::MonsterType -> B
	System.String[] [Client]System.String[] Game.Msg.Constant::ItemTypeName -> b
}

[Client]Game.RoleTask -> [Client]a.g
{
	[Client]Game.RoleTask::get_Instance[0]( ) -> A
	[Client]Game.RoleTask::get_AcceptedTasks[0]( ) -> a
	[Client]Game.RoleTask::get_AcceptableTasks[0]( ) -> B
	[Client]Game.RoleTask::GetTasks[2]( Game.TaskType, Game.RoleTask/TaskAcceptState ) -> A
	[Client]Game.RoleTask::GetAcceptedTask[1]( System.UInt32 ) -> A
	[Client]Game.RoleTask::CanTaskAcceptable[1]( System.UInt32 ) -> a
	[Client]Game.RoleTask::RemoveAcceptedTask[1]( System.UInt32 ) -> B
	[Client]Game.RoleTask::Reset[0]( ) -> b
	[Client]Game.RoleTask::AutoTraceTask[1]( System.UInt32 ) -> b
	[Client]Game.RoleTask::OnTaskUpdateTask[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.RoleTask::ReqAcceptableTaskList[0]( ) -> C
	[Client]Game.RoleTask::OnTaskAckTaskList[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.RoleTask::ReqNpc[1]( System.UInt32 ) -> C
	[Client]Game.RoleTask::ReqNpc[2]( System.UInt32, System.Boolean ) -> A
	[Client]Game.RoleTask::OnTaskAckNpc[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.RoleTask::TaskCompare[2]( Game.Msg.MsgTaskAckNpc_Task, Game.Msg.MsgTaskAckNpc_Task ) -> A
	[Client]Game.RoleTask::TaskReqAccept[1]( System.UInt32 ) -> c
	[Client]Game.RoleTask::OnTaskAckAccept[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.RoleTask::CommentHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.RoleTask::TaskReqCancel[1]( System.UInt32 ) -> D
	[Client]Game.RoleTask::OnTaskAckCancel[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.RoleTask::TaskReqDone[1]( System.UInt32 ) -> d
	[Client]Game.RoleTask::OnTaskAckDone[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.RoleTask::ReqNpcScript[2]( System.UInt32, System.Byte ) -> A
	[Client]Game.RoleTask::AnswerQuestion[3]( System.Byte, System.Byte, System.UInt16 ) -> A
	[Client]Game.RoleTask::OnMsgServerTaskDialogQuestion[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.RoleTask::EndDialog[1]( System.UInt32 ) -> E
	[Client]Game.RoleTask::EndDialog[2]( System.UInt32, System.Int32 ) -> A
	[Client]Game.RoleTask::OnMsgServerOpenDialog[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.RoleTask::OnMsgServerTaskNpcState[1]( Game.Msg.RecvMsgPacket ) -> E

	[Client]Game.RoleTask::.ctor[0]( ) skipped:  special name
	[Client]Game.RoleTask::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.RoleTask::WorldMapNpcId -> A
	System.Int32 [Client]System.Int32 Game.RoleTask::EctypeDFNpcId -> a
	Game.RoleTask [Client]Game.RoleTask Game.RoleTask::m_Instance -> A
	System.Collections.Generic.List`1<Game.Msg.MsgTaskUpdateTask_Task> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskUpdateTask_Task> Game.RoleTask::m_AcceptedTasks -> A
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.RoleTask::m_AcceptableTaskIds -> A

	Game.RoleTask [Client]Game.RoleTask Game.RoleTask::Instance -> dropped
	System.Collections.Generic.List`1<Game.Msg.MsgTaskUpdateTask_Task> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskUpdateTask_Task> Game.RoleTask::AcceptedTasks -> dropped
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.RoleTask::AcceptableTasks -> dropped
}

[Client]Game.RoleTask/TaskAcceptState -> [Client]a.g/H
{
	Game.RoleTask/TaskAcceptState [Client]Game.RoleTask/TaskAcceptState Game.RoleTask/TaskAcceptState::Accepted -> A
	Game.RoleTask/TaskAcceptState [Client]Game.RoleTask/TaskAcceptState Game.RoleTask/TaskAcceptState::Acceptable -> a

	System.Int32 [Client]System.Int32 Game.RoleTask/TaskAcceptState::value__ skipped:  filtered
}

[Client]Game.Logic.RoleEquip -> [Client]a.h
{
	[Client]Game.Logic.RoleEquip::get_Parts[0]( ) -> A
	[Client]Game.Logic.RoleEquip::get_Items[0]( ) -> a
	[Client]Game.Logic.RoleEquip::get_Instance[0]( ) -> B
	[Client]Game.Logic.RoleEquip::Init[0]( ) -> b
	[Client]Game.Logic.RoleEquip::Release[0]( ) -> C
	[Client]Game.Logic.RoleEquip::Reset[0]( ) -> c
	[Client]Game.Logic.RoleEquip::Update[0]( ) -> D
	[Client]Game.Logic.RoleEquip::GetPart[1]( System.Byte ) -> A
	[Client]Game.Logic.RoleEquip::GetSocket[2]( System.Byte, System.Byte ) -> A
	[Client]Game.Logic.RoleEquip::CanInsertGem[3]( System.Byte, System.Byte, Game.GemItem ) -> A
	[Client]Game.Logic.RoleEquip::CanInsertGem[2]( System.Byte, System.Byte ) -> a
	[Client]Game.Logic.RoleEquip::HasInsertGem[2]( System.Byte, System.Byte ) -> B
	[Client]Game.Logic.RoleEquip::GetEquip[1]( System.Byte ) -> a
	[Client]Game.Logic.RoleEquip::GetEquipSetNum[1]( System.Int32 ) -> A
	[Client]Game.Logic.RoleEquip::GetPartGrade[0]( ) -> d
	[Client]Game.Logic.RoleEquip::GetPartGrade[1]( Game.Msg.SCharEquipPart[] ) -> A
	[Client]Game.Logic.RoleEquip::GetCurrentGradeData[1]( System.Int32 ) -> a
	[Client]Game.Logic.RoleEquip::GetNextGradeData[1]( System.Int32 ) -> B
	[Client]Game.Logic.RoleEquip::GetNextGradeValue[1]( System.Int32 ) -> b
	[Client]Game.Logic.RoleEquip::SengMsgUnEquip[1]( System.Byte ) -> B
	[Client]Game.Logic.RoleEquip::SengMsgRequestBoostPart[2]( System.Byte, System.Boolean ) -> A
	[Client]Game.Logic.RoleEquip::SengMsgShowDress[1]( System.Boolean ) -> A
	[Client]Game.Logic.RoleEquip::OnMsgServerAllPartData[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.RoleEquip::OnMsgServerAllEquipData[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.RoleEquip::OnMsgServerEquipAck[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.RoleEquip::OnMsgServerUnEquipAck[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.RoleEquip::OnMsgServerEquipChange[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Logic.RoleEquip::OnMsgServerSetDressShow[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.Logic.RoleEquip::OnMsgServerPartChange[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.Logic.RoleEquip::OnMsgServerBoostPartResult[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.Logic.RoleEquip::OnMsgServerGemPartResult[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.Logic.RoleEquip::OnMsgServerSoulChangeResult[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.Logic.RoleEquip::OnMsgServerTransferRandSoul[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.Logic.RoleEquip::SetEquipItem[2]( System.Byte, Game.Msg.ClientSItemData ) -> A

	[Client]Game.Logic.RoleEquip::.cctor[0]( ) skipped:  special name
	[Client]Game.Logic.RoleEquip::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Logic.RoleEquip::MinBoostLevel -> A
	System.Int32 [Client]System.Int32 Game.Logic.RoleEquip::MaxBoostLevel -> a
	System.Single [Client]System.Single Game.Logic.RoleEquip::m_BoostIntervalTime -> A
	Game.Msg.SCharEquipPart[] [Client]Game.Msg.SCharEquipPart[] Game.Logic.RoleEquip::m_Parts -> A
	Game.Msg.SCharEquipItem[] [Client]Game.Msg.SCharEquipItem[] Game.Logic.RoleEquip::m_Items -> A
	System.Single [Client]System.Single Game.Logic.RoleEquip::m_LastBoostTime -> a
	Game.Logic.RoleEquip [Client]Game.Logic.RoleEquip Game.Logic.RoleEquip::m_Instance -> A

	Game.Msg.SCharEquipPart[] [Client]Game.Msg.SCharEquipPart[] Game.Logic.RoleEquip::Parts -> dropped
	Game.Msg.SCharEquipItem[] [Client]Game.Msg.SCharEquipItem[] Game.Logic.RoleEquip::Items -> dropped
	Game.Logic.RoleEquip [Client]Game.Logic.RoleEquip Game.Logic.RoleEquip::Instance -> dropped
}

[Client]Game.InputManager -> [Client]a.I
{
	[Client]Game.InputManager::get_Instance[0]( ) -> A
	[Client]Game.InputManager::OnDirectionStart[1]( Game.DirectionControlGestureRecognizer ) -> A
	[Client]Game.InputManager::OnDirectionControling[1]( Game.DirectionControlGestureRecognizer ) -> a
	[Client]Game.InputManager::OnDirectionEnd[1]( Game.DirectionControlGestureRecognizer ) -> B
	[Client]Game.InputManager::OnTap[1]( Game.TapGestureRecognizer ) -> A
	[Client]Game.InputManager::OnDoubleTap[1]( Game.DoubleTapGestureRecognizer ) -> A
	[Client]Game.InputManager::OnLongPress[1]( Game.LongPressGestureRecognizer ) -> A
	[Client]Game.InputManager::OnLongPressing[1]( Game.LongPressGestureRecognizer ) -> a
	[Client]Game.InputManager::OnSwipe[1]( Game.SwipeGestureRecognizer ) -> A
	[Client]Game.InputManager::OnPinch[1]( Game.PinchGestureRecognizer ) -> A
	[Client]Game.InputManager::Init[0]( ) -> a
	[Client]Game.InputManager::Update[0]( ) -> B
	[Client]Game.InputManager::UpdateTouchs[0]( ) -> b
	[Client]Game.InputManager::ProcessSrceenClick[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.InputManager::UpdateMouse[0]( ) -> C
	[Client]Game.InputManager::UpdateKey[0]( ) -> c
	[Client]Game.InputManager::UpdateJoyStick[0]( ) -> D
	[Client]Game.InputManager::ProcessJoyStickMsg[1]( System.String ) -> A
	[Client]Game.InputManager::GetPoint[1]( System.String ) -> a
	[Client]Game.InputManager::MoveByJoyStick[1]( UnityEngine.Vector2 ) -> a

	[Client]Game.InputManager::.cctor[0]( ) skipped:  special name
	[Client]Game.InputManager::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.InputManager::MinPinchDistance -> A
	System.Single [Client]System.Single Game.InputManager::PinchParam -> A
	System.Single [Client]System.Single Game.InputManager::MaxTabFindRange -> a
	log4net.ILog [Client]log4net.ILog Game.InputManager::m_Log -> A
	Game.TouchList [Client]Game.TouchList Game.InputManager::m_TouchList -> A
	System.Collections.Generic.List`1<Game.GestureRecognizer> [Client]System.Collections.Generic.List`1<Game.GestureRecognizer> Game.InputManager::m_GestureRecognizers -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.InputManager::m_JoyKeyDir -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.InputManager::m_JoyLStickDir -> a
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.InputManager::m_JoyRStickDir -> B
	Game.InputManager [Client]Game.InputManager Game.InputManager::m_Instance -> A

	Game.InputManager [Client]Game.InputManager Game.InputManager::Instance -> dropped
}

[Client]Game.DataPetstrengthen -> [Client]a.i
{
	[Client]Game.DataPetstrengthen::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetstrengthen::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetstrengthen::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetstrengthen::get_Level[0]( ) -> A
	[Client]Game.DataPetstrengthen::set_Level[1]( System.Int32 ) -> A
	[Client]Game.DataPetstrengthen::get_Param[0]( ) -> a
	[Client]Game.DataPetstrengthen::set_Param[1]( System.Single ) -> A
	[Client]Game.DataPetstrengthen::get_Rate[0]( ) -> B
	[Client]Game.DataPetstrengthen::set_Rate[1]( System.Single ) -> a
	[Client]Game.DataPetstrengthen::get_Money[0]( ) -> b
	[Client]Game.DataPetstrengthen::set_Money[1]( System.Int32 ) -> a
	[Client]Game.DataPetstrengthen::get_AddLevel[0]( ) -> C
	[Client]Game.DataPetstrengthen::set_AddLevel[1]( System.Int32 ) -> B
	[Client]Game.DataPetstrengthen::get_ReduceLevel[0]( ) -> c
	[Client]Game.DataPetstrengthen::set_ReduceLevel[1]( System.Int32 ) -> b
	[Client]Game.DataPetstrengthen::get_Itemid[0]( ) -> D
	[Client]Game.DataPetstrengthen::set_Itemid[1]( System.Int32 ) -> C
	[Client]Game.DataPetstrengthen::get_CommonItemID[0]( ) -> d
	[Client]Game.DataPetstrengthen::set_CommonItemID[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataPetstrengthen::get_CommonNum[0]( ) -> E
	[Client]Game.DataPetstrengthen::set_CommonNum[1]( System.Int32 ) -> c
	[Client]Game.DataPetstrengthen::get_EnsureItemID[0]( ) -> e
	[Client]Game.DataPetstrengthen::set_EnsureItemID[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataPetstrengthen::get_EnsureNum[0]( ) -> F
	[Client]Game.DataPetstrengthen::set_EnsureNum[1]( System.Int32 ) -> D

	[Client]Game.DataPetstrengthen::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::<Level>k__BackingField -> A
	System.Single [Client]System.Single Game.DataPetstrengthen::<Param>k__BackingField -> A
	System.Single [Client]System.Single Game.DataPetstrengthen::<Rate>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::<Money>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::<AddLevel>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::<ReduceLevel>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::<Itemid>k__BackingField -> C
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataPetstrengthen::<CommonItemID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::<CommonNum>k__BackingField -> c
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataPetstrengthen::<EnsureItemID>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::<EnsureNum>k__BackingField -> D

	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::Level -> dropped
	System.Single [Client]System.Single Game.DataPetstrengthen::Param -> dropped
	System.Single [Client]System.Single Game.DataPetstrengthen::Rate -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::Money -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::AddLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::ReduceLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::Itemid -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataPetstrengthen::CommonItemID -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::CommonNum -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataPetstrengthen::EnsureItemID -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstrengthen::EnsureNum -> dropped
}

[Client]Game.DataPetstrengthenManager -> [Client]a.J
{
	[Client]Game.DataPetstrengthenManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetstrengthenManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetstrengthenManager::Clear[0]( ) -> A
	[Client]Game.DataPetstrengthenManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetstrengthenManager::GetDataByLevel[1]( System.Int32 ) -> A
	[Client]Game.DataPetstrengthenManager::GetDataListByLevel[1]( System.Int32 ) -> a
	[Client]Game.DataPetstrengthenManager::GetDataByParam[1]( System.Single ) -> A
	[Client]Game.DataPetstrengthenManager::GetDataListByParam[1]( System.Single ) -> a
	[Client]Game.DataPetstrengthenManager::GetDataByRate[1]( System.Single ) -> B
	[Client]Game.DataPetstrengthenManager::GetDataListByRate[1]( System.Single ) -> b
	[Client]Game.DataPetstrengthenManager::GetDataByMoney[1]( System.Int32 ) -> B
	[Client]Game.DataPetstrengthenManager::GetDataListByMoney[1]( System.Int32 ) -> b
	[Client]Game.DataPetstrengthenManager::GetDataByAddLevel[1]( System.Int32 ) -> C
	[Client]Game.DataPetstrengthenManager::GetDataListByAddLevel[1]( System.Int32 ) -> c
	[Client]Game.DataPetstrengthenManager::GetDataByReduceLevel[1]( System.Int32 ) -> D
	[Client]Game.DataPetstrengthenManager::GetDataListByReduceLevel[1]( System.Int32 ) -> d
	[Client]Game.DataPetstrengthenManager::GetDataByItemid[1]( System.Int32 ) -> E
	[Client]Game.DataPetstrengthenManager::GetDataListByItemid[1]( System.Int32 ) -> e
	[Client]Game.DataPetstrengthenManager::GetDataByCommonItemID[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataPetstrengthenManager::GetDataListByCommonItemID[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataPetstrengthenManager::GetDataByCommonNum[1]( System.Int32 ) -> F
	[Client]Game.DataPetstrengthenManager::GetDataListByCommonNum[1]( System.Int32 ) -> f
	[Client]Game.DataPetstrengthenManager::GetDataByEnsureItemID[1]( System.Collections.Generic.List`1<System.Int32> ) -> B
	[Client]Game.DataPetstrengthenManager::GetDataListByEnsureItemID[1]( System.Collections.Generic.List`1<System.Int32> ) -> b
	[Client]Game.DataPetstrengthenManager::GetDataByEnsureNum[1]( System.Int32 ) -> G
	[Client]Game.DataPetstrengthenManager::GetDataListByEnsureNum[1]( System.Int32 ) -> g
	[Client]Game.DataPetstrengthenManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetstrengthenManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetstrengthenManager::get_Count[0]( ) -> b

	[Client]Game.DataPetstrengthenManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetstrengthenManager::.ctor[0]( ) skipped:  special name

	Game.DataPetstrengthenManager [Client]Game.DataPetstrengthenManager Game.DataPetstrengthenManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPetstrengthen> [Client]System.Collections.Generic.List`1<Game.DataPetstrengthen> Game.DataPetstrengthenManager::dataList -> A

	Game.DataPetstrengthenManager [Client]Game.DataPetstrengthenManager Game.DataPetstrengthenManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPetstrengthen> [Client]System.Collections.Generic.List`1<Game.DataPetstrengthen> Game.DataPetstrengthenManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstrengthenManager::Count -> dropped
}

[Client]Game.DataPetskill -> [Client]a.j
{
	[Client]Game.DataPetskill::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetskill::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetskill::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetskill::get_ID[0]( ) -> A
	[Client]Game.DataPetskill::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataPetskill::get_SkillType[0]( ) -> a
	[Client]Game.DataPetskill::set_SkillType[1]( System.Int32 ) -> a
	[Client]Game.DataPetskill::get_Quality[0]( ) -> B
	[Client]Game.DataPetskill::set_Quality[1]( System.Int32 ) -> B
	[Client]Game.DataPetskill::get_IconFile[0]( ) -> b
	[Client]Game.DataPetskill::set_IconFile[1]( System.String ) -> A
	[Client]Game.DataPetskill::get_SkillName[0]( ) -> C
	[Client]Game.DataPetskill::set_SkillName[1]( System.String ) -> a
	[Client]Game.DataPetskill::get_SkillDescription[0]( ) -> c
	[Client]Game.DataPetskill::set_SkillDescription[1]( System.String ) -> B

	[Client]Game.DataPetskill::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPetskill::<ID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPetskill::<SkillType>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPetskill::<Quality>k__BackingField -> B
	System.String [Client]System.String Game.DataPetskill::<IconFile>k__BackingField -> A
	System.String [Client]System.String Game.DataPetskill::<SkillName>k__BackingField -> a
	System.String [Client]System.String Game.DataPetskill::<SkillDescription>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataPetskill::ID -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetskill::SkillType -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetskill::Quality -> dropped
	System.String [Client]System.String Game.DataPetskill::IconFile -> dropped
	System.String [Client]System.String Game.DataPetskill::SkillName -> dropped
	System.String [Client]System.String Game.DataPetskill::SkillDescription -> dropped
}

[Client]Game.DataPetskillManager -> [Client]a.K
{
	[Client]Game.DataPetskillManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetskillManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetskillManager::Clear[0]( ) -> A
	[Client]Game.DataPetskillManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetskillManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataPetskillManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataPetskillManager::GetDataBySkillType[1]( System.Int32 ) -> B
	[Client]Game.DataPetskillManager::GetDataListBySkillType[1]( System.Int32 ) -> b
	[Client]Game.DataPetskillManager::GetDataByQuality[1]( System.Int32 ) -> C
	[Client]Game.DataPetskillManager::GetDataListByQuality[1]( System.Int32 ) -> c
	[Client]Game.DataPetskillManager::GetDataByIconFile[1]( System.String ) -> A
	[Client]Game.DataPetskillManager::GetDataListByIconFile[1]( System.String ) -> a
	[Client]Game.DataPetskillManager::GetDataBySkillName[1]( System.String ) -> B
	[Client]Game.DataPetskillManager::GetDataListBySkillName[1]( System.String ) -> b
	[Client]Game.DataPetskillManager::GetDataBySkillDescription[1]( System.String ) -> C
	[Client]Game.DataPetskillManager::GetDataListBySkillDescription[1]( System.String ) -> c
	[Client]Game.DataPetskillManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetskillManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetskillManager::get_Count[0]( ) -> b

	[Client]Game.DataPetskillManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetskillManager::.ctor[0]( ) skipped:  special name

	Game.DataPetskillManager [Client]Game.DataPetskillManager Game.DataPetskillManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPetskill> [Client]System.Collections.Generic.List`1<Game.DataPetskill> Game.DataPetskillManager::dataList -> A

	Game.DataPetskillManager [Client]Game.DataPetskillManager Game.DataPetskillManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPetskill> [Client]System.Collections.Generic.List`1<Game.DataPetskill> Game.DataPetskillManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetskillManager::Count -> dropped
}

[Client]Game.DataNpc -> [Client]a.k
{
	[Client]Game.DataNpc::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataNpc::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataNpc::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataNpc::get_NpcID[0]( ) -> A
	[Client]Game.DataNpc::set_NpcID[1]( System.Int32 ) -> A
	[Client]Game.DataNpc::get_NpcName[0]( ) -> a
	[Client]Game.DataNpc::set_NpcName[1]( System.String ) -> A
	[Client]Game.DataNpc::get_NpcTitle[0]( ) -> B
	[Client]Game.DataNpc::set_NpcTitle[1]( System.String ) -> a
	[Client]Game.DataNpc::get_ModelPath[0]( ) -> b
	[Client]Game.DataNpc::set_ModelPath[1]( System.String ) -> B
	[Client]Game.DataNpc::get_IsHumanoid[0]( ) -> C
	[Client]Game.DataNpc::set_IsHumanoid[1]( System.Boolean ) -> A
	[Client]Game.DataNpc::get_HumanoidId[0]( ) -> c
	[Client]Game.DataNpc::set_HumanoidId[1]( System.Int32 ) -> a
	[Client]Game.DataNpc::get_NpcTalk[0]( ) -> D
	[Client]Game.DataNpc::set_NpcTalk[1]( System.String ) -> b
	[Client]Game.DataNpc::get_NpcHead[0]( ) -> d
	[Client]Game.DataNpc::set_NpcHead[1]( System.String ) -> C
	[Client]Game.DataNpc::get_TargetHead[0]( ) -> E
	[Client]Game.DataNpc::set_TargetHead[1]( System.String ) -> c
	[Client]Game.DataNpc::get_MapId[0]( ) -> e
	[Client]Game.DataNpc::set_MapId[1]( System.Int32 ) -> B
	[Client]Game.DataNpc::get_MapX[0]( ) -> F
	[Client]Game.DataNpc::set_MapX[1]( System.Single ) -> A
	[Client]Game.DataNpc::get_MapY[0]( ) -> f
	[Client]Game.DataNpc::set_MapY[1]( System.Single ) -> a
	[Client]Game.DataNpc::get_Scale[0]( ) -> G
	[Client]Game.DataNpc::set_Scale[1]( System.Single ) -> B
	[Client]Game.DataNpc::get_HeadEffect[0]( ) -> g
	[Client]Game.DataNpc::set_HeadEffect[1]( System.Int32 ) -> b
	[Client]Game.DataNpc::get_Dir[0]( ) -> H
	[Client]Game.DataNpc::set_Dir[1]( System.Int32 ) -> C

	[Client]Game.DataNpc::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataNpc::<NpcID>k__BackingField -> A
	System.String [Client]System.String Game.DataNpc::<NpcName>k__BackingField -> A
	System.String [Client]System.String Game.DataNpc::<NpcTitle>k__BackingField -> a
	System.String [Client]System.String Game.DataNpc::<ModelPath>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.DataNpc::<IsHumanoid>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataNpc::<HumanoidId>k__BackingField -> a
	System.String [Client]System.String Game.DataNpc::<NpcTalk>k__BackingField -> b
	System.String [Client]System.String Game.DataNpc::<NpcHead>k__BackingField -> C
	System.String [Client]System.String Game.DataNpc::<TargetHead>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataNpc::<MapId>k__BackingField -> B
	System.Single [Client]System.Single Game.DataNpc::<MapX>k__BackingField -> A
	System.Single [Client]System.Single Game.DataNpc::<MapY>k__BackingField -> a
	System.Single [Client]System.Single Game.DataNpc::<Scale>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataNpc::<HeadEffect>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataNpc::<Dir>k__BackingField -> C

	System.Int32 [Client]System.Int32 Game.DataNpc::NpcID -> dropped
	System.String [Client]System.String Game.DataNpc::NpcName -> dropped
	System.String [Client]System.String Game.DataNpc::NpcTitle -> dropped
	System.String [Client]System.String Game.DataNpc::ModelPath -> dropped
	System.Boolean [Client]System.Boolean Game.DataNpc::IsHumanoid -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpc::HumanoidId -> dropped
	System.String [Client]System.String Game.DataNpc::NpcTalk -> dropped
	System.String [Client]System.String Game.DataNpc::NpcHead -> dropped
	System.String [Client]System.String Game.DataNpc::TargetHead -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpc::MapId -> dropped
	System.Single [Client]System.Single Game.DataNpc::MapX -> dropped
	System.Single [Client]System.Single Game.DataNpc::MapY -> dropped
	System.Single [Client]System.Single Game.DataNpc::Scale -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpc::HeadEffect -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpc::Dir -> dropped
}

[Client]Game.DataNpcManager -> [Client]a.L
{
	[Client]Game.DataNpcManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataNpcManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataNpcManager::Clear[0]( ) -> A
	[Client]Game.DataNpcManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataNpcManager::GetDataByNpcID[1]( System.Int32 ) -> A
	[Client]Game.DataNpcManager::GetDataListByNpcID[1]( System.Int32 ) -> a
	[Client]Game.DataNpcManager::GetDataByNpcName[1]( System.String ) -> A
	[Client]Game.DataNpcManager::GetDataListByNpcName[1]( System.String ) -> a
	[Client]Game.DataNpcManager::GetDataByNpcTitle[1]( System.String ) -> B
	[Client]Game.DataNpcManager::GetDataListByNpcTitle[1]( System.String ) -> b
	[Client]Game.DataNpcManager::GetDataByModelPath[1]( System.String ) -> C
	[Client]Game.DataNpcManager::GetDataListByModelPath[1]( System.String ) -> c
	[Client]Game.DataNpcManager::GetDataByIsHumanoid[1]( System.Boolean ) -> A
	[Client]Game.DataNpcManager::GetDataListByIsHumanoid[1]( System.Boolean ) -> a
	[Client]Game.DataNpcManager::GetDataByHumanoidId[1]( System.Int32 ) -> B
	[Client]Game.DataNpcManager::GetDataListByHumanoidId[1]( System.Int32 ) -> b
	[Client]Game.DataNpcManager::GetDataByNpcTalk[1]( System.String ) -> D
	[Client]Game.DataNpcManager::GetDataListByNpcTalk[1]( System.String ) -> d
	[Client]Game.DataNpcManager::GetDataByNpcHead[1]( System.String ) -> E
	[Client]Game.DataNpcManager::GetDataListByNpcHead[1]( System.String ) -> e
	[Client]Game.DataNpcManager::GetDataByTargetHead[1]( System.String ) -> F
	[Client]Game.DataNpcManager::GetDataListByTargetHead[1]( System.String ) -> f
	[Client]Game.DataNpcManager::GetDataByMapId[1]( System.Int32 ) -> C
	[Client]Game.DataNpcManager::GetDataListByMapId[1]( System.Int32 ) -> c
	[Client]Game.DataNpcManager::GetDataByMapX[1]( System.Single ) -> A
	[Client]Game.DataNpcManager::GetDataListByMapX[1]( System.Single ) -> a
	[Client]Game.DataNpcManager::GetDataByMapY[1]( System.Single ) -> B
	[Client]Game.DataNpcManager::GetDataListByMapY[1]( System.Single ) -> b
	[Client]Game.DataNpcManager::GetDataByScale[1]( System.Single ) -> C
	[Client]Game.DataNpcManager::GetDataListByScale[1]( System.Single ) -> c
	[Client]Game.DataNpcManager::GetDataByHeadEffect[1]( System.Int32 ) -> D
	[Client]Game.DataNpcManager::GetDataListByHeadEffect[1]( System.Int32 ) -> d
	[Client]Game.DataNpcManager::GetDataByDir[1]( System.Int32 ) -> E
	[Client]Game.DataNpcManager::GetDataListByDir[1]( System.Int32 ) -> e
	[Client]Game.DataNpcManager::get_Instance[0]( ) -> a
	[Client]Game.DataNpcManager::get_DataList[0]( ) -> B
	[Client]Game.DataNpcManager::get_Count[0]( ) -> b

	[Client]Game.DataNpcManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataNpcManager::.ctor[0]( ) skipped:  special name

	Game.DataNpcManager [Client]Game.DataNpcManager Game.DataNpcManager::instance -> A
	System.Collections.Generic.List`1<Game.DataNpc> [Client]System.Collections.Generic.List`1<Game.DataNpc> Game.DataNpcManager::dataList -> A

	Game.DataNpcManager [Client]Game.DataNpcManager Game.DataNpcManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataNpc> [Client]System.Collections.Generic.List`1<Game.DataNpc> Game.DataNpcManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpcManager::Count -> dropped
}

[Client]Game.Common.Singleton`1 -> [Client]a.l`1
{
	[Client]Game.Common.Singleton`1::get_singleton[0]( ) -> A

	[Client]Game.Common.Singleton`1::.ctor[0]( ) skipped:  special name
	[Client]Game.Common.Singleton`1::.cctor[0]( ) skipped:  special name

	T [Client]T Game.Common.Singleton`1::s_instance -> A
	System.Object [Client]System.Object Game.Common.Singleton`1::s_objLock -> A

	A [Client]A Game.Common.Singleton`1::singleton -> dropped
}

[Client]Game.Msg.SHeroBattleRecord -> [Client]a.M
{
	[Client]Game.Msg.SHeroBattleRecord::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SHeroBattleRecord::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SHeroBattleRecord::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.SHeroBattleRecord::m_uiFighterID -> A
	System.String [Client]System.String Game.Msg.SHeroBattleRecord::m_strCharName -> A
	System.Boolean [Client]System.Boolean Game.Msg.SHeroBattleRecord::m_bAttack -> A
	System.Byte [Client]System.Byte Game.Msg.SHeroBattleRecord::m_ebtRet -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.SHeroBattleRecord::m_usRank -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.SHeroBattleRecord::m_uiTime -> a
	System.Boolean [Client]System.Boolean Game.Msg.SHeroBattleRecord::m_bSuccess -> a
}

[Client]Game.enumNoviceHelpStatus -> [Client]a.m
{
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_Undefined -> A
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_JoyStickToMove -> a
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_TouchToMove -> B
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_SelectMonster -> b
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_AttackMonster -> C
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_Task -> c
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_FirstSkill -> D
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_AddHp -> d
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_Activity -> E
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_PK -> e
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_AutoAttack -> F
	Game.enumNoviceHelpStatus [Client]Game.enumNoviceHelpStatus Game.enumNoviceHelpStatus::eNoviceHelpStatus_Max -> f

	System.Int32 [Client]System.Int32 Game.enumNoviceHelpStatus::value__ skipped:  filtered
}

[Client]Game.NoviceHelpManager -> [Client]a.N
{
	[Client]Game.NoviceHelpManager::ShowHelp[1]( System.Int32 ) -> A
	[Client]Game.NoviceHelpManager::FindHelpTarget[2]( System.Int32, Game.UI.UICommon.IXUIObject& ) -> A
	[Client]Game.NoviceHelpManager::CloseHelp[0]( ) -> A
	[Client]Game.NoviceHelpManager::CloseHelp[1]( System.Boolean ) -> A
	[Client]Game.NoviceHelpManager::OnNpcClick[1]( System.UInt32 ) -> A
	[Client]Game.NoviceHelpManager::OnObjectClick[1]( System.String ) -> A
	[Client]Game.NoviceHelpManager::OnDlgShow[1]( Game.UI.UICommon.IXUIDlg ) -> A
	[Client]Game.NoviceHelpManager::OnDlgClose[1]( Game.UI.UICommon.IXUIDlg ) -> a
	[Client]Game.NoviceHelpManager::OnUIObjectShow[1]( Game.UI.UICommon.IXUIObject ) -> A
	[Client]Game.NoviceHelpManager::OnUIObjectClose[1]( Game.UI.UICommon.IXUIObject ) -> a
	[Client]Game.NoviceHelpManager::Update[0]( ) -> a
	[Client]Game.NoviceHelpManager::UpdateUIStatus[1]( System.Int32 ) -> a

	[Client]Game.NoviceHelpManager::.ctor[0]( ) skipped:  special name
	[Client]Game.NoviceHelpManager::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.NoviceHelpManager::m_nHelpID -> A
	System.Int32 [Client]System.Int32 Game.NoviceHelpManager::m_EffectId -> a
	Game.UI.UICommon.IXUIDlg [Client]Game.UI.UICommon.IXUIDlg Game.NoviceHelpManager::m_iXUIDlg -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.NoviceHelpManager::m_targetPos -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.NoviceHelpManager::m_targetPosOld -> a
	Game.DataNoviceHelp [Client]Game.DataNoviceHelp Game.NoviceHelpManager::m_dataNoviceHelp -> A
	System.Boolean [Client]System.Boolean Game.NoviceHelpManager::m_bFound -> A
	log4net.ILog [Client]log4net.ILog Game.NoviceHelpManager::m_Log -> A
	System.Boolean [Client]System.Boolean Game.NoviceHelpManager::m_bNeedShowEffect -> a
	System.Int32 [Client]System.Int32 Game.NoviceHelpManager::m_nEffectId -> B
}

[Client]Game.NoviceHelpManager/NoviceHelpType -> [Client]a.N/n
{
	Game.NoviceHelpManager/NoviceHelpType [Client]Game.NoviceHelpManager/NoviceHelpType Game.NoviceHelpManager/NoviceHelpType::Texture -> A
	Game.NoviceHelpManager/NoviceHelpType [Client]Game.NoviceHelpManager/NoviceHelpType Game.NoviceHelpManager/NoviceHelpType::UIControl -> a
	Game.NoviceHelpManager/NoviceHelpType [Client]Game.NoviceHelpManager/NoviceHelpType Game.NoviceHelpManager/NoviceHelpType::NPC -> B
	Game.NoviceHelpManager/NoviceHelpType [Client]Game.NoviceHelpManager/NoviceHelpType Game.NoviceHelpManager/NoviceHelpType::Des -> b
	Game.NoviceHelpManager/NoviceHelpType [Client]Game.NoviceHelpManager/NoviceHelpType Game.NoviceHelpManager/NoviceHelpType::NewerDes -> C

	System.Int32 [Client]System.Int32 Game.NoviceHelpManager/NoviceHelpType::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform -> [Client]a.o
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::TransformFile[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::TransformDirectory[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::get_TrimPrefix[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::set_TrimPrefix[1]( System.String ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::MakeValidName[2]( System.String, System.Char ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::IsValidName[2]( System.String, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::IsValidName[1]( System.String ) -> b

	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipNameTransform::.cctor[0]( ) skipped:  special name

	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipNameTransform::trimPrefix_ -> A
	System.Char[] [Client]System.Char[] ICSharpCode.SharpZipLib.Zip.ZipNameTransform::InvalidEntryChars -> A
	System.Char[] [Client]System.Char[] ICSharpCode.SharpZipLib.Zip.ZipNameTransform::InvalidEntryCharsRelaxed -> a

	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipNameTransform::TrimPrefix -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs -> [Client]a.P
{
	[Client]ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs::get_FileName[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs::get_Key[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs::set_Key[1]( System.Byte[] ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs::.ctor[2]( System.String, System.Byte[] ) skipped:  special name

	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs::fileName -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs::key -> A

	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs::FileName -> dropped
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs::Key -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.TestStrategy -> [Client]a.p
{
	ICSharpCode.SharpZipLib.Zip.TestStrategy [Client]ICSharpCode.SharpZipLib.Zip.TestStrategy ICSharpCode.SharpZipLib.Zip.TestStrategy::FindFirstError -> A
	ICSharpCode.SharpZipLib.Zip.TestStrategy [Client]ICSharpCode.SharpZipLib.Zip.TestStrategy ICSharpCode.SharpZipLib.Zip.TestStrategy::FindAllErrors -> a

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.TestStrategy::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.TestOperation -> [Client]a.Q
{
	ICSharpCode.SharpZipLib.Zip.TestOperation [Client]ICSharpCode.SharpZipLib.Zip.TestOperation ICSharpCode.SharpZipLib.Zip.TestOperation::Initialising -> A
	ICSharpCode.SharpZipLib.Zip.TestOperation [Client]ICSharpCode.SharpZipLib.Zip.TestOperation ICSharpCode.SharpZipLib.Zip.TestOperation::EntryHeader -> a
	ICSharpCode.SharpZipLib.Zip.TestOperation [Client]ICSharpCode.SharpZipLib.Zip.TestOperation ICSharpCode.SharpZipLib.Zip.TestOperation::EntryData -> B
	ICSharpCode.SharpZipLib.Zip.TestOperation [Client]ICSharpCode.SharpZipLib.Zip.TestOperation ICSharpCode.SharpZipLib.Zip.TestOperation::EntryComplete -> b
	ICSharpCode.SharpZipLib.Zip.TestOperation [Client]ICSharpCode.SharpZipLib.Zip.TestOperation ICSharpCode.SharpZipLib.Zip.TestOperation::MiscellaneousTests -> C
	ICSharpCode.SharpZipLib.Zip.TestOperation [Client]ICSharpCode.SharpZipLib.Zip.TestOperation ICSharpCode.SharpZipLib.Zip.TestOperation::Complete -> c

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.TestOperation::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.TestStatus -> [Client]a.q
{
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::get_Operation[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::get_File[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::get_Entry[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::get_ErrorCount[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::get_BytesTested[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::get_EntryValid[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::AddError[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::SetOperation[1]( ICSharpCode.SharpZipLib.Zip.TestOperation ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::SetEntry[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::SetBytesTested[1]( System.Int64 ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.TestStatus::.ctor[1]( ICSharpCode.SharpZipLib.Zip.ZipFile ) skipped:  special name

	ICSharpCode.SharpZipLib.Zip.ZipFile [Client]ICSharpCode.SharpZipLib.Zip.ZipFile ICSharpCode.SharpZipLib.Zip.TestStatus::file_ -> A
	ICSharpCode.SharpZipLib.Zip.ZipEntry [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry ICSharpCode.SharpZipLib.Zip.TestStatus::entry_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.TestStatus::entryValid_ -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.TestStatus::errorCount_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.TestStatus::bytesTested_ -> A
	ICSharpCode.SharpZipLib.Zip.TestOperation [Client]ICSharpCode.SharpZipLib.Zip.TestOperation ICSharpCode.SharpZipLib.Zip.TestStatus::operation_ -> A

	ICSharpCode.SharpZipLib.Zip.TestOperation [Client]ICSharpCode.SharpZipLib.Zip.TestOperation ICSharpCode.SharpZipLib.Zip.TestStatus::Operation -> dropped
	ICSharpCode.SharpZipLib.Zip.ZipFile [Client]ICSharpCode.SharpZipLib.Zip.ZipFile ICSharpCode.SharpZipLib.Zip.TestStatus::File -> dropped
	ICSharpCode.SharpZipLib.Zip.ZipEntry [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry ICSharpCode.SharpZipLib.Zip.TestStatus::Entry -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.TestStatus::ErrorCount -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.TestStatus::BytesTested -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.TestStatus::EntryValid -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.FileUpdateMode -> [Client]a.r
{
	ICSharpCode.SharpZipLib.Zip.FileUpdateMode [Client]ICSharpCode.SharpZipLib.Zip.FileUpdateMode ICSharpCode.SharpZipLib.Zip.FileUpdateMode::Safe -> A
	ICSharpCode.SharpZipLib.Zip.FileUpdateMode [Client]ICSharpCode.SharpZipLib.Zip.FileUpdateMode ICSharpCode.SharpZipLib.Zip.FileUpdateMode::Direct -> a

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.FileUpdateMode::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile -> [Client]a.S
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::OnKeysRequired[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_Key[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::set_Key[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::set_Password[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_HaveKeys[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Close[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Create[1]( System.String ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Create[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_IsStreamOwner[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_IsEmbeddedArchive[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_IsNewArchive[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_ZipFileComment[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_Name[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_Size[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_Count[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_EntryByIndex[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::FindEntry[2]( System.String, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::GetEntry[1]( System.String ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::GetInputStream[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::GetInputStream[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::TestArchive[1]( System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::TestArchive[3]( System.Boolean, ICSharpCode.SharpZipLib.Zip.TestStrategy, ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::TestLocalHeader[2]( ICSharpCode.SharpZipLib.Zip.ZipEntry, ICSharpCode.SharpZipLib.Zip.ZipFile/HeaderTest ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_NameTransform[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::set_NameTransform[1]( ICSharpCode.SharpZipLib.Core.INameTransform ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_EntryFactory[0]( ) -> f
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::set_EntryFactory[1]( ICSharpCode.SharpZipLib.Zip.IEntryFactory ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_BufferSize[0]( ) -> G
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::set_BufferSize[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_IsUpdating[0]( ) -> g
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::get_UseZip64[0]( ) -> H
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::set_UseZip64[1]( ICSharpCode.SharpZipLib.Zip.UseZip64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::BeginUpdate[2]( ICSharpCode.SharpZipLib.Zip.IArchiveStorage, ICSharpCode.SharpZipLib.Zip.IDynamicDataSource ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::BeginUpdate[1]( ICSharpCode.SharpZipLib.Zip.IArchiveStorage ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::BeginUpdate[0]( ) -> h
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CommitUpdate[0]( ) -> I
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::AbortUpdate[0]( ) -> i
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::SetComment[1]( System.String ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::AddUpdate[1]( ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Add[3]( System.String, ICSharpCode.SharpZipLib.Zip.CompressionMethod, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Add[2]( System.String, ICSharpCode.SharpZipLib.Zip.CompressionMethod ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Add[1]( System.String ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Add[2]( System.String, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Add[2]( ICSharpCode.SharpZipLib.Zip.IStaticDataSource, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Add[3]( ICSharpCode.SharpZipLib.Zip.IStaticDataSource, System.String, ICSharpCode.SharpZipLib.Zip.CompressionMethod ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Add[4]( ICSharpCode.SharpZipLib.Zip.IStaticDataSource, System.String, ICSharpCode.SharpZipLib.Zip.CompressionMethod, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Add[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::AddDirectory[1]( System.String ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Delete[1]( System.String ) -> d
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Delete[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::WriteLEShort[1]( System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::WriteLEUshort[1]( System.UInt16 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::WriteLEInt[1]( System.Int32 ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::WriteLEUint[1]( System.UInt32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::WriteLeLong[1]( System.Int64 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::WriteLEUlong[1]( System.UInt64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::WriteLocalEntryHeader[1]( ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::WriteCentralDirectoryHeader[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::PostUpdateCleanup[0]( ) -> J
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::GetTransformedFileName[1]( System.String ) -> E
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::GetTransformedDirectoryName[1]( System.String ) -> e
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::GetBuffer[0]( ) -> j
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CopyDescriptorBytes[3]( ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate, System.IO.Stream, System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CopyBytes[5]( ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate, System.IO.Stream, System.IO.Stream, System.Int64, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::GetDescriptorSize[1]( ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CopyDescriptorBytesDirect[4]( ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate, System.IO.Stream, System.Int64&, System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CopyEntryDataDirect[5]( ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate, System.IO.Stream, System.Boolean, System.Int64&, System.Int64& ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::FindExistingUpdate[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::FindExistingUpdate[1]( System.String ) -> F
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::GetOutputStream[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::AddEntry[2]( ICSharpCode.SharpZipLib.Zip.ZipFile, ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::ModifyEntry[2]( ICSharpCode.SharpZipLib.Zip.ZipFile, ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CopyEntryDirect[3]( ICSharpCode.SharpZipLib.Zip.ZipFile, ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate, System.Int64& ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CopyEntry[2]( ICSharpCode.SharpZipLib.Zip.ZipFile, ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Reopen[1]( System.IO.Stream ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Reopen[0]( ) -> K
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::UpdateCommentOnly[0]( ) -> k
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::RunUpdates[0]( ) -> L
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CheckUpdating[0]( ) -> l
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::System.IDisposable.Dispose[0]( ) -> M
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::DisposeInternal[1]( System.Boolean ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Dispose[1]( System.Boolean ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::ReadLEUshort[0]( ) -> m
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::ReadLEUint[0]( ) -> N
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::ReadLEUlong[0]( ) -> n
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::LocateBlockWithSignature[4]( System.Int32, System.Int64, System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::ReadEntries[0]( ) -> O
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::LocateEntry[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CreateAndInitDecryptionStream[2]( System.IO.Stream, ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CreateAndInitEncryptionStream[2]( System.IO.Stream, ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::CheckClassicPassword[2]( System.Security.Cryptography.CryptoStream, ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::WriteEncryptionHeader[2]( System.IO.Stream, System.Int64 ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::.ctor[1]( System.IO.FileStream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::Finalize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile::GetEnumerator[0]( ) skipped:  external base class or interface

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipFile::DefaultBufferSize -> A
	ICSharpCode.SharpZipLib.Zip.ZipFile/KeysRequiredEventHandler [Client]ICSharpCode.SharpZipLib.Zip.ZipFile/KeysRequiredEventHandler ICSharpCode.SharpZipLib.Zip.ZipFile::KeysRequired -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::isDisposed_ -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipFile::name_ -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipFile::comment_ -> a
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipFile::rawPassword_ -> B
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Zip.ZipFile::baseStream_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::isStreamOwner -> a
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile::offsetOfFirstEntry -> A
	ICSharpCode.SharpZipLib.Zip.ZipEntry[] [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry[] ICSharpCode.SharpZipLib.Zip.ZipFile::entries_ -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.ZipFile::key -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::isNewArchive_ -> B
	ICSharpCode.SharpZipLib.Zip.UseZip64 [Client]ICSharpCode.SharpZipLib.Zip.UseZip64 ICSharpCode.SharpZipLib.Zip.ZipFile::useZip64_ -> A
	System.Collections.ArrayList [Client]System.Collections.ArrayList ICSharpCode.SharpZipLib.Zip.ZipFile::updates_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile::updateCount_ -> a
	System.Collections.Hashtable [Client]System.Collections.Hashtable ICSharpCode.SharpZipLib.Zip.ZipFile::updateIndex_ -> A
	ICSharpCode.SharpZipLib.Zip.IArchiveStorage [Client]ICSharpCode.SharpZipLib.Zip.IArchiveStorage ICSharpCode.SharpZipLib.Zip.ZipFile::archiveStorage_ -> A
	ICSharpCode.SharpZipLib.Zip.IDynamicDataSource [Client]ICSharpCode.SharpZipLib.Zip.IDynamicDataSource ICSharpCode.SharpZipLib.Zip.ZipFile::updateDataSource_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::contentsEdited_ -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipFile::bufferSize_ -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.ZipFile::copyBuffer_ -> a
	ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString [Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString ICSharpCode.SharpZipLib.Zip.ZipFile::newComment_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::commentEdited_ -> C
	ICSharpCode.SharpZipLib.Zip.IEntryFactory [Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory ICSharpCode.SharpZipLib.Zip.ZipFile::updateEntryFactory_ -> A

	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.ZipFile::Key -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipFile::Password -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::HaveKeys -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::IsStreamOwner -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::IsEmbeddedArchive -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::IsNewArchive -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipFile::ZipFileComment -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipFile::Name -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipFile::Size -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile::Count -> dropped
	ICSharpCode.SharpZipLib.Zip.ZipEntry [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry ICSharpCode.SharpZipLib.Zip.ZipFile::EntryByIndex -> dropped
	ICSharpCode.SharpZipLib.Core.INameTransform [Client]ICSharpCode.SharpZipLib.Core.INameTransform ICSharpCode.SharpZipLib.Zip.ZipFile::NameTransform -> dropped
	ICSharpCode.SharpZipLib.Zip.IEntryFactory [Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory ICSharpCode.SharpZipLib.Zip.ZipFile::EntryFactory -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipFile::BufferSize -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile::IsUpdating -> dropped
	ICSharpCode.SharpZipLib.Zip.UseZip64 [Client]ICSharpCode.SharpZipLib.Zip.UseZip64 ICSharpCode.SharpZipLib.Zip.ZipFile::UseZip64 -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/HeaderTest -> [Client]a.S/T
{
	ICSharpCode.SharpZipLib.Zip.ZipFile/HeaderTest [Client]ICSharpCode.SharpZipLib.Zip.ZipFile/HeaderTest ICSharpCode.SharpZipLib.Zip.ZipFile/HeaderTest::Extract -> A
	ICSharpCode.SharpZipLib.Zip.ZipFile/HeaderTest [Client]ICSharpCode.SharpZipLib.Zip.ZipFile/HeaderTest ICSharpCode.SharpZipLib.Zip.ZipFile/HeaderTest::Header -> a

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipFile/HeaderTest::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand -> [Client]a.S/t
{
	ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand [Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand::Copy -> A
	ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand [Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand::Modify -> a
	ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand [Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand::Add -> B

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate -> [Client]a.S/u
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::get_Entry[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::get_OutEntry[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::get_Command[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::get_Filename[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::get_SizePatchOffset[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::set_SizePatchOffset[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::get_CrcPatchOffset[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::set_CrcPatchOffset[1]( System.Int64 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::get_OffsetBasedSize[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::set_OffsetBasedSize[1]( System.Int64 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::GetSource[0]( ) -> d

	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::.ctor[2]( System.String, ICSharpCode.SharpZipLib.Zip.ZipEntry ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::.ctor[3]( System.String, System.String, ICSharpCode.SharpZipLib.Zip.CompressionMethod ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::.ctor[2]( System.String, System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::.ctor[3]( ICSharpCode.SharpZipLib.Zip.IStaticDataSource, System.String, ICSharpCode.SharpZipLib.Zip.CompressionMethod ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::.ctor[2]( ICSharpCode.SharpZipLib.Zip.IStaticDataSource, ICSharpCode.SharpZipLib.Zip.ZipEntry ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::.ctor[2]( ICSharpCode.SharpZipLib.Zip.ZipEntry, ICSharpCode.SharpZipLib.Zip.ZipEntry ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::.ctor[2]( ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand, ICSharpCode.SharpZipLib.Zip.ZipEntry ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::.ctor[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) skipped:  special name

	ICSharpCode.SharpZipLib.Zip.ZipEntry [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::entry_ -> A
	ICSharpCode.SharpZipLib.Zip.ZipEntry [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::outEntry_ -> a
	ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand [Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::command_ -> A
	ICSharpCode.SharpZipLib.Zip.IStaticDataSource [Client]ICSharpCode.SharpZipLib.Zip.IStaticDataSource ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::dataSource_ -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::filename_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::sizePatchOffset_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::crcPatchOffset_ -> a
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::_offsetBasedSize -> B

	ICSharpCode.SharpZipLib.Zip.ZipEntry [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::Entry -> dropped
	ICSharpCode.SharpZipLib.Zip.ZipEntry [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::OutEntry -> dropped
	ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand [Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateCommand ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::Command -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::Filename -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::SizePatchOffset -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::CrcPatchOffset -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/ZipUpdate::OffsetBasedSize -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString -> [Client]a.S/V
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::get_IsSourceString[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::get_RawLength[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::get_RawComment[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::Reset[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::MakeTextAvailable[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::MakeBytesAvailable[0]( ) -> c

	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::.ctor[1]( System.Byte[] ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::op_Implicit[1]( ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString ) skipped:  special name

	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::comment_ -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::rawComment_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::isSourceString_ -> A

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::IsSourceString -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::RawLength -> dropped
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.ZipFile/ZipString::RawComment -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipEntryEnumerator -> [Client]a.S/v
{

	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipEntryEnumerator::.ctor[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry[] ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipEntryEnumerator::get_Current[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipEntryEnumerator::Reset[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/ZipEntryEnumerator::MoveNext[0]( ) skipped:  external base class or interface

	ICSharpCode.SharpZipLib.Zip.ZipEntry[] [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry[] ICSharpCode.SharpZipLib.Zip.ZipFile/ZipEntryEnumerator::array -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipFile/ZipEntryEnumerator::index -> A

	System.Object [Client]System.Object ICSharpCode.SharpZipLib.Zip.ZipFile/ZipEntryEnumerator::Current -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream -> [Client]a.S/W
{

	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface

	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::baseStream_ -> A

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::CanWrite -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::CanSeek -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::Length -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/UncompressedStream::Position -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream -> [Client]a.S/w
{

	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::.ctor[3]( ICSharpCode.SharpZipLib.Zip.ZipFile, System.Int64, System.Int64 ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::ReadByte[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::get_CanTimeout[0]( ) skipped:  external base class or interface

	ICSharpCode.SharpZipLib.Zip.ZipFile [Client]ICSharpCode.SharpZipLib.Zip.ZipFile ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::zipFile_ -> A
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::baseStream_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::start_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::length_ -> a
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::readPos_ -> B
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::end_ -> b

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::Position -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::Length -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::CanWrite -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::CanSeek -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipFile/PartialInputStream::CanTimeout -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource -> [Client]a.Y
{
	[Client]ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource::GetSource[0]( ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource::.ctor[1]( System.String ) skipped:  special name

	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.StaticDiskDataSource::fileName_ -> A
}

[Client]ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage -> [Client]a.z
{
	[Client]ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage::get_UpdateMode[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage::GetTemporaryOutput[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage::ConvertTemporaryToFinal[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage::MakeTemporaryCopy[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage::OpenForDirectUpdate[1]( System.IO.Stream ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage::Dispose[0]( ) -> b

	[Client]ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage::.ctor[1]( ICSharpCode.SharpZipLib.Zip.FileUpdateMode ) skipped:  special name

	ICSharpCode.SharpZipLib.Zip.FileUpdateMode [Client]ICSharpCode.SharpZipLib.Zip.FileUpdateMode ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage::updateMode_ -> A

	ICSharpCode.SharpZipLib.Zip.FileUpdateMode [Client]ICSharpCode.SharpZipLib.Zip.FileUpdateMode ICSharpCode.SharpZipLib.Zip.BaseArchiveStorage::UpdateMode -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage -> [Client]B.A
{
	[Client]ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::GetTemporaryOutput[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::ConvertTemporaryToFinal[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::MakeTemporaryCopy[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::OpenForDirectUpdate[1]( System.IO.Stream ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::Dispose[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::GetTempFileName[2]( System.String, System.Boolean ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::.ctor[2]( ICSharpCode.SharpZipLib.Zip.ZipFile, ICSharpCode.SharpZipLib.Zip.FileUpdateMode ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::.ctor[1]( ICSharpCode.SharpZipLib.Zip.ZipFile ) skipped:  special name

	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::temporaryStream_ -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::fileName_ -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.DiskArchiveStorage::temporaryName_ -> a
}

[Client]ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage -> [Client]B.a
{
	[Client]ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::GetTemporaryOutput[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::ConvertTemporaryToFinal[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::MakeTemporaryCopy[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::OpenForDirectUpdate[1]( System.IO.Stream ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::Dispose[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::get_FinalStream[0]( ) -> C

	[Client]ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::.ctor[1]( ICSharpCode.SharpZipLib.Zip.FileUpdateMode ) skipped:  special name

	System.IO.MemoryStream [Client]System.IO.MemoryStream ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::temporaryStream_ -> A
	System.IO.MemoryStream [Client]System.IO.MemoryStream ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::finalStream_ -> a

	System.IO.MemoryStream [Client]System.IO.MemoryStream ICSharpCode.SharpZipLib.Zip.MemoryArchiveStorage::FinalStream -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer -> [Client]B.B
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::Reset[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::WriteByte[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::WriteShort[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::WriteInt[1]( System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::WriteBlock[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::get_BitCount[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::AlignToByte[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::WriteBits[2]( System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::WriteShortMSB[1]( System.Int32 ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::get_IsFlushed[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::Flush[3]( System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::ToByteArray[0]( ) -> C

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::.ctor[1]( System.Int32 ) skipped:  special name

	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::buffer_ -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::start -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::end -> a
	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::bits -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::bitCount -> B

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::BitCount -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer::IsFlushed -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater -> [Client]B.b
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::Reset[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DecodeHeader[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DecodeDict[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DecodeHuffman[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DecodeChksum[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::Decode[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::SetDictionary[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::SetDictionary[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::SetInput[1]( System.Byte[] ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::SetInput[3]( System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::Inflate[1]( System.Byte[] ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::Inflate[3]( System.Byte[], System.Int32, System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::get_IsNeedingInput[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::get_IsNeedingDictionary[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::get_IsFinished[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::get_Adler[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::get_TotalOut[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::get_TotalIn[0]( ) -> f
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::get_RemainingInput[0]( ) -> G

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::.ctor[1]( System.Boolean ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_HEADER -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_DICT -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_BLOCKS -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_STORED_LEN1 -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_STORED_LEN2 -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_STORED -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_DYN_HEADER -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_HUFFMAN -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_HUFFMAN_LENBITS -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_HUFFMAN_DIST -> e
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_HUFFMAN_DISTBITS -> F
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::DECODE_CHKSUM -> f
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::FINISHED -> G
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.Inflater::CPLENS -> A
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.Inflater::CPLEXT -> a
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.Inflater::CPDIST -> B
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.Inflater::CPDEXT -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::mode -> g
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::readAdler -> H
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::neededBits -> h
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::repLength -> I
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::repDist -> i
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::uncomprLen -> J
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Inflater::isLastBlock -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::totalOut -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::totalIn -> a
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Inflater::noHeader -> a
	ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator [Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator ICSharpCode.SharpZipLib.Zip.Compression.Inflater::input -> A
	ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow [Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow ICSharpCode.SharpZipLib.Zip.Compression.Inflater::outputWindow -> A
	ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader [Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader ICSharpCode.SharpZipLib.Zip.Compression.Inflater::dynHeader -> A
	ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree [Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree ICSharpCode.SharpZipLib.Zip.Compression.Inflater::litlenTree -> A
	ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree [Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree ICSharpCode.SharpZipLib.Zip.Compression.Inflater::distTree -> a
	ICSharpCode.SharpZipLib.Checksums.Adler32 [Client]ICSharpCode.SharpZipLib.Checksums.Adler32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::adler -> A

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Inflater::IsNeedingInput -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Inflater::IsNeedingDictionary -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Inflater::IsFinished -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::Adler -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::TotalOut -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::TotalIn -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Inflater::RemainingInput -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants -> [Client]B.C
{

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::.cctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::DEBUGGING -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::STORED_BLOCK -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::STATIC_TREES -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::DYN_TREES -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::PRESET_DICT -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::DEFAULT_MEM_LEVEL -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::MAX_MATCH -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::MIN_MATCH -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::MAX_WBITS -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::WSIZE -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::WMASK -> e
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::HASH_BITS -> F
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::HASH_SIZE -> f
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::HASH_MASK -> G
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::HASH_SHIFT -> g
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::MIN_LOOKAHEAD -> H
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::MAX_DIST -> h
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::PENDING_BUF_SIZE -> I
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::DEFLATE_STORED -> i
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::DEFLATE_FAST -> J
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::DEFLATE_SLOW -> j
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::MAX_BLOCK_SIZE -> K
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::GOOD_LENGTH -> A
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::MAX_LAZY -> a
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::NICE_LENGTH -> B
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::MAX_CHAIN -> b
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants::COMPR_FUNC -> C
}

[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream -> [Client]B.c
{
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::get_IsStreamOwner[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::Finish[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::get_RecordSize[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::GetRecordSize[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::get_IsEntryOpen[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::PutNextEntry[1]( ICSharpCode.SharpZipLib.Tar.TarEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::CloseEntry[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::WriteEofBlock[0]( ) -> D

	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::ReadByte[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::.ctor[2]( System.IO.Stream, System.Int32 ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream::WriteByte[1]( System.Byte ) skipped:  external base class or interface

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarOutputStream::currBytes -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarOutputStream::assemblyBufferLength -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarOutputStream::isClosed -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarOutputStream::currSize -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Tar.TarOutputStream::blockBuffer -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Tar.TarOutputStream::assemblyBuffer -> a
	ICSharpCode.SharpZipLib.Tar.TarBuffer [Client]ICSharpCode.SharpZipLib.Tar.TarBuffer ICSharpCode.SharpZipLib.Tar.TarOutputStream::buffer -> A
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Tar.TarOutputStream::outputStream -> A

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarOutputStream::IsStreamOwner -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarOutputStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarOutputStream::CanSeek -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarOutputStream::CanWrite -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarOutputStream::Length -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarOutputStream::Position -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarOutputStream::RecordSize -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarOutputStream::IsEntryOpen -> dropped
}

[Client]Game.QueryPerformance -> [Client]B.D
{
	[Client]Game.QueryPerformance::get_Begin[0]( ) -> A
	[Client]Game.QueryPerformance::get_End[0]( ) -> a
	[Client]Game.QueryPerformance::get_Frequency[0]( ) -> B
	[Client]Game.QueryPerformance::get_CostTime[0]( ) -> b
	[Client]Game.QueryPerformance::Start[0]( ) -> C
	[Client]Game.QueryPerformance::Start[1]( System.String ) -> A
	[Client]Game.QueryPerformance::Stop[0]( ) -> c

	[Client]Game.QueryPerformance::.ctor[0]( ) skipped:  special name
	[Client]Game.QueryPerformance::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.QueryPerformance::m_Log -> A
	System.Int64 [Client]System.Int64 Game.QueryPerformance::m_Begin -> A
	System.Int64 [Client]System.Int64 Game.QueryPerformance::m_End -> a
	System.Int64 [Client]System.Int64 Game.QueryPerformance::m_Frequency -> B
	System.String [Client]System.String Game.QueryPerformance::m_Name -> A

	System.Int64 [Client]System.Int64 Game.QueryPerformance::Begin -> dropped
	System.Int64 [Client]System.Int64 Game.QueryPerformance::End -> dropped
	System.Int64 [Client]System.Int64 Game.QueryPerformance::Frequency -> dropped
	System.Double [Client]System.Double Game.QueryPerformance::CostTime -> dropped
}

[Client]Game.enumLocalCharacterType -> [Client]B.d
{
	Game.enumLocalCharacterType [Client]Game.enumLocalCharacterType Game.enumLocalCharacterType::eLocalCharacterType_SeePlayer -> A
	Game.enumLocalCharacterType [Client]Game.enumLocalCharacterType Game.enumLocalCharacterType::eLocalCharacterType_SelectPlayer -> a
	Game.enumLocalCharacterType [Client]Game.enumLocalCharacterType Game.enumLocalCharacterType::eLocalCharacterType_AreaOffLine_BaseId -> B
	Game.enumLocalCharacterType [Client]Game.enumLocalCharacterType Game.enumLocalCharacterType::eLocalCharacterType_AreaOffLine_Max -> b
	Game.enumLocalCharacterType [Client]Game.enumLocalCharacterType Game.enumLocalCharacterType::eLocalCharacterType_Me -> C
	Game.enumLocalCharacterType [Client]Game.enumLocalCharacterType Game.enumLocalCharacterType::eLocalCharacterType_SeePet -> c
	Game.enumLocalCharacterType [Client]Game.enumLocalCharacterType Game.enumLocalCharacterType::eLocalCharacterType_Prize -> D
	Game.enumLocalCharacterType [Client]Game.enumLocalCharacterType Game.enumLocalCharacterType::eLocalCharacterType_Max -> d

	System.Int32 [Client]System.Int32 Game.enumLocalCharacterType::value__ skipped:  filtered
}

[Client]Game.CharacterManager -> [Client]B.E
{
	[Client]Game.CharacterManager::get_SelectCharacterId[0]( ) -> A
	[Client]Game.CharacterManager::set_SelectCharacterId[1]( System.UInt32 ) -> A
	[Client]Game.CharacterManager::get_SelectedCharacter[0]( ) -> a
	[Client]Game.CharacterManager::get_Instance[0]( ) -> B
	[Client]Game.CharacterManager::get_Count[0]( ) -> b
	[Client]Game.CharacterManager::get_Characters[0]( ) -> C
	[Client]Game.CharacterManager::get_Players[0]( ) -> c
	[Client]Game.CharacterManager::GetCharacters[1]( Game.ECharType ) -> A
	[Client]Game.CharacterManager::GetCharacterIDsBySkill[3]( Game.ECharType, System.Int32, System.Int32 ) -> A
	[Client]Game.CharacterManager::Init[0]( ) -> D
	[Client]Game.CharacterManager::Release[0]( ) -> d
	[Client]Game.CharacterManager::Reset[0]( ) -> E
	[Client]Game.CharacterManager::Update[0]( ) -> e
	[Client]Game.CharacterManager::LateUpdate[0]( ) -> F
	[Client]Game.CharacterManager::FixedUpdate[0]( ) -> f
	[Client]Game.CharacterManager::CompareCharacterByDistance[2]( Game.Character, Game.Character ) -> A
	[Client]Game.CharacterManager::AddLocalCharacter[2]( System.UInt32, System.Int32 ) -> A
	[Client]Game.CharacterManager::AddLocalCharacter[3]( System.UInt32, System.Int32, Game.Character/OnObjectLoadedEventHandler ) -> A
	[Client]Game.CharacterManager::AddCharacter[2]( System.UInt32, System.Int32 ) -> a
	[Client]Game.CharacterManager::ReleaseToObjectPool[1]( Game.Character ) -> A
	[Client]Game.CharacterManager::RemoveChareacter[1]( System.UInt32 ) -> a
	[Client]Game.CharacterManager::RemoveLocalCharacter[1]( System.UInt32 ) -> B
	[Client]Game.CharacterManager::RemoveAll[0]( ) -> G
	[Client]Game.CharacterManager::RemoveAllLocal[0]( ) -> g
	[Client]Game.CharacterManager::RemoveAllExceptMe[0]( ) -> H
	[Client]Game.CharacterManager::FindCharacter[1]( System.UInt32 ) -> b
	[Client]Game.CharacterManager::FindLocalCharacter[1]( System.UInt32 ) -> C
	[Client]Game.CharacterManager::FindCharacterByGameObject[1]( UnityEngine.GameObject ) -> A
	[Client]Game.CharacterManager::FindCharacterTopParentByGameObject[1]( UnityEngine.GameObject ) -> a
	[Client]Game.CharacterManager::FindNpcByCsvId[1]( System.Int32 ) -> A
	[Client]Game.CharacterManager::FindMonsterByCsvId[1]( System.Int32 ) -> a
	[Client]Game.CharacterManager::FindMonsterByCsvId[2]( System.Int32, System.Collections.Generic.List`1<Game.Monster>& ) -> A
	[Client]Game.CharacterManager::CreateMe[1]( System.UInt32 ) -> c
	[Client]Game.CharacterManager::PKCharCompare[2]( Game.Player, Game.Player ) -> A
	[Client]Game.CharacterManager::IsAttacker[1]( System.UInt32 ) -> D
	[Client]Game.CharacterManager::AddAttacker[1]( System.UInt32 ) -> d
	[Client]Game.CharacterManager::CanBeAttacked[1]( Game.Character ) -> a
	[Client]Game.CharacterManager::GetPKList[0]( ) -> h
	[Client]Game.CharacterManager::TabFind[1]( System.Single ) -> A
	[Client]Game.CharacterManager::TabFindNpc[0]( ) -> I
	[Client]Game.CharacterManager::SelectCharacter[1]( System.UInt32 ) -> E
	[Client]Game.CharacterManager::OnSelectCharacter[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.CharacterManager::OnCharacterDead[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.CharacterManager::OnCharRelive[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.CharacterManager::OnMsgServerAckUserDeath[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.CharacterManager::OnMsgServerChangeKillState[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.CharacterManager::OnMsgServerNotifyHpChange[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.CharacterManager::OnMsgServerNotifyFighterChangeFaction[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.CharacterManager::OnMsgServerNotifyMonsterBorn[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.CharacterManager::OnMsgServerAckAddTargetList[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.CharacterManager::OnMsgServerBattlePetRename[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.CharacterManager::TestInstantiate[1]( System.Int32 ) -> B

	[Client]Game.CharacterManager::.cctor[0]( ) skipped:  special name
	[Client]Game.CharacterManager::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.CharacterManager::MaxShowAttackerNum -> A
	log4net.ILog [Client]log4net.ILog Game.CharacterManager::m_Log -> A
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.Character> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.Character> Game.CharacterManager::m_Characters -> A
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.Character> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.Character> Game.CharacterManager::m_LocalCharacters -> a
	System.Int32 [Client]System.Int32 Game.CharacterManager::m_SelectedEffectId -> a
	Game.ObjectPool`1<Game.Player> [Client]Game.ObjectPool`1<Game.Player> Game.CharacterManager::m_PlayersPool -> A
	Game.ObjectPool`1<Game.Monster> [Client]Game.ObjectPool`1<Game.Monster> Game.CharacterManager::m_MonstersPool -> A
	Game.ObjectPool`1<Game.Npc> [Client]Game.ObjectPool`1<Game.Npc> Game.CharacterManager::m_NpcsPool -> A
	Game.ObjectPool`1<Game.Pet> [Client]Game.ObjectPool`1<Game.Pet> Game.CharacterManager::m_PetsPool -> A
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.CharacterManager::m_PKListMonster -> A
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.CharacterManager::m_PKAttackers -> a
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.CharacterManager::DeleteMonsters -> B
	Game.CharacterManager [Client]Game.CharacterManager Game.CharacterManager::m_Instance -> A
	System.UInt32 [Client]System.UInt32 Game.CharacterManager::<SelectCharacterId>k__BackingField -> A

	System.UInt32 [Client]System.UInt32 Game.CharacterManager::SelectCharacterId -> dropped
	Game.Character [Client]Game.Character Game.CharacterManager::SelectedCharacter -> dropped
	Game.CharacterManager [Client]Game.CharacterManager Game.CharacterManager::Instance -> dropped
	System.Int32 [Client]System.Int32 Game.CharacterManager::Count -> dropped
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.Character> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.Character> Game.CharacterManager::Characters -> dropped
	System.Collections.Generic.List`1<Game.Player> [Client]System.Collections.Generic.List`1<Game.Player> Game.CharacterManager::Players -> dropped
}

[Client]Game.ProfileStats -> [Client]B.e
{
	[Client]Game.ProfileStats::get_Instance[0]( ) -> A
	[Client]Game.ProfileStats::get_ShowStats[0]( ) -> a
	[Client]Game.ProfileStats::set_ShowStats[1]( System.Boolean ) -> A
	[Client]Game.ProfileStats::get_Fps[0]( ) -> B
	[Client]Game.ProfileStats::set_Fps[1]( System.Single ) -> A
	[Client]Game.ProfileStats::Update[0]( ) -> b

	[Client]Game.ProfileStats::.cctor[0]( ) skipped:  special name
	[Client]Game.ProfileStats::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.ProfileStats::m_TimeInterval -> A
	System.Single [Client]System.Single Game.ProfileStats::m_LastUpdateTime -> a
	System.Single [Client]System.Single Game.ProfileStats::m_FramesAccumulated -> B
	System.UInt32 [Client]System.UInt32 Game.ProfileStats::m_Count -> A
	Game.ProfileStats [Client]Game.ProfileStats Game.ProfileStats::m_Instance -> A
	System.Boolean [Client]System.Boolean Game.ProfileStats::<ShowStats>k__BackingField -> A
	System.Single [Client]System.Single Game.ProfileStats::<Fps>k__BackingField -> b

	Game.ProfileStats [Client]Game.ProfileStats Game.ProfileStats::Instance -> dropped
	System.Boolean [Client]System.Boolean Game.ProfileStats::ShowStats -> dropped
	System.Single [Client]System.Single Game.ProfileStats::Fps -> dropped
}

[Client]Game.Character -> [Client]B.F
{
	[Client]Game.Character::get_AttackTime[0]( ) -> E
	[Client]Game.Character::set_AttackTime[1]( System.Single ) -> A
	[Client]Game.Character::get_WorkMgr[0]( ) -> e
	[Client]Game.Character::set_WorkMgr[1]( Game.WorkManager ) -> A
	[Client]Game.Character::get_AnimationMgr[0]( ) -> F
	[Client]Game.Character::set_AnimationMgr[1]( Game.AnimationManager ) -> A
	[Client]Game.Character::get_Object[0]( ) -> f
	[Client]Game.Character::get_Id[0]( ) -> G
	[Client]Game.Character::set_Id[1]( System.UInt32 ) -> A
	[Client]Game.Character::get_Type[0]( ) -> g
	[Client]Game.Character::set_Type[1]( System.Int32 ) -> A
	[Client]Game.Character::get_CsvId[0]( ) -> H
	[Client]Game.Character::set_CsvId[1]( System.Int32 ) -> a
	[Client]Game.Character::get_Level[0]( ) -> h
	[Client]Game.Character::set_Level[1]( System.UInt16 ) -> A
	[Client]Game.Character::get_Hp[0]( ) -> I
	[Client]Game.Character::set_Hp[1]( System.UInt32 ) -> a
	[Client]Game.Character::get_HpMax[0]( ) -> i
	[Client]Game.Character::set_HpMax[1]( System.UInt32 ) -> B
	[Client]Game.Character::get_Name[0]( ) -> J
	[Client]Game.Character::set_Name[1]( System.String ) -> A
	[Client]Game.Character::get_TitleName[0]( ) -> A
	[Client]Game.Character::get_IsHumanoid[0]( ) -> j
	[Client]Game.Character::set_IsHumanoid[1]( System.Boolean ) -> A
	[Client]Game.Character::get_ShowDress[0]( ) -> K
	[Client]Game.Character::get_Profession[0]( ) -> k
	[Client]Game.Character::set_Profession[1]( System.UInt16 ) -> a
	[Client]Game.Character::get_Sex[0]( ) -> L
	[Client]Game.Character::set_Sex[1]( System.Byte ) -> A
	[Client]Game.Character::get_Pos[0]( ) -> l
	[Client]Game.Character::set_Pos[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.Character::get_LookAt[0]( ) -> M
	[Client]Game.Character::set_LookAt[1]( UnityEngine.Vector3 ) -> a
	[Client]Game.Character::get_Scale[0]( ) -> m
	[Client]Game.Character::set_Scale[1]( System.Single ) -> a
	[Client]Game.Character::SetScaleImmediate[1]( System.Single ) -> B
	[Client]Game.Character::get_HideForServerCantShow[0]( ) -> N
	[Client]Game.Character::set_HideForServerCantShow[1]( System.Boolean ) -> a
	[Client]Game.Character::get_Height[0]( ) -> n
	[Client]Game.Character::set_Height[1]( System.Single ) -> b
	[Client]Game.Character::get_MoveSpeed[0]( ) -> O
	[Client]Game.Character::set_MoveSpeed[1]( System.Single ) -> C
	[Client]Game.Character::get_MoveStep[0]( ) -> o
	[Client]Game.Character::set_MoveStep[1]( System.Single ) -> c
	[Client]Game.Character::get_ModelFile[0]( ) -> P
	[Client]Game.Character::set_ModelFile[1]( System.String ) -> a
	[Client]Game.Character::get_NeedLoadModel[0]( ) -> p
	[Client]Game.Character::set_NeedLoadModel[1]( System.Boolean ) -> B
	[Client]Game.Character::get_StatusMgr[0]( ) -> Q
	[Client]Game.Character::set_StatusMgr[1]( Game.StatusManager ) -> A
	[Client]Game.Character::get_FactionId[0]( ) -> q
	[Client]Game.Character::set_FactionId[1]( System.Int32 ) -> B
	[Client]Game.Character::get_ShowHeadInfo[0]( ) -> R
	[Client]Game.Character::set_ShowHeadInfo[1]( System.Boolean ) -> b
	[Client]Game.Character::get_ShowHp[0]( ) -> r
	[Client]Game.Character::set_ShowHp[1]( System.Boolean ) -> C
	[Client]Game.Character::get_ShowTitle[0]( ) -> S
	[Client]Game.Character::set_ShowTitle[1]( System.Boolean ) -> c
	[Client]Game.Character::get_ShowName[0]( ) -> s
	[Client]Game.Character::set_ShowName[1]( System.Boolean ) -> D
	[Client]Game.Character::get_TitleColor[0]( ) -> T
	[Client]Game.Character::set_TitleColor[1]( UnityEngine.Color ) -> A
	[Client]Game.Character::get_NameColor[0]( ) -> t
	[Client]Game.Character::set_NameColor[1]( UnityEngine.Color ) -> a
	[Client]Game.Character::get_HpColor[0]( ) -> U
	[Client]Game.Character::set_HpColor[1]( UnityEngine.Color ) -> B
	[Client]Game.Character::get_IsLocal[0]( ) -> u
	[Client]Game.Character::set_IsLocal[1]( System.Boolean ) -> d
	[Client]Game.Character::get_Shield[0]( ) -> V
	[Client]Game.Character::set_Shield[1]( System.Boolean ) -> E
	[Client]Game.Character::get_Loading[0]( ) -> v
	[Client]Game.Character::IsFriendFaction[1]( Game.Character ) -> A
	[Client]Game.Character::IsRole[0]( ) -> W
	[Client]Game.Character::IsPlayer[0]( ) -> w
	[Client]Game.Character::IsMonster[0]( ) -> X
	[Client]Game.Character::IsNpc[0]( ) -> x
	[Client]Game.Character::IsPet[0]( ) -> Y
	[Client]Game.Character::IsState[1]( Game.WorkType ) -> A
	[Client]Game.Character::IsMoving[0]( ) -> y
	[Client]Game.Character::IsDead[0]( ) -> Z
	[Client]Game.Character::InFrontOfPlayerRole[0]( ) -> z
	[Client]Game.Character::SetSkillStopMove[1]( System.Single ) -> D
	[Client]Game.Character::CanMove[0]( ) -> aA
	[Client]Game.Character::InitAvatar[0]( ) -> aa
	[Client]Game.Character::InitModel[0]( ) -> a
	[Client]Game.Character::Init[0]( ) -> aB
	[Client]Game.Character::Release[0]( ) -> B
	[Client]Game.Character::SetFaceDirection[1]( System.Single ) -> d
	[Client]Game.Character::Reset[0]( ) -> b
	[Client]Game.Character::ResetModel[0]( ) -> ab
	[Client]Game.Character::RefreshProperty[0]( ) -> C
	[Client]Game.Character::Update[0]( ) -> c
	[Client]Game.Character::LateUpdate[0]( ) -> aC
	[Client]Game.Character::FixedUpdate[0]( ) -> D
	[Client]Game.Character::Load[0]( ) -> ac
	[Client]Game.Character::LoadedAction[1]( UnityEngine.Object ) -> A
	[Client]Game.Character::OnObjectLoaded[0]( ) -> d
	[Client]Game.Character::RefreshBaseObject[0]( ) -> aD
	[Client]Game.Character::RefreshAvatarObject[0]( ) -> ad
	[Client]Game.Character::RefreshLocalObject[1]( UnityEngine.GameObject ) -> A
	[Client]Game.Character::UpdateY[0]( ) -> aE
	[Client]Game.Character::UpdateHeight[0]( ) -> ae
	[Client]Game.Character::MoveTo[1]( UnityEngine.Vector3 ) -> B
	[Client]Game.Character::VerifyPos[2]( System.Single, System.Single ) -> A
	[Client]Game.Character::PushEvent[1]( Game.Event ) -> A
	[Client]Game.Character::RegisterOnObjectLoadedEventHandler[1]( Game.Character/OnObjectLoadedEventHandler ) -> A
	[Client]Game.Character::SetToLayer[2]( UnityEngine.Transform, System.Int32 ) -> A
	[Client]Game.Character::ChangeAvatar[2]( System.Byte, System.Int32 ) -> A
	[Client]Game.Character::RefreshDress[1]( System.Boolean ) -> e
	[Client]Game.Character::ChangeAllAvatar[1]( System.Int32 ) -> b
	[Client]Game.Character::ChangeAllAvatar[1]( System.Collections.Generic.List`1<Game.Msg.SEquipVisualData> ) -> A
	[Client]Game.Character::ChangeAllAvatar[1]( Game.Msg.SCharEquipItem[] ) -> A
	[Client]Game.Character::ChangeAllAvatar[0]( ) -> aF

	[Client]Game.Character::.ctor[0]( ) skipped:  special name
	[Client]Game.Character::.cctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.Character::m_DefaultMoveSpeed -> A
	System.Single [Client]System.Single Game.Character::m_DefaultMoveStep -> a
	System.Single [Client]System.Single Game.Character::ScaleTime -> B
	System.Single [Client]System.Single Game.Character::SkillDurationParam -> b
	log4net.ILog [Client]log4net.ILog Game.Character::m_Log -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Character::m_RayCastOrigin -> A
	Game.HumanoidAvatar [Client]Game.HumanoidAvatar Game.Character::m_Avatar -> A
	System.Collections.Generic.Dictionary`2<System.Byte,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.Byte,System.Int32> Game.Character::m_AvatarItemIds -> A
	System.Boolean [Client]System.Boolean Game.Character::m_ShowDress -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.Character::m_Object -> A
	Game.EventQueue [Client]Game.EventQueue Game.Character::m_EventQueue -> A
	System.UInt32 [Client]System.UInt32 Game.Character::m_LoadTaskId -> A
	System.Boolean [Client]System.Boolean Game.Character::m_ModelInited -> a
	System.Boolean [Client]System.Boolean Game.Character::m_ModelReleased -> B
	System.Boolean [Client]System.Boolean Game.Character::m_bShowHeadInfo -> b
	System.Boolean [Client]System.Boolean Game.Character::m_bShowHp -> C
	System.Boolean [Client]System.Boolean Game.Character::m_bShowTitle -> c
	System.Boolean [Client]System.Boolean Game.Character::m_bShowName -> D
	UnityEngine.Color [Client]UnityEngine.Color Game.Character::m_colorName -> A
	UnityEngine.Color [Client]UnityEngine.Color Game.Character::m_colorTitle -> a
	UnityEngine.Color [Client]UnityEngine.Color Game.Character::m_colorHp -> B
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Character::m_Pos -> a
	System.Boolean [Client]System.Boolean Game.Character::m_bfaceRight -> d
	System.Collections.Generic.List`1<UnityEngine.Material> [Client]System.Collections.Generic.List`1<UnityEngine.Material> Game.Character::m_MeshMaterials -> A
	System.Boolean [Client]System.Boolean Game.Character::m_bIsLocal -> E
	Game.Character/OnObjectLoadedEventHandler [Client]Game.Character/OnObjectLoadedEventHandler Game.Character::m_OnObjectLoadedEventHandler -> A
	System.UInt32 [Client]System.UInt32 Game.Character::m_Hp -> a
	System.UInt32 [Client]System.UInt32 Game.Character::m_HpMax -> B
	System.Single [Client]System.Single Game.Character::m_ScaleBeginTime -> C
	System.Single [Client]System.Single Game.Character::m_Scale -> c
	System.Single [Client]System.Single Game.Character::m_OldScale -> D
	System.Boolean [Client]System.Boolean Game.Character::m_Loading -> e
	System.Single [Client]System.Single Game.Character::m_SkillStopMoveBeginTime -> d
	System.Single [Client]System.Single Game.Character::m_SkillStopMoveDuration -> E
	Game.AttackActionFSM [Client]Game.AttackActionFSM Game.Character::m_AttackActionFSM -> A
	Game.BeAttackedActionFSM [Client]Game.BeAttackedActionFSM Game.Character::m_BeAttackedActionFSM -> A
	AnimationConfig [Client]AnimationConfig Game.Character::m_AnimationCfg -> A
	System.Single [Client]System.Single Game.Character::<AttackTime>k__BackingField -> e
	Game.WorkManager [Client]Game.WorkManager Game.Character::<WorkMgr>k__BackingField -> A
	Game.AnimationManager [Client]Game.AnimationManager Game.Character::<AnimationMgr>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.Character::<Id>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.Character::<Type>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.Character::<CsvId>k__BackingField -> a
	System.UInt16 [Client]System.UInt16 Game.Character::<Level>k__BackingField -> A
	System.String [Client]System.String Game.Character::<Name>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.Character::<IsHumanoid>k__BackingField -> F
	System.UInt16 [Client]System.UInt16 Game.Character::<Profession>k__BackingField -> a
	System.Byte [Client]System.Byte Game.Character::<Sex>k__BackingField -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Character::<LookAt>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.Character::<HideForServerCantShow>k__BackingField -> f
	System.Single [Client]System.Single Game.Character::<Height>k__BackingField -> F
	System.Single [Client]System.Single Game.Character::<MoveSpeed>k__BackingField -> f
	System.Single [Client]System.Single Game.Character::<MoveStep>k__BackingField -> G
	System.String [Client]System.String Game.Character::<ModelFile>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.Character::<NeedLoadModel>k__BackingField -> G
	Game.StatusManager [Client]Game.StatusManager Game.Character::<StatusMgr>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.Character::<FactionId>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.Character::<Shield>k__BackingField -> g

	System.Single [Client]System.Single Game.Character::AttackTime -> dropped
	Game.WorkManager [Client]Game.WorkManager Game.Character::WorkMgr -> dropped
	Game.AnimationManager [Client]Game.AnimationManager Game.Character::AnimationMgr -> dropped
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.Character::Object -> dropped
	System.UInt32 [Client]System.UInt32 Game.Character::Id -> dropped
	System.Int32 [Client]System.Int32 Game.Character::Type -> dropped
	System.Int32 [Client]System.Int32 Game.Character::CsvId -> dropped
	System.UInt16 [Client]System.UInt16 Game.Character::Level -> dropped
	System.UInt32 [Client]System.UInt32 Game.Character::Hp -> dropped
	System.UInt32 [Client]System.UInt32 Game.Character::HpMax -> dropped
	System.String [Client]System.String Game.Character::Name -> dropped
	System.String [Client]System.String Game.Character::TitleName -> dropped
	System.Boolean [Client]System.Boolean Game.Character::IsHumanoid -> dropped
	System.Boolean [Client]System.Boolean Game.Character::ShowDress -> dropped
	System.UInt16 [Client]System.UInt16 Game.Character::Profession -> dropped
	System.Byte [Client]System.Byte Game.Character::Sex -> dropped
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Character::Pos -> dropped
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Character::LookAt -> dropped
	System.Single [Client]System.Single Game.Character::Scale -> dropped
	System.Boolean [Client]System.Boolean Game.Character::HideForServerCantShow -> dropped
	System.Single [Client]System.Single Game.Character::Height -> dropped
	System.Single [Client]System.Single Game.Character::MoveSpeed -> dropped
	System.Single [Client]System.Single Game.Character::MoveStep -> dropped
	System.String [Client]System.String Game.Character::ModelFile -> dropped
	System.Boolean [Client]System.Boolean Game.Character::NeedLoadModel -> dropped
	Game.StatusManager [Client]Game.StatusManager Game.Character::StatusMgr -> dropped
	System.Int32 [Client]System.Int32 Game.Character::FactionId -> dropped
	System.Boolean [Client]System.Boolean Game.Character::ShowHeadInfo -> dropped
	System.Boolean [Client]System.Boolean Game.Character::ShowHp -> dropped
	System.Boolean [Client]System.Boolean Game.Character::ShowTitle -> dropped
	System.Boolean [Client]System.Boolean Game.Character::ShowName -> dropped
	UnityEngine.Color [Client]UnityEngine.Color Game.Character::TitleColor -> dropped
	UnityEngine.Color [Client]UnityEngine.Color Game.Character::NameColor -> dropped
	UnityEngine.Color [Client]UnityEngine.Color Game.Character::HpColor -> dropped
	System.Boolean [Client]System.Boolean Game.Character::IsLocal -> dropped
	System.Boolean [Client]System.Boolean Game.Character::Shield -> dropped
	System.Boolean [Client]System.Boolean Game.Character::Loading -> dropped
}

[Client]Game.Pet -> [Client]B.G
{
	[Client]Game.Pet::get_TitleName[0]( ) -> A
	[Client]Game.Pet::Reset[0]( ) -> b
	[Client]Game.Pet::RefreshProperty[0]( ) -> C
	[Client]Game.Pet::get_Data[0]( ) -> E
	[Client]Game.Pet::get_MasterId[0]( ) -> e
	[Client]Game.Pet::set_MasterId[1]( System.UInt32 ) -> A
	[Client]Game.Pet::get_StrengthLevel[0]( ) -> F
	[Client]Game.Pet::set_StrengthLevel[1]( System.Int32 ) -> A
	[Client]Game.Pet::get_Star[0]( ) -> f
	[Client]Game.Pet::set_Star[1]( System.Int32 ) -> a
	[Client]Game.Pet::get_DBID[0]( ) -> G
	[Client]Game.Pet::set_DBID[1]( System.UInt64 ) -> A

	[Client]Game.Pet::.ctor[0]( ) skipped:  special name

	Game.DataPet [Client]Game.DataPet Game.Pet::m_DataPet -> A
	System.Int32 [Client]System.Int32 Game.Pet::m_StrengthLevel -> A
	System.Int32 [Client]System.Int32 Game.Pet::m_Star -> a
	System.String [Client]System.String Game.Pet::m_TitleName -> A
	System.UInt32 [Client]System.UInt32 Game.Pet::m_unMasterId -> A
	System.UInt64 [Client]System.UInt64 Game.Pet::<DBID>k__BackingField -> A

	Game.DataPet [Client]Game.DataPet Game.Pet::Data -> dropped
	System.UInt32 [Client]System.UInt32 Game.Pet::MasterId -> dropped
	System.Int32 [Client]System.Int32 Game.Pet::StrengthLevel -> dropped
	System.Int32 [Client]System.Int32 Game.Pet::Star -> dropped
	System.UInt64 [Client]System.UInt64 Game.Pet::DBID -> dropped
	System.String [Client]System.String Game.Pet::TitleName -> dropped
}

[Client]Game.DynamicPacket -> [Client]B.g
{
	[Client]Game.DynamicPacket::GetBuffer[0]( ) -> A
	[Client]Game.DynamicPacket::ToArray[0]( ) -> a
	[Client]Game.DynamicPacket::GetLength[0]( ) -> B
	[Client]Game.DynamicPacket::Seek[2]( System.Int64, System.IO.SeekOrigin ) -> A
	[Client]Game.DynamicPacket::ReadChar[0]( ) -> b
	[Client]Game.DynamicPacket::Read[1]( System.Char& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Char ) -> A
	[Client]Game.DynamicPacket::ReadChars[0]( ) -> C
	[Client]Game.DynamicPacket::ReadChars[1]( System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[2]( System.Char[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Char[]& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Char[] ) -> A
	[Client]Game.DynamicPacket::ReadString[0]( ) -> c
	[Client]Game.DynamicPacket::Read[1]( System.String& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.String ) -> A
	[Client]Game.DynamicPacket::ReadBoolean[0]( ) -> D
	[Client]Game.DynamicPacket::Read[1]( System.Boolean& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Boolean ) -> A
	[Client]Game.DynamicPacket::ReadByte[0]( ) -> d
	[Client]Game.DynamicPacket::Read[1]( System.Byte& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Byte ) -> A
	[Client]Game.DynamicPacket::ReadSByte[0]( ) -> E
	[Client]Game.DynamicPacket::Read[1]( System.SByte& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.SByte ) -> A
	[Client]Game.DynamicPacket::ReadBytes[0]( ) -> e
	[Client]Game.DynamicPacket::Read[1]( System.Byte[]& ) -> A
	[Client]Game.DynamicPacket::ReadBytes[1]( System.Int32 ) -> a
	[Client]Game.DynamicPacket::Read[2]( System.Byte[]&, System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[2]( System.Byte[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Byte[] ) -> A
	[Client]Game.DynamicPacket::ReadSBytes[0]( ) -> F
	[Client]Game.DynamicPacket::Read[1]( System.SByte[]& ) -> A
	[Client]Game.DynamicPacket::ReadSBytes[1]( System.Int32 ) -> B
	[Client]Game.DynamicPacket::Read[2]( System.SByte[]&, System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.SByte[] ) -> A
	[Client]Game.DynamicPacket::Write[2]( System.SByte[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::ReadShorts[0]( ) -> f
	[Client]Game.DynamicPacket::ReadShorts[1]( System.Int32 ) -> b
	[Client]Game.DynamicPacket::Read[1]( System.Int16[]& ) -> A
	[Client]Game.DynamicPacket::Read[2]( System.Int16[]&, System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Int16[] ) -> A
	[Client]Game.DynamicPacket::Write[2]( System.Int16[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::ReadUShorts[0]( ) -> G
	[Client]Game.DynamicPacket::ReadUShorts[1]( System.Int32 ) -> C
	[Client]Game.DynamicPacket::Read[1]( System.UInt16[]& ) -> A
	[Client]Game.DynamicPacket::Read[2]( System.UInt16[]&, System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.UInt16[] ) -> A
	[Client]Game.DynamicPacket::Write[2]( System.UInt16[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::ReadInts[0]( ) -> g
	[Client]Game.DynamicPacket::ReadInts[1]( System.Int32 ) -> c
	[Client]Game.DynamicPacket::Read[1]( System.Int32[]& ) -> A
	[Client]Game.DynamicPacket::Read[2]( System.Int32[]&, System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Int32[] ) -> A
	[Client]Game.DynamicPacket::Write[2]( System.Int32[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::ReadUInts[0]( ) -> H
	[Client]Game.DynamicPacket::ReadUInts[1]( System.Int32 ) -> D
	[Client]Game.DynamicPacket::Read[1]( System.UInt32[]& ) -> A
	[Client]Game.DynamicPacket::Read[2]( System.UInt32[]&, System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.UInt32[] ) -> A
	[Client]Game.DynamicPacket::Write[2]( System.UInt32[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::ReadLongs[0]( ) -> h
	[Client]Game.DynamicPacket::ReadLongs[1]( System.Int32 ) -> d
	[Client]Game.DynamicPacket::Read[1]( System.Int64[]& ) -> A
	[Client]Game.DynamicPacket::Read[2]( System.Int64[]&, System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Int64[] ) -> A
	[Client]Game.DynamicPacket::Write[2]( System.Int64[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::ReadULongs[0]( ) -> I
	[Client]Game.DynamicPacket::ReadULongs[1]( System.Int32 ) -> E
	[Client]Game.DynamicPacket::Read[1]( System.UInt64[]& ) -> A
	[Client]Game.DynamicPacket::Read[2]( System.UInt64[]&, System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.UInt64[] ) -> A
	[Client]Game.DynamicPacket::Write[2]( System.UInt64[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::ReadInt16[0]( ) -> i
	[Client]Game.DynamicPacket::Read[1]( System.Int16& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Int16 ) -> A
	[Client]Game.DynamicPacket::ReadUInt16[0]( ) -> J
	[Client]Game.DynamicPacket::Read[1]( System.UInt16& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.UInt16 ) -> A
	[Client]Game.DynamicPacket::ReadInt32[0]( ) -> j
	[Client]Game.DynamicPacket::Read[1]( System.Int32& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Int32 ) -> e
	[Client]Game.DynamicPacket::ReadUInt32[0]( ) -> K
	[Client]Game.DynamicPacket::Read[1]( System.UInt32& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.UInt32 ) -> A
	[Client]Game.DynamicPacket::ReadInt64[0]( ) -> k
	[Client]Game.DynamicPacket::Read[1]( System.Int64& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Int64 ) -> A
	[Client]Game.DynamicPacket::ReadUInt64[0]( ) -> L
	[Client]Game.DynamicPacket::Read[1]( System.UInt64& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.UInt64 ) -> A
	[Client]Game.DynamicPacket::ReadFloat[0]( ) -> l
	[Client]Game.DynamicPacket::Read[1]( System.Single& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Single ) -> A
	[Client]Game.DynamicPacket::ReadDouble[0]( ) -> M
	[Client]Game.DynamicPacket::Read[1]( System.Double& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Double ) -> A
	[Client]Game.DynamicPacket::ReadDecimal[0]( ) -> m
	[Client]Game.DynamicPacket::Read[1]( System.Decimal& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Decimal ) -> A
	[Client]Game.DynamicPacket::ReadData[0]( ) -> N
	[Client]Game.DynamicPacket::Read[1]( !0 ) -> A
	[Client]Game.DynamicPacket::Write[1]( !0 ) -> a
	[Client]Game.DynamicPacket::ReadArray[0]( ) -> n
	[Client]Game.DynamicPacket::ReadArray[1]( System.Int32 ) -> F
	[Client]Game.DynamicPacket::Read[1]( T[]& ) -> A
	[Client]Game.DynamicPacket::Read[2]( T[]&, System.Int32 ) -> A
	[Client]Game.DynamicPacket::Write[1]( !0[] ) -> A
	[Client]Game.DynamicPacket::Write[2]( !0[], System.Int32 ) -> A
	[Client]Game.DynamicPacket::ReadList[0]( ) -> O
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<!0> ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<T>& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.List`1<!0> ) -> a
	[Client]Game.DynamicPacket::ReadListByte[0]( ) -> o
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.Byte> ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.Byte>& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.List`1<System.Byte> ) -> a
	[Client]Game.DynamicPacket::ReadListInt16[0]( ) -> P
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.Int16> ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.Int16>& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.List`1<System.Int16> ) -> a
	[Client]Game.DynamicPacket::ReadListUInt16[0]( ) -> p
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.UInt16> ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.UInt16>& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.List`1<System.UInt16> ) -> a
	[Client]Game.DynamicPacket::ReadListInt32[0]( ) -> Q
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.Int32>& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DynamicPacket::ReadListUInt32[0]( ) -> q
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.UInt32> ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.UInt32>& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.List`1<System.UInt32> ) -> a
	[Client]Game.DynamicPacket::ReadListUInt64[0]( ) -> R
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.UInt64> ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.UInt64>& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.List`1<System.UInt64> ) -> a
	[Client]Game.DynamicPacket::ReadListFloat[0]( ) -> r
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.Single> ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.Single>& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.List`1<System.Single> ) -> a
	[Client]Game.DynamicPacket::ReadListString[0]( ) -> S
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.List`1<System.String>& ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DynamicPacket::ReadDiction[0]( ) -> s
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.Dictionary`2<TK,TV>& ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.Dictionary`2<!0,!1> ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.Dictionary`2<!0,!1> ) -> a
	[Client]Game.DynamicPacket::ReadDictionInt32[0]( ) -> T
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.Dictionary`2<System.Int32,T>& ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.Dictionary`2<System.Int32,!0> ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.Dictionary`2<System.Int32,!0> ) -> a
	[Client]Game.DynamicPacket::ReadDictionInt32Int32[0]( ) -> t
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.Dictionary`2<System.Int32,System.Int32>& ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> ) -> a
	[Client]Game.DynamicPacket::ReadDictionStringString[0]( ) -> U
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.Dictionary`2<System.String,System.String>& ) -> A
	[Client]Game.DynamicPacket::Read[1]( System.Collections.Generic.Dictionary`2<System.String,System.String> ) -> A
	[Client]Game.DynamicPacket::Write[1]( System.Collections.Generic.Dictionary`2<System.String,System.String> ) -> a

	[Client]Game.DynamicPacket::.ctor[0]( ) skipped:  special name
	[Client]Game.DynamicPacket::.ctor[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  special name
	[Client]Game.DynamicPacket::.ctor[1]( System.Byte[] ) skipped:  special name

	System.IO.MemoryStream [Client]System.IO.MemoryStream Game.DynamicPacket::memStream -> A
	System.IO.BinaryReader [Client]System.IO.BinaryReader Game.DynamicPacket::reader -> A
	System.IO.BinaryWriter [Client]System.IO.BinaryWriter Game.DynamicPacket::writer -> A
}

[Client]Game.Msg.RecvMsgPacket -> [Client]B.H
{
	[Client]Game.Msg.RecvMsgPacket::get_Instance[0]( ) -> B
	[Client]Game.Msg.RecvMsgPacket::Init[1]( Game.Msg.MsgDynamic ) -> A

	[Client]Game.Msg.RecvMsgPacket::.cctor[0]( ) skipped:  special name
	[Client]Game.Msg.RecvMsgPacket::.ctor[0]( ) skipped:  special name

	Game.Msg.RecvMsgPacket [Client]Game.Msg.RecvMsgPacket Game.Msg.RecvMsgPacket::m_Instance -> A

	Game.Msg.RecvMsgPacket [Client]Game.Msg.RecvMsgPacket Game.Msg.RecvMsgPacket::Instance -> dropped
}

[Client]Game.Msg.MsgTaskUpdateTask_Task -> [Client]B.h
{
	[Client]Game.Msg.MsgTaskUpdateTask_Task::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgTaskUpdateTask_Task::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgTaskUpdateTask_Task::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Msg.MsgTaskUpdateTask_Task::NeedMonsterSize -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgTaskUpdateTask_Task::m_usTaskID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgTaskUpdateTask_Task::m_btTaskState -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgTaskUpdateTask_Task::m_usUsedTime -> a
	System.Byte [Client]System.Byte Game.Msg.MsgTaskUpdateTask_Task::m_btHaveComTimes -> a
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgTaskUpdateTask_Task::m_abtNeedMonster -> A
}

[Client]Game.Msg.ExpeditionData -> [Client]B.I
{
	[Client]Game.Msg.ExpeditionData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ExpeditionData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ExpeditionData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.ExpeditionData::m_btLevel -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ExpeditionData::m_uiExp -> A
	System.Collections.Generic.List`1<Game.Msg.ExpeditionShipData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionShipData> Game.Msg.ExpeditionData::m_oVecShip -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionData::m_btActionPoint -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionData::m_usEventId -> A
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.Msg.ExpeditionData::m_oVecTaskList -> A
	System.Collections.Generic.List`1<System.Byte> [Client]System.Collections.Generic.List`1<System.Byte> Game.Msg.ExpeditionData::m_oVecExploredAreaList -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionData::m_btDepositarySlotNum -> B
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> Game.Msg.ExpeditionData::m_oVecMonsterDepositary -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionData::m_btRecruitTimes -> b
}

[Client]Game.Msg.ClientSItemBase -> [Client]B.i
{
	[Client]Game.Msg.ClientSItemBase::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientSItemBase::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientSItemBase::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ClientSItemBase::m_uiItemID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientSItemBase::m_usItemCount -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientSItemBase::m_usShopItemCount -> a
	System.Int64 [Client]System.Int64 Game.Msg.ClientSItemBase::m_lOnlyInt -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientSItemBase::m_uiUseTime -> a
	System.Byte [Client]System.Byte Game.Msg.ClientSItemBase::m_btStatus -> A
	System.Byte [Client]System.Byte Game.Msg.ClientSItemBase::m_btPackType -> a
	System.Byte [Client]System.Byte Game.Msg.ClientSItemBase::m_btPackIndex -> B
}

[Client]Game.Status -> [Client]B.J
{
	[Client]Game.Status::get_Id[0]( ) -> A
	[Client]Game.Status::set_Id[1]( System.UInt16 ) -> A
	[Client]Game.Status::get_Level[0]( ) -> a
	[Client]Game.Status::set_Level[1]( System.Byte ) -> A
	[Client]Game.Status::get_LastTime[0]( ) -> B
	[Client]Game.Status::set_LastTime[1]( System.Single ) -> A
	[Client]Game.Status::get_Count[0]( ) -> b
	[Client]Game.Status::set_Count[1]( System.Byte ) -> a

	[Client]Game.Status::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Status::<Id>k__BackingField -> A
	System.Byte [Client]System.Byte Game.Status::<Level>k__BackingField -> A
	System.Single [Client]System.Single Game.Status::<LastTime>k__BackingField -> A
	System.Byte [Client]System.Byte Game.Status::<Count>k__BackingField -> a

	System.UInt16 [Client]System.UInt16 Game.Status::Id -> dropped
	System.Byte [Client]System.Byte Game.Status::Level -> dropped
	System.Single [Client]System.Single Game.Status::LastTime -> dropped
	System.Byte [Client]System.Byte Game.Status::Count -> dropped
}

[Client]Game.StatusManager -> [Client]B.j
{
	[Client]Game.StatusManager::get_Statuses[0]( ) -> A
	[Client]Game.StatusManager::get_SpecialStateMask[0]( ) -> a
	[Client]Game.StatusManager::set_SpecialStateMask[1]( System.UInt32 ) -> A
	[Client]Game.StatusManager::get_Count[0]( ) -> B
	[Client]Game.StatusManager::get_Item[1]( System.Int32 ) -> A
	[Client]Game.StatusManager::Reset[0]( ) -> b
	[Client]Game.StatusManager::Clear[0]( ) -> C
	[Client]Game.StatusManager::Release[0]( ) -> c
	[Client]Game.StatusManager::HasSpecialState[1]( Game.Msg.eStatusSpecialFlag ) -> A
	[Client]Game.StatusManager::GetStatus[1]( System.UInt16 ) -> A
	[Client]Game.StatusManager::Update[0]( ) -> D
	[Client]Game.StatusManager::AddStatus[4]( System.UInt16, System.Byte, System.UInt32, System.Byte ) -> A
	[Client]Game.StatusManager::RemoveStatus[1]( System.UInt16 ) -> a

	[Client]Game.StatusManager::.ctor[1]( Game.Character ) skipped:  special name

	System.Collections.Generic.List`1<Game.Status> [Client]System.Collections.Generic.List`1<Game.Status> Game.StatusManager::m_Status -> A
	Game.Character [Client]Game.Character Game.StatusManager::m_Character -> A
	System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> Game.StatusManager::m_StatuEffects -> A
	System.UInt32 [Client]System.UInt32 Game.StatusManager::<SpecialStateMask>k__BackingField -> A

	System.Collections.Generic.List`1<Game.Status> [Client]System.Collections.Generic.List`1<Game.Status> Game.StatusManager::Statuses -> dropped
	System.UInt32 [Client]System.UInt32 Game.StatusManager::SpecialStateMask -> dropped
	System.Int32 [Client]System.Int32 Game.StatusManager::Count -> dropped
	Game.Status [Client]Game.Status Game.StatusManager::Item -> dropped
}

[Client]Game.RolePet -> [Client]B.K
{
	[Client]Game.RolePet::get_Instance[0]( ) -> A
	[Client]Game.RolePet::get_LastBattlePetId[0]( ) -> a
	[Client]Game.RolePet::set_LastBattlePetId[1]( System.UInt64 ) -> A
	[Client]Game.RolePet::get_LastBattlePet[0]( ) -> B
	[Client]Game.RolePet::get_RebornPetId[0]( ) -> b
	[Client]Game.RolePet::set_RebornPetId[1]( System.UInt64 ) -> a
	[Client]Game.RolePet::get_RebornPet[0]( ) -> C
	[Client]Game.RolePet::get_RebornNature[0]( ) -> c
	[Client]Game.RolePet::set_RebornNature[1]( System.Int32 ) -> A
	[Client]Game.RolePet::get_RebornQuality[0]( ) -> D
	[Client]Game.RolePet::set_RebornQuality[1]( System.Int32 ) -> a
	[Client]Game.RolePet::get_RebornGrowthRate[0]( ) -> d
	[Client]Game.RolePet::set_RebornGrowthRate[1]( System.Int32 ) -> B
	[Client]Game.RolePet::get_MaxLucky[0]( ) -> E
	[Client]Game.RolePet::set_MaxLucky[1]( System.Int32 ) -> b
	[Client]Game.RolePet::get_CurLucky[0]( ) -> e
	[Client]Game.RolePet::set_CurLucky[1]( System.Int32 ) -> C
	[Client]Game.RolePet::get_LuckyIndex[0]( ) -> F
	[Client]Game.RolePet::set_LuckyIndex[1]( System.Int32 ) -> c
	[Client]Game.RolePet::get_MaxNum[0]( ) -> f
	[Client]Game.RolePet::set_MaxNum[1]( System.Int32 ) -> D
	[Client]Game.RolePet::get_BuyBagNum[0]( ) -> G
	[Client]Game.RolePet::set_BuyBagNum[1]( System.Int32 ) -> d
	[Client]Game.RolePet::get_BagPets[0]( ) -> g
	[Client]Game.RolePet::get_StoragetPets[0]( ) -> H
	[Client]Game.RolePet::get_BattlePet[0]( ) -> h
	[Client]Game.RolePet::get_BattlePetIndex[0]( ) -> I
	[Client]Game.RolePet::get_BattlePetData[0]( ) -> i
	[Client]Game.RolePet::get_DefaultPetIndex[0]( ) -> J
	[Client]Game.RolePet::get_DefaultPetData[0]( ) -> j
	[Client]Game.RolePet::get_CurSelectPetIndex[0]( ) -> K
	[Client]Game.RolePet::set_CurSelectPetIndex[1]( System.Int32 ) -> E
	[Client]Game.RolePet::get_CurSelectPet[0]( ) -> k
	[Client]Game.RolePet::GetPetCD[1]( System.UInt64 ) -> B
	[Client]Game.RolePet::GetPetSkillNum[1]( Game.Msg.PetData ) -> A
	[Client]Game.RolePet::Reset[0]( ) -> L
	[Client]Game.RolePet::ComparePet[2]( Game.Msg.PetData, Game.Msg.PetData ) -> A
	[Client]Game.RolePet::SortPets[0]( ) -> l
	[Client]Game.RolePet::SetBattlePet[1]( System.Int32 ) -> e
	[Client]Game.RolePet::SetBattlePet[1]( System.UInt64 ) -> b
	[Client]Game.RolePet::CallBackPet[0]( ) -> M
	[Client]Game.RolePet::OnMsgServerPetSetBattle[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.RolePet::OnMsgServerPetAddPet[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.RolePet::OnMsgServerPetUpdatePet[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.RolePet::OnMsgServerPetCallBack[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.RolePet::FreePet[1]( System.UInt64 ) -> C
	[Client]Game.RolePet::OnMsgServerPetRemove[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.RolePet::OnMsgServerPetRefreshList[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.RolePet::StrengthenPet[1]( Game.Msg.ePetBoostType ) -> A
	[Client]Game.RolePet::OnMsgServerPetStrengthen[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.RolePet::SkillHole[2]( System.UInt64, System.Int32 ) -> A
	[Client]Game.RolePet::OnMsgServerPetOpenSkillSocket[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.RolePet::SkillStudy[3]( System.UInt64, System.UInt64, System.Int32 ) -> A
	[Client]Game.RolePet::OnMsgServerPetPatchSkill[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.RolePet::OnMsgServerPetAddExp[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.RolePet::ReqPetStar[3]( System.UInt64, System.Int32, Game.Msg.ePetAddStarSubType ) -> A
	[Client]Game.RolePet::OnMsgServerPetAddStarExp[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.RolePet::ReqRecoverFatigue[1]( Game.Msg.eFatigueRecoverType ) -> A
	[Client]Game.RolePet::OnMsgServerPetRecoverFatigue[1]( Game.Msg.RecvMsgPacket ) -> f
	[Client]Game.RolePet::ReqChangeSkillHole[1]( System.Int32 ) -> F
	[Client]Game.RolePet::OnMsgServerPetChangeSkillSocketType[1]( Game.Msg.RecvMsgPacket ) -> G
	[Client]Game.RolePet::ReqPetRebirth[1]( System.UInt64 ) -> c
	[Client]Game.RolePet::OnMsgServerPetRebirth[1]( Game.Msg.RecvMsgPacket ) -> g
	[Client]Game.RolePet::RebornChoose[1]( System.Boolean ) -> A
	[Client]Game.RolePet::OnMsgServerSetPetRebirthResult[1]( Game.Msg.RecvMsgPacket ) -> H
	[Client]Game.RolePet::ChangeName[1]( System.String ) -> A
	[Client]Game.RolePet::OnMsgServerPetRename[1]( Game.Msg.RecvMsgPacket ) -> h
	[Client]Game.RolePet::RestroePet[0]( ) -> m
	[Client]Game.RolePet::OnMsgServerPetBackToEgg[1]( Game.Msg.RecvMsgPacket ) -> I
	[Client]Game.RolePet::ReqBreakThrough[1]( System.Collections.Generic.List`1<System.UInt64> ) -> A
	[Client]Game.RolePet::OnMsgServerPetAddStar[1]( Game.Msg.RecvMsgPacket ) -> i
	[Client]Game.RolePet::BuyBag[0]( ) -> N
	[Client]Game.RolePet::OnMsgServerPetBagSizeChange[1]( Game.Msg.RecvMsgPacket ) -> J
	[Client]Game.RolePet::GetPetDataByIndex[2]( System.Int32, Game.Msg.EPetPosition ) -> A
	[Client]Game.RolePet::GetPetDataById[2]( System.UInt64, Game.Msg.EPetPosition ) -> A
	[Client]Game.RolePet::GetPets[1]( Game.Msg.EPetPosition ) -> A
	[Client]Game.RolePet::GetIndex[2]( System.UInt64, Game.Msg.EPetPosition ) -> a

	[Client]Game.RolePet::.ctor[0]( ) skipped:  special name
	[Client]Game.RolePet::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.RolePet::ErrorIndex -> A
	System.Int32 [Client]System.Int32 Game.RolePet::PetRebirthItemNeedNum -> a
	System.Int32 [Client]System.Int32 Game.RolePet::PetRebirthPriceBase -> B
	System.Int32 [Client]System.Int32 Game.RolePet::MaxBaseBuyNum -> b
	System.Int32 [Client]System.Int32 Game.RolePet::MaxLevelBagNum -> C
	System.Int32 [Client]System.Int32 Game.RolePet::BaseBagNum -> c
	System.Int32 [Client]System.Int32 Game.RolePet::MaxPetSkillNum -> D
	System.Single [Client]System.Single Game.RolePet::StrengthenCD -> A
	System.Single [Client]System.Single Game.RolePet::PetCD -> a
	System.Single [Client]System.Single Game.RolePet::m_LastStrengthenTime -> B
	System.Collections.Generic.List`1<Game.Msg.PetData> [Client]System.Collections.Generic.List`1<Game.Msg.PetData> Game.RolePet::m_BagPets -> A
	System.Collections.Generic.List`1<Game.Msg.PetData> [Client]System.Collections.Generic.List`1<Game.Msg.PetData> Game.RolePet::m_StoragePets -> a
	Game.RolePet [Client]Game.RolePet Game.RolePet::m_Instance -> A
	System.Collections.Generic.Dictionary`2<System.UInt64,System.Single> [Client]System.Collections.Generic.Dictionary`2<System.UInt64,System.Single> Game.RolePet::m_PetDeadTimes -> A
	System.UInt32 [Client]System.UInt32 Game.RolePet::m_BattlePetId -> A
	System.Int32 [Client]System.Int32 Game.RolePet::m_CurSelectPetIndex -> d
	System.UInt64 [Client]System.UInt64 Game.RolePet::<LastBattlePetId>k__BackingField -> A
	System.UInt64 [Client]System.UInt64 Game.RolePet::<RebornPetId>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.RolePet::<RebornNature>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.RolePet::<RebornQuality>k__BackingField -> e
	System.Int32 [Client]System.Int32 Game.RolePet::<RebornGrowthRate>k__BackingField -> F
	System.Int32 [Client]System.Int32 Game.RolePet::<MaxLucky>k__BackingField -> f
	System.Int32 [Client]System.Int32 Game.RolePet::<CurLucky>k__BackingField -> G
	System.Int32 [Client]System.Int32 Game.RolePet::<LuckyIndex>k__BackingField -> g
	System.Int32 [Client]System.Int32 Game.RolePet::<MaxNum>k__BackingField -> H
	System.Int32 [Client]System.Int32 Game.RolePet::<BuyBagNum>k__BackingField -> h

	Game.RolePet [Client]Game.RolePet Game.RolePet::Instance -> dropped
	System.UInt64 [Client]System.UInt64 Game.RolePet::LastBattlePetId -> dropped
	Game.Msg.PetData [Client]Game.Msg.PetData Game.RolePet::LastBattlePet -> dropped
	System.UInt64 [Client]System.UInt64 Game.RolePet::RebornPetId -> dropped
	Game.Msg.PetData [Client]Game.Msg.PetData Game.RolePet::RebornPet -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::RebornNature -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::RebornQuality -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::RebornGrowthRate -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::MaxLucky -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::CurLucky -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::LuckyIndex -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::MaxNum -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::BuyBagNum -> dropped
	System.Collections.Generic.List`1<Game.Msg.PetData> [Client]System.Collections.Generic.List`1<Game.Msg.PetData> Game.RolePet::BagPets -> dropped
	System.Collections.Generic.List`1<Game.Msg.PetData> [Client]System.Collections.Generic.List`1<Game.Msg.PetData> Game.RolePet::StoragetPets -> dropped
	Game.Pet [Client]Game.Pet Game.RolePet::BattlePet -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::BattlePetIndex -> dropped
	Game.Msg.PetData [Client]Game.Msg.PetData Game.RolePet::BattlePetData -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::DefaultPetIndex -> dropped
	Game.Msg.PetData [Client]Game.Msg.PetData Game.RolePet::DefaultPetData -> dropped
	System.Int32 [Client]System.Int32 Game.RolePet::CurSelectPetIndex -> dropped
	Game.Msg.PetData [Client]Game.Msg.PetData Game.RolePet::CurSelectPet -> dropped
}

[Client]Game.RolePet/PetAttackType -> [Client]B.K/k
{
	Game.RolePet/PetAttackType [Client]Game.RolePet/PetAttackType Game.RolePet/PetAttackType::Physics -> A
	Game.RolePet/PetAttackType [Client]Game.RolePet/PetAttackType Game.RolePet/PetAttackType::Magic -> a

	System.Int32 [Client]System.Int32 Game.RolePet/PetAttackType::value__ skipped:  filtered
}

[Client]Game.DataSkill -> [Client]B.L
{
	[Client]Game.DataSkill::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSkill::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSkill::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSkill::get_SkillID[0]( ) -> A
	[Client]Game.DataSkill::set_SkillID[1]( System.Int32 ) -> A
	[Client]Game.DataSkill::get_SkillName[0]( ) -> a
	[Client]Game.DataSkill::set_SkillName[1]( System.String ) -> A
	[Client]Game.DataSkill::get_Level[0]( ) -> B
	[Client]Game.DataSkill::set_Level[1]( System.Int32 ) -> a
	[Client]Game.DataSkill::get_SkillType[0]( ) -> b
	[Client]Game.DataSkill::set_SkillType[1]( System.Int32 ) -> B
	[Client]Game.DataSkill::get_Action[0]( ) -> C
	[Client]Game.DataSkill::set_Action[1]( System.String ) -> a
	[Client]Game.DataSkill::get_IsActionUpper[0]( ) -> c
	[Client]Game.DataSkill::set_IsActionUpper[1]( System.Int32 ) -> b
	[Client]Game.DataSkill::get_TargetAction[0]( ) -> D
	[Client]Game.DataSkill::set_TargetAction[1]( System.String ) -> B
	[Client]Game.DataSkill::get_IsTargetActionUpper[0]( ) -> d
	[Client]Game.DataSkill::set_IsTargetActionUpper[1]( System.Int32 ) -> C
	[Client]Game.DataSkill::get_PrepareTime[0]( ) -> E
	[Client]Game.DataSkill::set_PrepareTime[1]( System.Int32 ) -> c
	[Client]Game.DataSkill::get_CallInterval[0]( ) -> e
	[Client]Game.DataSkill::set_CallInterval[1]( System.Int32 ) -> D
	[Client]Game.DataSkill::get_IntonateAction[0]( ) -> F
	[Client]Game.DataSkill::set_IntonateAction[1]( System.String ) -> b
	[Client]Game.DataSkill::get_IsIntonateActionUpper[0]( ) -> f
	[Client]Game.DataSkill::set_IsIntonateActionUpper[1]( System.Int32 ) -> d
	[Client]Game.DataSkill::get_IntonateEffectMale[0]( ) -> G
	[Client]Game.DataSkill::set_IntonateEffectMale[1]( System.Int32 ) -> E
	[Client]Game.DataSkill::get_AttackEffectMale[0]( ) -> g
	[Client]Game.DataSkill::set_AttackEffectMale[1]( System.Int32 ) -> e
	[Client]Game.DataSkill::get_SkillEffectMale[0]( ) -> H
	[Client]Game.DataSkill::set_SkillEffectMale[1]( System.Int32 ) -> F
	[Client]Game.DataSkill::get_TargetEffectMale[0]( ) -> h
	[Client]Game.DataSkill::set_TargetEffectMale[1]( System.Int32 ) -> f
	[Client]Game.DataSkill::get_IntonateEffectFemale[0]( ) -> I
	[Client]Game.DataSkill::set_IntonateEffectFemale[1]( System.Int32 ) -> G
	[Client]Game.DataSkill::get_AttackEffectFemale[0]( ) -> i
	[Client]Game.DataSkill::set_AttackEffectFemale[1]( System.Int32 ) -> g
	[Client]Game.DataSkill::get_SkillEffectFemale[0]( ) -> J
	[Client]Game.DataSkill::set_SkillEffectFemale[1]( System.Int32 ) -> H
	[Client]Game.DataSkill::get_TargetEffectFemale[0]( ) -> j
	[Client]Game.DataSkill::set_TargetEffectFemale[1]( System.Int32 ) -> h
	[Client]Game.DataSkill::get_TargetActionRate[0]( ) -> K
	[Client]Game.DataSkill::set_TargetActionRate[1]( System.Int32 ) -> I
	[Client]Game.DataSkill::get_AutoAttack[0]( ) -> k
	[Client]Game.DataSkill::set_AutoAttack[1]( System.Int32 ) -> i
	[Client]Game.DataSkill::get_Range[0]( ) -> L
	[Client]Game.DataSkill::set_Range[1]( System.Single ) -> A
	[Client]Game.DataSkill::get_MaxRange[0]( ) -> l
	[Client]Game.DataSkill::set_MaxRange[1]( System.Single ) -> a
	[Client]Game.DataSkill::get_ForbidRangeCheck[0]( ) -> M
	[Client]Game.DataSkill::set_ForbidRangeCheck[1]( System.Int32 ) -> J
	[Client]Game.DataSkill::get_Area[0]( ) -> m
	[Client]Game.DataSkill::set_Area[1]( System.Int32 ) -> j
	[Client]Game.DataSkill::get_AreaTexture[0]( ) -> N
	[Client]Game.DataSkill::set_AreaTexture[1]( System.Int32 ) -> K
	[Client]Game.DataSkill::get_CDTime[0]( ) -> n
	[Client]Game.DataSkill::set_CDTime[1]( System.Int32 ) -> k
	[Client]Game.DataSkill::get_MoveSpeed[0]( ) -> O
	[Client]Game.DataSkill::set_MoveSpeed[1]( System.Single ) -> B
	[Client]Game.DataSkill::get_MoveEffectType[0]( ) -> o
	[Client]Game.DataSkill::set_MoveEffectType[1]( System.Int32 ) -> L
	[Client]Game.DataSkill::get_ButtonPosition[0]( ) -> P
	[Client]Game.DataSkill::set_ButtonPosition[1]( System.Int32 ) -> l
	[Client]Game.DataSkill::get_MinLevel[0]( ) -> p
	[Client]Game.DataSkill::set_MinLevel[1]( System.Int32 ) -> M
	[Client]Game.DataSkill::get_CostMoney[0]( ) -> Q
	[Client]Game.DataSkill::set_CostMoney[1]( System.Int32 ) -> m
	[Client]Game.DataSkill::get_CostSkillExp[0]( ) -> q
	[Client]Game.DataSkill::set_CostSkillExp[1]( System.Int64 ) -> A
	[Client]Game.DataSkill::get_SkillDesc[0]( ) -> R
	[Client]Game.DataSkill::set_SkillDesc[1]( System.String ) -> C
	[Client]Game.DataSkill::get_IconFile[0]( ) -> r
	[Client]Game.DataSkill::set_IconFile[1]( System.String ) -> c
	[Client]Game.DataSkill::get_CanNotMove[0]( ) -> S
	[Client]Game.DataSkill::set_CanNotMove[1]( System.Boolean ) -> A
	[Client]Game.DataSkill::get_CanNotMoveTime[0]( ) -> s
	[Client]Game.DataSkill::set_CanNotMoveTime[1]( System.Single ) -> b
	[Client]Game.DataSkill::get_IsNormal[0]( ) -> T
	[Client]Game.DataSkill::set_IsNormal[1]( System.Boolean ) -> a
	[Client]Game.DataSkill::get_PKSkill[0]( ) -> t
	[Client]Game.DataSkill::set_PKSkill[1]( System.Boolean ) -> B
	[Client]Game.DataSkill::get_Speed[0]( ) -> U
	[Client]Game.DataSkill::set_Speed[1]( System.Single ) -> C
	[Client]Game.DataSkill::get_CallBackSkillID[0]( ) -> u
	[Client]Game.DataSkill::set_CallBackSkillID[1]( System.Int32 ) -> N
	[Client]Game.DataSkill::get_AttackRate[0]( ) -> V
	[Client]Game.DataSkill::set_AttackRate[1]( System.Int32 ) -> n
	[Client]Game.DataSkill::get_TargetActionFreezeTime[0]( ) -> v
	[Client]Game.DataSkill::set_TargetActionFreezeTime[1]( System.Int32 ) -> O
	[Client]Game.DataSkill::get_ActionFreezeTime[0]( ) -> W
	[Client]Game.DataSkill::set_ActionFreezeTime[1]( System.Int32 ) -> o
	[Client]Game.DataSkill::get_CurveType[0]( ) -> w
	[Client]Game.DataSkill::set_CurveType[1]( System.Int32 ) -> P
	[Client]Game.DataSkill::get_NextSkillID[0]( ) -> X
	[Client]Game.DataSkill::set_NextSkillID[1]( System.Int32 ) -> p
	[Client]Game.DataSkill::get_SkillPriority[0]( ) -> x
	[Client]Game.DataSkill::set_SkillPriority[1]( System.Int32 ) -> Q

	[Client]Game.DataSkill::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataSkill::<SkillID>k__BackingField -> A
	System.String [Client]System.String Game.DataSkill::<SkillName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataSkill::<Level>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataSkill::<SkillType>k__BackingField -> B
	System.String [Client]System.String Game.DataSkill::<Action>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataSkill::<IsActionUpper>k__BackingField -> b
	System.String [Client]System.String Game.DataSkill::<TargetAction>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataSkill::<IsTargetActionUpper>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataSkill::<PrepareTime>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataSkill::<CallInterval>k__BackingField -> D
	System.String [Client]System.String Game.DataSkill::<IntonateAction>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataSkill::<IsIntonateActionUpper>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataSkill::<IntonateEffectMale>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataSkill::<AttackEffectMale>k__BackingField -> e
	System.Int32 [Client]System.Int32 Game.DataSkill::<SkillEffectMale>k__BackingField -> F
	System.Int32 [Client]System.Int32 Game.DataSkill::<TargetEffectMale>k__BackingField -> f
	System.Int32 [Client]System.Int32 Game.DataSkill::<IntonateEffectFemale>k__BackingField -> G
	System.Int32 [Client]System.Int32 Game.DataSkill::<AttackEffectFemale>k__BackingField -> g
	System.Int32 [Client]System.Int32 Game.DataSkill::<SkillEffectFemale>k__BackingField -> H
	System.Int32 [Client]System.Int32 Game.DataSkill::<TargetEffectFemale>k__BackingField -> h
	System.Int32 [Client]System.Int32 Game.DataSkill::<TargetActionRate>k__BackingField -> I
	System.Int32 [Client]System.Int32 Game.DataSkill::<AutoAttack>k__BackingField -> i
	System.Single [Client]System.Single Game.DataSkill::<Range>k__BackingField -> A
	System.Single [Client]System.Single Game.DataSkill::<MaxRange>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataSkill::<ForbidRangeCheck>k__BackingField -> J
	System.Int32 [Client]System.Int32 Game.DataSkill::<Area>k__BackingField -> j
	System.Int32 [Client]System.Int32 Game.DataSkill::<AreaTexture>k__BackingField -> K
	System.Int32 [Client]System.Int32 Game.DataSkill::<CDTime>k__BackingField -> k
	System.Single [Client]System.Single Game.DataSkill::<MoveSpeed>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataSkill::<MoveEffectType>k__BackingField -> L
	System.Int32 [Client]System.Int32 Game.DataSkill::<ButtonPosition>k__BackingField -> l
	System.Int32 [Client]System.Int32 Game.DataSkill::<MinLevel>k__BackingField -> M
	System.Int32 [Client]System.Int32 Game.DataSkill::<CostMoney>k__BackingField -> m
	System.Int64 [Client]System.Int64 Game.DataSkill::<CostSkillExp>k__BackingField -> A
	System.String [Client]System.String Game.DataSkill::<SkillDesc>k__BackingField -> C
	System.String [Client]System.String Game.DataSkill::<IconFile>k__BackingField -> c
	System.Boolean [Client]System.Boolean Game.DataSkill::<CanNotMove>k__BackingField -> A
	System.Single [Client]System.Single Game.DataSkill::<CanNotMoveTime>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.DataSkill::<IsNormal>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataSkill::<PKSkill>k__BackingField -> B
	System.Single [Client]System.Single Game.DataSkill::<Speed>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataSkill::<CallBackSkillID>k__BackingField -> N
	System.Int32 [Client]System.Int32 Game.DataSkill::<AttackRate>k__BackingField -> n
	System.Int32 [Client]System.Int32 Game.DataSkill::<TargetActionFreezeTime>k__BackingField -> O
	System.Int32 [Client]System.Int32 Game.DataSkill::<ActionFreezeTime>k__BackingField -> o
	System.Int32 [Client]System.Int32 Game.DataSkill::<CurveType>k__BackingField -> P
	System.Int32 [Client]System.Int32 Game.DataSkill::<NextSkillID>k__BackingField -> p
	System.Int32 [Client]System.Int32 Game.DataSkill::<SkillPriority>k__BackingField -> Q

	System.Int32 [Client]System.Int32 Game.DataSkill::SkillID -> dropped
	System.String [Client]System.String Game.DataSkill::SkillName -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::SkillType -> dropped
	System.String [Client]System.String Game.DataSkill::Action -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::IsActionUpper -> dropped
	System.String [Client]System.String Game.DataSkill::TargetAction -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::IsTargetActionUpper -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::PrepareTime -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::CallInterval -> dropped
	System.String [Client]System.String Game.DataSkill::IntonateAction -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::IsIntonateActionUpper -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::IntonateEffectMale -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::AttackEffectMale -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::SkillEffectMale -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::TargetEffectMale -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::IntonateEffectFemale -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::AttackEffectFemale -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::SkillEffectFemale -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::TargetEffectFemale -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::TargetActionRate -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::AutoAttack -> dropped
	System.Single [Client]System.Single Game.DataSkill::Range -> dropped
	System.Single [Client]System.Single Game.DataSkill::MaxRange -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::ForbidRangeCheck -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::Area -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::AreaTexture -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::CDTime -> dropped
	System.Single [Client]System.Single Game.DataSkill::MoveSpeed -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::MoveEffectType -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::ButtonPosition -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::MinLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::CostMoney -> dropped
	System.Int64 [Client]System.Int64 Game.DataSkill::CostSkillExp -> dropped
	System.String [Client]System.String Game.DataSkill::SkillDesc -> dropped
	System.String [Client]System.String Game.DataSkill::IconFile -> dropped
	System.Boolean [Client]System.Boolean Game.DataSkill::CanNotMove -> dropped
	System.Single [Client]System.Single Game.DataSkill::CanNotMoveTime -> dropped
	System.Boolean [Client]System.Boolean Game.DataSkill::IsNormal -> dropped
	System.Boolean [Client]System.Boolean Game.DataSkill::PKSkill -> dropped
	System.Single [Client]System.Single Game.DataSkill::Speed -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::CallBackSkillID -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::AttackRate -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::TargetActionFreezeTime -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::ActionFreezeTime -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::CurveType -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::NextSkillID -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkill::SkillPriority -> dropped
}

[Client]Game.DataSkillManager -> [Client]B.l
{
	[Client]Game.DataSkillManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSkillManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSkillManager::Clear[0]( ) -> A
	[Client]Game.DataSkillManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSkillManager::GetDataBySkillID[1]( System.Int32 ) -> A
	[Client]Game.DataSkillManager::GetDataListBySkillID[1]( System.Int32 ) -> a
	[Client]Game.DataSkillManager::GetDataBySkillName[1]( System.String ) -> A
	[Client]Game.DataSkillManager::GetDataListBySkillName[1]( System.String ) -> a
	[Client]Game.DataSkillManager::GetDataByLevel[1]( System.Int32 ) -> B
	[Client]Game.DataSkillManager::GetDataListByLevel[1]( System.Int32 ) -> b
	[Client]Game.DataSkillManager::GetDataBySkillType[1]( System.Int32 ) -> C
	[Client]Game.DataSkillManager::GetDataListBySkillType[1]( System.Int32 ) -> c
	[Client]Game.DataSkillManager::GetDataByAction[1]( System.String ) -> B
	[Client]Game.DataSkillManager::GetDataListByAction[1]( System.String ) -> b
	[Client]Game.DataSkillManager::GetDataByIsActionUpper[1]( System.Int32 ) -> D
	[Client]Game.DataSkillManager::GetDataListByIsActionUpper[1]( System.Int32 ) -> d
	[Client]Game.DataSkillManager::GetDataByTargetAction[1]( System.String ) -> C
	[Client]Game.DataSkillManager::GetDataListByTargetAction[1]( System.String ) -> c
	[Client]Game.DataSkillManager::GetDataByIsTargetActionUpper[1]( System.Int32 ) -> E
	[Client]Game.DataSkillManager::GetDataListByIsTargetActionUpper[1]( System.Int32 ) -> e
	[Client]Game.DataSkillManager::GetDataByPrepareTime[1]( System.Int32 ) -> F
	[Client]Game.DataSkillManager::GetDataListByPrepareTime[1]( System.Int32 ) -> f
	[Client]Game.DataSkillManager::GetDataByCallInterval[1]( System.Int32 ) -> G
	[Client]Game.DataSkillManager::GetDataListByCallInterval[1]( System.Int32 ) -> g
	[Client]Game.DataSkillManager::GetDataByIntonateAction[1]( System.String ) -> D
	[Client]Game.DataSkillManager::GetDataListByIntonateAction[1]( System.String ) -> d
	[Client]Game.DataSkillManager::GetDataByIsIntonateActionUpper[1]( System.Int32 ) -> H
	[Client]Game.DataSkillManager::GetDataListByIsIntonateActionUpper[1]( System.Int32 ) -> h
	[Client]Game.DataSkillManager::GetDataByIntonateEffectMale[1]( System.Int32 ) -> I
	[Client]Game.DataSkillManager::GetDataListByIntonateEffectMale[1]( System.Int32 ) -> i
	[Client]Game.DataSkillManager::GetDataByAttackEffectMale[1]( System.Int32 ) -> J
	[Client]Game.DataSkillManager::GetDataListByAttackEffectMale[1]( System.Int32 ) -> j
	[Client]Game.DataSkillManager::GetDataBySkillEffectMale[1]( System.Int32 ) -> K
	[Client]Game.DataSkillManager::GetDataListBySkillEffectMale[1]( System.Int32 ) -> k
	[Client]Game.DataSkillManager::GetDataByTargetEffectMale[1]( System.Int32 ) -> L
	[Client]Game.DataSkillManager::GetDataListByTargetEffectMale[1]( System.Int32 ) -> l
	[Client]Game.DataSkillManager::GetDataByIntonateEffectFemale[1]( System.Int32 ) -> M
	[Client]Game.DataSkillManager::GetDataListByIntonateEffectFemale[1]( System.Int32 ) -> m
	[Client]Game.DataSkillManager::GetDataByAttackEffectFemale[1]( System.Int32 ) -> N
	[Client]Game.DataSkillManager::GetDataListByAttackEffectFemale[1]( System.Int32 ) -> n
	[Client]Game.DataSkillManager::GetDataBySkillEffectFemale[1]( System.Int32 ) -> O
	[Client]Game.DataSkillManager::GetDataListBySkillEffectFemale[1]( System.Int32 ) -> o
	[Client]Game.DataSkillManager::GetDataByTargetEffectFemale[1]( System.Int32 ) -> P
	[Client]Game.DataSkillManager::GetDataListByTargetEffectFemale[1]( System.Int32 ) -> p
	[Client]Game.DataSkillManager::GetDataByTargetActionRate[1]( System.Int32 ) -> Q
	[Client]Game.DataSkillManager::GetDataListByTargetActionRate[1]( System.Int32 ) -> q
	[Client]Game.DataSkillManager::GetDataByAutoAttack[1]( System.Int32 ) -> R
	[Client]Game.DataSkillManager::GetDataListByAutoAttack[1]( System.Int32 ) -> r
	[Client]Game.DataSkillManager::GetDataByRange[1]( System.Single ) -> A
	[Client]Game.DataSkillManager::GetDataListByRange[1]( System.Single ) -> a
	[Client]Game.DataSkillManager::GetDataByMaxRange[1]( System.Single ) -> B
	[Client]Game.DataSkillManager::GetDataListByMaxRange[1]( System.Single ) -> b
	[Client]Game.DataSkillManager::GetDataByForbidRangeCheck[1]( System.Int32 ) -> S
	[Client]Game.DataSkillManager::GetDataListByForbidRangeCheck[1]( System.Int32 ) -> s
	[Client]Game.DataSkillManager::GetDataByArea[1]( System.Int32 ) -> T
	[Client]Game.DataSkillManager::GetDataListByArea[1]( System.Int32 ) -> t
	[Client]Game.DataSkillManager::GetDataByAreaTexture[1]( System.Int32 ) -> U
	[Client]Game.DataSkillManager::GetDataListByAreaTexture[1]( System.Int32 ) -> u
	[Client]Game.DataSkillManager::GetDataByCDTime[1]( System.Int32 ) -> V
	[Client]Game.DataSkillManager::GetDataListByCDTime[1]( System.Int32 ) -> v
	[Client]Game.DataSkillManager::GetDataByMoveSpeed[1]( System.Single ) -> C
	[Client]Game.DataSkillManager::GetDataListByMoveSpeed[1]( System.Single ) -> c
	[Client]Game.DataSkillManager::GetDataByMoveEffectType[1]( System.Int32 ) -> W
	[Client]Game.DataSkillManager::GetDataListByMoveEffectType[1]( System.Int32 ) -> w
	[Client]Game.DataSkillManager::GetDataByButtonPosition[1]( System.Int32 ) -> X
	[Client]Game.DataSkillManager::GetDataListByButtonPosition[1]( System.Int32 ) -> x
	[Client]Game.DataSkillManager::GetDataByMinLevel[1]( System.Int32 ) -> Y
	[Client]Game.DataSkillManager::GetDataListByMinLevel[1]( System.Int32 ) -> y
	[Client]Game.DataSkillManager::GetDataByCostMoney[1]( System.Int32 ) -> Z
	[Client]Game.DataSkillManager::GetDataListByCostMoney[1]( System.Int32 ) -> z
	[Client]Game.DataSkillManager::GetDataByCostSkillExp[1]( System.Int64 ) -> A
	[Client]Game.DataSkillManager::GetDataListByCostSkillExp[1]( System.Int64 ) -> a
	[Client]Game.DataSkillManager::GetDataBySkillDesc[1]( System.String ) -> E
	[Client]Game.DataSkillManager::GetDataListBySkillDesc[1]( System.String ) -> e
	[Client]Game.DataSkillManager::GetDataByIconFile[1]( System.String ) -> F
	[Client]Game.DataSkillManager::GetDataListByIconFile[1]( System.String ) -> f
	[Client]Game.DataSkillManager::GetDataByCanNotMove[1]( System.Boolean ) -> A
	[Client]Game.DataSkillManager::GetDataListByCanNotMove[1]( System.Boolean ) -> a
	[Client]Game.DataSkillManager::GetDataByCanNotMoveTime[1]( System.Single ) -> D
	[Client]Game.DataSkillManager::GetDataListByCanNotMoveTime[1]( System.Single ) -> d
	[Client]Game.DataSkillManager::GetDataByIsNormal[1]( System.Boolean ) -> B
	[Client]Game.DataSkillManager::GetDataListByIsNormal[1]( System.Boolean ) -> b
	[Client]Game.DataSkillManager::GetDataByPKSkill[1]( System.Boolean ) -> C
	[Client]Game.DataSkillManager::GetDataListByPKSkill[1]( System.Boolean ) -> c
	[Client]Game.DataSkillManager::GetDataBySpeed[1]( System.Single ) -> E
	[Client]Game.DataSkillManager::GetDataListBySpeed[1]( System.Single ) -> e
	[Client]Game.DataSkillManager::GetDataByCallBackSkillID[1]( System.Int32 ) -> aA
	[Client]Game.DataSkillManager::GetDataListByCallBackSkillID[1]( System.Int32 ) -> aa
	[Client]Game.DataSkillManager::GetDataByAttackRate[1]( System.Int32 ) -> aB
	[Client]Game.DataSkillManager::GetDataListByAttackRate[1]( System.Int32 ) -> ab
	[Client]Game.DataSkillManager::GetDataByTargetActionFreezeTime[1]( System.Int32 ) -> aC
	[Client]Game.DataSkillManager::GetDataListByTargetActionFreezeTime[1]( System.Int32 ) -> ac
	[Client]Game.DataSkillManager::GetDataByActionFreezeTime[1]( System.Int32 ) -> aD
	[Client]Game.DataSkillManager::GetDataListByActionFreezeTime[1]( System.Int32 ) -> ad
	[Client]Game.DataSkillManager::GetDataByCurveType[1]( System.Int32 ) -> aE
	[Client]Game.DataSkillManager::GetDataListByCurveType[1]( System.Int32 ) -> ae
	[Client]Game.DataSkillManager::GetDataByNextSkillID[1]( System.Int32 ) -> aF
	[Client]Game.DataSkillManager::GetDataListByNextSkillID[1]( System.Int32 ) -> af
	[Client]Game.DataSkillManager::GetDataBySkillPriority[1]( System.Int32 ) -> aG
	[Client]Game.DataSkillManager::GetDataListBySkillPriority[1]( System.Int32 ) -> ag
	[Client]Game.DataSkillManager::get_Instance[0]( ) -> a
	[Client]Game.DataSkillManager::get_DataList[0]( ) -> B
	[Client]Game.DataSkillManager::get_Count[0]( ) -> b

	[Client]Game.DataSkillManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataSkillManager::.ctor[0]( ) skipped:  special name

	Game.DataSkillManager [Client]Game.DataSkillManager Game.DataSkillManager::instance -> A
	System.Collections.Generic.List`1<Game.DataSkill> [Client]System.Collections.Generic.List`1<Game.DataSkill> Game.DataSkillManager::dataList -> A

	Game.DataSkillManager [Client]Game.DataSkillManager Game.DataSkillManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataSkill> [Client]System.Collections.Generic.List`1<Game.DataSkill> Game.DataSkillManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkillManager::Count -> dropped
}

[Client]Game.DataShopCommodity -> [Client]B.M
{
	[Client]Game.DataShopCommodity::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataShopCommodity::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataShopCommodity::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataShopCommodity::get_CommodityID[0]( ) -> A
	[Client]Game.DataShopCommodity::set_CommodityID[1]( System.Int32 ) -> A
	[Client]Game.DataShopCommodity::get_BaseType[0]( ) -> a
	[Client]Game.DataShopCommodity::set_BaseType[1]( System.Int32 ) -> a
	[Client]Game.DataShopCommodity::get_SubType[0]( ) -> B
	[Client]Game.DataShopCommodity::set_SubType[1]( System.Int32 ) -> B
	[Client]Game.DataShopCommodity::get_Price[0]( ) -> b
	[Client]Game.DataShopCommodity::set_Price[1]( System.Int32 ) -> b
	[Client]Game.DataShopCommodity::get_Rebate[0]( ) -> C
	[Client]Game.DataShopCommodity::set_Rebate[1]( System.Int32 ) -> C
	[Client]Game.DataShopCommodity::get_ItemID[0]( ) -> c
	[Client]Game.DataShopCommodity::set_ItemID[1]( System.Int32 ) -> c
	[Client]Game.DataShopCommodity::get_BandID[0]( ) -> D
	[Client]Game.DataShopCommodity::set_BandID[1]( System.Int32 ) -> D
	[Client]Game.DataShopCommodity::get_BandMoney[0]( ) -> d
	[Client]Game.DataShopCommodity::set_BandMoney[1]( System.Boolean ) -> A
	[Client]Game.DataShopCommodity::get_IsHot[0]( ) -> E
	[Client]Game.DataShopCommodity::set_IsHot[1]( System.Boolean ) -> a

	[Client]Game.DataShopCommodity::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataShopCommodity::<CommodityID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::<BaseType>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::<SubType>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::<Price>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::<Rebate>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::<ItemID>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::<BandID>k__BackingField -> D
	System.Boolean [Client]System.Boolean Game.DataShopCommodity::<BandMoney>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DataShopCommodity::<IsHot>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataShopCommodity::CommodityID -> dropped
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::BaseType -> dropped
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::SubType -> dropped
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::Price -> dropped
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::Rebate -> dropped
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::ItemID -> dropped
	System.Int32 [Client]System.Int32 Game.DataShopCommodity::BandID -> dropped
	System.Boolean [Client]System.Boolean Game.DataShopCommodity::BandMoney -> dropped
	System.Boolean [Client]System.Boolean Game.DataShopCommodity::IsHot -> dropped
}

[Client]Game.DataShopCommodityManager -> [Client]B.m
{
	[Client]Game.DataShopCommodityManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataShopCommodityManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataShopCommodityManager::Clear[0]( ) -> A
	[Client]Game.DataShopCommodityManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataShopCommodityManager::GetDataByCommodityID[1]( System.Int32 ) -> A
	[Client]Game.DataShopCommodityManager::GetDataListByCommodityID[1]( System.Int32 ) -> a
	[Client]Game.DataShopCommodityManager::GetDataByBaseType[1]( System.Int32 ) -> B
	[Client]Game.DataShopCommodityManager::GetDataListByBaseType[1]( System.Int32 ) -> b
	[Client]Game.DataShopCommodityManager::GetDataBySubType[1]( System.Int32 ) -> C
	[Client]Game.DataShopCommodityManager::GetDataListBySubType[1]( System.Int32 ) -> c
	[Client]Game.DataShopCommodityManager::GetDataByPrice[1]( System.Int32 ) -> D
	[Client]Game.DataShopCommodityManager::GetDataListByPrice[1]( System.Int32 ) -> d
	[Client]Game.DataShopCommodityManager::GetDataByRebate[1]( System.Int32 ) -> E
	[Client]Game.DataShopCommodityManager::GetDataListByRebate[1]( System.Int32 ) -> e
	[Client]Game.DataShopCommodityManager::GetDataByItemID[1]( System.Int32 ) -> F
	[Client]Game.DataShopCommodityManager::GetDataListByItemID[1]( System.Int32 ) -> f
	[Client]Game.DataShopCommodityManager::GetDataByBandID[1]( System.Int32 ) -> G
	[Client]Game.DataShopCommodityManager::GetDataListByBandID[1]( System.Int32 ) -> g
	[Client]Game.DataShopCommodityManager::GetDataByBandMoney[1]( System.Boolean ) -> A
	[Client]Game.DataShopCommodityManager::GetDataListByBandMoney[1]( System.Boolean ) -> a
	[Client]Game.DataShopCommodityManager::GetDataByIsHot[1]( System.Boolean ) -> B
	[Client]Game.DataShopCommodityManager::GetDataListByIsHot[1]( System.Boolean ) -> b
	[Client]Game.DataShopCommodityManager::get_Instance[0]( ) -> a
	[Client]Game.DataShopCommodityManager::get_DataList[0]( ) -> B
	[Client]Game.DataShopCommodityManager::get_Count[0]( ) -> b

	[Client]Game.DataShopCommodityManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataShopCommodityManager::.ctor[0]( ) skipped:  special name

	Game.DataShopCommodityManager [Client]Game.DataShopCommodityManager Game.DataShopCommodityManager::instance -> A
	System.Collections.Generic.List`1<Game.DataShopCommodity> [Client]System.Collections.Generic.List`1<Game.DataShopCommodity> Game.DataShopCommodityManager::dataList -> A

	Game.DataShopCommodityManager [Client]Game.DataShopCommodityManager Game.DataShopCommodityManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataShopCommodity> [Client]System.Collections.Generic.List`1<Game.DataShopCommodity> Game.DataShopCommodityManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataShopCommodityManager::Count -> dropped
}

[Client]Game.DataRecharge -> [Client]B.N
{
	[Client]Game.DataRecharge::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataRecharge::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataRecharge::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataRecharge::get_RechargeID[0]( ) -> A
	[Client]Game.DataRecharge::set_RechargeID[1]( System.Int32 ) -> A
	[Client]Game.DataRecharge::get_RechargeMoney[0]( ) -> a
	[Client]Game.DataRecharge::set_RechargeMoney[1]( System.Int32 ) -> a
	[Client]Game.DataRecharge::get_RechargeGold[0]( ) -> B
	[Client]Game.DataRecharge::set_RechargeGold[1]( System.Int32 ) -> B
	[Client]Game.DataRecharge::get_ProductID[0]( ) -> b
	[Client]Game.DataRecharge::set_ProductID[1]( System.String ) -> A
	[Client]Game.DataRecharge::get_ProductIDHD[0]( ) -> C
	[Client]Game.DataRecharge::set_ProductIDHD[1]( System.String ) -> a

	[Client]Game.DataRecharge::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataRecharge::<RechargeID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataRecharge::<RechargeMoney>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataRecharge::<RechargeGold>k__BackingField -> B
	System.String [Client]System.String Game.DataRecharge::<ProductID>k__BackingField -> A
	System.String [Client]System.String Game.DataRecharge::<ProductIDHD>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataRecharge::RechargeID -> dropped
	System.Int32 [Client]System.Int32 Game.DataRecharge::RechargeMoney -> dropped
	System.Int32 [Client]System.Int32 Game.DataRecharge::RechargeGold -> dropped
	System.String [Client]System.String Game.DataRecharge::ProductID -> dropped
	System.String [Client]System.String Game.DataRecharge::ProductIDHD -> dropped
}

[Client]Game.DataRechargeManager -> [Client]B.n
{
	[Client]Game.DataRechargeManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataRechargeManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataRechargeManager::Clear[0]( ) -> A
	[Client]Game.DataRechargeManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataRechargeManager::GetDataByRechargeID[1]( System.Int32 ) -> A
	[Client]Game.DataRechargeManager::GetDataListByRechargeID[1]( System.Int32 ) -> a
	[Client]Game.DataRechargeManager::GetDataByRechargeMoney[1]( System.Int32 ) -> B
	[Client]Game.DataRechargeManager::GetDataListByRechargeMoney[1]( System.Int32 ) -> b
	[Client]Game.DataRechargeManager::GetDataByRechargeGold[1]( System.Int32 ) -> C
	[Client]Game.DataRechargeManager::GetDataListByRechargeGold[1]( System.Int32 ) -> c
	[Client]Game.DataRechargeManager::GetDataByProductID[1]( System.String ) -> A
	[Client]Game.DataRechargeManager::GetDataListByProductID[1]( System.String ) -> a
	[Client]Game.DataRechargeManager::GetDataByProductIDHD[1]( System.String ) -> B
	[Client]Game.DataRechargeManager::GetDataListByProductIDHD[1]( System.String ) -> b
	[Client]Game.DataRechargeManager::get_Instance[0]( ) -> a
	[Client]Game.DataRechargeManager::get_DataList[0]( ) -> B
	[Client]Game.DataRechargeManager::get_Count[0]( ) -> b

	[Client]Game.DataRechargeManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataRechargeManager::.ctor[0]( ) skipped:  special name

	Game.DataRechargeManager [Client]Game.DataRechargeManager Game.DataRechargeManager::instance -> A
	System.Collections.Generic.List`1<Game.DataRecharge> [Client]System.Collections.Generic.List`1<Game.DataRecharge> Game.DataRechargeManager::dataList -> A

	Game.DataRechargeManager [Client]Game.DataRechargeManager Game.DataRechargeManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataRecharge> [Client]System.Collections.Generic.List`1<Game.DataRecharge> Game.DataRechargeManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataRechargeManager::Count -> dropped
}

[Client]Game.DataMonster -> [Client]B.O
{
	[Client]Game.DataMonster::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMonster::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMonster::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMonster::get_MonsterID[0]( ) -> A
	[Client]Game.DataMonster::set_MonsterID[1]( System.Int32 ) -> A
	[Client]Game.DataMonster::get_MonsterName[0]( ) -> a
	[Client]Game.DataMonster::set_MonsterName[1]( System.String ) -> A
	[Client]Game.DataMonster::get_MonsterLv[0]( ) -> B
	[Client]Game.DataMonster::set_MonsterLv[1]( System.Int32 ) -> a
	[Client]Game.DataMonster::get_ModelPath[0]( ) -> b
	[Client]Game.DataMonster::set_ModelPath[1]( System.String ) -> a
	[Client]Game.DataMonster::get_IsHumanoid[0]( ) -> C
	[Client]Game.DataMonster::set_IsHumanoid[1]( System.Boolean ) -> A
	[Client]Game.DataMonster::get_HumanoidId[0]( ) -> c
	[Client]Game.DataMonster::set_HumanoidId[1]( System.Int32 ) -> B
	[Client]Game.DataMonster::get_TargetHead[0]( ) -> D
	[Client]Game.DataMonster::set_TargetHead[1]( System.String ) -> B
	[Client]Game.DataMonster::get_MapId[0]( ) -> d
	[Client]Game.DataMonster::set_MapId[1]( System.Int32 ) -> b
	[Client]Game.DataMonster::get_MapX[0]( ) -> E
	[Client]Game.DataMonster::set_MapX[1]( System.Single ) -> A
	[Client]Game.DataMonster::get_MapY[0]( ) -> e
	[Client]Game.DataMonster::set_MapY[1]( System.Single ) -> a
	[Client]Game.DataMonster::get_Dir[0]( ) -> F
	[Client]Game.DataMonster::set_Dir[1]( System.Int32 ) -> C
	[Client]Game.DataMonster::get_IsDir[0]( ) -> f
	[Client]Game.DataMonster::set_IsDir[1]( System.Boolean ) -> a
	[Client]Game.DataMonster::get_DeadSound[0]( ) -> G
	[Client]Game.DataMonster::set_DeadSound[1]( System.String ) -> b
	[Client]Game.DataMonster::get_HitSound[0]( ) -> g
	[Client]Game.DataMonster::set_HitSound[1]( System.String ) -> C
	[Client]Game.DataMonster::get_AttackSound[0]( ) -> H
	[Client]Game.DataMonster::set_AttackSound[1]( System.String ) -> c
	[Client]Game.DataMonster::get_MonsterTitle[0]( ) -> h
	[Client]Game.DataMonster::set_MonsterTitle[1]( System.String ) -> D
	[Client]Game.DataMonster::get_MonsterType[0]( ) -> I
	[Client]Game.DataMonster::set_MonsterType[1]( System.String ) -> d
	[Client]Game.DataMonster::get_BindAutoSkill[0]( ) -> i
	[Client]Game.DataMonster::set_BindAutoSkill[1]( System.Int32 ) -> c
	[Client]Game.DataMonster::get_TurningType[0]( ) -> J
	[Client]Game.DataMonster::set_TurningType[1]( System.Int32 ) -> D
	[Client]Game.DataMonster::get_IsFixed[0]( ) -> j
	[Client]Game.DataMonster::set_IsFixed[1]( System.Boolean ) -> B
	[Client]Game.DataMonster::get_BodyModify[0]( ) -> K
	[Client]Game.DataMonster::set_BodyModify[1]( System.Single ) -> B
	[Client]Game.DataMonster::get_HideName[0]( ) -> k
	[Client]Game.DataMonster::set_HideName[1]( System.Boolean ) -> b
	[Client]Game.DataMonster::get_IfInitiative[0]( ) -> L
	[Client]Game.DataMonster::set_IfInitiative[1]( System.Boolean ) -> C
	[Client]Game.DataMonster::get_RunStep[0]( ) -> l
	[Client]Game.DataMonster::set_RunStep[1]( System.Single ) -> b
	[Client]Game.DataMonster::get_MoveSpeed[0]( ) -> M
	[Client]Game.DataMonster::set_MoveSpeed[1]( System.Single ) -> C
	[Client]Game.DataMonster::get_IdleMoveSpeed[0]( ) -> m
	[Client]Game.DataMonster::set_IdleMoveSpeed[1]( System.Single ) -> c
	[Client]Game.DataMonster::get_WalkStep[0]( ) -> N
	[Client]Game.DataMonster::set_WalkStep[1]( System.Single ) -> D
	[Client]Game.DataMonster::get_EyeShot[0]( ) -> n
	[Client]Game.DataMonster::set_EyeShot[1]( System.Single ) -> d
	[Client]Game.DataMonster::get_FightShot[0]( ) -> O
	[Client]Game.DataMonster::set_FightShot[1]( System.Single ) -> E
	[Client]Game.DataMonster::get_ChaseTime[0]( ) -> o
	[Client]Game.DataMonster::set_ChaseTime[1]( System.Single ) -> e
	[Client]Game.DataMonster::get_EffectModify[0]( ) -> P
	[Client]Game.DataMonster::set_EffectModify[1]( System.Single ) -> F
	[Client]Game.DataMonster::get_ResistHurt[0]( ) -> p
	[Client]Game.DataMonster::set_ResistHurt[1]( System.Single ) -> f
	[Client]Game.DataMonster::get_ShowInfo[0]( ) -> Q
	[Client]Game.DataMonster::set_ShowInfo[1]( System.Boolean ) -> c
	[Client]Game.DataMonster::get_PhyAtk[0]( ) -> q
	[Client]Game.DataMonster::set_PhyAtk[1]( System.Int32 ) -> d
	[Client]Game.DataMonster::get_PhyDef[0]( ) -> R
	[Client]Game.DataMonster::set_PhyDef[1]( System.Int32 ) -> E
	[Client]Game.DataMonster::get_MagicAtk[0]( ) -> r
	[Client]Game.DataMonster::set_MagicAtk[1]( System.Int32 ) -> e
	[Client]Game.DataMonster::get_MagicDef[0]( ) -> S
	[Client]Game.DataMonster::set_MagicDef[1]( System.Int32 ) -> F
	[Client]Game.DataMonster::get_MaxHP[0]( ) -> s
	[Client]Game.DataMonster::set_MaxHP[1]( System.Int32 ) -> f
	[Client]Game.DataMonster::get_Hit[0]( ) -> T
	[Client]Game.DataMonster::set_Hit[1]( System.Int32 ) -> G
	[Client]Game.DataMonster::get_Flee[0]( ) -> t
	[Client]Game.DataMonster::set_Flee[1]( System.Int32 ) -> g
	[Client]Game.DataMonster::get_Critical[0]( ) -> U
	[Client]Game.DataMonster::set_Critical[1]( System.Int32 ) -> H
	[Client]Game.DataMonster::get_UseSkill1[0]( ) -> u
	[Client]Game.DataMonster::set_UseSkill1[1]( System.Int32 ) -> h
	[Client]Game.DataMonster::get_UseSkill2[0]( ) -> V
	[Client]Game.DataMonster::set_UseSkill2[1]( System.Int32 ) -> I
	[Client]Game.DataMonster::get_UseSkill3[0]( ) -> v
	[Client]Game.DataMonster::set_UseSkill3[1]( System.Int32 ) -> i
	[Client]Game.DataMonster::get_Skill1Lv[0]( ) -> W
	[Client]Game.DataMonster::set_Skill1Lv[1]( System.Int32 ) -> J
	[Client]Game.DataMonster::get_Skill2Lv[0]( ) -> w
	[Client]Game.DataMonster::set_Skill2Lv[1]( System.Int32 ) -> j
	[Client]Game.DataMonster::get_Skill3Lv[0]( ) -> X
	[Client]Game.DataMonster::set_Skill3Lv[1]( System.Int32 ) -> K
	[Client]Game.DataMonster::get_ChanceOfSkill1[0]( ) -> x
	[Client]Game.DataMonster::set_ChanceOfSkill1[1]( System.Int32 ) -> k
	[Client]Game.DataMonster::get_ChanceOfSkill2[0]( ) -> Y
	[Client]Game.DataMonster::set_ChanceOfSkill2[1]( System.Int32 ) -> L
	[Client]Game.DataMonster::get_ChanceOfSkill3[0]( ) -> y
	[Client]Game.DataMonster::set_ChanceOfSkill3[1]( System.Int32 ) -> l
	[Client]Game.DataMonster::get_ResistTime[0]( ) -> Z
	[Client]Game.DataMonster::set_ResistTime[1]( System.Int32 ) -> M
	[Client]Game.DataMonster::get_BornAnim[0]( ) -> z
	[Client]Game.DataMonster::set_BornAnim[1]( System.String ) -> E
	[Client]Game.DataMonster::get_BornTime[0]( ) -> aA
	[Client]Game.DataMonster::set_BornTime[1]( System.Int32 ) -> m
	[Client]Game.DataMonster::get_DisappearTime[0]( ) -> aa
	[Client]Game.DataMonster::set_DisappearTime[1]( System.Int32 ) -> N
	[Client]Game.DataMonster::get_Mass[0]( ) -> aB
	[Client]Game.DataMonster::set_Mass[1]( System.Int32 ) -> n
	[Client]Game.DataMonster::get_TimePreCastSkill[0]( ) -> ab
	[Client]Game.DataMonster::set_TimePreCastSkill[1]( System.Int32 ) -> O

	[Client]Game.DataMonster::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataMonster::<MonsterID>k__BackingField -> A
	System.String [Client]System.String Game.DataMonster::<MonsterName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataMonster::<MonsterLv>k__BackingField -> a
	System.String [Client]System.String Game.DataMonster::<ModelPath>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataMonster::<IsHumanoid>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataMonster::<HumanoidId>k__BackingField -> B
	System.String [Client]System.String Game.DataMonster::<TargetHead>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataMonster::<MapId>k__BackingField -> b
	System.Single [Client]System.Single Game.DataMonster::<MapX>k__BackingField -> A
	System.Single [Client]System.Single Game.DataMonster::<MapY>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataMonster::<Dir>k__BackingField -> C
	System.Boolean [Client]System.Boolean Game.DataMonster::<IsDir>k__BackingField -> a
	System.String [Client]System.String Game.DataMonster::<DeadSound>k__BackingField -> b
	System.String [Client]System.String Game.DataMonster::<HitSound>k__BackingField -> C
	System.String [Client]System.String Game.DataMonster::<AttackSound>k__BackingField -> c
	System.String [Client]System.String Game.DataMonster::<MonsterTitle>k__BackingField -> D
	System.String [Client]System.String Game.DataMonster::<MonsterType>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataMonster::<BindAutoSkill>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataMonster::<TurningType>k__BackingField -> D
	System.Boolean [Client]System.Boolean Game.DataMonster::<IsFixed>k__BackingField -> B
	System.Single [Client]System.Single Game.DataMonster::<BodyModify>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.DataMonster::<HideName>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.DataMonster::<IfInitiative>k__BackingField -> C
	System.Single [Client]System.Single Game.DataMonster::<RunStep>k__BackingField -> b
	System.Single [Client]System.Single Game.DataMonster::<MoveSpeed>k__BackingField -> C
	System.Single [Client]System.Single Game.DataMonster::<IdleMoveSpeed>k__BackingField -> c
	System.Single [Client]System.Single Game.DataMonster::<WalkStep>k__BackingField -> D
	System.Single [Client]System.Single Game.DataMonster::<EyeShot>k__BackingField -> d
	System.Single [Client]System.Single Game.DataMonster::<FightShot>k__BackingField -> E
	System.Single [Client]System.Single Game.DataMonster::<ChaseTime>k__BackingField -> e
	System.Single [Client]System.Single Game.DataMonster::<EffectModify>k__BackingField -> F
	System.Single [Client]System.Single Game.DataMonster::<ResistHurt>k__BackingField -> f
	System.Boolean [Client]System.Boolean Game.DataMonster::<ShowInfo>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataMonster::<PhyAtk>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataMonster::<PhyDef>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataMonster::<MagicAtk>k__BackingField -> e
	System.Int32 [Client]System.Int32 Game.DataMonster::<MagicDef>k__BackingField -> F
	System.Int32 [Client]System.Int32 Game.DataMonster::<MaxHP>k__BackingField -> f
	System.Int32 [Client]System.Int32 Game.DataMonster::<Hit>k__BackingField -> G
	System.Int32 [Client]System.Int32 Game.DataMonster::<Flee>k__BackingField -> g
	System.Int32 [Client]System.Int32 Game.DataMonster::<Critical>k__BackingField -> H
	System.Int32 [Client]System.Int32 Game.DataMonster::<UseSkill1>k__BackingField -> h
	System.Int32 [Client]System.Int32 Game.DataMonster::<UseSkill2>k__BackingField -> I
	System.Int32 [Client]System.Int32 Game.DataMonster::<UseSkill3>k__BackingField -> i
	System.Int32 [Client]System.Int32 Game.DataMonster::<Skill1Lv>k__BackingField -> J
	System.Int32 [Client]System.Int32 Game.DataMonster::<Skill2Lv>k__BackingField -> j
	System.Int32 [Client]System.Int32 Game.DataMonster::<Skill3Lv>k__BackingField -> K
	System.Int32 [Client]System.Int32 Game.DataMonster::<ChanceOfSkill1>k__BackingField -> k
	System.Int32 [Client]System.Int32 Game.DataMonster::<ChanceOfSkill2>k__BackingField -> L
	System.Int32 [Client]System.Int32 Game.DataMonster::<ChanceOfSkill3>k__BackingField -> l
	System.Int32 [Client]System.Int32 Game.DataMonster::<ResistTime>k__BackingField -> M
	System.String [Client]System.String Game.DataMonster::<BornAnim>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataMonster::<BornTime>k__BackingField -> m
	System.Int32 [Client]System.Int32 Game.DataMonster::<DisappearTime>k__BackingField -> N
	System.Int32 [Client]System.Int32 Game.DataMonster::<Mass>k__BackingField -> n
	System.Int32 [Client]System.Int32 Game.DataMonster::<TimePreCastSkill>k__BackingField -> O

	System.Int32 [Client]System.Int32 Game.DataMonster::MonsterID -> dropped
	System.String [Client]System.String Game.DataMonster::MonsterName -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::MonsterLv -> dropped
	System.String [Client]System.String Game.DataMonster::ModelPath -> dropped
	System.Boolean [Client]System.Boolean Game.DataMonster::IsHumanoid -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::HumanoidId -> dropped
	System.String [Client]System.String Game.DataMonster::TargetHead -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::MapId -> dropped
	System.Single [Client]System.Single Game.DataMonster::MapX -> dropped
	System.Single [Client]System.Single Game.DataMonster::MapY -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::Dir -> dropped
	System.Boolean [Client]System.Boolean Game.DataMonster::IsDir -> dropped
	System.String [Client]System.String Game.DataMonster::DeadSound -> dropped
	System.String [Client]System.String Game.DataMonster::HitSound -> dropped
	System.String [Client]System.String Game.DataMonster::AttackSound -> dropped
	System.String [Client]System.String Game.DataMonster::MonsterTitle -> dropped
	System.String [Client]System.String Game.DataMonster::MonsterType -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::BindAutoSkill -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::TurningType -> dropped
	System.Boolean [Client]System.Boolean Game.DataMonster::IsFixed -> dropped
	System.Single [Client]System.Single Game.DataMonster::BodyModify -> dropped
	System.Boolean [Client]System.Boolean Game.DataMonster::HideName -> dropped
	System.Boolean [Client]System.Boolean Game.DataMonster::IfInitiative -> dropped
	System.Single [Client]System.Single Game.DataMonster::RunStep -> dropped
	System.Single [Client]System.Single Game.DataMonster::MoveSpeed -> dropped
	System.Single [Client]System.Single Game.DataMonster::IdleMoveSpeed -> dropped
	System.Single [Client]System.Single Game.DataMonster::WalkStep -> dropped
	System.Single [Client]System.Single Game.DataMonster::EyeShot -> dropped
	System.Single [Client]System.Single Game.DataMonster::FightShot -> dropped
	System.Single [Client]System.Single Game.DataMonster::ChaseTime -> dropped
	System.Single [Client]System.Single Game.DataMonster::EffectModify -> dropped
	System.Single [Client]System.Single Game.DataMonster::ResistHurt -> dropped
	System.Boolean [Client]System.Boolean Game.DataMonster::ShowInfo -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::PhyAtk -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::PhyDef -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::MagicAtk -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::MagicDef -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::MaxHP -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::Hit -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::Flee -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::Critical -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::UseSkill1 -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::UseSkill2 -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::UseSkill3 -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::Skill1Lv -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::Skill2Lv -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::Skill3Lv -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::ChanceOfSkill1 -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::ChanceOfSkill2 -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::ChanceOfSkill3 -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::ResistTime -> dropped
	System.String [Client]System.String Game.DataMonster::BornAnim -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::BornTime -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::DisappearTime -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::Mass -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonster::TimePreCastSkill -> dropped
}

[Client]Game.DataMonsterManager -> [Client]B.o
{
	[Client]Game.DataMonsterManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMonsterManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMonsterManager::Clear[0]( ) -> A
	[Client]Game.DataMonsterManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMonsterManager::GetDataByMonsterID[1]( System.Int32 ) -> A
	[Client]Game.DataMonsterManager::GetDataListByMonsterID[1]( System.Int32 ) -> a
	[Client]Game.DataMonsterManager::GetDataByMonsterName[1]( System.String ) -> A
	[Client]Game.DataMonsterManager::GetDataListByMonsterName[1]( System.String ) -> a
	[Client]Game.DataMonsterManager::GetDataByMonsterLv[1]( System.Int32 ) -> B
	[Client]Game.DataMonsterManager::GetDataListByMonsterLv[1]( System.Int32 ) -> b
	[Client]Game.DataMonsterManager::GetDataByModelPath[1]( System.String ) -> B
	[Client]Game.DataMonsterManager::GetDataListByModelPath[1]( System.String ) -> b
	[Client]Game.DataMonsterManager::GetDataByIsHumanoid[1]( System.Boolean ) -> A
	[Client]Game.DataMonsterManager::GetDataListByIsHumanoid[1]( System.Boolean ) -> a
	[Client]Game.DataMonsterManager::GetDataByHumanoidId[1]( System.Int32 ) -> C
	[Client]Game.DataMonsterManager::GetDataListByHumanoidId[1]( System.Int32 ) -> c
	[Client]Game.DataMonsterManager::GetDataByTargetHead[1]( System.String ) -> C
	[Client]Game.DataMonsterManager::GetDataListByTargetHead[1]( System.String ) -> c
	[Client]Game.DataMonsterManager::GetDataByMapId[1]( System.Int32 ) -> D
	[Client]Game.DataMonsterManager::GetDataListByMapId[1]( System.Int32 ) -> d
	[Client]Game.DataMonsterManager::GetDataByMapX[1]( System.Single ) -> A
	[Client]Game.DataMonsterManager::GetDataListByMapX[1]( System.Single ) -> a
	[Client]Game.DataMonsterManager::GetDataByMapY[1]( System.Single ) -> B
	[Client]Game.DataMonsterManager::GetDataListByMapY[1]( System.Single ) -> b
	[Client]Game.DataMonsterManager::GetDataByDir[1]( System.Int32 ) -> E
	[Client]Game.DataMonsterManager::GetDataListByDir[1]( System.Int32 ) -> e
	[Client]Game.DataMonsterManager::GetDataByIsDir[1]( System.Boolean ) -> B
	[Client]Game.DataMonsterManager::GetDataListByIsDir[1]( System.Boolean ) -> b
	[Client]Game.DataMonsterManager::GetDataByDeadSound[1]( System.String ) -> D
	[Client]Game.DataMonsterManager::GetDataListByDeadSound[1]( System.String ) -> d
	[Client]Game.DataMonsterManager::GetDataByHitSound[1]( System.String ) -> E
	[Client]Game.DataMonsterManager::GetDataListByHitSound[1]( System.String ) -> e
	[Client]Game.DataMonsterManager::GetDataByAttackSound[1]( System.String ) -> F
	[Client]Game.DataMonsterManager::GetDataListByAttackSound[1]( System.String ) -> f
	[Client]Game.DataMonsterManager::GetDataByMonsterTitle[1]( System.String ) -> G
	[Client]Game.DataMonsterManager::GetDataListByMonsterTitle[1]( System.String ) -> g
	[Client]Game.DataMonsterManager::GetDataByMonsterType[1]( System.String ) -> H
	[Client]Game.DataMonsterManager::GetDataListByMonsterType[1]( System.String ) -> h
	[Client]Game.DataMonsterManager::GetDataByBindAutoSkill[1]( System.Int32 ) -> F
	[Client]Game.DataMonsterManager::GetDataListByBindAutoSkill[1]( System.Int32 ) -> f
	[Client]Game.DataMonsterManager::GetDataByTurningType[1]( System.Int32 ) -> G
	[Client]Game.DataMonsterManager::GetDataListByTurningType[1]( System.Int32 ) -> g
	[Client]Game.DataMonsterManager::GetDataByIsFixed[1]( System.Boolean ) -> C
	[Client]Game.DataMonsterManager::GetDataListByIsFixed[1]( System.Boolean ) -> c
	[Client]Game.DataMonsterManager::GetDataByBodyModify[1]( System.Single ) -> C
	[Client]Game.DataMonsterManager::GetDataListByBodyModify[1]( System.Single ) -> c
	[Client]Game.DataMonsterManager::GetDataByHideName[1]( System.Boolean ) -> D
	[Client]Game.DataMonsterManager::GetDataListByHideName[1]( System.Boolean ) -> d
	[Client]Game.DataMonsterManager::GetDataByIfInitiative[1]( System.Boolean ) -> E
	[Client]Game.DataMonsterManager::GetDataListByIfInitiative[1]( System.Boolean ) -> e
	[Client]Game.DataMonsterManager::GetDataByRunStep[1]( System.Single ) -> D
	[Client]Game.DataMonsterManager::GetDataListByRunStep[1]( System.Single ) -> d
	[Client]Game.DataMonsterManager::GetDataByMoveSpeed[1]( System.Single ) -> E
	[Client]Game.DataMonsterManager::GetDataListByMoveSpeed[1]( System.Single ) -> e
	[Client]Game.DataMonsterManager::GetDataByIdleMoveSpeed[1]( System.Single ) -> F
	[Client]Game.DataMonsterManager::GetDataListByIdleMoveSpeed[1]( System.Single ) -> f
	[Client]Game.DataMonsterManager::GetDataByWalkStep[1]( System.Single ) -> G
	[Client]Game.DataMonsterManager::GetDataListByWalkStep[1]( System.Single ) -> g
	[Client]Game.DataMonsterManager::GetDataByEyeShot[1]( System.Single ) -> H
	[Client]Game.DataMonsterManager::GetDataListByEyeShot[1]( System.Single ) -> h
	[Client]Game.DataMonsterManager::GetDataByFightShot[1]( System.Single ) -> I
	[Client]Game.DataMonsterManager::GetDataListByFightShot[1]( System.Single ) -> i
	[Client]Game.DataMonsterManager::GetDataByChaseTime[1]( System.Single ) -> J
	[Client]Game.DataMonsterManager::GetDataListByChaseTime[1]( System.Single ) -> j
	[Client]Game.DataMonsterManager::GetDataByEffectModify[1]( System.Single ) -> K
	[Client]Game.DataMonsterManager::GetDataListByEffectModify[1]( System.Single ) -> k
	[Client]Game.DataMonsterManager::GetDataByResistHurt[1]( System.Single ) -> L
	[Client]Game.DataMonsterManager::GetDataListByResistHurt[1]( System.Single ) -> l
	[Client]Game.DataMonsterManager::GetDataByShowInfo[1]( System.Boolean ) -> F
	[Client]Game.DataMonsterManager::GetDataListByShowInfo[1]( System.Boolean ) -> f
	[Client]Game.DataMonsterManager::GetDataByPhyAtk[1]( System.Int32 ) -> H
	[Client]Game.DataMonsterManager::GetDataListByPhyAtk[1]( System.Int32 ) -> h
	[Client]Game.DataMonsterManager::GetDataByPhyDef[1]( System.Int32 ) -> I
	[Client]Game.DataMonsterManager::GetDataListByPhyDef[1]( System.Int32 ) -> i
	[Client]Game.DataMonsterManager::GetDataByMagicAtk[1]( System.Int32 ) -> J
	[Client]Game.DataMonsterManager::GetDataListByMagicAtk[1]( System.Int32 ) -> j
	[Client]Game.DataMonsterManager::GetDataByMagicDef[1]( System.Int32 ) -> K
	[Client]Game.DataMonsterManager::GetDataListByMagicDef[1]( System.Int32 ) -> k
	[Client]Game.DataMonsterManager::GetDataByMaxHP[1]( System.Int32 ) -> L
	[Client]Game.DataMonsterManager::GetDataListByMaxHP[1]( System.Int32 ) -> l
	[Client]Game.DataMonsterManager::GetDataByHit[1]( System.Int32 ) -> M
	[Client]Game.DataMonsterManager::GetDataListByHit[1]( System.Int32 ) -> m
	[Client]Game.DataMonsterManager::GetDataByFlee[1]( System.Int32 ) -> N
	[Client]Game.DataMonsterManager::GetDataListByFlee[1]( System.Int32 ) -> n
	[Client]Game.DataMonsterManager::GetDataByCritical[1]( System.Int32 ) -> O
	[Client]Game.DataMonsterManager::GetDataListByCritical[1]( System.Int32 ) -> o
	[Client]Game.DataMonsterManager::GetDataByUseSkill1[1]( System.Int32 ) -> P
	[Client]Game.DataMonsterManager::GetDataListByUseSkill1[1]( System.Int32 ) -> p
	[Client]Game.DataMonsterManager::GetDataByUseSkill2[1]( System.Int32 ) -> Q
	[Client]Game.DataMonsterManager::GetDataListByUseSkill2[1]( System.Int32 ) -> q
	[Client]Game.DataMonsterManager::GetDataByUseSkill3[1]( System.Int32 ) -> R
	[Client]Game.DataMonsterManager::GetDataListByUseSkill3[1]( System.Int32 ) -> r
	[Client]Game.DataMonsterManager::GetDataBySkill1Lv[1]( System.Int32 ) -> S
	[Client]Game.DataMonsterManager::GetDataListBySkill1Lv[1]( System.Int32 ) -> s
	[Client]Game.DataMonsterManager::GetDataBySkill2Lv[1]( System.Int32 ) -> T
	[Client]Game.DataMonsterManager::GetDataListBySkill2Lv[1]( System.Int32 ) -> t
	[Client]Game.DataMonsterManager::GetDataBySkill3Lv[1]( System.Int32 ) -> U
	[Client]Game.DataMonsterManager::GetDataListBySkill3Lv[1]( System.Int32 ) -> u
	[Client]Game.DataMonsterManager::GetDataByChanceOfSkill1[1]( System.Int32 ) -> V
	[Client]Game.DataMonsterManager::GetDataListByChanceOfSkill1[1]( System.Int32 ) -> v
	[Client]Game.DataMonsterManager::GetDataByChanceOfSkill2[1]( System.Int32 ) -> W
	[Client]Game.DataMonsterManager::GetDataListByChanceOfSkill2[1]( System.Int32 ) -> w
	[Client]Game.DataMonsterManager::GetDataByChanceOfSkill3[1]( System.Int32 ) -> X
	[Client]Game.DataMonsterManager::GetDataListByChanceOfSkill3[1]( System.Int32 ) -> x
	[Client]Game.DataMonsterManager::GetDataByResistTime[1]( System.Int32 ) -> Y
	[Client]Game.DataMonsterManager::GetDataListByResistTime[1]( System.Int32 ) -> y
	[Client]Game.DataMonsterManager::GetDataByBornAnim[1]( System.String ) -> I
	[Client]Game.DataMonsterManager::GetDataListByBornAnim[1]( System.String ) -> i
	[Client]Game.DataMonsterManager::GetDataByBornTime[1]( System.Int32 ) -> Z
	[Client]Game.DataMonsterManager::GetDataListByBornTime[1]( System.Int32 ) -> z
	[Client]Game.DataMonsterManager::GetDataByDisappearTime[1]( System.Int32 ) -> aA
	[Client]Game.DataMonsterManager::GetDataListByDisappearTime[1]( System.Int32 ) -> aa
	[Client]Game.DataMonsterManager::GetDataByMass[1]( System.Int32 ) -> aB
	[Client]Game.DataMonsterManager::GetDataListByMass[1]( System.Int32 ) -> ab
	[Client]Game.DataMonsterManager::GetDataByTimePreCastSkill[1]( System.Int32 ) -> aC
	[Client]Game.DataMonsterManager::GetDataListByTimePreCastSkill[1]( System.Int32 ) -> ac
	[Client]Game.DataMonsterManager::get_Instance[0]( ) -> a
	[Client]Game.DataMonsterManager::get_DataList[0]( ) -> B
	[Client]Game.DataMonsterManager::get_Count[0]( ) -> b

	[Client]Game.DataMonsterManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataMonsterManager::.ctor[0]( ) skipped:  special name

	Game.DataMonsterManager [Client]Game.DataMonsterManager Game.DataMonsterManager::instance -> A
	System.Collections.Generic.List`1<Game.DataMonster> [Client]System.Collections.Generic.List`1<Game.DataMonster> Game.DataMonsterManager::dataList -> A

	Game.DataMonsterManager [Client]Game.DataMonsterManager Game.DataMonsterManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataMonster> [Client]System.Collections.Generic.List`1<Game.DataMonster> Game.DataMonsterManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonsterManager::Count -> dropped
}

[Client]Game.DataFirstname -> [Client]B.P
{
	[Client]Game.DataFirstname::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFirstname::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFirstname::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFirstname::get_Male[0]( ) -> A
	[Client]Game.DataFirstname::set_Male[1]( System.String ) -> A
	[Client]Game.DataFirstname::get_Female[0]( ) -> a
	[Client]Game.DataFirstname::set_Female[1]( System.String ) -> a

	[Client]Game.DataFirstname::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.DataFirstname::<Male>k__BackingField -> A
	System.String [Client]System.String Game.DataFirstname::<Female>k__BackingField -> a

	System.String [Client]System.String Game.DataFirstname::Male -> dropped
	System.String [Client]System.String Game.DataFirstname::Female -> dropped
}

[Client]Game.DataFirstnameManager -> [Client]B.p
{
	[Client]Game.DataFirstnameManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFirstnameManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFirstnameManager::Clear[0]( ) -> A
	[Client]Game.DataFirstnameManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFirstnameManager::GetDataByMale[1]( System.String ) -> A
	[Client]Game.DataFirstnameManager::GetDataListByMale[1]( System.String ) -> a
	[Client]Game.DataFirstnameManager::GetDataByFemale[1]( System.String ) -> B
	[Client]Game.DataFirstnameManager::GetDataListByFemale[1]( System.String ) -> b
	[Client]Game.DataFirstnameManager::get_Instance[0]( ) -> a
	[Client]Game.DataFirstnameManager::get_DataList[0]( ) -> B
	[Client]Game.DataFirstnameManager::get_Count[0]( ) -> b

	[Client]Game.DataFirstnameManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataFirstnameManager::.ctor[0]( ) skipped:  special name

	Game.DataFirstnameManager [Client]Game.DataFirstnameManager Game.DataFirstnameManager::instance -> A
	System.Collections.Generic.List`1<Game.DataFirstname> [Client]System.Collections.Generic.List`1<Game.DataFirstname> Game.DataFirstnameManager::dataList -> A

	Game.DataFirstnameManager [Client]Game.DataFirstnameManager Game.DataFirstnameManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataFirstname> [Client]System.Collections.Generic.List`1<Game.DataFirstname> Game.DataFirstnameManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataFirstnameManager::Count -> dropped
}

[Client]Game.DataExpeditionLevel -> [Client]B.Q
{
	[Client]Game.DataExpeditionLevel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionLevel::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionLevel::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionLevel::get_Level[0]( ) -> A
	[Client]Game.DataExpeditionLevel::set_Level[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionLevel::get_Exp[0]( ) -> a
	[Client]Game.DataExpeditionLevel::set_Exp[1]( System.Int32 ) -> a

	[Client]Game.DataExpeditionLevel::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataExpeditionLevel::<Level>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataExpeditionLevel::<Exp>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataExpeditionLevel::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionLevel::Exp -> dropped
}

[Client]Game.DataExpeditionLevelManager -> [Client]B.q
{
	[Client]Game.DataExpeditionLevelManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionLevelManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionLevelManager::Clear[0]( ) -> A
	[Client]Game.DataExpeditionLevelManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionLevelManager::GetDataByLevel[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionLevelManager::GetDataListByLevel[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionLevelManager::GetDataByExp[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionLevelManager::GetDataListByExp[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionLevelManager::get_Instance[0]( ) -> a
	[Client]Game.DataExpeditionLevelManager::get_DataList[0]( ) -> B
	[Client]Game.DataExpeditionLevelManager::get_Count[0]( ) -> b

	[Client]Game.DataExpeditionLevelManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataExpeditionLevelManager::.ctor[0]( ) skipped:  special name

	Game.DataExpeditionLevelManager [Client]Game.DataExpeditionLevelManager Game.DataExpeditionLevelManager::instance -> A
	System.Collections.Generic.List`1<Game.DataExpeditionLevel> [Client]System.Collections.Generic.List`1<Game.DataExpeditionLevel> Game.DataExpeditionLevelManager::dataList -> A

	Game.DataExpeditionLevelManager [Client]Game.DataExpeditionLevelManager Game.DataExpeditionLevelManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataExpeditionLevel> [Client]System.Collections.Generic.List`1<Game.DataExpeditionLevel> Game.DataExpeditionLevelManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionLevelManager::Count -> dropped
}

[Client]Game.DataEquipSet -> [Client]B.R
{
	[Client]Game.DataEquipSet::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEquipSet::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEquipSet::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEquipSet::get_SetID[0]( ) -> A
	[Client]Game.DataEquipSet::set_SetID[1]( System.Int32 ) -> A
	[Client]Game.DataEquipSet::get_SetName[0]( ) -> a
	[Client]Game.DataEquipSet::set_SetName[1]( System.String ) -> A
	[Client]Game.DataEquipSet::get_SetNum[0]( ) -> B
	[Client]Game.DataEquipSet::set_SetNum[1]( System.Int32 ) -> a

	[Client]Game.DataEquipSet::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataEquipSet::<SetID>k__BackingField -> A
	System.String [Client]System.String Game.DataEquipSet::<SetName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataEquipSet::<SetNum>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataEquipSet::SetID -> dropped
	System.String [Client]System.String Game.DataEquipSet::SetName -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquipSet::SetNum -> dropped
}

[Client]Game.DataEquipSetManager -> [Client]B.r
{
	[Client]Game.DataEquipSetManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEquipSetManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEquipSetManager::Clear[0]( ) -> A
	[Client]Game.DataEquipSetManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEquipSetManager::GetDataBySetID[1]( System.Int32 ) -> A
	[Client]Game.DataEquipSetManager::GetDataListBySetID[1]( System.Int32 ) -> a
	[Client]Game.DataEquipSetManager::GetDataBySetName[1]( System.String ) -> A
	[Client]Game.DataEquipSetManager::GetDataListBySetName[1]( System.String ) -> a
	[Client]Game.DataEquipSetManager::GetDataBySetNum[1]( System.Int32 ) -> B
	[Client]Game.DataEquipSetManager::GetDataListBySetNum[1]( System.Int32 ) -> b
	[Client]Game.DataEquipSetManager::get_Instance[0]( ) -> a
	[Client]Game.DataEquipSetManager::get_DataList[0]( ) -> B
	[Client]Game.DataEquipSetManager::get_Count[0]( ) -> b

	[Client]Game.DataEquipSetManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataEquipSetManager::.ctor[0]( ) skipped:  special name

	Game.DataEquipSetManager [Client]Game.DataEquipSetManager Game.DataEquipSetManager::instance -> A
	System.Collections.Generic.List`1<Game.DataEquipSet> [Client]System.Collections.Generic.List`1<Game.DataEquipSet> Game.DataEquipSetManager::dataList -> A

	Game.DataEquipSetManager [Client]Game.DataEquipSetManager Game.DataEquipSetManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataEquipSet> [Client]System.Collections.Generic.List`1<Game.DataEquipSet> Game.DataEquipSetManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquipSetManager::Count -> dropped
}

[Client]Game.DynamicMaskChange -> [Client]B.S
{

	[Client]Game.DynamicMaskChange::.ctor[0]( ) skipped:  special name

	Game.DataMaskDynamic [Client]Game.DataMaskDynamic Game.DynamicMaskChange::dynamic -> A
	System.Boolean [Client]System.Boolean Game.DynamicMaskChange::open -> A
}

[Client]Game.Pathfinder -> [Client]B.s
{
	[Client]Game.Pathfinder::get_Tilesize[0]( ) -> A
	[Client]Game.Pathfinder::get_Instance[0]( ) -> a
	[Client]Game.Pathfinder::Init[0]( ) -> B
	[Client]Game.Pathfinder::Release[0]( ) -> b
	[Client]Game.Pathfinder::Reset[0]( ) -> C
	[Client]Game.Pathfinder::GetMapWidth[0]( ) -> c
	[Client]Game.Pathfinder::GetMaskWidth[0]( ) -> D
	[Client]Game.Pathfinder::LoadMask[1]( System.String ) -> A
	[Client]Game.Pathfinder::ShowMask[0]( ) -> d
	[Client]Game.Pathfinder::CanWalk[2]( System.Single, System.Single ) -> A
	[Client]Game.Pathfinder::CanWalk[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.Pathfinder::CanWalkLinkedGrid[2]( System.Single, System.Single ) -> a
	[Client]Game.Pathfinder::CanWalkLinkedGrid[2]( System.Int32, System.Int32 ) -> a
	[Client]Game.Pathfinder::GetPosCanWalk[3]( System.Single, System.Single, UnityEngine.Vector2& ) -> A
	[Client]Game.Pathfinder::GetJoystickMovePos[3]( System.Single, System.Single, UnityEngine.Vector2& ) -> a
	[Client]Game.Pathfinder::Update[0]( ) -> E
	[Client]Game.Pathfinder::CreateMapMask[0]( ) -> e
	[Client]Game.Pathfinder::ChangeDynamicMask[2]( Game.DataMaskDynamic, System.Boolean ) -> A
	[Client]Game.Pathfinder::ChangeOneDynmicMask[2]( Game.DataMaskDynamic, System.Boolean ) -> a
	[Client]Game.Pathfinder::InsertInQueue[3]( UnityEngine.Vector3, UnityEngine.Vector3, System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> ) -> A
	[Client]Game.Pathfinder::SetListsSize[1]( System.Int32 ) -> A
	[Client]Game.Pathfinder::PathHandler[3]( UnityEngine.Vector3, UnityEngine.Vector3, System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> ) -> a
	[Client]Game.Pathfinder::SinglePath[3]( UnityEngine.Vector3, UnityEngine.Vector3, System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> ) -> B
	[Client]Game.Pathfinder::FindPath[3]( UnityEngine.Vector3, UnityEngine.Vector3, System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> ) -> b
	[Client]Game.Pathfinder::SetStartAndEndNode[2]( UnityEngine.Vector3, UnityEngine.Vector3 ) -> A
	[Client]Game.Pathfinder::FindClosestNode[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.Pathfinder::FindEndNode[1]( UnityEngine.Vector3 ) -> a
	[Client]Game.Pathfinder::EndNodeNeighbourCheck[3]( System.Int32, System.Int32, System.Int32 ) -> A
	[Client]Game.Pathfinder::NeighbourCheck[0]( ) -> F
	[Client]Game.Pathfinder::NonDiagonalNeighborCheck[0]( ) -> f
	[Client]Game.Pathfinder::ChangeFValue[2]( System.Int32, System.Int32 ) -> B
	[Client]Game.Pathfinder::OnOpenList[1]( System.Int32 ) -> a
	[Client]Game.Pathfinder::OnClosedList[1]( System.Int32 ) -> B
	[Client]Game.Pathfinder::GetHeuristics[2]( System.Int32, System.Int32 ) -> b
	[Client]Game.Pathfinder::GetHeuristics[2]( Game.Node, Game.Node ) -> A
	[Client]Game.Pathfinder::GetMovementCost[4]( System.Int32, System.Int32, System.Int32, System.Int32 ) -> A
	[Client]Game.Pathfinder::GetNodeFromOpenList[1]( System.Int32 ) -> b
	[Client]Game.Pathfinder::BHInsertNode[1]( Game.NodeSearch ) -> A
	[Client]Game.Pathfinder::BHSortNode[2]( System.Int32, System.Int32 ) -> C
	[Client]Game.Pathfinder::BHGetLowest[0]( ) -> G
	[Client]Game.Pathfinder::OnDrawGizmosSelected[0]( ) -> g
	[Client]Game.Pathfinder::DynamicMapEdit[2]( System.Collections.Generic.List`1<UnityEngine.Vector3>, System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector2>> ) -> A
	[Client]Game.Pathfinder::DynamicRedoMapEdit[1]( System.Collections.Generic.List`1<UnityEngine.Vector2> ) -> A
	[Client]Game.Pathfinder::DynamicFindClosestNodes[1]( System.Collections.Generic.List`1<UnityEngine.Vector3> ) -> A

	[Client]Game.Pathfinder::.cctor[0]( ) skipped:  special name
	[Client]Game.Pathfinder::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.Pathfinder::m_Tilesize -> A
	log4net.ILog [Client]log4net.ILog Game.Pathfinder::m_Log -> A
	Game.Node[0...,0...] [Client]Game.Node[0...,0...] Game.Pathfinder::m_Map -> A
	Game.MaskFileReader [Client]Game.MaskFileReader Game.Pathfinder::m_MaskReader -> A
	System.Single [Client]System.Single Game.Pathfinder::MaxFalldownHeight -> a
	System.Single [Client]System.Single Game.Pathfinder::ClimbLimit -> B
	System.Int32 [Client]System.Int32 Game.Pathfinder::HeuristicAggression -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.Pathfinder::m_MapStartPosition -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.Pathfinder::m_MapEndPosition -> a
	System.Boolean [Client]System.Boolean Game.Pathfinder::MoveDiagonal -> A
	System.Boolean [Client]System.Boolean Game.Pathfinder::DrawMapInEditor -> a
	System.Boolean [Client]System.Boolean Game.Pathfinder::m_MaskInited -> B
	System.Int32 [Client]System.Int32 Game.Pathfinder::m_MaskWidth -> a
	System.Int32 [Client]System.Int32 Game.Pathfinder::m_MaskHeight -> B
	System.Int32 [Client]System.Int32 Game.Pathfinder::m_MapWidth -> b
	System.Collections.Generic.List`1<Game.DynamicMaskChange> [Client]System.Collections.Generic.List`1<Game.DynamicMaskChange> Game.Pathfinder::m_Dynamics -> A
	System.Single [Client]System.Single Game.Pathfinder::updateinterval -> b
	System.Int32 [Client]System.Int32 Game.Pathfinder::frames -> C
	System.Single [Client]System.Single Game.Pathfinder::timeleft -> C
	System.Int32 [Client]System.Int32 Game.Pathfinder::FPS -> c
	System.Int32 [Client]System.Int32 Game.Pathfinder::times -> D
	System.Int32 [Client]System.Int32 Game.Pathfinder::averageFPS -> d
	System.Int32 [Client]System.Int32 Game.Pathfinder::maxSearchRounds -> E
	System.Collections.Generic.List`1<Game.QueuePath> [Client]System.Collections.Generic.List`1<Game.QueuePath> Game.Pathfinder::m_Queue -> A
	Game.Pathfinder [Client]Game.Pathfinder Game.Pathfinder::m_Instance -> A
	System.Single [Client]System.Single Game.Pathfinder::overalltimer -> c
	System.Int32 [Client]System.Int32 Game.Pathfinder::iterations -> e
	Game.Node[] [Client]Game.Node[] Game.Pathfinder::openList -> A
	Game.Node[] [Client]Game.Node[] Game.Pathfinder::closedList -> a
	Game.Node [Client]Game.Node Game.Pathfinder::startNode -> A
	Game.Node [Client]Game.Node Game.Pathfinder::endNode -> a
	Game.Node [Client]Game.Node Game.Pathfinder::currentNode -> B
	System.Collections.Generic.List`1<Game.NodeSearch> [Client]System.Collections.Generic.List`1<Game.NodeSearch> Game.Pathfinder::sortedOpenList -> A

	System.Single [Client]System.Single Game.Pathfinder::Tilesize -> dropped
	Game.Pathfinder [Client]Game.Pathfinder Game.Pathfinder::Instance -> dropped
}

[Client]Game.Pathfinder/<PathHandler>d__0 -> [Client]B.s/T
{
	[Client]Game.Pathfinder/<PathHandler>d__0::System.Collections.Generic.IEnumerator<System.Object>.get_Current[0]( ) -> A
	[Client]Game.Pathfinder/<PathHandler>d__0::System.Collections.IEnumerator.Reset[0]( ) -> a
	[Client]Game.Pathfinder/<PathHandler>d__0::System.IDisposable.Dispose[0]( ) -> B
	[Client]Game.Pathfinder/<PathHandler>d__0::System.Collections.IEnumerator.get_Current[0]( ) -> b

	[Client]Game.Pathfinder/<PathHandler>d__0::MoveNext[0]( ) skipped:  external base class or interface
	[Client]Game.Pathfinder/<PathHandler>d__0::.ctor[1]( System.Int32 ) skipped:  special name

	System.Object [Client]System.Object Game.Pathfinder/<PathHandler>d__0::<>2__current -> A
	System.Int32 [Client]System.Int32 Game.Pathfinder/<PathHandler>d__0::<>1__state -> A
	Game.Pathfinder [Client]Game.Pathfinder Game.Pathfinder/<PathHandler>d__0::<>4__this -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Pathfinder/<PathHandler>d__0::startPos -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Pathfinder/<PathHandler>d__0::endPos -> a
	System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> [Client]System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> Game.Pathfinder/<PathHandler>d__0::listMethod -> A

	System.Object [Client]System.Object Game.Pathfinder/<PathHandler>d__0::System.Collections.Generic.IEnumerator<System.Object>.Current -> dropped
	System.Object [Client]System.Object Game.Pathfinder/<PathHandler>d__0::System.Collections.IEnumerator.Current -> dropped
}

[Client]Game.Pathfinder/<SinglePath>d__2 -> [Client]B.s/t
{
	[Client]Game.Pathfinder/<SinglePath>d__2::System.Collections.Generic.IEnumerator<System.Object>.get_Current[0]( ) -> A
	[Client]Game.Pathfinder/<SinglePath>d__2::System.Collections.IEnumerator.Reset[0]( ) -> a
	[Client]Game.Pathfinder/<SinglePath>d__2::System.IDisposable.Dispose[0]( ) -> B
	[Client]Game.Pathfinder/<SinglePath>d__2::System.Collections.IEnumerator.get_Current[0]( ) -> b

	[Client]Game.Pathfinder/<SinglePath>d__2::MoveNext[0]( ) skipped:  external base class or interface
	[Client]Game.Pathfinder/<SinglePath>d__2::.ctor[1]( System.Int32 ) skipped:  special name

	System.Object [Client]System.Object Game.Pathfinder/<SinglePath>d__2::<>2__current -> A
	System.Int32 [Client]System.Int32 Game.Pathfinder/<SinglePath>d__2::<>1__state -> A
	Game.Pathfinder [Client]Game.Pathfinder Game.Pathfinder/<SinglePath>d__2::<>4__this -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Pathfinder/<SinglePath>d__2::startPos -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Pathfinder/<SinglePath>d__2::endPos -> a
	System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> [Client]System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> Game.Pathfinder/<SinglePath>d__2::listMethod -> A

	System.Object [Client]System.Object Game.Pathfinder/<SinglePath>d__2::System.Collections.Generic.IEnumerator<System.Object>.Current -> dropped
	System.Object [Client]System.Object Game.Pathfinder/<SinglePath>d__2::System.Collections.IEnumerator.Current -> dropped
}

[Client]ICSharpCode.SharpZipLib.GZip.GZipConstants -> [Client]B.U
{

	[Client]ICSharpCode.SharpZipLib.GZip.GZipConstants::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.GZip.GZipConstants::GZIP_MAGIC -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.GZip.GZipConstants::FTEXT -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.GZip.GZipConstants::FHCRC -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.GZip.GZipConstants::FEXTRA -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.GZip.GZipConstants::FNAME -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.GZip.GZipConstants::FCOMMENT -> c
}

[Client]Game.StatisticsPacket -> [Client]B.u
{

	[Client]Game.StatisticsPacket::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.StatisticsPacket::IsReceived -> A
	System.Int32 [Client]System.Int32 Game.StatisticsPacket::BaseType -> A
	System.Int32 [Client]System.Int32 Game.StatisticsPacket::SubType -> a
	System.UInt32 [Client]System.UInt32 Game.StatisticsPacket::Count -> A
	System.UInt32 [Client]System.UInt32 Game.StatisticsPacket::Traffic -> a
}

[Client]Game.FlowStatistics -> [Client]B.V
{
	[Client]Game.FlowStatistics::get_Instance[0]( ) -> A
	[Client]Game.FlowStatistics::get_CanLogInfo[0]( ) -> a
	[Client]Game.FlowStatistics::set_CanLogInfo[1]( System.Boolean ) -> A
	[Client]Game.FlowStatistics::StartRecord[0]( ) -> B
	[Client]Game.FlowStatistics::StopRecord[0]( ) -> b
	[Client]Game.FlowStatistics::RecordSendPacket[2]( Game.Msg.MsgBase, Game.Msg.SendMsgPacket ) -> A
	[Client]Game.FlowStatistics::RecordRecvPacket[1]( Game.Msg.MsgDynamic ) -> A
	[Client]Game.FlowStatistics::Update[0]( ) -> C
	[Client]Game.FlowStatistics::CompareStasticsPacket[2]( Game.StatisticsPacket, Game.StatisticsPacket ) -> A

	[Client]Game.FlowStatistics::.ctor[0]( ) skipped:  special name
	[Client]Game.FlowStatistics::.cctor[0]( ) skipped:  special name

	Game.FlowStatistics [Client]Game.FlowStatistics Game.FlowStatistics::m_Instance -> A
	log4net.ILog [Client]log4net.ILog Game.FlowStatistics::m_Log -> A
	System.Boolean [Client]System.Boolean Game.FlowStatistics::m_CanLogInfo -> A
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.StatisticsPacket> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.StatisticsPacket> Game.FlowStatistics::m_DicPacket -> A
	System.Single [Client]System.Single Game.FlowStatistics::m_RecordInteval -> A
	System.Single [Client]System.Single Game.FlowStatistics::m_LastLogTime -> a
	System.Int32 [Client]System.Int32 Game.FlowStatistics::m_SumSendBytes -> A
	System.Int32 [Client]System.Int32 Game.FlowStatistics::m_SumReceiveBytes -> a

	Game.FlowStatistics [Client]Game.FlowStatistics Game.FlowStatistics::Instance -> dropped
	System.Boolean [Client]System.Boolean Game.FlowStatistics::CanLogInfo -> dropped
}

[Client]Game.Msg.STCreateInfo -> [Client]B.v
{
	[Client]Game.Msg.STCreateInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.STCreateInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.STCreateInfo::.ctor[0]( ) skipped:  special name

	System.Byte[] [Client]System.Byte[] Game.Msg.STCreateInfo::m_abtRoleName -> A
	System.Byte [Client]System.Byte Game.Msg.STCreateInfo::m_btProfession -> A
	System.Byte [Client]System.Byte Game.Msg.STCreateInfo::m_btSex -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.STCreateInfo::m_uiBirthday -> A
	System.Byte [Client]System.Byte Game.Msg.STCreateInfo::m_btLineID -> B
	System.Single [Client]System.Single Game.Msg.STCreateInfo::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.STCreateInfo::m_fPosY -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.STCreateInfo::m_usMapID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.STCreateInfo::m_uiHairModelIndex -> a
}

[Client]Game.Msg.CSnapShotNpcAll -> [Client]B.W
{
	[Client]Game.Msg.CSnapShotNpcAll::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotNpcAll::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotNpcAll::.ctor[0]( ) skipped:  special name

	Game.Msg.CSnapShotNpcData [Client]Game.Msg.CSnapShotNpcData Game.Msg.CSnapShotNpcAll::m_stNpcData -> A
}

[Client]Game.Msg.ClientBuyBackData -> [Client]B.w
{
	[Client]Game.Msg.ClientBuyBackData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientBuyBackData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientBuyBackData::.ctor[0]( ) skipped:  special name

	Game.Msg.ClientSItemData [Client]Game.Msg.ClientSItemData Game.Msg.ClientBuyBackData::m_stItem -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientBuyBackData::m_uiBuyBackPrice -> A
}

[Client]Game.GestureRecognizer -> [Client]B.X
{
	[Client]Game.GestureRecognizer::get_StartTime[0]( ) -> a
	[Client]Game.GestureRecognizer::set_StartTime[1]( System.Single ) -> A
	[Client]Game.GestureRecognizer::get_ElapsedTime[0]( ) -> B
	[Client]Game.GestureRecognizer::get_State[0]( ) -> b
	[Client]Game.GestureRecognizer::set_State[1]( Game.GestureRecognizer/GestureState ) -> A
	[Client]Game.GestureRecognizer::Reset[0]( ) -> C
	[Client]Game.GestureRecognizer::GetRequiredFingerCount[0]( ) -> A
	[Client]Game.GestureRecognizer::CanBegin[1]( Game.TouchList ) -> A
	[Client]Game.GestureRecognizer::OnBegin[1]( Game.TouchList ) -> a
	[Client]Game.GestureRecognizer::OnReady[1]( Game.TouchList ) -> c
	[Client]Game.GestureRecognizer::OnProcessing[1]( Game.TouchList ) -> B
	[Client]Game.GestureRecognizer::IsEnd[1]( Game.TouchList ) -> b
	[Client]Game.GestureRecognizer::OnRecognized[1]( Game.TouchList ) -> C
	[Client]Game.GestureRecognizer::Update[1]( Game.TouchList ) -> D

	[Client]Game.GestureRecognizer::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.GestureRecognizer::<StartTime>k__BackingField -> A
	Game.GestureRecognizer/GestureState [Client]Game.GestureRecognizer/GestureState Game.GestureRecognizer::<State>k__BackingField -> A

	System.Single [Client]System.Single Game.GestureRecognizer::StartTime -> dropped
	System.Single [Client]System.Single Game.GestureRecognizer::ElapsedTime -> dropped
	Game.GestureRecognizer/GestureState [Client]Game.GestureRecognizer/GestureState Game.GestureRecognizer::State -> dropped
}

[Client]Game.GestureRecognizer/GestureState -> [Client]B.X/Y
{
	Game.GestureRecognizer/GestureState [Client]Game.GestureRecognizer/GestureState Game.GestureRecognizer/GestureState::Ready -> A
	Game.GestureRecognizer/GestureState [Client]Game.GestureRecognizer/GestureState Game.GestureRecognizer/GestureState::Processing -> a
	Game.GestureRecognizer/GestureState [Client]Game.GestureRecognizer/GestureState Game.GestureRecognizer/GestureState::Recognized -> B
	Game.GestureRecognizer/GestureState [Client]Game.GestureRecognizer/GestureState Game.GestureRecognizer/GestureState::Failed -> b

	System.Int32 [Client]System.Int32 Game.GestureRecognizer/GestureState::value__ skipped:  filtered
}

[Client]Game.LongPressGestureRecognizer -> [Client]B.y
{
	[Client]Game.LongPressGestureRecognizer::GetRequiredFingerCount[0]( ) -> A
	[Client]Game.LongPressGestureRecognizer::CanBegin[1]( Game.TouchList ) -> A
	[Client]Game.LongPressGestureRecognizer::OnBegin[1]( Game.TouchList ) -> a
	[Client]Game.LongPressGestureRecognizer::OnProcessing[1]( Game.TouchList ) -> B
	[Client]Game.LongPressGestureRecognizer::IsEnd[1]( Game.TouchList ) -> b
	[Client]Game.LongPressGestureRecognizer::OnRecognized[1]( Game.TouchList ) -> C
	[Client]Game.LongPressGestureRecognizer::add_OnLongPress[1]( .EventDelegate`1<Game.LongPressGestureRecognizer> ) -> A
	[Client]Game.LongPressGestureRecognizer::remove_OnLongPress[1]( .EventDelegate`1<Game.LongPressGestureRecognizer> ) -> a
	[Client]Game.LongPressGestureRecognizer::add_OnLongPressing[1]( .EventDelegate`1<Game.LongPressGestureRecognizer> ) -> B
	[Client]Game.LongPressGestureRecognizer::remove_OnLongPressing[1]( .EventDelegate`1<Game.LongPressGestureRecognizer> ) -> b
	[Client]Game.LongPressGestureRecognizer::get_StartPos[0]( ) -> a
	[Client]Game.LongPressGestureRecognizer::set_StartPos[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.LongPressGestureRecognizer::get_CurPos[0]( ) -> B
	[Client]Game.LongPressGestureRecognizer::set_CurPos[1]( UnityEngine.Vector2 ) -> a

	[Client]Game.LongPressGestureRecognizer::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.LongPressGestureRecognizer::MinDuration -> A
	System.Single [Client]System.Single Game.LongPressGestureRecognizer::MaxDistance -> a
	Game.GestureRecognizer/EventDelegate`1<Game.LongPressGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.LongPressGestureRecognizer> Game.LongPressGestureRecognizer::OnLongPress -> A
	Game.GestureRecognizer/EventDelegate`1<Game.LongPressGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.LongPressGestureRecognizer> Game.LongPressGestureRecognizer::OnLongPressing -> a
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.LongPressGestureRecognizer::<StartPos>k__BackingField -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.LongPressGestureRecognizer::<CurPos>k__BackingField -> a

	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.LongPressGestureRecognizer::StartPos -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.LongPressGestureRecognizer::CurPos -> dropped

	Game.GestureRecognizer/EventDelegate`1<Game.LongPressGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.LongPressGestureRecognizer> Game.LongPressGestureRecognizer::OnLongPress -> dropped
	Game.GestureRecognizer/EventDelegate`1<Game.LongPressGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.LongPressGestureRecognizer> Game.LongPressGestureRecognizer::OnLongPressing -> dropped
}

[Client]Game.LogicData -> [Client]B.Z
{
	[Client]Game.LogicData::LoadCSV[0]( ) -> A
	[Client]Game.LogicData::LoadData[0]( ) -> a

	[Client]Game.LogicData::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.LogicData::m_DataFile -> A
	System.String [Client]System.String Game.LogicData::m_StringFile -> a
	System.UInt32 [Client]System.UInt32 Game.LogicData::version -> A
}

[Client]Game.DataPetexp -> [Client]B.z
{
	[Client]Game.DataPetexp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetexp::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetexp::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetexp::get_Level[0]( ) -> A
	[Client]Game.DataPetexp::set_Level[1]( System.Int32 ) -> A
	[Client]Game.DataPetexp::get_LevelExp[0]( ) -> a
	[Client]Game.DataPetexp::set_LevelExp[1]( System.Int32 ) -> a
	[Client]Game.DataPetexp::get_ExpMax[0]( ) -> B
	[Client]Game.DataPetexp::set_ExpMax[1]( System.Int32 ) -> B

	[Client]Game.DataPetexp::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPetexp::<Level>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPetexp::<LevelExp>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPetexp::<ExpMax>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataPetexp::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetexp::LevelExp -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetexp::ExpMax -> dropped
}

[Client]Game.DataPetexpManager -> [Client]b.A
{
	[Client]Game.DataPetexpManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetexpManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetexpManager::Clear[0]( ) -> A
	[Client]Game.DataPetexpManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetexpManager::GetDataByLevel[1]( System.Int32 ) -> A
	[Client]Game.DataPetexpManager::GetDataListByLevel[1]( System.Int32 ) -> a
	[Client]Game.DataPetexpManager::GetDataByLevelExp[1]( System.Int32 ) -> B
	[Client]Game.DataPetexpManager::GetDataListByLevelExp[1]( System.Int32 ) -> b
	[Client]Game.DataPetexpManager::GetDataByExpMax[1]( System.Int32 ) -> C
	[Client]Game.DataPetexpManager::GetDataListByExpMax[1]( System.Int32 ) -> c
	[Client]Game.DataPetexpManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetexpManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetexpManager::get_Count[0]( ) -> b

	[Client]Game.DataPetexpManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetexpManager::.ctor[0]( ) skipped:  special name

	Game.DataPetexpManager [Client]Game.DataPetexpManager Game.DataPetexpManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPetexp> [Client]System.Collections.Generic.List`1<Game.DataPetexp> Game.DataPetexpManager::dataList -> A

	Game.DataPetexpManager [Client]Game.DataPetexpManager Game.DataPetexpManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPetexp> [Client]System.Collections.Generic.List`1<Game.DataPetexp> Game.DataPetexpManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetexpManager::Count -> dropped
}

[Client]Game.DataLevel -> [Client]b.a
{
	[Client]Game.DataLevel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataLevel::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataLevel::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataLevel::get_Level[0]( ) -> A
	[Client]Game.DataLevel::set_Level[1]( System.Int32 ) -> A
	[Client]Game.DataLevel::get_CostExp[0]( ) -> a
	[Client]Game.DataLevel::set_CostExp[1]( System.Int32 ) -> a

	[Client]Game.DataLevel::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataLevel::<Level>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataLevel::<CostExp>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataLevel::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataLevel::CostExp -> dropped
}

[Client]Game.DataLevelManager -> [Client]b.B
{
	[Client]Game.DataLevelManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataLevelManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataLevelManager::Clear[0]( ) -> A
	[Client]Game.DataLevelManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataLevelManager::GetDataByLevel[1]( System.Int32 ) -> A
	[Client]Game.DataLevelManager::GetDataListByLevel[1]( System.Int32 ) -> a
	[Client]Game.DataLevelManager::GetDataByCostExp[1]( System.Int32 ) -> B
	[Client]Game.DataLevelManager::GetDataListByCostExp[1]( System.Int32 ) -> b
	[Client]Game.DataLevelManager::get_Instance[0]( ) -> a
	[Client]Game.DataLevelManager::get_DataList[0]( ) -> B
	[Client]Game.DataLevelManager::get_Count[0]( ) -> b

	[Client]Game.DataLevelManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataLevelManager::.ctor[0]( ) skipped:  special name

	Game.DataLevelManager [Client]Game.DataLevelManager Game.DataLevelManager::instance -> A
	System.Collections.Generic.List`1<Game.DataLevel> [Client]System.Collections.Generic.List`1<Game.DataLevel> Game.DataLevelManager::dataList -> A

	Game.DataLevelManager [Client]Game.DataLevelManager Game.DataLevelManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataLevel> [Client]System.Collections.Generic.List`1<Game.DataLevel> Game.DataLevelManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataLevelManager::Count -> dropped
}

[Client]Game.Msg.MonsterAttackCityData -> [Client]b.b
{
	[Client]Game.Msg.MonsterAttackCityData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MonsterAttackCityData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MonsterAttackCityData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.MonsterAttackCityData::m_uiPlayerID -> A
	System.String [Client]System.String Game.Msg.MonsterAttackCityData::m_strName -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MonsterAttackCityData::m_uiValue -> a
}

[Client]Game.FSM -> [Client]b.C
{
	[Client]Game.FSM::Initialize[0]( ) -> A
	[Client]Game.FSM::FSMUpdate[0]( ) -> a
	[Client]Game.FSM::FSMFixedUpdate[0]( ) -> B
	[Client]Game.FSM::Start[0]( ) -> b
	[Client]Game.FSM::Update[0]( ) -> C
	[Client]Game.FSM::FixedUpdate[0]( ) -> c
	[Client]Game.FSM::ResetElapsedTime[0]( ) -> D

	[Client]Game.FSM::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.FSM::m_elapsedTime -> A
}

[Client]Game.MonsterFSM -> [Client]b.c
{
	[Client]Game.MonsterFSM::Initialize[0]( ) -> A
	[Client]Game.MonsterFSM::FSMUpdate[0]( ) -> a
	[Client]Game.MonsterFSM::Reset[0]( ) -> B
	[Client]Game.MonsterFSM::UpdateMonsterBornState[0]( ) -> b
	[Client]Game.MonsterFSM::UpdateMonsterPatrolState[0]( ) -> C
	[Client]Game.MonsterFSM::UpdateMonsterChaseState[0]( ) -> c
	[Client]Game.MonsterFSM::UpdateMonsterAttackState[0]( ) -> D
	[Client]Game.MonsterFSM::UpdateMonsterDeadState[0]( ) -> d
	[Client]Game.MonsterFSM::UpdateMonsterBeAttackedState[0]( ) -> E

	[Client]Game.MonsterFSM::.ctor[1]( Game.Character ) skipped:  special name

	Game.MonsterFSM/FSMState [Client]Game.MonsterFSM/FSMState Game.MonsterFSM::m_currentState -> A
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.MonsterFSM::TagPlayerID -> A
	System.Boolean [Client]System.Boolean Game.MonsterFSM::m_bDead -> A
	Game.Skill [Client]Game.Skill Game.MonsterFSM::m_curSkill -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.MonsterFSM::m_vOriginalPos -> A
	System.Single [Client]System.Single Game.MonsterFSM::m_MinAttackRange -> A
	System.Single [Client]System.Single Game.MonsterFSM::m_MaxAttackRange -> a
	System.Single [Client]System.Single Game.MonsterFSM::m_ChaseTime -> B
	Game.Character [Client]Game.Character Game.MonsterFSM::m_monster -> A
	Game.Character [Client]Game.Character Game.MonsterFSM::m_playerRole -> a
	Game.DataMonster [Client]Game.DataMonster Game.MonsterFSM::m_MonsterData -> A
	System.Int32 [Client]System.Int32 Game.MonsterFSM::m_PosIndex -> A
}

[Client]Game.MonsterFSM/FSMState -> [Client]b.c/D
{
	Game.MonsterFSM/FSMState [Client]Game.MonsterFSM/FSMState Game.MonsterFSM/FSMState::None -> A
	Game.MonsterFSM/FSMState [Client]Game.MonsterFSM/FSMState Game.MonsterFSM/FSMState::Born -> a
	Game.MonsterFSM/FSMState [Client]Game.MonsterFSM/FSMState Game.MonsterFSM/FSMState::Patrol -> B
	Game.MonsterFSM/FSMState [Client]Game.MonsterFSM/FSMState Game.MonsterFSM/FSMState::Chase -> b
	Game.MonsterFSM/FSMState [Client]Game.MonsterFSM/FSMState Game.MonsterFSM/FSMState::Attack -> C
	Game.MonsterFSM/FSMState [Client]Game.MonsterFSM/FSMState Game.MonsterFSM/FSMState::BeAttacked -> c
	Game.MonsterFSM/FSMState [Client]Game.MonsterFSM/FSMState Game.MonsterFSM/FSMState::Dead -> D

	System.Int32 [Client]System.Int32 Game.MonsterFSM/FSMState::value__ skipped:  filtered
}

[Client]Game.TipButtonData -> [Client]b.d
{

	[Client]Game.TipButtonData::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.TipButtonData::m_Name -> A
	Game.UI.UICommon.ButtonClickEventHandler [Client]Game.UI.UICommon.ButtonClickEventHandler Game.TipButtonData::m_Handler -> A
}

[Client]Game.TipManager -> [Client]b.E
{
	[Client]Game.TipManager::get_EShowTipType[0]( ) -> A
	[Client]Game.TipManager::set_EShowTipType[1]( Game.TipManager/enumShowTip ) -> A
	[Client]Game.TipManager::get_UrlLocalPos[0]( ) -> a
	[Client]Game.TipManager::set_UrlLocalPos[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.TipManager::get_UrlLocalSize[0]( ) -> B
	[Client]Game.TipManager::set_UrlLocalSize[1]( UnityEngine.Vector2 ) -> a
	[Client]Game.TipManager::get_TipGameObj[0]( ) -> b
	[Client]Game.TipManager::set_TipGameObj[1]( UnityEngine.GameObject ) -> A
	[Client]Game.TipManager::get_TipXUIObject[0]( ) -> C
	[Client]Game.TipManager::set_TipXUIObject[1]( Game.UI.UICommon.IXUIObject ) -> A
	[Client]Game.TipManager::get_Name[0]( ) -> c
	[Client]Game.TipManager::set_Name[1]( System.String ) -> A
	[Client]Game.TipManager::get_NameColor[0]( ) -> D
	[Client]Game.TipManager::set_NameColor[1]( UnityEngine.Color ) -> A
	[Client]Game.TipManager::get_TypeName[0]( ) -> d
	[Client]Game.TipManager::set_TypeName[1]( System.String ) -> a
	[Client]Game.TipManager::get_ShowEquipTag[0]( ) -> E
	[Client]Game.TipManager::set_ShowEquipTag[1]( System.Boolean ) -> A
	[Client]Game.TipManager::get_UIListItem[0]( ) -> e
	[Client]Game.TipManager::get_Name_Compare[0]( ) -> F
	[Client]Game.TipManager::set_Name_Compare[1]( System.String ) -> B
	[Client]Game.TipManager::get_ShowCompareEquipTag[0]( ) -> f
	[Client]Game.TipManager::set_ShowCompareEquipTag[1]( System.Boolean ) -> a
	[Client]Game.TipManager::get_CanGenerateCompareTip[0]( ) -> G
	[Client]Game.TipManager::get_CanGenerateButtons[0]( ) -> g
	[Client]Game.TipManager::set_CanGenerateButtons[1]( System.Boolean ) -> B
	[Client]Game.TipManager::Reset[0]( ) -> H
	[Client]Game.TipManager::OnListClickShowTips[3]( Game.UI.UICommon.IXUIListItem, Game.UI.UICommon.AppendTips, Game.UI.UICommon.AppendButtons ) -> A
	[Client]Game.TipManager::OnListClickShowTips[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.TipManager::OnListClickShowTipsWithoutButtons[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.TipManager::ShowTipOnUrl[5]( System.Int32, System.Object, UnityEngine.GameObject, UnityEngine.Vector2, UnityEngine.Vector2 ) -> A
	[Client]Game.TipManager::ShowTipOnUrl[2]( System.Int32, System.Object ) -> A
	[Client]Game.TipManager::ShowTip[4]( Game.TipManager/enumShowTip, Game.UI.UICommon.enumDataType, System.Object, Game.UI.UICommon.IXUIObject ) -> A
	[Client]Game.TipManager::ShowTip[3]( Game.UI.UICommon.enumDataType, System.Object, Game.UI.UICommon.IXUIObject ) -> A
	[Client]Game.TipManager::ShowTip[2]( System.Int32, System.Object ) -> a
	[Client]Game.TipManager::ShowTip[1]( System.Boolean ) -> b
	[Client]Game.TipManager::GenerateTipHead[0]( ) -> h
	[Client]Game.TipManager::IsPerfectEquip[1]( Game.Msg.ClientSItemData ) -> A
	[Client]Game.TipManager::GenerateTipHead[1]( Game.Item ) -> A
	[Client]Game.TipManager::GenerateTips[1]( System.Action`1<System.String> ) -> A
	[Client]Game.TipManager::GenerateCompareTipHead[0]( ) -> I
	[Client]Game.TipManager::GenerateCompareTips[1]( System.Action`1<System.String> ) -> a
	[Client]Game.TipManager::ItemCsvTip[1]( System.Action`1<System.String> ) -> B
	[Client]Game.TipManager::ItemDataTip[1]( System.Action`1<System.String> ) -> b
	[Client]Game.TipManager::MailItemDataTip[1]( System.Action`1<System.String> ) -> C
	[Client]Game.TipManager::EquipPartTip[1]( System.Action`1<System.String> ) -> c
	[Client]Game.TipManager::ShowPrefixInfo[3]( Game.Msg.ClientSItemData, System.Action`1<System.String>, System.Boolean ) -> A
	[Client]Game.TipManager::ShowPrefixInfo[2]( Game.Item, System.Action`1<System.String> ) -> A
	[Client]Game.TipManager::ShowBaseAttrInfoIfNeed[2]( Game.Item, System.Action`1<System.String> ) -> a
	[Client]Game.TipManager::ShowBlueAttrInfoIfNeed[2]( Game.Msg.ClientSItemData, System.Action`1<System.String> ) -> A
	[Client]Game.TipManager::ShowBaseAttrInfo[2]( Game.Item, System.Action`1<System.String> ) -> B
	[Client]Game.TipManager::ShowBlueAttrInfo[3]( Game.Msg.ClientSItemData, System.Action`1<System.String>, System.Boolean ) -> a
	[Client]Game.TipManager::ShowAddSkillInfo[2]( Game.Item, System.Action`1<System.String> ) -> b
	[Client]Game.TipManager::ShowItemCsvSuffix[2]( Game.Item, System.Action`1<System.String> ) -> C
	[Client]Game.TipManager::ShowEquipSetInfo[3]( Game.Msg.ClientSItemData, System.Action`1<System.String>, System.Boolean ) -> B
	[Client]Game.TipManager::ShowEquipSetInfo[4]( Game.Msg.ClientSItemData, System.Action`1<System.String>, System.Boolean, System.Boolean ) -> A
	[Client]Game.TipManager::ShowItemExpireTime[2]( Game.Msg.ClientSItemData, System.Action`1<System.String> ) -> a
	[Client]Game.TipManager::SkillTip[1]( System.Action`1<System.String> ) -> D
	[Client]Game.TipManager::GenerateButtons[1]( System.Action`1<Game.TipButtonData> ) -> A
	[Client]Game.TipManager::ItemDataButton[1]( System.Action`1<Game.TipButtonData> ) -> a
	[Client]Game.TipManager::EquipPartButton[1]( System.Action`1<Game.TipButtonData> ) -> B
	[Client]Game.TipManager::ButtonClickCompose[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.TipManager::ButtonClickUseItem[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.TipManager::ButtonClickUnEquip[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.TipManager::ButtonClickSellItem[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.TipManager::ButtonClickIntesify[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.TipManager::ButtonClickInsertGem[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.TipManager::ButtonClickEquipSoul[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.TipManager::ButtonClickQuickUse[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.TipManager::ButtonClickUseVip[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.TipManager::ButtonClickUseSkillBook[1]( Game.UI.UICommon.IXUIButton ) -> e
	[Client]Game.TipManager::ButtonClickUseCharm[1]( Game.UI.UICommon.IXUIButton ) -> F
	[Client]Game.TipManager::ButtonClickFeedPet[1]( Game.UI.UICommon.IXUIButton ) -> f
	[Client]Game.TipManager::ButtonClickShow[1]( Game.UI.UICommon.IXUIButton ) -> G
	[Client]Game.TipManager::ButtonClickMoveIn[1]( Game.UI.UICommon.IXUIButton ) -> g
	[Client]Game.TipManager::ButtonClickMoveOut[1]( Game.UI.UICommon.IXUIButton ) -> H
	[Client]Game.TipManager::ButtonClickAuctionSell[1]( Game.UI.UICommon.IXUIButton ) -> h
	[Client]Game.TipManager::ButtonClickAuctionSearch[1]( Game.UI.UICommon.IXUIButton ) -> I
	[Client]Game.TipManager::ButtonClickEquipNow[1]( Game.UI.UICommon.IXUIButton ) -> i
	[Client]Game.TipManager::ButtonClickNotEquip[1]( Game.UI.UICommon.IXUIButton ) -> J
	[Client]Game.TipManager::ButtonClickOpenShopNpc[1]( Game.UI.UICommon.IXUIButton ) -> j
	[Client]Game.TipManager::CanGenerateIntensifyInfo[1]( Game.EquipItem ) -> A
	[Client]Game.TipManager::GenerateAttrTips[1]( System.Action`1<System.String> ) -> d
	[Client]Game.TipManager::GenerateStars[1]( System.Action`1<Game.UI.SCharEquipData> ) -> A
	[Client]Game.TipManager::GenerateGems[1]( System.Action`1<System.String> ) -> E
	[Client]Game.TipManager::GenerateCompareAttrTips[1]( System.Action`1<System.String> ) -> e
	[Client]Game.TipManager::GenerateCompareStars[1]( System.Action`1<Game.UI.SCharEquipData> ) -> a
	[Client]Game.TipManager::GenerateCompareGems[1]( System.Action`1<System.String> ) -> F

	[Client]Game.TipManager::.ctor[0]( ) skipped:  special name

	Game.UI.UICommon.AppendTips [Client]Game.UI.UICommon.AppendTips Game.TipManager::m_TipGenerator -> A
	Game.UI.UICommon.AppendButtons [Client]Game.UI.UICommon.AppendButtons Game.TipManager::m_ButtonGenerator -> A
	System.Int32 [Client]System.Int32 Game.TipManager::m_Type -> A
	System.Object [Client]System.Object Game.TipManager::m_Data -> A
	Game.UI.UICommon.IXUIListItem [Client]Game.UI.UICommon.IXUIListItem Game.TipManager::m_uiListItem -> A
	System.Boolean [Client]System.Boolean Game.TipManager::m_Show -> A
	System.Object [Client]System.Object Game.TipManager::m_Data_Compare -> a
	Game.TipManager/enumShowTip [Client]Game.TipManager/enumShowTip Game.TipManager::<EShowTipType>k__BackingField -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TipManager::<UrlLocalPos>k__BackingField -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TipManager::<UrlLocalSize>k__BackingField -> a
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.TipManager::<TipGameObj>k__BackingField -> A
	Game.UI.UICommon.IXUIObject [Client]Game.UI.UICommon.IXUIObject Game.TipManager::<TipXUIObject>k__BackingField -> A
	System.String [Client]System.String Game.TipManager::<Name>k__BackingField -> A
	UnityEngine.Color [Client]UnityEngine.Color Game.TipManager::<NameColor>k__BackingField -> A
	System.String [Client]System.String Game.TipManager::<TypeName>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.TipManager::<ShowEquipTag>k__BackingField -> a
	System.String [Client]System.String Game.TipManager::<Name_Compare>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.TipManager::<ShowCompareEquipTag>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.TipManager::<CanGenerateButtons>k__BackingField -> b

	Game.TipManager/enumShowTip [Client]Game.TipManager/enumShowTip Game.TipManager::EShowTipType -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TipManager::UrlLocalPos -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TipManager::UrlLocalSize -> dropped
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.TipManager::TipGameObj -> dropped
	Game.UI.UICommon.IXUIObject [Client]Game.UI.UICommon.IXUIObject Game.TipManager::TipXUIObject -> dropped
	System.String [Client]System.String Game.TipManager::Name -> dropped
	UnityEngine.Color [Client]UnityEngine.Color Game.TipManager::NameColor -> dropped
	System.String [Client]System.String Game.TipManager::TypeName -> dropped
	System.Boolean [Client]System.Boolean Game.TipManager::ShowEquipTag -> dropped
	Game.UI.UICommon.IXUIListItem [Client]Game.UI.UICommon.IXUIListItem Game.TipManager::UIListItem -> dropped
	System.String [Client]System.String Game.TipManager::Name_Compare -> dropped
	System.Boolean [Client]System.Boolean Game.TipManager::ShowCompareEquipTag -> dropped
	System.Boolean [Client]System.Boolean Game.TipManager::CanGenerateCompareTip -> dropped
	System.Boolean [Client]System.Boolean Game.TipManager::CanGenerateButtons -> dropped
}

[Client]Game.TipManager/enumShowTip -> [Client]b.E/e
{
	Game.TipManager/enumShowTip [Client]Game.TipManager/enumShowTip Game.TipManager/enumShowTip::Default -> A
	Game.TipManager/enumShowTip [Client]Game.TipManager/enumShowTip Game.TipManager/enumShowTip::ListItem -> a
	Game.TipManager/enumShowTip [Client]Game.TipManager/enumShowTip Game.TipManager/enumShowTip::Url -> B
	Game.TipManager/enumShowTip [Client]Game.TipManager/enumShowTip Game.TipManager/enumShowTip::ShortCut -> b

	System.Int32 [Client]System.Int32 Game.TipManager/enumShowTip::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream -> [Client]b.F
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::get_IsStreamOwner[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Skip[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::StopDecrypting[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::get_Available[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Fill[0]( ) -> b

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::WriteByte[1]( System.Byte ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::.ctor[2]( System.IO.Stream, ICSharpCode.SharpZipLib.Zip.Compression.Inflater ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::.ctor[3]( System.IO.Stream, ICSharpCode.SharpZipLib.Zip.Compression.Inflater, System.Int32 ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::BeginWrite[5]( System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object ) skipped:  external base class or interface

	ICSharpCode.SharpZipLib.Zip.Compression.Inflater [Client]ICSharpCode.SharpZipLib.Zip.Compression.Inflater ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::inf -> A
	ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer [Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::inputBuffer -> A
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::baseInputStream -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::csize -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::isClosed -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::isStreamOwner -> a

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::IsStreamOwner -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Available -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::CanSeek -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::CanWrite -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Length -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream::Position -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream -> [Client]b.f
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::get_Available[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::get_Password[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::set_Password[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::get_CanDecompressEntry[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::GetNextEntry[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::ReadDataDescriptor[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::CompleteCloseEntry[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::CloseEntry[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::ReadingNotAvailable[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::ReadingNotSupported[3]( System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::InitialRead[3]( System.Byte[], System.Int32, System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::BodyRead[3]( System.Byte[], System.Int32, System.Int32 ) -> b

	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::ReadByte[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream::.ctor[2]( System.IO.Stream, System.Int32 ) skipped:  special name

	ICSharpCode.SharpZipLib.Zip.ZipInputStream/ReadDataHandler [Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream/ReadDataHandler ICSharpCode.SharpZipLib.Zip.ZipInputStream::internalReader -> A
	ICSharpCode.SharpZipLib.Checksums.Crc32 [Client]ICSharpCode.SharpZipLib.Checksums.Crc32 ICSharpCode.SharpZipLib.Zip.ZipInputStream::crc -> A
	ICSharpCode.SharpZipLib.Zip.ZipEntry [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry ICSharpCode.SharpZipLib.Zip.ZipInputStream::entry -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipInputStream::size -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipInputStream::method -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipInputStream::flags -> a
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipInputStream::password -> A

	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipInputStream::Password -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipInputStream::CanDecompressEntry -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipInputStream::Available -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipInputStream::Length -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.DescriptorData -> [Client]b.g
{
	[Client]ICSharpCode.SharpZipLib.Zip.DescriptorData::get_CompressedSize[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.DescriptorData::set_CompressedSize[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.DescriptorData::get_Size[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.DescriptorData::set_Size[1]( System.Int64 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.DescriptorData::get_Crc[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.DescriptorData::set_Crc[1]( System.Int64 ) -> B

	[Client]ICSharpCode.SharpZipLib.Zip.DescriptorData::.ctor[0]( ) skipped:  special name

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.DescriptorData::size -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.DescriptorData::compressedSize -> a
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.DescriptorData::crc -> B

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.DescriptorData::CompressedSize -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.DescriptorData::Size -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.DescriptorData::Crc -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.EntryPatchData -> [Client]b.H
{
	[Client]ICSharpCode.SharpZipLib.Zip.EntryPatchData::get_SizePatchOffset[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.EntryPatchData::set_SizePatchOffset[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.EntryPatchData::get_CrcPatchOffset[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.EntryPatchData::set_CrcPatchOffset[1]( System.Int64 ) -> a

	[Client]ICSharpCode.SharpZipLib.Zip.EntryPatchData::.ctor[0]( ) skipped:  special name

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.EntryPatchData::sizePatchOffset_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.EntryPatchData::crcPatchOffset_ -> a

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.EntryPatchData::SizePatchOffset -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.EntryPatchData::CrcPatchOffset -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream -> [Client]b.h
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::get_IsStreamOwner[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteLocalHeader[2]( ICSharpCode.SharpZipLib.Zip.ZipEntry, ICSharpCode.SharpZipLib.Zip.EntryPatchData ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::LocateBlockWithSignature[4]( System.Int32, System.Int64, System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteZip64EndOfCentralDirectory[3]( System.Int64, System.Int64, System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteEndOfCentralDirectory[4]( System.Int64, System.Int64, System.Int64, System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::ReadLEShort[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::ReadLEInt[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::ReadLELong[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteLEShort[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteLEUshort[1]( System.UInt16 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteLEInt[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteLEUint[1]( System.UInt32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteLELong[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteLEUlong[1]( System.UInt64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::WriteDataDescriptor[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::ReadDataDescriptor[2]( System.Boolean, ICSharpCode.SharpZipLib.Zip.DescriptorData ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::get_CanTimeout[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipHelperStream::.ctor[1]( System.IO.Stream ) skipped:  special name

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipHelperStream::isOwner_ -> A
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Zip.ZipHelperStream::stream_ -> A

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipHelperStream::IsStreamOwner -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipHelperStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipHelperStream::CanSeek -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipHelperStream::CanTimeout -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipHelperStream::Length -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipHelperStream::Position -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipHelperStream::CanWrite -> dropped
}

[Client]ICSharpCode.SharpZipLib.Tar.TarHeader -> [Client]b.I
{
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_Name[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_Name[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetName[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_Mode[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_Mode[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_UserId[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_UserId[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_GroupId[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_GroupId[1]( System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_Size[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_Size[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_ModTime[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_ModTime[1]( System.DateTime ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_Checksum[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_IsChecksumValid[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_TypeFlag[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_TypeFlag[1]( System.Byte ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_LinkName[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_LinkName[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_Magic[0]( ) -> f
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_Magic[1]( System.String ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_Version[0]( ) -> G
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_Version[1]( System.String ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_UserName[0]( ) -> g
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_UserName[1]( System.String ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_GroupName[0]( ) -> H
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_GroupName[1]( System.String ) -> c
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_DevMajor[0]( ) -> h
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_DevMajor[1]( System.Int32 ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::get_DevMinor[0]( ) -> I
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::set_DevMinor[1]( System.Int32 ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::ParseBuffer[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::WriteHeader[1]( System.Byte[] ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::SetValueDefaults[4]( System.Int32, System.String, System.Int32, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::RestoreSetValues[0]( ) -> i
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::ParseOctal[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::ParseName[3]( System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetNameBytes[5]( System.Text.StringBuilder, System.Int32, System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetNameBytes[5]( System.String, System.Int32, System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetNameBytes[4]( System.Text.StringBuilder, System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetNameBytes[4]( System.String, System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetAsciiBytes[5]( System.String, System.Int32, System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetOctalBytes[4]( System.Int64, System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetLongOctalBytes[4]( System.Int64, System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetCheckSumOctalBytes[4]( System.Int64, System.Byte[], System.Int32, System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::ComputeCheckSum[1]( System.Byte[] ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::MakeCheckSum[1]( System.Byte[] ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetCTime[1]( System.DateTime ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetDateTimeFromCTime[1]( System.Int64 ) -> a

	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::Clone[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::GetHashCode[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::Equals[1]( System.Object ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarHeader::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::NAMELEN -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::MODELEN -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::UIDLEN -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::GIDLEN -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::CHKSUMLEN -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::CHKSUMOFS -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::SIZELEN -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::MAGICLEN -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::VERSIONLEN -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::MODTIMELEN -> e
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::UNAMELEN -> F
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::GNAMELEN -> f
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::DEVLEN -> G
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_OLDNORM -> A
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_NORMAL -> a
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_LINK -> B
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_SYMLINK -> b
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_CHR -> C
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_BLK -> c
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_DIR -> D
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_FIFO -> d
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_CONTIG -> E
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_GHDR -> e
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_XHDR -> F
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_ACL -> f
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_GNU_DUMPDIR -> G
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_EXTATTR -> g
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_META -> H
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_GNU_LONGLINK -> h
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_GNU_LONGNAME -> I
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_GNU_MULTIVOL -> i
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_GNU_NAMES -> J
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_GNU_SPARSE -> j
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::LF_GNU_VOLHDR -> K
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::TMAGIC -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::GNU_TMAGIC -> a
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarHeader::timeConversionFactor -> A
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Tar.TarHeader::dateTime1970 -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::name -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::mode -> g
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::userId -> H
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::groupId -> h
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarHeader::size -> a
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Tar.TarHeader::modTime -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::checksum -> I
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarHeader::isChecksumValid -> A
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::typeFlag -> k
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::linkName -> b
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::magic -> C
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::version -> c
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::userName -> D
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::groupName -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::devMajor -> i
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::devMinor -> J
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::userIdAsSet -> j
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::groupIdAsSet -> K
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::userNameAsSet -> E
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::groupNameAsSet -> e
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::defaultUserId -> k
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::defaultGroupId -> L
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::defaultGroupName -> F
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::defaultUser -> f

	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::Name -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::Mode -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::UserId -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::GroupId -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarHeader::Size -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Tar.TarHeader::ModTime -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::Checksum -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarHeader::IsChecksumValid -> dropped
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Tar.TarHeader::TypeFlag -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::LinkName -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::Magic -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::Version -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::UserName -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarHeader::GroupName -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::DevMajor -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarHeader::DevMinor -> dropped
}

[Client]Game.Client -> [Client]b.i
{
	[Client]Game.Client::get_Network[0]( ) -> A
	[Client]Game.Client::GetString[1]( System.String ) -> A
	[Client]Game.Client::get_Instance[0]( ) -> a
	[Client]Game.Client::Awake[0]( ) -> B
	[Client]Game.Client::Start[0]( ) -> b
	[Client]Game.Client::FixedUpdate[0]( ) -> C
	[Client]Game.Client::Update[0]( ) -> c
	[Client]Game.Client::LateUpdate[0]( ) -> D
	[Client]Game.Client::OnGUI[0]( ) -> d
	[Client]Game.Client::OnMessage[1]( System.String ) -> a
	[Client]Game.Client::OnApplicationFocus[1]( System.Boolean ) -> A
	[Client]Game.Client::OnApplicationPause[1]( System.Boolean ) -> a
	[Client]Game.Client::OnApplicationQuit[0]( ) -> E
	[Client]Game.Client::OnSdkInitFail[0]( ) -> e
	[Client]Game.Client::StartClient[0]( ) -> F
	[Client]Game.Client::DelayStartClient[0]( ) -> f
	[Client]Game.Client::StartLogin[0]( ) -> G
	[Client]Game.Client::InitLog[0]( ) -> g
	[Client]Game.Client::InitPlatform[0]( ) -> H
	[Client]Game.Client::InitSettings[0]( ) -> h
	[Client]Game.Client::InitData[0]( ) -> I
	[Client]Game.Client::InitCamera[0]( ) -> i
	[Client]Game.Client::RefreshSplash[0]( ) -> J
	[Client]Game.Client::RefreshLauncherInfo[0]( ) -> j
	[Client]Game.Client::UpdateMainLoop[0]( ) -> K
	[Client]Game.Client::UpdateMsg[0]( ) -> k

	[Client]Game.Client::.cctor[0]( ) skipped:  special name
	[Client]Game.Client::.ctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.Client::m_Log -> A
	Game.CameraManager [Client]Game.CameraManager Game.Client::m_CameraManager -> A
	Game.SceneManager [Client]Game.SceneManager Game.Client::m_SceneManager -> A
	Game.CharacterManager [Client]Game.CharacterManager Game.Client::m_CharManager -> A
	Game.MsgManager [Client]Game.MsgManager Game.Client::m_MsgManager -> A
	Game.InputManager [Client]Game.InputManager Game.Client::m_InputManager -> A
	System.Int32 [Client]System.Int32 Game.Client::m_State -> A
	System.Boolean [Client]System.Boolean Game.Client::m_NeedShowSplash -> A
	Game.Client [Client]Game.Client Game.Client::m_Instance -> A

	Game.Session [Client]Game.Session Game.Client::Network -> dropped
	Game.Client [Client]Game.Client Game.Client::Instance -> dropped
}

[Client]Game.Client/EClientState -> [Client]b.i/J
{
	Game.Client/EClientState [Client]Game.Client/EClientState Game.Client/EClientState::State_Init -> A
	Game.Client/EClientState [Client]Game.Client/EClientState Game.Client/EClientState::State_InitSDK -> a
	Game.Client/EClientState [Client]Game.Client/EClientState Game.Client/EClientState::State_Update -> B
	Game.Client/EClientState [Client]Game.Client/EClientState Game.Client/EClientState::State_Start -> b
	Game.Client/EClientState [Client]Game.Client/EClientState Game.Client/EClientState::State_Game -> C

	System.Int32 [Client]System.Int32 Game.Client/EClientState::value__ skipped:  filtered
}

[Client]Game.Client/ELauncherState -> [Client]b.i/j
{
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::UNZIPPING -> A
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::UNZIP_FINISH -> a
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::DOWNLOAD_UPDATE -> B
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::DOWNLOAD_UPDATE_FINISH -> b
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::DOWNLOAD_UPDATE_FAILED -> C
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::DOWNLOAD_PATCH -> c
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::DOWNLOAD_PATCH_FINISH -> D
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::DOWNLOAD_PATCH_FAILED -> d
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::DOWNLOAD_SERVERLIST -> E
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::DOWNLOAD_SERVERLIST_FINISH -> e
	Game.Client/ELauncherState [Client]Game.Client/ELauncherState Game.Client/ELauncherState::DOWNLOAD_SERVERLIST_FAILED -> F

	System.Int32 [Client]System.Int32 Game.Client/ELauncherState::value__ skipped:  filtered
}

[Client]Game.Msg.MsgActivity -> [Client]b.K
{

	[Client]Game.Msg.MsgActivity::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgActivity::BaseType -> A
}

[Client]Game.Msg.MsgClientReqActivityRecord -> [Client]b.k
{
	[Client]Game.Msg.MsgClientReqActivityRecord::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqActivityRecord::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqActivityRecord::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqActivityRecord::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqActivityRecord::Type -> A
}

[Client]Game.Msg.MsgServerAckActivityRecord -> [Client]b.L
{
	[Client]Game.Msg.MsgServerAckActivityRecord::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckActivityRecord::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckActivityRecord::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckActivityRecord::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckActivityRecord::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ActivityRecord> [Client]System.Collections.Generic.List`1<Game.Msg.ActivityRecord> Game.Msg.MsgServerAckActivityRecord::m_oVecActivityRecordsVec -> A
}

[Client]Game.Msg.MsgClientReqBossRefreshTime -> [Client]b.l
{
	[Client]Game.Msg.MsgClientReqBossRefreshTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqBossRefreshTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqBossRefreshTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBossRefreshTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqBossRefreshTime::Type -> A
}

[Client]Game.Msg.MsgServerAckBossRefreshTime -> [Client]b.M
{
	[Client]Game.Msg.MsgServerAckBossRefreshTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckBossRefreshTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckBossRefreshTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBossRefreshTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckBossRefreshTime::Type -> A
	System.Collections.Generic.List`1<Game.Msg.MonsterDropCD> [Client]System.Collections.Generic.List`1<Game.Msg.MonsterDropCD> Game.Msg.MsgServerAckBossRefreshTime::m_oVecMonsterDropCDVec -> A
}

[Client]Game.Msg.MsgClientReqActivePoint -> [Client]b.m
{

	[Client]Game.Msg.MsgClientReqActivePoint::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqActivePoint::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqActivePoint::Type -> A
}

[Client]Game.Msg.MsgServerAckActivePoint -> [Client]b.N
{
	[Client]Game.Msg.MsgServerAckActivePoint::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckActivePoint::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckActivePoint::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckActivePoint::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckActivePoint::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckActivePoint::m_usActivePoint -> a
	System.Collections.Generic.List`1<Game.Msg.ActivePointData> [Client]System.Collections.Generic.List`1<Game.Msg.ActivePointData> Game.Msg.MsgServerAckActivePoint::m_oVecActivityList -> A
}

[Client]Game.Msg.MsgClientReqMoneyDone -> [Client]b.n
{
	[Client]Game.Msg.MsgClientReqMoneyDone::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqMoneyDone::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqMoneyDone::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqMoneyDone::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqMoneyDone::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqMoneyDone::m_btActivityID -> a
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientReqMoneyDone::m_bDoAll -> A
}

[Client]Game.Msg.MsgServerAckMoneyDone -> [Client]b.O
{
	[Client]Game.Msg.MsgServerAckMoneyDone::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckMoneyDone::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckMoneyDone::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMoneyDone::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckMoneyDone::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMoneyDone::m_btActivityID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMoneyDone::m_ebtResult -> B
}

[Client]Game.Msg.MsgClientReqHundredTowerData -> [Client]b.o
{

	[Client]Game.Msg.MsgClientReqHundredTowerData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqHundredTowerData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqHundredTowerData::Type -> A
}

[Client]Game.Msg.MsgServerAckHundredTowerData -> [Client]b.P
{
	[Client]Game.Msg.MsgServerAckHundredTowerData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckHundredTowerData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckHundredTowerData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckHundredTowerData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckHundredTowerData::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckHundredTowerData::m_uiPlayerVar808 -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckHundredTowerData::m_uiNValue -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckHundredTowerData::m_uiKMValue -> B
}

[Client]Game.Msg.MsgClientReqHundredTowerAction -> [Client]b.p
{

	[Client]Game.Msg.MsgClientReqHundredTowerAction::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqHundredTowerAction::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqHundredTowerAction::Type -> A
}

[Client]Game.Msg.TeamMemInfo -> [Client]b.Q
{
	[Client]Game.Msg.TeamMemInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.TeamMemInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.TeamMemInfo::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.Msg.TeamMemInfo::m_strName -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.TeamMemInfo::m_uiID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.TeamMemInfo::m_usLevel -> A
	System.Byte [Client]System.Byte Game.Msg.TeamMemInfo::m_btSex -> A
	System.Byte [Client]System.Byte Game.Msg.TeamMemInfo::m_btProfession -> a
	System.Byte [Client]System.Byte Game.Msg.TeamMemInfo::m_btLineID -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.TeamMemInfo::m_uiHP -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.TeamMemInfo::m_uiMaxHP -> B
	System.Byte [Client]System.Byte Game.Msg.TeamMemInfo::m_btOnline -> b
	System.Boolean [Client]System.Boolean Game.Msg.TeamMemInfo::m_bRobot -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.TeamMemInfo::m_usMapID -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.TeamMemInfo::m_uiBotPlayerID -> b
}

[Client]Game.Msg.FamilySimpleData -> [Client]b.q
{
	[Client]Game.Msg.FamilySimpleData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.FamilySimpleData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.FamilySimpleData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.FamilySimpleData::m_uiID -> A
	System.String [Client]System.String Game.Msg.FamilySimpleData::m_strName -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.FamilySimpleData::m_usNum -> A
	System.Boolean [Client]System.Boolean Game.Msg.FamilySimpleData::m_bHaveReq -> A
	System.String [Client]System.String Game.Msg.FamilySimpleData::m_strHireNewMemberNotice -> a
}

[Client]Game.Msg.ClientSRestore -> [Client]b.R
{
	[Client]Game.Msg.ClientSRestore::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientSRestore::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientSRestore::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ClientSRestore::m_uiCapacitance -> A
}

[Client]Game.Msg.AuctionDetailSale -> [Client]b.r
{
	[Client]Game.Msg.AuctionDetailSale::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.AuctionDetailSale::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.AuctionDetailSale::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.AuctionDetailSale::m_uiID -> A
	Game.Msg.ClientSItemData [Client]Game.Msg.ClientSItemData Game.Msg.AuctionDetailSale::m_stItemData -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.AuctionDetailSale::m_uiEndTime -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.AuctionDetailSale::m_uiOwnerID -> B
	System.String [Client]System.String Game.Msg.AuctionDetailSale::m_strOwnerName -> A
	System.Byte [Client]System.Byte Game.Msg.AuctionDetailSale::m_btMoneyType -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.AuctionDetailSale::m_uiPrice -> b
}

[Client]Game.Msg.AllServerAwardData -> [Client]b.S
{
	[Client]Game.Msg.AllServerAwardData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.AllServerAwardData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.AllServerAwardData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.AllServerAwardData::m_uiID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.AllServerAwardData::m_uiStartTime -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.AllServerAwardData::m_uiEndTime -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.AllServerAwardData::m_uiMinLevel -> b
	System.UInt32 [Client]System.UInt32 Game.Msg.AllServerAwardData::m_uiMaxLevel -> C
	System.Collections.Generic.List`1<Game.Msg.AwardItemData> [Client]System.Collections.Generic.List`1<Game.Msg.AwardItemData> Game.Msg.AllServerAwardData::m_oVecItemList -> A
	System.String [Client]System.String Game.Msg.AllServerAwardData::m_strAwardDesc -> A
}

[Client]Game.TouchInfo -> [Client]b.s
{
	[Client]Game.TouchInfo::get_FingerId[0]( ) -> A
	[Client]Game.TouchInfo::set_FingerId[1]( System.Int32 ) -> A
	[Client]Game.TouchInfo::get_StartTime[0]( ) -> a
	[Client]Game.TouchInfo::set_StartTime[1]( System.Single ) -> A
	[Client]Game.TouchInfo::get_StartPos[0]( ) -> B
	[Client]Game.TouchInfo::set_StartPos[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.TouchInfo::get_EndPos[0]( ) -> b
	[Client]Game.TouchInfo::set_EndPos[1]( UnityEngine.Vector2 ) -> a
	[Client]Game.TouchInfo::get_Pos[0]( ) -> C
	[Client]Game.TouchInfo::set_Pos[1]( UnityEngine.Vector2 ) -> B
	[Client]Game.TouchInfo::get_Phase[0]( ) -> c
	[Client]Game.TouchInfo::set_Phase[1]( UnityEngine.TouchPhase ) -> A
	[Client]Game.TouchInfo::get_IsDown[0]( ) -> D
	[Client]Game.TouchInfo::get_TracePointCount[0]( ) -> d
	[Client]Game.TouchInfo::ClearTrace[0]( ) -> E
	[Client]Game.TouchInfo::AddTracePoint[1]( UnityEngine.Vector2 ) -> b
	[Client]Game.TouchInfo::Clear[0]( ) -> e

	[Client]Game.TouchInfo::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.TouchInfo::MinTracePointDistance -> A
	System.Collections.Generic.List`1<UnityEngine.Vector2> [Client]System.Collections.Generic.List`1<UnityEngine.Vector2> Game.TouchInfo::m_TracePoints -> A
	UnityEngine.TouchPhase [Client]UnityEngine.TouchPhase Game.TouchInfo::m_Phase -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TouchInfo::m_Position -> A
	System.Int32 [Client]System.Int32 Game.TouchInfo::<FingerId>k__BackingField -> A
	System.Single [Client]System.Single Game.TouchInfo::<StartTime>k__BackingField -> a
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TouchInfo::<StartPos>k__BackingField -> a
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TouchInfo::<EndPos>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.TouchInfo::FingerId -> dropped
	System.Single [Client]System.Single Game.TouchInfo::StartTime -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TouchInfo::StartPos -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TouchInfo::EndPos -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TouchInfo::Pos -> dropped
	UnityEngine.TouchPhase [Client]UnityEngine.TouchPhase Game.TouchInfo::Phase -> dropped
	System.Boolean [Client]System.Boolean Game.TouchInfo::IsDown -> dropped
	System.Int32 [Client]System.Int32 Game.TouchInfo::TracePointCount -> dropped
}

[Client]Game.TouchList -> [Client]b.T
{
	[Client]Game.TouchList::get_Item[1]( System.Int32 ) -> A
	[Client]Game.TouchList::get_Count[0]( ) -> A
	[Client]Game.TouchList::System.Collections.IEnumerable.GetEnumerator[0]( ) -> a
	[Client]Game.TouchList::UpdateEnd[0]( ) -> B
	[Client]Game.TouchList::Add[1]( UnityEngine.Touch[] ) -> A
	[Client]Game.TouchList::Add[1]( Game.TouchInfo ) -> A
	[Client]Game.TouchList::Clear[0]( ) -> b
	[Client]Game.TouchList::GetTouch[1]( System.Int32 ) -> a
	[Client]Game.TouchList::RemoveAt[1]( System.Int32 ) -> B
	[Client]Game.TouchList::Remove[1]( System.Int32 ) -> b

	[Client]Game.TouchList::GetEnumerator[0]( ) skipped:  external base class or interface
	[Client]Game.TouchList::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Game.TouchInfo> [Client]System.Collections.Generic.List`1<Game.TouchInfo> Game.TouchList::m_TouchInfos -> A

	Game.TouchInfo [Client]Game.TouchInfo Game.TouchList::Item -> dropped
	System.Int32 [Client]System.Int32 Game.TouchList::Count -> dropped
}

[Client]Game.DataWorldMap -> [Client]b.t
{
	[Client]Game.DataWorldMap::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataWorldMap::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataWorldMap::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataWorldMap::get_MapId[0]( ) -> A
	[Client]Game.DataWorldMap::set_MapId[1]( System.Int32 ) -> A
	[Client]Game.DataWorldMap::get_MapName[0]( ) -> a
	[Client]Game.DataWorldMap::set_MapName[1]( System.String ) -> A
	[Client]Game.DataWorldMap::get_ModelPath[0]( ) -> B
	[Client]Game.DataWorldMap::set_ModelPath[1]( System.String ) -> a
	[Client]Game.DataWorldMap::get_SceneName[0]( ) -> b
	[Client]Game.DataWorldMap::set_SceneName[1]( System.String ) -> B
	[Client]Game.DataWorldMap::get_MapWidth[0]( ) -> C
	[Client]Game.DataWorldMap::set_MapWidth[1]( System.Int32 ) -> a
	[Client]Game.DataWorldMap::get_PKType[0]( ) -> c
	[Client]Game.DataWorldMap::set_PKType[1]( System.Int32 ) -> B
	[Client]Game.DataWorldMap::get_PKMask[0]( ) -> D
	[Client]Game.DataWorldMap::set_PKMask[1]( System.Int32 ) -> b
	[Client]Game.DataWorldMap::get_CanRide[0]( ) -> d
	[Client]Game.DataWorldMap::set_CanRide[1]( System.Int32 ) -> C
	[Client]Game.DataWorldMap::get_IfShowMiniMap[0]( ) -> E
	[Client]Game.DataWorldMap::set_IfShowMiniMap[1]( System.Int32 ) -> c
	[Client]Game.DataWorldMap::get_SafeMapId[0]( ) -> e
	[Client]Game.DataWorldMap::set_SafeMapId[1]( System.Int32 ) -> D
	[Client]Game.DataWorldMap::get_SafeMapX[0]( ) -> F
	[Client]Game.DataWorldMap::set_SafeMapX[1]( System.Int32 ) -> d
	[Client]Game.DataWorldMap::get_SafeMapY[0]( ) -> f
	[Client]Game.DataWorldMap::set_SafeMapY[1]( System.Int32 ) -> E
	[Client]Game.DataWorldMap::get_MapBgMusic[0]( ) -> G
	[Client]Game.DataWorldMap::set_MapBgMusic[1]( System.String ) -> b
	[Client]Game.DataWorldMap::get_MapEffect[0]( ) -> g
	[Client]Game.DataWorldMap::set_MapEffect[1]( System.String ) -> C
	[Client]Game.DataWorldMap::get_ShowMapX[0]( ) -> H
	[Client]Game.DataWorldMap::set_ShowMapX[1]( System.Int32 ) -> e
	[Client]Game.DataWorldMap::get_ShowMapY[0]( ) -> h
	[Client]Game.DataWorldMap::set_ShowMapY[1]( System.Int32 ) -> F
	[Client]Game.DataWorldMap::get_IsNight[0]( ) -> I
	[Client]Game.DataWorldMap::set_IsNight[1]( System.Boolean ) -> A
	[Client]Game.DataWorldMap::get_TipInfo[0]( ) -> i
	[Client]Game.DataWorldMap::set_TipInfo[1]( System.String ) -> c
	[Client]Game.DataWorldMap::get_CameraMode[0]( ) -> J
	[Client]Game.DataWorldMap::set_CameraMode[1]( System.String ) -> D
	[Client]Game.DataWorldMap::get_Logo[0]( ) -> j
	[Client]Game.DataWorldMap::set_Logo[1]( System.String ) -> d
	[Client]Game.DataWorldMap::get_MiniMap[0]( ) -> K
	[Client]Game.DataWorldMap::set_MiniMap[1]( System.String ) -> E
	[Client]Game.DataWorldMap::get_ShowFog[0]( ) -> k
	[Client]Game.DataWorldMap::set_ShowFog[1]( System.Boolean ) -> a
	[Client]Game.DataWorldMap::get_FogAlpha[0]( ) -> L
	[Client]Game.DataWorldMap::set_FogAlpha[1]( System.Int32 ) -> f
	[Client]Game.DataWorldMap::get_JoyStick2Mode[0]( ) -> l
	[Client]Game.DataWorldMap::set_JoyStick2Mode[1]( System.Int32 ) -> G
	[Client]Game.DataWorldMap::get_MapIcon[0]( ) -> M
	[Client]Game.DataWorldMap::set_MapIcon[1]( System.Int32 ) -> g
	[Client]Game.DataWorldMap::get_Root[0]( ) -> m
	[Client]Game.DataWorldMap::set_Root[1]( System.Int32 ) -> H
	[Client]Game.DataWorldMap::get_WorldFlyIn[0]( ) -> N
	[Client]Game.DataWorldMap::set_WorldFlyIn[1]( System.Boolean ) -> B
	[Client]Game.DataWorldMap::get_CantFindPath[0]( ) -> n
	[Client]Game.DataWorldMap::set_CantFindPath[1]( System.Boolean ) -> b
	[Client]Game.DataWorldMap::get_WorldMapScriptId[0]( ) -> O
	[Client]Game.DataWorldMap::set_WorldMapScriptId[1]( System.Int32 ) -> h
	[Client]Game.DataWorldMap::get_WorldFlyInX[0]( ) -> o
	[Client]Game.DataWorldMap::set_WorldFlyInX[1]( System.Single ) -> A
	[Client]Game.DataWorldMap::get_WorldFlyInY[0]( ) -> P
	[Client]Game.DataWorldMap::set_WorldFlyInY[1]( System.Single ) -> a
	[Client]Game.DataWorldMap::get_EnterNpcId[0]( ) -> p
	[Client]Game.DataWorldMap::set_EnterNpcId[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataWorldMap::get_GuildProtect[0]( ) -> Q
	[Client]Game.DataWorldMap::set_GuildProtect[1]( System.Boolean ) -> C
	[Client]Game.DataWorldMap::get_PreLoad[0]( ) -> q
	[Client]Game.DataWorldMap::set_PreLoad[1]( System.Int32[] ) -> A
	[Client]Game.DataWorldMap::get_PreLoadMore[0]( ) -> R
	[Client]Game.DataWorldMap::set_PreLoadMore[1]( System.Int32[] ) -> a
	[Client]Game.DataWorldMap::get_SurfaceHeight[0]( ) -> r
	[Client]Game.DataWorldMap::set_SurfaceHeight[1]( System.Single ) -> B

	[Client]Game.DataWorldMap::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataWorldMap::<MapId>k__BackingField -> A
	System.String [Client]System.String Game.DataWorldMap::<MapName>k__BackingField -> A
	System.String [Client]System.String Game.DataWorldMap::<ModelPath>k__BackingField -> a
	System.String [Client]System.String Game.DataWorldMap::<SceneName>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<MapWidth>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<PKType>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<PKMask>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<CanRide>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<IfShowMiniMap>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<SafeMapId>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<SafeMapX>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<SafeMapY>k__BackingField -> E
	System.String [Client]System.String Game.DataWorldMap::<MapBgMusic>k__BackingField -> b
	System.String [Client]System.String Game.DataWorldMap::<MapEffect>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<ShowMapX>k__BackingField -> e
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<ShowMapY>k__BackingField -> F
	System.Boolean [Client]System.Boolean Game.DataWorldMap::<IsNight>k__BackingField -> A
	System.String [Client]System.String Game.DataWorldMap::<TipInfo>k__BackingField -> c
	System.String [Client]System.String Game.DataWorldMap::<CameraMode>k__BackingField -> D
	System.String [Client]System.String Game.DataWorldMap::<Logo>k__BackingField -> d
	System.String [Client]System.String Game.DataWorldMap::<MiniMap>k__BackingField -> E
	System.Boolean [Client]System.Boolean Game.DataWorldMap::<ShowFog>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<FogAlpha>k__BackingField -> f
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<JoyStick2Mode>k__BackingField -> G
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<MapIcon>k__BackingField -> g
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<Root>k__BackingField -> H
	System.Boolean [Client]System.Boolean Game.DataWorldMap::<WorldFlyIn>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.DataWorldMap::<CantFindPath>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataWorldMap::<WorldMapScriptId>k__BackingField -> h
	System.Single [Client]System.Single Game.DataWorldMap::<WorldFlyInX>k__BackingField -> A
	System.Single [Client]System.Single Game.DataWorldMap::<WorldFlyInY>k__BackingField -> a
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataWorldMap::<EnterNpcId>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DataWorldMap::<GuildProtect>k__BackingField -> C
	System.Int32[] [Client]System.Int32[] Game.DataWorldMap::<PreLoad>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataWorldMap::<PreLoadMore>k__BackingField -> a
	System.Single [Client]System.Single Game.DataWorldMap::<SurfaceHeight>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataWorldMap::MapId -> dropped
	System.String [Client]System.String Game.DataWorldMap::MapName -> dropped
	System.String [Client]System.String Game.DataWorldMap::ModelPath -> dropped
	System.String [Client]System.String Game.DataWorldMap::SceneName -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::MapWidth -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::PKType -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::PKMask -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::CanRide -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::IfShowMiniMap -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::SafeMapId -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::SafeMapX -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::SafeMapY -> dropped
	System.String [Client]System.String Game.DataWorldMap::MapBgMusic -> dropped
	System.String [Client]System.String Game.DataWorldMap::MapEffect -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::ShowMapX -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::ShowMapY -> dropped
	System.Boolean [Client]System.Boolean Game.DataWorldMap::IsNight -> dropped
	System.String [Client]System.String Game.DataWorldMap::TipInfo -> dropped
	System.String [Client]System.String Game.DataWorldMap::CameraMode -> dropped
	System.String [Client]System.String Game.DataWorldMap::Logo -> dropped
	System.String [Client]System.String Game.DataWorldMap::MiniMap -> dropped
	System.Boolean [Client]System.Boolean Game.DataWorldMap::ShowFog -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::FogAlpha -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::JoyStick2Mode -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::MapIcon -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::Root -> dropped
	System.Boolean [Client]System.Boolean Game.DataWorldMap::WorldFlyIn -> dropped
	System.Boolean [Client]System.Boolean Game.DataWorldMap::CantFindPath -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMap::WorldMapScriptId -> dropped
	System.Single [Client]System.Single Game.DataWorldMap::WorldFlyInX -> dropped
	System.Single [Client]System.Single Game.DataWorldMap::WorldFlyInY -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataWorldMap::EnterNpcId -> dropped
	System.Boolean [Client]System.Boolean Game.DataWorldMap::GuildProtect -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataWorldMap::PreLoad -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataWorldMap::PreLoadMore -> dropped
	System.Single [Client]System.Single Game.DataWorldMap::SurfaceHeight -> dropped
}

[Client]Game.DataWorldMapManager -> [Client]b.U
{
	[Client]Game.DataWorldMapManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataWorldMapManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataWorldMapManager::Clear[0]( ) -> A
	[Client]Game.DataWorldMapManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataWorldMapManager::GetDataByMapId[1]( System.Int32 ) -> A
	[Client]Game.DataWorldMapManager::GetDataListByMapId[1]( System.Int32 ) -> a
	[Client]Game.DataWorldMapManager::GetDataByMapName[1]( System.String ) -> A
	[Client]Game.DataWorldMapManager::GetDataListByMapName[1]( System.String ) -> a
	[Client]Game.DataWorldMapManager::GetDataByModelPath[1]( System.String ) -> B
	[Client]Game.DataWorldMapManager::GetDataListByModelPath[1]( System.String ) -> b
	[Client]Game.DataWorldMapManager::GetDataBySceneName[1]( System.String ) -> C
	[Client]Game.DataWorldMapManager::GetDataListBySceneName[1]( System.String ) -> c
	[Client]Game.DataWorldMapManager::GetDataByMapWidth[1]( System.Int32 ) -> B
	[Client]Game.DataWorldMapManager::GetDataListByMapWidth[1]( System.Int32 ) -> b
	[Client]Game.DataWorldMapManager::GetDataByPKType[1]( System.Int32 ) -> C
	[Client]Game.DataWorldMapManager::GetDataListByPKType[1]( System.Int32 ) -> c
	[Client]Game.DataWorldMapManager::GetDataByPKMask[1]( System.Int32 ) -> D
	[Client]Game.DataWorldMapManager::GetDataListByPKMask[1]( System.Int32 ) -> d
	[Client]Game.DataWorldMapManager::GetDataByCanRide[1]( System.Int32 ) -> E
	[Client]Game.DataWorldMapManager::GetDataListByCanRide[1]( System.Int32 ) -> e
	[Client]Game.DataWorldMapManager::GetDataByIfShowMiniMap[1]( System.Int32 ) -> F
	[Client]Game.DataWorldMapManager::GetDataListByIfShowMiniMap[1]( System.Int32 ) -> f
	[Client]Game.DataWorldMapManager::GetDataBySafeMapId[1]( System.Int32 ) -> G
	[Client]Game.DataWorldMapManager::GetDataListBySafeMapId[1]( System.Int32 ) -> g
	[Client]Game.DataWorldMapManager::GetDataBySafeMapX[1]( System.Int32 ) -> H
	[Client]Game.DataWorldMapManager::GetDataListBySafeMapX[1]( System.Int32 ) -> h
	[Client]Game.DataWorldMapManager::GetDataBySafeMapY[1]( System.Int32 ) -> I
	[Client]Game.DataWorldMapManager::GetDataListBySafeMapY[1]( System.Int32 ) -> i
	[Client]Game.DataWorldMapManager::GetDataByMapBgMusic[1]( System.String ) -> D
	[Client]Game.DataWorldMapManager::GetDataListByMapBgMusic[1]( System.String ) -> d
	[Client]Game.DataWorldMapManager::GetDataByMapEffect[1]( System.String ) -> E
	[Client]Game.DataWorldMapManager::GetDataListByMapEffect[1]( System.String ) -> e
	[Client]Game.DataWorldMapManager::GetDataByShowMapX[1]( System.Int32 ) -> J
	[Client]Game.DataWorldMapManager::GetDataListByShowMapX[1]( System.Int32 ) -> j
	[Client]Game.DataWorldMapManager::GetDataByShowMapY[1]( System.Int32 ) -> K
	[Client]Game.DataWorldMapManager::GetDataListByShowMapY[1]( System.Int32 ) -> k
	[Client]Game.DataWorldMapManager::GetDataByIsNight[1]( System.Boolean ) -> A
	[Client]Game.DataWorldMapManager::GetDataListByIsNight[1]( System.Boolean ) -> a
	[Client]Game.DataWorldMapManager::GetDataByTipInfo[1]( System.String ) -> F
	[Client]Game.DataWorldMapManager::GetDataListByTipInfo[1]( System.String ) -> f
	[Client]Game.DataWorldMapManager::GetDataByCameraMode[1]( System.String ) -> G
	[Client]Game.DataWorldMapManager::GetDataListByCameraMode[1]( System.String ) -> g
	[Client]Game.DataWorldMapManager::GetDataByLogo[1]( System.String ) -> H
	[Client]Game.DataWorldMapManager::GetDataListByLogo[1]( System.String ) -> h
	[Client]Game.DataWorldMapManager::GetDataByMiniMap[1]( System.String ) -> I
	[Client]Game.DataWorldMapManager::GetDataListByMiniMap[1]( System.String ) -> i
	[Client]Game.DataWorldMapManager::GetDataByShowFog[1]( System.Boolean ) -> B
	[Client]Game.DataWorldMapManager::GetDataListByShowFog[1]( System.Boolean ) -> b
	[Client]Game.DataWorldMapManager::GetDataByFogAlpha[1]( System.Int32 ) -> L
	[Client]Game.DataWorldMapManager::GetDataListByFogAlpha[1]( System.Int32 ) -> l
	[Client]Game.DataWorldMapManager::GetDataByJoyStick2Mode[1]( System.Int32 ) -> M
	[Client]Game.DataWorldMapManager::GetDataListByJoyStick2Mode[1]( System.Int32 ) -> m
	[Client]Game.DataWorldMapManager::GetDataByMapIcon[1]( System.Int32 ) -> N
	[Client]Game.DataWorldMapManager::GetDataListByMapIcon[1]( System.Int32 ) -> n
	[Client]Game.DataWorldMapManager::GetDataByRoot[1]( System.Int32 ) -> O
	[Client]Game.DataWorldMapManager::GetDataListByRoot[1]( System.Int32 ) -> o
	[Client]Game.DataWorldMapManager::GetDataByWorldFlyIn[1]( System.Boolean ) -> C
	[Client]Game.DataWorldMapManager::GetDataListByWorldFlyIn[1]( System.Boolean ) -> c
	[Client]Game.DataWorldMapManager::GetDataByCantFindPath[1]( System.Boolean ) -> D
	[Client]Game.DataWorldMapManager::GetDataListByCantFindPath[1]( System.Boolean ) -> d
	[Client]Game.DataWorldMapManager::GetDataByWorldMapScriptId[1]( System.Int32 ) -> P
	[Client]Game.DataWorldMapManager::GetDataListByWorldMapScriptId[1]( System.Int32 ) -> p
	[Client]Game.DataWorldMapManager::GetDataByWorldFlyInX[1]( System.Single ) -> A
	[Client]Game.DataWorldMapManager::GetDataListByWorldFlyInX[1]( System.Single ) -> a
	[Client]Game.DataWorldMapManager::GetDataByWorldFlyInY[1]( System.Single ) -> B
	[Client]Game.DataWorldMapManager::GetDataListByWorldFlyInY[1]( System.Single ) -> b
	[Client]Game.DataWorldMapManager::GetDataByEnterNpcId[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataWorldMapManager::GetDataListByEnterNpcId[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataWorldMapManager::GetDataByGuildProtect[1]( System.Boolean ) -> E
	[Client]Game.DataWorldMapManager::GetDataListByGuildProtect[1]( System.Boolean ) -> e
	[Client]Game.DataWorldMapManager::GetDataByPreLoad[1]( System.Int32[] ) -> A
	[Client]Game.DataWorldMapManager::GetDataListByPreLoad[1]( System.Int32[] ) -> a
	[Client]Game.DataWorldMapManager::GetDataByPreLoadMore[1]( System.Int32[] ) -> B
	[Client]Game.DataWorldMapManager::GetDataListByPreLoadMore[1]( System.Int32[] ) -> b
	[Client]Game.DataWorldMapManager::GetDataBySurfaceHeight[1]( System.Single ) -> C
	[Client]Game.DataWorldMapManager::GetDataListBySurfaceHeight[1]( System.Single ) -> c
	[Client]Game.DataWorldMapManager::get_Instance[0]( ) -> a
	[Client]Game.DataWorldMapManager::get_DataList[0]( ) -> B
	[Client]Game.DataWorldMapManager::get_Count[0]( ) -> b

	[Client]Game.DataWorldMapManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataWorldMapManager::.ctor[0]( ) skipped:  special name

	Game.DataWorldMapManager [Client]Game.DataWorldMapManager Game.DataWorldMapManager::instance -> A
	System.Collections.Generic.List`1<Game.DataWorldMap> [Client]System.Collections.Generic.List`1<Game.DataWorldMap> Game.DataWorldMapManager::dataList -> A

	Game.DataWorldMapManager [Client]Game.DataWorldMapManager Game.DataWorldMapManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataWorldMap> [Client]System.Collections.Generic.List`1<Game.DataWorldMap> Game.DataWorldMapManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMapManager::Count -> dropped
}

[Client]Game.DataSoulChange -> [Client]b.u
{
	[Client]Game.DataSoulChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSoulChange::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSoulChange::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSoulChange::get_MainLevel[0]( ) -> A
	[Client]Game.DataSoulChange::set_MainLevel[1]( System.Int32 ) -> A
	[Client]Game.DataSoulChange::get_SubLevel[0]( ) -> a
	[Client]Game.DataSoulChange::set_SubLevel[1]( System.Int32 ) -> a
	[Client]Game.DataSoulChange::get_UpgradeOdd[0]( ) -> B
	[Client]Game.DataSoulChange::set_UpgradeOdd[1]( System.Int32 ) -> B
	[Client]Game.DataSoulChange::get_InheritOdd[0]( ) -> b
	[Client]Game.DataSoulChange::set_InheritOdd[1]( System.Int32 ) -> b
	[Client]Game.DataSoulChange::get_UpgradeMoney[0]( ) -> C
	[Client]Game.DataSoulChange::set_UpgradeMoney[1]( System.Int32 ) -> C
	[Client]Game.DataSoulChange::get_InheritMoney[0]( ) -> c
	[Client]Game.DataSoulChange::set_InheritMoney[1]( System.Int32 ) -> c

	[Client]Game.DataSoulChange::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataSoulChange::<MainLevel>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataSoulChange::<SubLevel>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataSoulChange::<UpgradeOdd>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataSoulChange::<InheritOdd>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataSoulChange::<UpgradeMoney>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataSoulChange::<InheritMoney>k__BackingField -> c

	System.Int32 [Client]System.Int32 Game.DataSoulChange::MainLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulChange::SubLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulChange::UpgradeOdd -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulChange::InheritOdd -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulChange::UpgradeMoney -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulChange::InheritMoney -> dropped
}

[Client]Game.DataSoulChangeManager -> [Client]b.V
{
	[Client]Game.DataSoulChangeManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSoulChangeManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSoulChangeManager::Clear[0]( ) -> A
	[Client]Game.DataSoulChangeManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSoulChangeManager::GetDataByMainLevel[1]( System.Int32 ) -> A
	[Client]Game.DataSoulChangeManager::GetDataListByMainLevel[1]( System.Int32 ) -> a
	[Client]Game.DataSoulChangeManager::GetDataBySubLevel[1]( System.Int32 ) -> B
	[Client]Game.DataSoulChangeManager::GetDataListBySubLevel[1]( System.Int32 ) -> b
	[Client]Game.DataSoulChangeManager::GetDataByUpgradeOdd[1]( System.Int32 ) -> C
	[Client]Game.DataSoulChangeManager::GetDataListByUpgradeOdd[1]( System.Int32 ) -> c
	[Client]Game.DataSoulChangeManager::GetDataByInheritOdd[1]( System.Int32 ) -> D
	[Client]Game.DataSoulChangeManager::GetDataListByInheritOdd[1]( System.Int32 ) -> d
	[Client]Game.DataSoulChangeManager::GetDataByUpgradeMoney[1]( System.Int32 ) -> E
	[Client]Game.DataSoulChangeManager::GetDataListByUpgradeMoney[1]( System.Int32 ) -> e
	[Client]Game.DataSoulChangeManager::GetDataByInheritMoney[1]( System.Int32 ) -> F
	[Client]Game.DataSoulChangeManager::GetDataListByInheritMoney[1]( System.Int32 ) -> f
	[Client]Game.DataSoulChangeManager::get_Instance[0]( ) -> a
	[Client]Game.DataSoulChangeManager::get_DataList[0]( ) -> B
	[Client]Game.DataSoulChangeManager::get_Count[0]( ) -> b

	[Client]Game.DataSoulChangeManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataSoulChangeManager::.ctor[0]( ) skipped:  special name

	Game.DataSoulChangeManager [Client]Game.DataSoulChangeManager Game.DataSoulChangeManager::instance -> A
	System.Collections.Generic.List`1<Game.DataSoulChange> [Client]System.Collections.Generic.List`1<Game.DataSoulChange> Game.DataSoulChangeManager::dataList -> A

	Game.DataSoulChangeManager [Client]Game.DataSoulChangeManager Game.DataSoulChangeManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataSoulChange> [Client]System.Collections.Generic.List`1<Game.DataSoulChange> Game.DataSoulChangeManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulChangeManager::Count -> dropped
}

[Client]Game.DataGem -> [Client]b.v
{
	[Client]Game.DataGem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataGem::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataGem::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataGem::get_ItemID[0]( ) -> A
	[Client]Game.DataGem::set_ItemID[1]( System.Int32 ) -> A
	[Client]Game.DataGem::get_ItemName[0]( ) -> a
	[Client]Game.DataGem::set_ItemName[1]( System.String ) -> A
	[Client]Game.DataGem::get_GemLevel[0]( ) -> B
	[Client]Game.DataGem::set_GemLevel[1]( System.Int32 ) -> a
	[Client]Game.DataGem::get_PicPath[0]( ) -> b
	[Client]Game.DataGem::set_PicPath[1]( System.String ) -> a
	[Client]Game.DataGem::get_GemType[0]( ) -> C
	[Client]Game.DataGem::set_GemType[1]( System.Int32 ) -> B
	[Client]Game.DataGem::get_AttrType[0]( ) -> c
	[Client]Game.DataGem::set_AttrType[1]( System.String ) -> B
	[Client]Game.DataGem::get_AttrValue[0]( ) -> D
	[Client]Game.DataGem::set_AttrValue[1]( System.Int32[] ) -> A
	[Client]Game.DataGem::get_InsertWeapon[0]( ) -> d
	[Client]Game.DataGem::set_InsertWeapon[1]( System.Boolean ) -> A
	[Client]Game.DataGem::get_InsertRing[0]( ) -> E
	[Client]Game.DataGem::set_InsertRing[1]( System.Boolean ) -> a
	[Client]Game.DataGem::get_InsertEarring[0]( ) -> e
	[Client]Game.DataGem::set_InsertEarring[1]( System.Boolean ) -> B
	[Client]Game.DataGem::get_InsertGlove[0]( ) -> F
	[Client]Game.DataGem::set_InsertGlove[1]( System.Boolean ) -> b
	[Client]Game.DataGem::get_InsertShoulder[0]( ) -> f
	[Client]Game.DataGem::set_InsertShoulder[1]( System.Boolean ) -> C
	[Client]Game.DataGem::get_InsertHelmet[0]( ) -> G
	[Client]Game.DataGem::set_InsertHelmet[1]( System.Boolean ) -> c
	[Client]Game.DataGem::get_InsertShoe[0]( ) -> g
	[Client]Game.DataGem::set_InsertShoe[1]( System.Boolean ) -> D
	[Client]Game.DataGem::get_InsertArmour[0]( ) -> H
	[Client]Game.DataGem::set_InsertArmour[1]( System.Boolean ) -> d
	[Client]Game.DataGem::get_InsertNeck[0]( ) -> h
	[Client]Game.DataGem::set_InsertNeck[1]( System.Boolean ) -> E
	[Client]Game.DataGem::get_InsertAmulet[0]( ) -> I
	[Client]Game.DataGem::set_InsertAmulet[1]( System.Boolean ) -> e
	[Client]Game.DataGem::get_InsertDress[0]( ) -> i
	[Client]Game.DataGem::set_InsertDress[1]( System.Boolean ) -> F
	[Client]Game.DataGem::get_InsertBack[0]( ) -> J
	[Client]Game.DataGem::set_InsertBack[1]( System.Boolean ) -> f
	[Client]Game.DataGem::get_GemTip[0]( ) -> j
	[Client]Game.DataGem::set_GemTip[1]( System.String ) -> b

	[Client]Game.DataGem::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataGem::<ItemID>k__BackingField -> A
	System.String [Client]System.String Game.DataGem::<ItemName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataGem::<GemLevel>k__BackingField -> a
	System.String [Client]System.String Game.DataGem::<PicPath>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataGem::<GemType>k__BackingField -> B
	System.String [Client]System.String Game.DataGem::<AttrType>k__BackingField -> B
	System.Int32[] [Client]System.Int32[] Game.DataGem::<AttrValue>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertWeapon>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertRing>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertEarring>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertGlove>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertShoulder>k__BackingField -> C
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertHelmet>k__BackingField -> c
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertShoe>k__BackingField -> D
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertArmour>k__BackingField -> d
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertNeck>k__BackingField -> E
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertAmulet>k__BackingField -> e
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertDress>k__BackingField -> F
	System.Boolean [Client]System.Boolean Game.DataGem::<InsertBack>k__BackingField -> f
	System.String [Client]System.String Game.DataGem::<GemTip>k__BackingField -> b

	System.Int32 [Client]System.Int32 Game.DataGem::ItemID -> dropped
	System.String [Client]System.String Game.DataGem::ItemName -> dropped
	System.Int32 [Client]System.Int32 Game.DataGem::GemLevel -> dropped
	System.String [Client]System.String Game.DataGem::PicPath -> dropped
	System.Int32 [Client]System.Int32 Game.DataGem::GemType -> dropped
	System.String [Client]System.String Game.DataGem::AttrType -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataGem::AttrValue -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertWeapon -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertRing -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertEarring -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertGlove -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertShoulder -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertHelmet -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertShoe -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertArmour -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertNeck -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertAmulet -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertDress -> dropped
	System.Boolean [Client]System.Boolean Game.DataGem::InsertBack -> dropped
	System.String [Client]System.String Game.DataGem::GemTip -> dropped
}

[Client]Game.DataGemManager -> [Client]b.W
{
	[Client]Game.DataGemManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataGemManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataGemManager::Clear[0]( ) -> A
	[Client]Game.DataGemManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataGemManager::GetDataByItemID[1]( System.Int32 ) -> A
	[Client]Game.DataGemManager::GetDataListByItemID[1]( System.Int32 ) -> a
	[Client]Game.DataGemManager::GetDataByItemName[1]( System.String ) -> A
	[Client]Game.DataGemManager::GetDataListByItemName[1]( System.String ) -> a
	[Client]Game.DataGemManager::GetDataByGemLevel[1]( System.Int32 ) -> B
	[Client]Game.DataGemManager::GetDataListByGemLevel[1]( System.Int32 ) -> b
	[Client]Game.DataGemManager::GetDataByPicPath[1]( System.String ) -> B
	[Client]Game.DataGemManager::GetDataListByPicPath[1]( System.String ) -> b
	[Client]Game.DataGemManager::GetDataByGemType[1]( System.Int32 ) -> C
	[Client]Game.DataGemManager::GetDataListByGemType[1]( System.Int32 ) -> c
	[Client]Game.DataGemManager::GetDataByAttrType[1]( System.String ) -> C
	[Client]Game.DataGemManager::GetDataListByAttrType[1]( System.String ) -> c
	[Client]Game.DataGemManager::GetDataByAttrValue[1]( System.Int32[] ) -> A
	[Client]Game.DataGemManager::GetDataListByAttrValue[1]( System.Int32[] ) -> a
	[Client]Game.DataGemManager::GetDataByInsertWeapon[1]( System.Boolean ) -> A
	[Client]Game.DataGemManager::GetDataListByInsertWeapon[1]( System.Boolean ) -> a
	[Client]Game.DataGemManager::GetDataByInsertRing[1]( System.Boolean ) -> B
	[Client]Game.DataGemManager::GetDataListByInsertRing[1]( System.Boolean ) -> b
	[Client]Game.DataGemManager::GetDataByInsertEarring[1]( System.Boolean ) -> C
	[Client]Game.DataGemManager::GetDataListByInsertEarring[1]( System.Boolean ) -> c
	[Client]Game.DataGemManager::GetDataByInsertGlove[1]( System.Boolean ) -> D
	[Client]Game.DataGemManager::GetDataListByInsertGlove[1]( System.Boolean ) -> d
	[Client]Game.DataGemManager::GetDataByInsertShoulder[1]( System.Boolean ) -> E
	[Client]Game.DataGemManager::GetDataListByInsertShoulder[1]( System.Boolean ) -> e
	[Client]Game.DataGemManager::GetDataByInsertHelmet[1]( System.Boolean ) -> F
	[Client]Game.DataGemManager::GetDataListByInsertHelmet[1]( System.Boolean ) -> f
	[Client]Game.DataGemManager::GetDataByInsertShoe[1]( System.Boolean ) -> G
	[Client]Game.DataGemManager::GetDataListByInsertShoe[1]( System.Boolean ) -> g
	[Client]Game.DataGemManager::GetDataByInsertArmour[1]( System.Boolean ) -> H
	[Client]Game.DataGemManager::GetDataListByInsertArmour[1]( System.Boolean ) -> h
	[Client]Game.DataGemManager::GetDataByInsertNeck[1]( System.Boolean ) -> I
	[Client]Game.DataGemManager::GetDataListByInsertNeck[1]( System.Boolean ) -> i
	[Client]Game.DataGemManager::GetDataByInsertAmulet[1]( System.Boolean ) -> J
	[Client]Game.DataGemManager::GetDataListByInsertAmulet[1]( System.Boolean ) -> j
	[Client]Game.DataGemManager::GetDataByInsertDress[1]( System.Boolean ) -> K
	[Client]Game.DataGemManager::GetDataListByInsertDress[1]( System.Boolean ) -> k
	[Client]Game.DataGemManager::GetDataByInsertBack[1]( System.Boolean ) -> L
	[Client]Game.DataGemManager::GetDataListByInsertBack[1]( System.Boolean ) -> l
	[Client]Game.DataGemManager::GetDataByGemTip[1]( System.String ) -> D
	[Client]Game.DataGemManager::GetDataListByGemTip[1]( System.String ) -> d
	[Client]Game.DataGemManager::get_Instance[0]( ) -> a
	[Client]Game.DataGemManager::get_DataList[0]( ) -> B
	[Client]Game.DataGemManager::get_Count[0]( ) -> b

	[Client]Game.DataGemManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataGemManager::.ctor[0]( ) skipped:  special name

	Game.DataGemManager [Client]Game.DataGemManager Game.DataGemManager::instance -> A
	System.Collections.Generic.List`1<Game.DataGem> [Client]System.Collections.Generic.List`1<Game.DataGem> Game.DataGemManager::dataList -> A

	Game.DataGemManager [Client]Game.DataGemManager Game.DataGemManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataGem> [Client]System.Collections.Generic.List`1<Game.DataGem> Game.DataGemManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataGemManager::Count -> dropped
}

[Client]Game.DataEquip -> [Client]b.w
{
	[Client]Game.DataEquip::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEquip::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEquip::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEquip::get_ItemID[0]( ) -> A
	[Client]Game.DataEquip::set_ItemID[1]( System.Int32 ) -> A
	[Client]Game.DataEquip::get_EquipType[0]( ) -> a
	[Client]Game.DataEquip::set_EquipType[1]( System.String ) -> A
	[Client]Game.DataEquip::get_LevelNeed[0]( ) -> B
	[Client]Game.DataEquip::set_LevelNeed[1]( System.Int32 ) -> a
	[Client]Game.DataEquip::get_SexNeed[0]( ) -> b
	[Client]Game.DataEquip::set_SexNeed[1]( System.Int32 ) -> B
	[Client]Game.DataEquip::get_ProfessionalNeed[0]( ) -> C
	[Client]Game.DataEquip::set_ProfessionalNeed[1]( System.Int32 ) -> b
	[Client]Game.DataEquip::get_ModelID[0]( ) -> c
	[Client]Game.DataEquip::set_ModelID[1]( System.Int32 ) -> C
	[Client]Game.DataEquip::get_ModelIDLeft[0]( ) -> D
	[Client]Game.DataEquip::set_ModelIDLeft[1]( System.Int32 ) -> c
	[Client]Game.DataEquip::get_EffectID[0]( ) -> d
	[Client]Game.DataEquip::set_EffectID[1]( System.Int32 ) -> D
	[Client]Game.DataEquip::get_SetID[0]( ) -> E
	[Client]Game.DataEquip::set_SetID[1]( System.Int32 ) -> d
	[Client]Game.DataEquip::get_PhyAtk[0]( ) -> e
	[Client]Game.DataEquip::set_PhyAtk[1]( System.Int32 ) -> E
	[Client]Game.DataEquip::get_MagicAtk[0]( ) -> F
	[Client]Game.DataEquip::set_MagicAtk[1]( System.Int32 ) -> e
	[Client]Game.DataEquip::get_PhyDefence[0]( ) -> f
	[Client]Game.DataEquip::set_PhyDefence[1]( System.Int32 ) -> F
	[Client]Game.DataEquip::get_MagicDefence[0]( ) -> G
	[Client]Game.DataEquip::set_MagicDefence[1]( System.Int32 ) -> f
	[Client]Game.DataEquip::get_MaxHp[0]( ) -> g
	[Client]Game.DataEquip::set_MaxHp[1]( System.Int32 ) -> G
	[Client]Game.DataEquip::get_MaxBoostLvl[0]( ) -> H
	[Client]Game.DataEquip::set_MaxBoostLvl[1]( System.Int32 ) -> g
	[Client]Game.DataEquip::get_Attr[0]( ) -> h
	[Client]Game.DataEquip::set_Attr[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataEquip::get_AttrValue[0]( ) -> I
	[Client]Game.DataEquip::set_AttrValue[1]( System.Collections.Generic.List`1<System.Single> ) -> A

	[Client]Game.DataEquip::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataEquip::<ItemID>k__BackingField -> A
	System.String [Client]System.String Game.DataEquip::<EquipType>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataEquip::<LevelNeed>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataEquip::<SexNeed>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataEquip::<ProfessionalNeed>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataEquip::<ModelID>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataEquip::<ModelIDLeft>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataEquip::<EffectID>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.DataEquip::<SetID>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataEquip::<PhyAtk>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataEquip::<MagicAtk>k__BackingField -> e
	System.Int32 [Client]System.Int32 Game.DataEquip::<PhyDefence>k__BackingField -> F
	System.Int32 [Client]System.Int32 Game.DataEquip::<MagicDefence>k__BackingField -> f
	System.Int32 [Client]System.Int32 Game.DataEquip::<MaxHp>k__BackingField -> G
	System.Int32 [Client]System.Int32 Game.DataEquip::<MaxBoostLvl>k__BackingField -> g
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataEquip::<Attr>k__BackingField -> A
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataEquip::<AttrValue>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataEquip::ItemID -> dropped
	System.String [Client]System.String Game.DataEquip::EquipType -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::LevelNeed -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::SexNeed -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::ProfessionalNeed -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::ModelID -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::ModelIDLeft -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::EffectID -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::SetID -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::PhyAtk -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::MagicAtk -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::PhyDefence -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::MagicDefence -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::MaxHp -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquip::MaxBoostLvl -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataEquip::Attr -> dropped
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataEquip::AttrValue -> dropped
}

[Client]Game.DataEquipManager -> [Client]b.X
{
	[Client]Game.DataEquipManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEquipManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEquipManager::Clear[0]( ) -> A
	[Client]Game.DataEquipManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEquipManager::GetDataByItemID[1]( System.Int32 ) -> A
	[Client]Game.DataEquipManager::GetDataListByItemID[1]( System.Int32 ) -> a
	[Client]Game.DataEquipManager::GetDataByEquipType[1]( System.String ) -> A
	[Client]Game.DataEquipManager::GetDataListByEquipType[1]( System.String ) -> a
	[Client]Game.DataEquipManager::GetDataByLevelNeed[1]( System.Int32 ) -> B
	[Client]Game.DataEquipManager::GetDataListByLevelNeed[1]( System.Int32 ) -> b
	[Client]Game.DataEquipManager::GetDataBySexNeed[1]( System.Int32 ) -> C
	[Client]Game.DataEquipManager::GetDataListBySexNeed[1]( System.Int32 ) -> c
	[Client]Game.DataEquipManager::GetDataByProfessionalNeed[1]( System.Int32 ) -> D
	[Client]Game.DataEquipManager::GetDataListByProfessionalNeed[1]( System.Int32 ) -> d
	[Client]Game.DataEquipManager::GetDataByModelID[1]( System.Int32 ) -> E
	[Client]Game.DataEquipManager::GetDataListByModelID[1]( System.Int32 ) -> e
	[Client]Game.DataEquipManager::GetDataByModelIDLeft[1]( System.Int32 ) -> F
	[Client]Game.DataEquipManager::GetDataListByModelIDLeft[1]( System.Int32 ) -> f
	[Client]Game.DataEquipManager::GetDataByEffectID[1]( System.Int32 ) -> G
	[Client]Game.DataEquipManager::GetDataListByEffectID[1]( System.Int32 ) -> g
	[Client]Game.DataEquipManager::GetDataBySetID[1]( System.Int32 ) -> H
	[Client]Game.DataEquipManager::GetDataListBySetID[1]( System.Int32 ) -> h
	[Client]Game.DataEquipManager::GetDataByPhyAtk[1]( System.Int32 ) -> I
	[Client]Game.DataEquipManager::GetDataListByPhyAtk[1]( System.Int32 ) -> i
	[Client]Game.DataEquipManager::GetDataByMagicAtk[1]( System.Int32 ) -> J
	[Client]Game.DataEquipManager::GetDataListByMagicAtk[1]( System.Int32 ) -> j
	[Client]Game.DataEquipManager::GetDataByPhyDefence[1]( System.Int32 ) -> K
	[Client]Game.DataEquipManager::GetDataListByPhyDefence[1]( System.Int32 ) -> k
	[Client]Game.DataEquipManager::GetDataByMagicDefence[1]( System.Int32 ) -> L
	[Client]Game.DataEquipManager::GetDataListByMagicDefence[1]( System.Int32 ) -> l
	[Client]Game.DataEquipManager::GetDataByMaxHp[1]( System.Int32 ) -> M
	[Client]Game.DataEquipManager::GetDataListByMaxHp[1]( System.Int32 ) -> m
	[Client]Game.DataEquipManager::GetDataByMaxBoostLvl[1]( System.Int32 ) -> N
	[Client]Game.DataEquipManager::GetDataListByMaxBoostLvl[1]( System.Int32 ) -> n
	[Client]Game.DataEquipManager::GetDataByAttr[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataEquipManager::GetDataListByAttr[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataEquipManager::GetDataByAttrValue[1]( System.Collections.Generic.List`1<System.Single> ) -> A
	[Client]Game.DataEquipManager::GetDataListByAttrValue[1]( System.Collections.Generic.List`1<System.Single> ) -> a
	[Client]Game.DataEquipManager::get_Instance[0]( ) -> a
	[Client]Game.DataEquipManager::get_DataList[0]( ) -> B
	[Client]Game.DataEquipManager::get_Count[0]( ) -> b

	[Client]Game.DataEquipManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataEquipManager::.ctor[0]( ) skipped:  special name

	Game.DataEquipManager [Client]Game.DataEquipManager Game.DataEquipManager::instance -> A
	System.Collections.Generic.List`1<Game.DataEquip> [Client]System.Collections.Generic.List`1<Game.DataEquip> Game.DataEquipManager::dataList -> A

	Game.DataEquipManager [Client]Game.DataEquipManager Game.DataEquipManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataEquip> [Client]System.Collections.Generic.List`1<Game.DataEquip> Game.DataEquipManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquipManager::Count -> dropped
}

[Client]Game.Element -> [Client]b.x
{
	[Client]Game.Element::get_Type[0]( ) -> A
	[Client]Game.Element::set_Type[1]( System.Int16 ) -> A
	[Client]Game.Element::get_IsLoading[0]( ) -> a
	[Client]Game.Element::set_IsLoading[1]( System.Boolean ) -> A
	[Client]Game.Element::get_Object[0]( ) -> B
	[Client]Game.Element::Init[0]( ) -> b
	[Client]Game.Element::Release[0]( ) -> C
	[Client]Game.Element::Update[0]( ) -> c
	[Client]Game.Element::Add[1]( System.String ) -> A
	[Client]Game.Element::Remove[0]( ) -> D
	[Client]Game.Element::LoadedAction[1]( UnityEngine.Object ) -> A

	[Client]Game.Element::.ctor[1]( System.Int16 ) skipped:  special name
	[Client]Game.Element::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.Element::m_Log -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.Element::m_Object -> A
	System.String [Client]System.String Game.Element::m_ModelFile -> A
	System.UInt32 [Client]System.UInt32 Game.Element::m_LoadTaskId -> A
	System.Int16 [Client]System.Int16 Game.Element::<Type>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.Element::<IsLoading>k__BackingField -> A

	System.Int16 [Client]System.Int16 Game.Element::Type -> dropped
	System.Boolean [Client]System.Boolean Game.Element::IsLoading -> dropped
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.Element::Object -> dropped
}

[Client]Game.AttackActionFSM -> [Client]b.Y
{
	[Client]Game.AttackActionFSM::Initialize[0]( ) -> A
	[Client]Game.AttackActionFSM::FSMUpdate[0]( ) -> a
	[Client]Game.AttackActionFSM::SearchTag[3]( UnityEngine.Transform, System.String, System.Collections.Generic.List`1<UnityEngine.Transform>& ) -> A
	[Client]Game.AttackActionFSM::GetHitPoint[1]( System.String ) -> A
	[Client]Game.AttackActionFSM::GetActionName[0]( ) -> B
	[Client]Game.AttackActionFSM::SetAttackAction[3]( System.String, System.Int32, System.Int32 ) -> A
	[Client]Game.AttackActionFSM::Reset[0]( ) -> b
	[Client]Game.AttackActionFSM::UpdateBeforeAttackState[0]( ) -> C
	[Client]Game.AttackActionFSM::UpdateAttackingState[0]( ) -> c
	[Client]Game.AttackActionFSM::UpdateAfterAttackState[0]( ) -> D

	[Client]Game.AttackActionFSM::.ctor[1]( Game.Character ) skipped:  special name

	Game.AttackActionFSM/FSMState [Client]Game.AttackActionFSM/FSMState Game.AttackActionFSM::m_currentState -> A
	Game.Skill [Client]Game.Skill Game.AttackActionFSM::m_currentSkill -> A
	System.Boolean [Client]System.Boolean Game.AttackActionFSM::m_bAttackFreeze -> A
	Game.Character [Client]Game.Character Game.AttackActionFSM::m_Attacker -> A
	System.Collections.Generic.List`1<UnityEngine.Transform> [Client]System.Collections.Generic.List`1<UnityEngine.Transform> Game.AttackActionFSM::m_weapon -> A
	System.String [Client]System.String Game.AttackActionFSM::m_ActionName -> A
	System.Int32 [Client]System.Int32 Game.AttackActionFSM::m_SkillID -> A
	System.Int32 [Client]System.Int32 Game.AttackActionFSM::m_SkillLv -> a
	System.Single [Client]System.Single Game.AttackActionFSM::StartAttackingTime -> A
	System.Single [Client]System.Single Game.AttackActionFSM::EndAttackingTime -> a
	System.Single [Client]System.Single Game.AttackActionFSM::HitPointTime -> B
	System.Single [Client]System.Single Game.AttackActionFSM::FreezeTime -> b
	System.Boolean [Client]System.Boolean Game.AttackActionFSM::bFreezed -> a
	Game.FlyingWeapon [Client]Game.FlyingWeapon Game.AttackActionFSM::m_flyWeapon -> A
}

[Client]Game.AttackActionFSM/FSMState -> [Client]b.Y/y
{
	Game.AttackActionFSM/FSMState [Client]Game.AttackActionFSM/FSMState Game.AttackActionFSM/FSMState::None -> A
	Game.AttackActionFSM/FSMState [Client]Game.AttackActionFSM/FSMState Game.AttackActionFSM/FSMState::BeforeAttackAction -> a
	Game.AttackActionFSM/FSMState [Client]Game.AttackActionFSM/FSMState Game.AttackActionFSM/FSMState::Attacking -> B
	Game.AttackActionFSM/FSMState [Client]Game.AttackActionFSM/FSMState Game.AttackActionFSM/FSMState::AfterAttackAction -> b

	System.Int32 [Client]System.Int32 Game.AttackActionFSM/FSMState::value__ skipped:  filtered
}

[Client]Game.UIMapGroupManager -> [Client]b.Z
{
	[Client]Game.UIMapGroupManager::AddDlg[1]( Game.UI.UICommon.IXUIDlg ) -> A
	[Client]Game.UIMapGroupManager::OnDlgVisible[2]( Game.UI.UICommon.IXUIDlg, System.Boolean ) -> A

	[Client]Game.UIMapGroupManager::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Game.UI.UICommon.IXUIDlg> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUIDlg> Game.UIMapGroupManager::m_listDlg -> A
}

[Client]ICSharpCode.SharpZipLib.Zip.HostSystemID -> [Client]b.z
{
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::Msdos -> A
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::Amiga -> a
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::OpenVms -> B
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::Unix -> b
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::VMCms -> C
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::AtariST -> c
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::OS2 -> D
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::Macintosh -> d
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::ZSystem -> E
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::Cpm -> e
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::WindowsNT -> F
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::MVS -> f
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::Vse -> G
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::AcornRisc -> g
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::Vfat -> H
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::AlternateMvs -> h
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::BeOS -> I
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::Tandem -> i
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::OS400 -> J
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::OSX -> j
	ICSharpCode.SharpZipLib.Zip.HostSystemID [Client]ICSharpCode.SharpZipLib.Zip.HostSystemID ICSharpCode.SharpZipLib.Zip.HostSystemID::WinZipAES -> K

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.HostSystemID::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry -> [Client]C.A
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_HasCrc[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_IsCrypted[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_IsCrypted[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_IsUnicodeText[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_IsUnicodeText[1]( System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_CryptoCheckValue[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_CryptoCheckValue[1]( System.Byte ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_Flags[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_Flags[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_ZipFileIndex[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_ZipFileIndex[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_Offset[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_Offset[1]( System.Int64 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_ExternalFileAttributes[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_ExternalFileAttributes[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_VersionMadeBy[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_IsDOSEntry[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::HasDosAttributes[1]( System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_HostSystem[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_HostSystem[1]( System.Int32 ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_Version[0]( ) -> f
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_CanDecompress[0]( ) -> G
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::ForceZip64[0]( ) -> g
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::IsZip64Forced[0]( ) -> H
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_LocalHeaderRequiresZip64[0]( ) -> h
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_CentralHeaderRequiresZip64[0]( ) -> I
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_DosTime[0]( ) -> i
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_DosTime[1]( System.Int64 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_DateTime[0]( ) -> J
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_DateTime[1]( System.DateTime ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_Name[0]( ) -> j
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_Size[0]( ) -> K
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_Size[1]( System.Int64 ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_CompressedSize[0]( ) -> k
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_CompressedSize[1]( System.Int64 ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_Crc[0]( ) -> L
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_Crc[1]( System.Int64 ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_CompressionMethod[0]( ) -> l
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_CompressionMethod[1]( ICSharpCode.SharpZipLib.Zip.CompressionMethod ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_CompressionMethodForHeader[0]( ) -> M
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_ExtraData[0]( ) -> m
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_ExtraData[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_AESKeySize[0]( ) -> N
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_AESKeySize[1]( System.Int32 ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_AESEncryptionStrength[0]( ) -> n
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_AESSaltLen[0]( ) -> O
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_AESOverheadSize[0]( ) -> o
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::ProcessExtraData[1]( System.Boolean ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::ProcessAESExtraData[1]( ICSharpCode.SharpZipLib.Zip.ZipExtraData ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_Comment[0]( ) -> P
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::set_Comment[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_IsDirectory[0]( ) -> p
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::get_IsFile[0]( ) -> Q
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::IsCompressionMethodSupported[0]( ) -> q
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::IsCompressionMethodSupported[1]( ICSharpCode.SharpZipLib.Zip.CompressionMethod ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::CleanName[1]( System.String ) -> a

	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::Clone[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::.ctor[2]( System.String, System.Int32 ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::.ctor[4]( System.String, System.Int32, System.Int32, ICSharpCode.SharpZipLib.Zip.CompressionMethod ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::.ctor[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry::ToString[0]( ) skipped:  external base class or interface

	ICSharpCode.SharpZipLib.Zip.ZipEntry/Known [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry/Known ICSharpCode.SharpZipLib.Zip.ZipEntry::known -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::externalFileAttributes -> A
	System.UInt16 [Client]System.UInt16 ICSharpCode.SharpZipLib.Zip.ZipEntry::versionMadeBy -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipEntry::name -> A
	System.UInt64 [Client]System.UInt64 ICSharpCode.SharpZipLib.Zip.ZipEntry::size -> A
	System.UInt64 [Client]System.UInt64 ICSharpCode.SharpZipLib.Zip.ZipEntry::compressedSize -> a
	System.UInt16 [Client]System.UInt16 ICSharpCode.SharpZipLib.Zip.ZipEntry::versionToExtract -> a
	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.Zip.ZipEntry::crc -> A
	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.Zip.ZipEntry::dosTime -> a
	ICSharpCode.SharpZipLib.Zip.CompressionMethod [Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod ICSharpCode.SharpZipLib.Zip.ZipEntry::method -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.ZipEntry::extra -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipEntry::comment -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::flags -> a
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipEntry::zipFileIndex -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipEntry::offset -> a
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::forceZip64_ -> A
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Zip.ZipEntry::cryptoCheckValue_ -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::_aesVer -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::_aesEncryptionStrength -> b

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::HasCrc -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::IsCrypted -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::IsUnicodeText -> dropped
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Zip.ZipEntry::CryptoCheckValue -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::Flags -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipEntry::ZipFileIndex -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipEntry::Offset -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::ExternalFileAttributes -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::VersionMadeBy -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::IsDOSEntry -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::HostSystem -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::Version -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::CanDecompress -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::LocalHeaderRequiresZip64 -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::CentralHeaderRequiresZip64 -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipEntry::DosTime -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.ZipEntry::DateTime -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipEntry::Name -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipEntry::Size -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipEntry::CompressedSize -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipEntry::Crc -> dropped
	ICSharpCode.SharpZipLib.Zip.CompressionMethod [Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod ICSharpCode.SharpZipLib.Zip.ZipEntry::CompressionMethod -> dropped
	ICSharpCode.SharpZipLib.Zip.CompressionMethod [Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod ICSharpCode.SharpZipLib.Zip.ZipEntry::CompressionMethodForHeader -> dropped
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.ZipEntry::ExtraData -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::AESKeySize -> dropped
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Zip.ZipEntry::AESEncryptionStrength -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::AESSaltLen -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntry::AESOverheadSize -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.ZipEntry::Comment -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::IsDirectory -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntry::IsFile -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipEntry/Known -> [Client]C.A/a
{
	ICSharpCode.SharpZipLib.Zip.ZipEntry/Known [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry/Known ICSharpCode.SharpZipLib.Zip.ZipEntry/Known::None -> A
	ICSharpCode.SharpZipLib.Zip.ZipEntry/Known [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry/Known ICSharpCode.SharpZipLib.Zip.ZipEntry/Known::Size -> a
	ICSharpCode.SharpZipLib.Zip.ZipEntry/Known [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry/Known ICSharpCode.SharpZipLib.Zip.ZipEntry/Known::CompressedSize -> B
	ICSharpCode.SharpZipLib.Zip.ZipEntry/Known [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry/Known ICSharpCode.SharpZipLib.Zip.ZipEntry/Known::Crc -> b
	ICSharpCode.SharpZipLib.Zip.ZipEntry/Known [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry/Known ICSharpCode.SharpZipLib.Zip.ZipEntry/Known::Time -> C
	ICSharpCode.SharpZipLib.Zip.ZipEntry/Known [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry/Known ICSharpCode.SharpZipLib.Zip.ZipEntry/Known::ExternalAttributes -> c

	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Zip.ZipEntry/Known::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer -> [Client]C.B
{
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::get_RecordSize[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::GetRecordSize[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::get_BlockFactor[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::GetBlockFactor[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::CreateInputTarBuffer[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::CreateInputTarBuffer[2]( System.IO.Stream, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::CreateOutputTarBuffer[1]( System.IO.Stream ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::CreateOutputTarBuffer[2]( System.IO.Stream, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::Initialize[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::IsEOFBlock[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::IsEndOfArchiveBlock[1]( System.Byte[] ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::SkipBlock[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::ReadBlock[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::ReadRecord[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::get_CurrentBlock[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::get_IsStreamOwner[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::GetCurrentBlockNum[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::get_CurrentRecord[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::GetCurrentRecordNum[0]( ) -> f
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::WriteBlock[1]( System.Byte[] ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::WriteBlock[2]( System.Byte[], System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::WriteRecord[0]( ) -> G
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::WriteFinalRecord[0]( ) -> g
	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::Close[0]( ) -> H

	[Client]ICSharpCode.SharpZipLib.Tar.TarBuffer::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::BlockSize -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::DefaultBlockFactor -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::DefaultRecordSize -> B
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Tar.TarBuffer::inputStream -> A
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Tar.TarBuffer::outputStream -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Tar.TarBuffer::recordBuffer -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::currentBlockIndex -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::currentRecordIndex -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::recordSize -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::blockFactor -> D
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarBuffer::isStreamOwner_ -> A

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::RecordSize -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::BlockFactor -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::CurrentBlock -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarBuffer::IsStreamOwner -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarBuffer::CurrentRecord -> dropped
}

[Client]Game.Msg.MsgSkill -> [Client]C.C
{

	[Client]Game.Msg.MsgSkill::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgSkill::BaseType -> A
}

[Client]Game.Msg.MsgClientSkillTry -> [Client]C.c
{
	[Client]Game.Msg.MsgClientSkillTry::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientSkillTry::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientSkillTry::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientSkillTry::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSkillTry::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientSkillTry::m_uiDstPlayerID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSkillTry::m_usSkillID -> a
	System.Single [Client]System.Single Game.Msg.MsgClientSkillTry::m_fTargetX -> A
	System.Single [Client]System.Single Game.Msg.MsgClientSkillTry::m_fTargetY -> a
}

[Client]Game.Msg.MsgServerSkillReply -> [Client]C.D
{
	[Client]Game.Msg.MsgServerSkillReply::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSkillReply::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSkillReply::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSkillReply::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSkillReply::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerSkillReply::TargetPeopleSize -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSkillReply::m_uiAttacker -> A
	System.Single [Client]System.Single Game.Msg.MsgServerSkillReply::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerSkillReply::m_fPosY -> a
	System.Single [Client]System.Single Game.Msg.MsgServerSkillReply::m_fMovePosX -> B
	System.Single [Client]System.Single Game.Msg.MsgServerSkillReply::m_fMovePosY -> b
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSkillReply::m_usSkillID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerSkillReply::m_btSkillLevel -> a
	Game.Msg.SkillAroundPeople[] [Client]Game.Msg.SkillAroundPeople[] Game.Msg.MsgServerSkillReply::m_astTargetPeople -> A
}

[Client]Game.Msg.MsgServerSkillError -> [Client]C.d
{
	[Client]Game.Msg.MsgServerSkillError::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSkillError::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSkillError::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSkillError::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSkillError::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerSkillError::m_ebtErrorInf -> a
}

[Client]Game.Msg.MsgServerSkillCallAction -> [Client]C.E
{
	[Client]Game.Msg.MsgServerSkillCallAction::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSkillCallAction::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSkillCallAction::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSkillCallAction::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSkillCallAction::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSkillCallAction::m_uiAttackerID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSkillCallAction::m_uiDstPlayerID -> a
	System.Single [Client]System.Single Game.Msg.MsgServerSkillCallAction::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerSkillCallAction::m_fPosY -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSkillCallAction::m_usSkillID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerSkillCallAction::m_btSkillLevel -> a
}

[Client]Game.Msg.MsgServerSkillCallCut -> [Client]C.e
{
	[Client]Game.Msg.MsgServerSkillCallCut::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSkillCallCut::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSkillCallCut::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSkillCallCut::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSkillCallCut::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSkillCallCut::m_uiAttacker -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSkillCallCut::m_usSkillID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerSkillCallCut::m_btSkillLevel -> a
}

[Client]Game.Msg.MsgClientLearnSkillTry -> [Client]C.F
{
	[Client]Game.Msg.MsgClientLearnSkillTry::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientLearnSkillTry::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientLearnSkillTry::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientLearnSkillTry::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientLearnSkillTry::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientLearnSkillTry::m_usSkillID -> a
}

[Client]Game.Msg.MsgServerLearnSkillReply -> [Client]C.f
{
	[Client]Game.Msg.MsgServerLearnSkillReply::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerLearnSkillReply::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerLearnSkillReply::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerLearnSkillReply::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLearnSkillReply::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerLearnSkillReply::m_ebtRet -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLearnSkillReply::m_usSkillID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerLearnSkillReply::m_btSkillLevel -> B
}

[Client]Game.Msg.MsgClientAdvanceSkillTry -> [Client]C.G
{
	[Client]Game.Msg.MsgClientAdvanceSkillTry::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientAdvanceSkillTry::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientAdvanceSkillTry::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientAdvanceSkillTry::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientAdvanceSkillTry::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientAdvanceSkillTry::m_usSkillID -> a
}

[Client]Game.Msg.MsgServerForgetSkillReply -> [Client]C.g
{
	[Client]Game.Msg.MsgServerForgetSkillReply::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerForgetSkillReply::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerForgetSkillReply::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerForgetSkillReply::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerForgetSkillReply::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerForgetSkillReply::m_usSkillID -> a
}

[Client]Game.Msg.MsgServerAddStatus -> [Client]C.H
{
	[Client]Game.Msg.MsgServerAddStatus::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAddStatus::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAddStatus::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAddStatus::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAddStatus::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAddStatus::m_uiCharID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAddStatus::m_usStatusID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAddStatus::m_btStatusLevel -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAddStatus::m_uiLastTime -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAddStatus::m_btCount -> B
}

[Client]Game.Msg.MsgServerRemoveStatus -> [Client]C.h
{
	[Client]Game.Msg.MsgServerRemoveStatus::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerRemoveStatus::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerRemoveStatus::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerRemoveStatus::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerRemoveStatus::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerRemoveStatus::m_uiCharID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerRemoveStatus::m_usStatusID -> a
}

[Client]Game.Msg.MsgServerNotifySkillData -> [Client]C.I
{
	[Client]Game.Msg.MsgServerNotifySkillData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifySkillData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifySkillData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifySkillData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifySkillData::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ClientSkillData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientSkillData> Game.Msg.MsgServerNotifySkillData::m_oVecSkillData -> A
}

[Client]Game.Msg.MsgServerNotifyStatusData -> [Client]C.i
{
	[Client]Game.Msg.MsgServerNotifyStatusData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyStatusData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyStatusData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyStatusData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyStatusData::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ClientStatusData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientStatusData> Game.Msg.MsgServerNotifyStatusData::m_oVecStatusData -> A
}

[Client]Game.Msg.MsgUpdateSkillCD -> [Client]C.J
{
	[Client]Game.Msg.MsgUpdateSkillCD::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgUpdateSkillCD::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgUpdateSkillCD::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgUpdateSkillCD::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgUpdateSkillCD::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgUpdateSkillCD::m_usSkillID -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgUpdateSkillCD::m_uiLastTime -> A
}

[Client]Game.Msg.MsgServerStartCollect -> [Client]C.j
{
	[Client]Game.Msg.MsgServerStartCollect::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerStartCollect::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerStartCollect::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerStartCollect::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerStartCollect::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerStartCollect::m_uiCharID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerStartCollect::m_usSkillID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerStartCollect::m_btSkillLevel -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerStartCollect::m_uiPrepairTime -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerStartCollect::m_uiTargetID -> B
}

[Client]Game.Msg.MsgServerFinishCollect -> [Client]C.K
{
	[Client]Game.Msg.MsgServerFinishCollect::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFinishCollect::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFinishCollect::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFinishCollect::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFinishCollect::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerFinishCollect::m_uiCharID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFinishCollect::m_usSkillID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerFinishCollect::m_btSkillLevel -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerFinishCollect::m_uiTargetID -> a
}

[Client]Game.Msg.MsgRelation -> [Client]C.k
{

	[Client]Game.Msg.MsgRelation::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgRelation::BaseType -> A
}

[Client]Game.Msg.MsgServerNotifyRelationList -> [Client]C.L
{
	[Client]Game.Msg.MsgServerNotifyRelationList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyRelationList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyRelationList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyRelationList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyRelationList::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ClientRelation> [Client]System.Collections.Generic.List`1<Game.Msg.ClientRelation> Game.Msg.MsgServerNotifyRelationList::m_oVecRelationData -> A
}

[Client]Game.Msg.MsgClientReqAddFirend -> [Client]C.l
{
	[Client]Game.Msg.MsgClientReqAddFirend::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqAddFirend::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqAddFirend::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqAddFirend::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqAddFirend::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqAddFirend::m_uiCharID -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientReqAddFirend::m_abtName -> A
}

[Client]Game.Msg.MsgServerReqAddFirend -> [Client]C.M
{
	[Client]Game.Msg.MsgServerReqAddFirend::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerReqAddFirend::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerReqAddFirend::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerReqAddFirend::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerReqAddFirend::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerReqAddFirend::m_uiCharID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerReqAddFirend::m_usLevel -> a
	System.String [Client]System.String Game.Msg.MsgServerReqAddFirend::m_strName -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerReqAddFirend::m_btSex -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerReqAddFirend::m_btProfession -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerReqAddFirend::m_btServerLine -> b
}

[Client]Game.Msg.MsgClientAckAddFirend -> [Client]C.m
{
	[Client]Game.Msg.MsgClientAckAddFirend::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientAckAddFirend::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientAckAddFirend::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientAckAddFirend::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientAckAddFirend::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientAckAddFirend::m_uiCharID -> A
	System.String [Client]System.String Game.Msg.MsgClientAckAddFirend::m_strName -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientAckAddFirend::m_usLevel -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientAckAddFirend::m_btSex -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientAckAddFirend::m_btProfession -> B
	System.Byte [Client]System.Byte Game.Msg.MsgClientAckAddFirend::m_btServerLine -> b
	System.Byte [Client]System.Byte Game.Msg.MsgClientAckAddFirend::m_ebtRet -> C
}

[Client]Game.Msg.MsgClientDelRelation -> [Client]C.N
{
	[Client]Game.Msg.MsgClientDelRelation::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientDelRelation::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientDelRelation::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientDelRelation::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientDelRelation::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientDelRelation::m_uiCharID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientDelRelation::m_ebtRelation -> a
}

[Client]Game.Msg.MsgServerDelRelation -> [Client]C.n
{
	[Client]Game.Msg.MsgServerDelRelation::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerDelRelation::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerDelRelation::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerDelRelation::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerDelRelation::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerDelRelation::m_uiCharID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerDelRelation::m_ebtRelation -> a
}

[Client]Game.Msg.MsgServerRefreshRelation -> [Client]C.O
{
	[Client]Game.Msg.MsgServerRefreshRelation::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerRefreshRelation::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerRefreshRelation::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerRefreshRelation::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerRefreshRelation::Type -> A
	Game.Msg.ClientRelation [Client]Game.Msg.ClientRelation Game.Msg.MsgServerRefreshRelation::m_stRelationData -> A
}

[Client]Game.Msg.MsgClientReqAddBlackList -> [Client]C.o
{
	[Client]Game.Msg.MsgClientReqAddBlackList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqAddBlackList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqAddBlackList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqAddBlackList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqAddBlackList::Type -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientReqAddBlackList::m_abtName -> A
}

[Client]Game.Msg.SkillAroundPeople -> [Client]C.P
{
	[Client]Game.Msg.SkillAroundPeople::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SkillAroundPeople::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SkillAroundPeople::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.SkillAroundPeople::m_uiTagPlayerID -> A
	System.Int32 [Client]System.Int32 Game.Msg.SkillAroundPeople::m_iHurt -> A
	System.Byte [Client]System.Byte Game.Msg.SkillAroundPeople::m_btEffectFlag -> A
	System.Single [Client]System.Single Game.Msg.SkillAroundPeople::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.SkillAroundPeople::m_fPosY -> a
}

[Client]Game.Msg.ServerData -> [Client]C.p
{
	[Client]Game.Msg.ServerData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ServerData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ServerData::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Msg.ServerData::m_usLineID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ServerData::m_usOnlineNum -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ServerData::m_uiGateServerAddr -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ServerData::m_usGateServerPort -> B
	System.UInt64 [Client]System.UInt64 Game.Msg.ServerData::m_ulLastTime -> A
}

[Client]Game.Msg.SEquipVisualData -> [Client]C.Q
{
	[Client]Game.Msg.SEquipVisualData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SEquipVisualData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SEquipVisualData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.SEquipVisualData::m_btPart -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.SEquipVisualData::m_uiEquipID -> A
}

[Client]Game.Msg.SEquipSocketData -> [Client]C.q
{
	[Client]Game.Msg.SEquipSocketData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SEquipSocketData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SEquipSocketData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.SEquipSocketData::m_btStatus -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.SEquipSocketData::m_uiGemID -> A
	System.Byte [Client]System.Byte Game.Msg.SEquipSocketData::m_btAttrType -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.SEquipSocketData::m_usAttrValue -> A
}

[Client]Game.Msg.SEctypeAward -> [Client]C.R
{
	[Client]Game.Msg.SEctypeAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SEctypeAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SEctypeAward::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.SEctypeAward::m_uiItemID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.SEctypeAward::m_usItemNum -> A
	System.Boolean [Client]System.Boolean Game.Msg.SEctypeAward::m_bAdv -> A
}

[Client]Game.Msg.ExpeditionShipMonsterData -> [Client]C.r
{
	[Client]Game.Msg.ExpeditionShipMonsterData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ExpeditionShipMonsterData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ExpeditionShipMonsterData::.ctor[0]( ) skipped:  special name

	Game.Msg.ExpeditionMonsterData [Client]Game.Msg.ExpeditionMonsterData Game.Msg.ExpeditionShipMonsterData::m_stMonster -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionShipMonsterData::m_btIndex -> A
}

[Client]Game.Msg.CSnapShotFighterData -> [Client]C.S
{
	[Client]Game.Msg.CSnapShotFighterData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotFighterData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotFighterData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.CSnapShotFighterData::m_btLevel -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotFighterData::m_uiHP -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotFighterData::m_uiHPMax -> a
	System.Byte [Client]System.Byte Game.Msg.CSnapShotFighterData::m_btFactionID -> a
	System.Byte [Client]System.Byte Game.Msg.CSnapShotFighterData::m_ebtState -> B
	System.Collections.Generic.List`1<Game.Msg.ClientStatusData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientStatusData> Game.Msg.CSnapShotFighterData::m_oVecData -> A
}

[Client]Game.Monster -> [Client]C.s
{
	[Client]Game.Monster::get_TitleName[0]( ) -> A
	[Client]Game.Monster::Release[0]( ) -> B
	[Client]Game.Monster::Reset[0]( ) -> b
	[Client]Game.Monster::RefreshProperty[0]( ) -> C
	[Client]Game.Monster::Update[0]( ) -> c
	[Client]Game.Monster::FixedUpdate[0]( ) -> D
	[Client]Game.Monster::OnObjectLoaded[0]( ) -> d
	[Client]Game.Monster::get_Data[0]( ) -> E
	[Client]Game.Monster::get_MasterId[0]( ) -> e
	[Client]Game.Monster::set_MasterId[1]( System.UInt32 ) -> A
	[Client]Game.Monster::get_NeedPlayBornAction[0]( ) -> F
	[Client]Game.Monster::set_NeedPlayBornAction[1]( System.Boolean ) -> A
	[Client]Game.Monster::get_NeedHide[0]( ) -> f
	[Client]Game.Monster::set_NeedHide[1]( System.Boolean ) -> a
	[Client]Game.Monster::get_MinAttackRange[0]( ) -> G
	[Client]Game.Monster::get_MaxAttackRange[0]( ) -> g
	[Client]Game.Monster::CanBeAttacked[0]( ) -> H
	[Client]Game.Monster::CanAttack[0]( ) -> h
	[Client]Game.Monster::LoadedDeadSoundHandler[1]( UnityEngine.Object ) -> A
	[Client]Game.Monster::LoadedAttackSoundHandler[1]( UnityEngine.Object ) -> a
	[Client]Game.Monster::LoadedBeAttackedSoundHandler[1]( UnityEngine.Object ) -> B
	[Client]Game.Monster::PlayDeadSound[0]( ) -> I
	[Client]Game.Monster::PlayAttackSound[0]( ) -> i
	[Client]Game.Monster::PlayBeAttackedSound[0]( ) -> J
	[Client]Game.Monster::ChangeMoveStep[0]( ) -> j

	[Client]Game.Monster::.ctor[0]( ) skipped:  special name

	Game.DataMonster [Client]Game.DataMonster Game.Monster::m_Data -> A
	System.UInt32 [Client]System.UInt32 Game.Monster::m_DeadSoundLoadTask -> A
	System.UInt32 [Client]System.UInt32 Game.Monster::m_BeAttackedSoundLoadTask -> a
	System.UInt32 [Client]System.UInt32 Game.Monster::m_AttackSoundLoadTask -> B
	UnityEngine.AudioClip [Client]UnityEngine.AudioClip Game.Monster::m_DeadClip -> A
	UnityEngine.AudioClip [Client]UnityEngine.AudioClip Game.Monster::m_AttackClip -> a
	UnityEngine.AudioClip [Client]UnityEngine.AudioClip Game.Monster::m_BeAttackedClip -> B
	System.UInt32 [Client]System.UInt32 Game.Monster::m_unMasterId -> b
	System.Single [Client]System.Single Game.Monster::m_fSpeedRatio -> A
	System.Boolean [Client]System.Boolean Game.Monster::IsBoss -> A
	Game.MonsterFSM [Client]Game.MonsterFSM Game.Monster::m_MonsterFSM -> A
	Game.BossFSM [Client]Game.BossFSM Game.Monster::m_BossFSM -> A
	System.Boolean [Client]System.Boolean Game.Monster::<NeedPlayBornAction>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.Monster::<NeedHide>k__BackingField -> B

	Game.DataMonster [Client]Game.DataMonster Game.Monster::Data -> dropped
	System.UInt32 [Client]System.UInt32 Game.Monster::MasterId -> dropped
	System.Boolean [Client]System.Boolean Game.Monster::NeedPlayBornAction -> dropped
	System.Boolean [Client]System.Boolean Game.Monster::NeedHide -> dropped
	System.String [Client]System.String Game.Monster::TitleName -> dropped
	System.Single [Client]System.Single Game.Monster::MinAttackRange -> dropped
	System.Single [Client]System.Single Game.Monster::MaxAttackRange -> dropped
}

[Client]Game.SimpleLogics -> [Client]C.T
{
	[Client]Game.SimpleLogics::get_Instance[0]( ) -> A
	[Client]Game.SimpleLogics::ReqTelephoneFare[2]( System.String, System.Boolean ) -> A
	[Client]Game.SimpleLogics::CommentOnAppStore[0]( ) -> a
	[Client]Game.SimpleLogics::OnMsgServerAckTelephoneFare[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.SimpleLogics::ReqMediaCard[1]( System.String ) -> A
	[Client]Game.SimpleLogics::OnMsgServerAckActivateMediaCard[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.SimpleLogics::ReqBuyItem[4]( System.UInt32, System.Int32, System.UInt32, System.UInt32 ) -> A
	[Client]Game.SimpleLogics::OnMsgServerBuyNpcShopItem[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.SimpleLogics::OnMsgServerOpenUI[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.SimpleLogics::OnMsgServerCloseUI[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.SimpleLogics::OnMsgServerShowAwardCardMenu[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.SimpleLogics::ReqAwardCard[0]( ) -> B
	[Client]Game.SimpleLogics::OnMsgServerAckAwardCard[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.SimpleLogics::MagicboxCompose[3]( System.UInt32, System.UInt64[], System.UInt64 ) -> A
	[Client]Game.SimpleLogics::OnMsgServerMagicBoxResult[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.SimpleLogics::OnMsgServerMoveToPos[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.SimpleLogics::OnMsgServerMoveToNpc[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.SimpleLogics::OnMsgServerMoveToMonster[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.SimpleLogics::SetPkProtect[1]( System.Boolean ) -> A
	[Client]Game.SimpleLogics::OnMsgServerSetPkProtect[1]( Game.Msg.RecvMsgPacket ) -> f
	[Client]Game.SimpleLogics::ReqPVP[1]( System.UInt32 ) -> A
	[Client]Game.SimpleLogics::OnMsgServerReqPVP[1]( Game.Msg.RecvMsgPacket ) -> G
	[Client]Game.SimpleLogics::ServerReqPVPHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.SimpleLogics::OnMsgServerPlayerEffect[1]( Game.Msg.RecvMsgPacket ) -> g
	[Client]Game.SimpleLogics::OnMsgServerPlayerAction[1]( Game.Msg.RecvMsgPacket ) -> H
	[Client]Game.SimpleLogics::OnMsgServerSceneObjectAction[1]( Game.Msg.RecvMsgPacket ) -> h
	[Client]Game.SimpleLogics::ShareSNS[1]( System.Int32 ) -> A
	[Client]Game.SimpleLogics::OnConfirmShareSNS[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> a

	[Client]Game.SimpleLogics::.ctor[0]( ) skipped:  special name
	[Client]Game.SimpleLogics::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.SimpleLogics::m_Log -> A
	Game.SimpleLogics [Client]Game.SimpleLogics Game.SimpleLogics::m_Instance -> A

	Game.SimpleLogics [Client]Game.SimpleLogics Game.SimpleLogics::Instance -> dropped
}

[Client]Game.DataWorldMapScript -> [Client]C.t
{
	[Client]Game.DataWorldMapScript::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataWorldMapScript::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataWorldMapScript::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataWorldMapScript::get_WorldMapID[0]( ) -> A
	[Client]Game.DataWorldMapScript::set_WorldMapID[1]( System.Int32 ) -> A
	[Client]Game.DataWorldMapScript::get_MapName[0]( ) -> a
	[Client]Game.DataWorldMapScript::set_MapName[1]( System.String ) -> A
	[Client]Game.DataWorldMapScript::get_MapType[0]( ) -> B
	[Client]Game.DataWorldMapScript::set_MapType[1]( System.Int32 ) -> a
	[Client]Game.DataWorldMapScript::get_HelpSwitch[0]( ) -> b
	[Client]Game.DataWorldMapScript::set_HelpSwitch[1]( System.Boolean ) -> A
	[Client]Game.DataWorldMapScript::get_PetMode[0]( ) -> C
	[Client]Game.DataWorldMapScript::set_PetMode[1]( System.Boolean ) -> a
	[Client]Game.DataWorldMapScript::get_MapArea[0]( ) -> c
	[Client]Game.DataWorldMapScript::set_MapArea[1]( System.Int32 ) -> B
	[Client]Game.DataWorldMapScript::get_MapLevel[0]( ) -> D
	[Client]Game.DataWorldMapScript::set_MapLevel[1]( System.Int32 ) -> b
	[Client]Game.DataWorldMapScript::get_Option[0]( ) -> d
	[Client]Game.DataWorldMapScript::set_Option[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataWorldMapScript::get_Level[0]( ) -> E
	[Client]Game.DataWorldMapScript::set_Level[1]( System.Int32[] ) -> A
	[Client]Game.DataWorldMapScript::get_Stime[0]( ) -> e
	[Client]Game.DataWorldMapScript::set_Stime[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataWorldMapScript::get_Etime[0]( ) -> F
	[Client]Game.DataWorldMapScript::set_Etime[1]( System.Collections.Generic.List`1<System.String> ) -> B
	[Client]Game.DataWorldMapScript::get_Color[0]( ) -> f
	[Client]Game.DataWorldMapScript::set_Color[1]( System.Int32[] ) -> a
	[Client]Game.DataWorldMapScript::get_AreaDescribe[0]( ) -> G
	[Client]Game.DataWorldMapScript::set_AreaDescribe[1]( System.String ) -> a
	[Client]Game.DataWorldMapScript::get_Mapid[0]( ) -> g
	[Client]Game.DataWorldMapScript::set_Mapid[1]( System.Int32[] ) -> B
	[Client]Game.DataWorldMapScript::get_EctypeId[0]( ) -> H
	[Client]Game.DataWorldMapScript::set_EctypeId[1]( System.Int32 ) -> C
	[Client]Game.DataWorldMapScript::get_EctypeKind[0]( ) -> h
	[Client]Game.DataWorldMapScript::set_EctypeKind[1]( System.String ) -> B

	[Client]Game.DataWorldMapScript::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::<WorldMapID>k__BackingField -> A
	System.String [Client]System.String Game.DataWorldMapScript::<MapName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::<MapType>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataWorldMapScript::<HelpSwitch>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DataWorldMapScript::<PetMode>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::<MapArea>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::<MapLevel>k__BackingField -> b
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataWorldMapScript::<Option>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataWorldMapScript::<Level>k__BackingField -> A
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataWorldMapScript::<Stime>k__BackingField -> a
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataWorldMapScript::<Etime>k__BackingField -> B
	System.Int32[] [Client]System.Int32[] Game.DataWorldMapScript::<Color>k__BackingField -> a
	System.String [Client]System.String Game.DataWorldMapScript::<AreaDescribe>k__BackingField -> a
	System.Int32[] [Client]System.Int32[] Game.DataWorldMapScript::<Mapid>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::<EctypeId>k__BackingField -> C
	System.String [Client]System.String Game.DataWorldMapScript::<EctypeKind>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::WorldMapID -> dropped
	System.String [Client]System.String Game.DataWorldMapScript::MapName -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::MapType -> dropped
	System.Boolean [Client]System.Boolean Game.DataWorldMapScript::HelpSwitch -> dropped
	System.Boolean [Client]System.Boolean Game.DataWorldMapScript::PetMode -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::MapArea -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::MapLevel -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataWorldMapScript::Option -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataWorldMapScript::Level -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataWorldMapScript::Stime -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataWorldMapScript::Etime -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataWorldMapScript::Color -> dropped
	System.String [Client]System.String Game.DataWorldMapScript::AreaDescribe -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataWorldMapScript::Mapid -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMapScript::EctypeId -> dropped
	System.String [Client]System.String Game.DataWorldMapScript::EctypeKind -> dropped
}

[Client]Game.DataWorldMapScriptManager -> [Client]C.U
{
	[Client]Game.DataWorldMapScriptManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataWorldMapScriptManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataWorldMapScriptManager::Clear[0]( ) -> A
	[Client]Game.DataWorldMapScriptManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataWorldMapScriptManager::GetDataByWorldMapID[1]( System.Int32 ) -> A
	[Client]Game.DataWorldMapScriptManager::GetDataListByWorldMapID[1]( System.Int32 ) -> a
	[Client]Game.DataWorldMapScriptManager::GetDataByMapName[1]( System.String ) -> A
	[Client]Game.DataWorldMapScriptManager::GetDataListByMapName[1]( System.String ) -> a
	[Client]Game.DataWorldMapScriptManager::GetDataByMapType[1]( System.Int32 ) -> B
	[Client]Game.DataWorldMapScriptManager::GetDataListByMapType[1]( System.Int32 ) -> b
	[Client]Game.DataWorldMapScriptManager::GetDataByHelpSwitch[1]( System.Boolean ) -> A
	[Client]Game.DataWorldMapScriptManager::GetDataListByHelpSwitch[1]( System.Boolean ) -> a
	[Client]Game.DataWorldMapScriptManager::GetDataByPetMode[1]( System.Boolean ) -> B
	[Client]Game.DataWorldMapScriptManager::GetDataListByPetMode[1]( System.Boolean ) -> b
	[Client]Game.DataWorldMapScriptManager::GetDataByMapArea[1]( System.Int32 ) -> C
	[Client]Game.DataWorldMapScriptManager::GetDataListByMapArea[1]( System.Int32 ) -> c
	[Client]Game.DataWorldMapScriptManager::GetDataByMapLevel[1]( System.Int32 ) -> D
	[Client]Game.DataWorldMapScriptManager::GetDataListByMapLevel[1]( System.Int32 ) -> d
	[Client]Game.DataWorldMapScriptManager::GetDataByOption[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataWorldMapScriptManager::GetDataListByOption[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataWorldMapScriptManager::GetDataByLevel[1]( System.Int32[] ) -> A
	[Client]Game.DataWorldMapScriptManager::GetDataListByLevel[1]( System.Int32[] ) -> a
	[Client]Game.DataWorldMapScriptManager::GetDataByStime[1]( System.Collections.Generic.List`1<System.String> ) -> B
	[Client]Game.DataWorldMapScriptManager::GetDataListByStime[1]( System.Collections.Generic.List`1<System.String> ) -> b
	[Client]Game.DataWorldMapScriptManager::GetDataByEtime[1]( System.Collections.Generic.List`1<System.String> ) -> C
	[Client]Game.DataWorldMapScriptManager::GetDataListByEtime[1]( System.Collections.Generic.List`1<System.String> ) -> c
	[Client]Game.DataWorldMapScriptManager::GetDataByColor[1]( System.Int32[] ) -> B
	[Client]Game.DataWorldMapScriptManager::GetDataListByColor[1]( System.Int32[] ) -> b
	[Client]Game.DataWorldMapScriptManager::GetDataByAreaDescribe[1]( System.String ) -> B
	[Client]Game.DataWorldMapScriptManager::GetDataListByAreaDescribe[1]( System.String ) -> b
	[Client]Game.DataWorldMapScriptManager::GetDataByMapid[1]( System.Int32[] ) -> C
	[Client]Game.DataWorldMapScriptManager::GetDataListByMapid[1]( System.Int32[] ) -> c
	[Client]Game.DataWorldMapScriptManager::GetDataByEctypeId[1]( System.Int32 ) -> E
	[Client]Game.DataWorldMapScriptManager::GetDataListByEctypeId[1]( System.Int32 ) -> e
	[Client]Game.DataWorldMapScriptManager::GetDataByEctypeKind[1]( System.String ) -> C
	[Client]Game.DataWorldMapScriptManager::GetDataListByEctypeKind[1]( System.String ) -> c
	[Client]Game.DataWorldMapScriptManager::get_Instance[0]( ) -> a
	[Client]Game.DataWorldMapScriptManager::get_DataList[0]( ) -> B
	[Client]Game.DataWorldMapScriptManager::get_Count[0]( ) -> b

	[Client]Game.DataWorldMapScriptManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataWorldMapScriptManager::.ctor[0]( ) skipped:  special name

	Game.DataWorldMapScriptManager [Client]Game.DataWorldMapScriptManager Game.DataWorldMapScriptManager::instance -> A
	System.Collections.Generic.List`1<Game.DataWorldMapScript> [Client]System.Collections.Generic.List`1<Game.DataWorldMapScript> Game.DataWorldMapScriptManager::dataList -> A

	Game.DataWorldMapScriptManager [Client]Game.DataWorldMapScriptManager Game.DataWorldMapScriptManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataWorldMapScript> [Client]System.Collections.Generic.List`1<Game.DataWorldMapScript> Game.DataWorldMapScriptManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataWorldMapScriptManager::Count -> dropped
}

[Client]Game.DataStatusaffect -> [Client]C.u
{
	[Client]Game.DataStatusaffect::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataStatusaffect::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataStatusaffect::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataStatusaffect::get_ID[0]( ) -> A
	[Client]Game.DataStatusaffect::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataStatusaffect::get_Name[0]( ) -> a
	[Client]Game.DataStatusaffect::set_Name[1]( System.String ) -> A
	[Client]Game.DataStatusaffect::get_Level[0]( ) -> B
	[Client]Game.DataStatusaffect::set_Level[1]( System.Int32 ) -> a
	[Client]Game.DataStatusaffect::get_AffectSkillID[0]( ) -> b
	[Client]Game.DataStatusaffect::set_AffectSkillID[1]( System.Int32 ) -> B
	[Client]Game.DataStatusaffect::get_Priority[0]( ) -> C
	[Client]Game.DataStatusaffect::set_Priority[1]( System.Int32 ) -> b
	[Client]Game.DataStatusaffect::get_AffectIndex[0]( ) -> c
	[Client]Game.DataStatusaffect::set_AffectIndex[1]( System.Int32[] ) -> A
	[Client]Game.DataStatusaffect::get_AffectValue[0]( ) -> D
	[Client]Game.DataStatusaffect::set_AffectValue[1]( System.Int32[] ) -> a

	[Client]Game.DataStatusaffect::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataStatusaffect::<ID>k__BackingField -> A
	System.String [Client]System.String Game.DataStatusaffect::<Name>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataStatusaffect::<Level>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataStatusaffect::<AffectSkillID>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataStatusaffect::<Priority>k__BackingField -> b
	System.Int32[] [Client]System.Int32[] Game.DataStatusaffect::<AffectIndex>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataStatusaffect::<AffectValue>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataStatusaffect::ID -> dropped
	System.String [Client]System.String Game.DataStatusaffect::Name -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatusaffect::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatusaffect::AffectSkillID -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatusaffect::Priority -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataStatusaffect::AffectIndex -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataStatusaffect::AffectValue -> dropped
}

[Client]Game.DataStatusaffectManager -> [Client]C.V
{
	[Client]Game.DataStatusaffectManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataStatusaffectManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataStatusaffectManager::Clear[0]( ) -> A
	[Client]Game.DataStatusaffectManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataStatusaffectManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataStatusaffectManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataStatusaffectManager::GetDataByName[1]( System.String ) -> A
	[Client]Game.DataStatusaffectManager::GetDataListByName[1]( System.String ) -> a
	[Client]Game.DataStatusaffectManager::GetDataByLevel[1]( System.Int32 ) -> B
	[Client]Game.DataStatusaffectManager::GetDataListByLevel[1]( System.Int32 ) -> b
	[Client]Game.DataStatusaffectManager::GetDataByAffectSkillID[1]( System.Int32 ) -> C
	[Client]Game.DataStatusaffectManager::GetDataListByAffectSkillID[1]( System.Int32 ) -> c
	[Client]Game.DataStatusaffectManager::GetDataByPriority[1]( System.Int32 ) -> D
	[Client]Game.DataStatusaffectManager::GetDataListByPriority[1]( System.Int32 ) -> d
	[Client]Game.DataStatusaffectManager::GetDataByAffectIndex[1]( System.Int32[] ) -> A
	[Client]Game.DataStatusaffectManager::GetDataListByAffectIndex[1]( System.Int32[] ) -> a
	[Client]Game.DataStatusaffectManager::GetDataByAffectValue[1]( System.Int32[] ) -> B
	[Client]Game.DataStatusaffectManager::GetDataListByAffectValue[1]( System.Int32[] ) -> b
	[Client]Game.DataStatusaffectManager::get_Instance[0]( ) -> a
	[Client]Game.DataStatusaffectManager::get_DataList[0]( ) -> B
	[Client]Game.DataStatusaffectManager::get_Count[0]( ) -> b

	[Client]Game.DataStatusaffectManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataStatusaffectManager::.ctor[0]( ) skipped:  special name

	Game.DataStatusaffectManager [Client]Game.DataStatusaffectManager Game.DataStatusaffectManager::instance -> A
	System.Collections.Generic.List`1<Game.DataStatusaffect> [Client]System.Collections.Generic.List`1<Game.DataStatusaffect> Game.DataStatusaffectManager::dataList -> A

	Game.DataStatusaffectManager [Client]Game.DataStatusaffectManager Game.DataStatusaffectManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataStatusaffect> [Client]System.Collections.Generic.List`1<Game.DataStatusaffect> Game.DataStatusaffectManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatusaffectManager::Count -> dropped
}

[Client]Game.DataRestore -> [Client]C.v
{
	[Client]Game.DataRestore::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataRestore::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataRestore::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataRestore::get_RestoreID[0]( ) -> A
	[Client]Game.DataRestore::set_RestoreID[1]( System.Int32 ) -> A
	[Client]Game.DataRestore::get_Capacitance[0]( ) -> a
	[Client]Game.DataRestore::set_Capacitance[1]( System.Int32 ) -> a
	[Client]Game.DataRestore::get_Type[0]( ) -> B
	[Client]Game.DataRestore::set_Type[1]( System.Int32 ) -> B

	[Client]Game.DataRestore::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataRestore::<RestoreID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataRestore::<Capacitance>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataRestore::<Type>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataRestore::RestoreID -> dropped
	System.Int32 [Client]System.Int32 Game.DataRestore::Capacitance -> dropped
	System.Int32 [Client]System.Int32 Game.DataRestore::Type -> dropped
}

[Client]Game.DataRestoreManager -> [Client]C.W
{
	[Client]Game.DataRestoreManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataRestoreManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataRestoreManager::Clear[0]( ) -> A
	[Client]Game.DataRestoreManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataRestoreManager::GetDataByRestoreID[1]( System.Int32 ) -> A
	[Client]Game.DataRestoreManager::GetDataListByRestoreID[1]( System.Int32 ) -> a
	[Client]Game.DataRestoreManager::GetDataByCapacitance[1]( System.Int32 ) -> B
	[Client]Game.DataRestoreManager::GetDataListByCapacitance[1]( System.Int32 ) -> b
	[Client]Game.DataRestoreManager::GetDataByType[1]( System.Int32 ) -> C
	[Client]Game.DataRestoreManager::GetDataListByType[1]( System.Int32 ) -> c
	[Client]Game.DataRestoreManager::get_Instance[0]( ) -> a
	[Client]Game.DataRestoreManager::get_DataList[0]( ) -> B
	[Client]Game.DataRestoreManager::get_Count[0]( ) -> b

	[Client]Game.DataRestoreManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataRestoreManager::.ctor[0]( ) skipped:  special name

	Game.DataRestoreManager [Client]Game.DataRestoreManager Game.DataRestoreManager::instance -> A
	System.Collections.Generic.List`1<Game.DataRestore> [Client]System.Collections.Generic.List`1<Game.DataRestore> Game.DataRestoreManager::dataList -> A

	Game.DataRestoreManager [Client]Game.DataRestoreManager Game.DataRestoreManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataRestore> [Client]System.Collections.Generic.List`1<Game.DataRestore> Game.DataRestoreManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataRestoreManager::Count -> dropped
}

[Client]Game.DataPetstorage -> [Client]C.w
{
	[Client]Game.DataPetstorage::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetstorage::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetstorage::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetstorage::get_Level[0]( ) -> A
	[Client]Game.DataPetstorage::set_Level[1]( System.Int32 ) -> A
	[Client]Game.DataPetstorage::get_CostMoney[0]( ) -> a
	[Client]Game.DataPetstorage::set_CostMoney[1]( System.Int32 ) -> a
	[Client]Game.DataPetstorage::get_ItemID[0]( ) -> B
	[Client]Game.DataPetstorage::set_ItemID[1]( System.Int32 ) -> B
	[Client]Game.DataPetstorage::get_MaxNum[0]( ) -> b
	[Client]Game.DataPetstorage::set_MaxNum[1]( System.Int32 ) -> b

	[Client]Game.DataPetstorage::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPetstorage::<Level>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPetstorage::<CostMoney>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPetstorage::<ItemID>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataPetstorage::<MaxNum>k__BackingField -> b

	System.Int32 [Client]System.Int32 Game.DataPetstorage::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstorage::CostMoney -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstorage::ItemID -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstorage::MaxNum -> dropped
}

[Client]Game.DataPetstorageManager -> [Client]C.X
{
	[Client]Game.DataPetstorageManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetstorageManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetstorageManager::Clear[0]( ) -> A
	[Client]Game.DataPetstorageManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetstorageManager::GetDataByLevel[1]( System.Int32 ) -> A
	[Client]Game.DataPetstorageManager::GetDataListByLevel[1]( System.Int32 ) -> a
	[Client]Game.DataPetstorageManager::GetDataByCostMoney[1]( System.Int32 ) -> B
	[Client]Game.DataPetstorageManager::GetDataListByCostMoney[1]( System.Int32 ) -> b
	[Client]Game.DataPetstorageManager::GetDataByItemID[1]( System.Int32 ) -> C
	[Client]Game.DataPetstorageManager::GetDataListByItemID[1]( System.Int32 ) -> c
	[Client]Game.DataPetstorageManager::GetDataByMaxNum[1]( System.Int32 ) -> D
	[Client]Game.DataPetstorageManager::GetDataListByMaxNum[1]( System.Int32 ) -> d
	[Client]Game.DataPetstorageManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetstorageManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetstorageManager::get_Count[0]( ) -> b

	[Client]Game.DataPetstorageManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetstorageManager::.ctor[0]( ) skipped:  special name

	Game.DataPetstorageManager [Client]Game.DataPetstorageManager Game.DataPetstorageManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPetstorage> [Client]System.Collections.Generic.List`1<Game.DataPetstorage> Game.DataPetstorageManager::dataList -> A

	Game.DataPetstorageManager [Client]Game.DataPetstorageManager Game.DataPetstorageManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPetstorage> [Client]System.Collections.Generic.List`1<Game.DataPetstorage> Game.DataPetstorageManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstorageManager::Count -> dropped
}

[Client]Game.DataPet -> [Client]C.x
{
	[Client]Game.DataPet::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPet::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPet::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPet::get_ID[0]( ) -> A
	[Client]Game.DataPet::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataPet::get_Name[0]( ) -> a
	[Client]Game.DataPet::set_Name[1]( System.String ) -> A
	[Client]Game.DataPet::get_ModelPath[0]( ) -> B
	[Client]Game.DataPet::set_ModelPath[1]( System.String ) -> a
	[Client]Game.DataPet::get_BattleLevel[0]( ) -> b
	[Client]Game.DataPet::set_BattleLevel[1]( System.Int32 ) -> a
	[Client]Game.DataPet::get_PetAttackType[0]( ) -> C
	[Client]Game.DataPet::set_PetAttackType[1]( System.Int32 ) -> B
	[Client]Game.DataPet::get_QualityStar[0]( ) -> c
	[Client]Game.DataPet::set_QualityStar[1]( System.Int32 ) -> b
	[Client]Game.DataPet::get_StarMax[0]( ) -> D
	[Client]Game.DataPet::set_StarMax[1]( System.Int32 ) -> C
	[Client]Game.DataPet::get_UpPetID[0]( ) -> d
	[Client]Game.DataPet::set_UpPetID[1]( System.Int32 ) -> c
	[Client]Game.DataPet::get_CanUpQuaStar[0]( ) -> E
	[Client]Game.DataPet::set_CanUpQuaStar[1]( System.Boolean ) -> A
	[Client]Game.DataPet::get_StarUpNeedExp[0]( ) -> e
	[Client]Game.DataPet::set_StarUpNeedExp[1]( System.Int32 ) -> D
	[Client]Game.DataPet::get_StarAffordExp[0]( ) -> F
	[Client]Game.DataPet::set_StarAffordExp[1]( System.Int32 ) -> d
	[Client]Game.DataPet::get_FeedFatigue[0]( ) -> f
	[Client]Game.DataPet::set_FeedFatigue[1]( System.Int32 ) -> E
	[Client]Game.DataPet::get_CostFatigue[0]( ) -> G
	[Client]Game.DataPet::set_CostFatigue[1]( System.Int32 ) -> e
	[Client]Game.DataPet::get_StarLimit[0]( ) -> g
	[Client]Game.DataPet::set_StarLimit[1]( System.Int32 ) -> F
	[Client]Game.DataPet::get_StarLimitNum[0]( ) -> H
	[Client]Game.DataPet::set_StarLimitNum[1]( System.Int32 ) -> f
	[Client]Game.DataPet::get_PetIcon[0]( ) -> h
	[Client]Game.DataPet::set_PetIcon[1]( System.String ) -> B
	[Client]Game.DataPet::get_GrowthRateMin[0]( ) -> I
	[Client]Game.DataPet::set_GrowthRateMin[1]( System.Int32 ) -> G
	[Client]Game.DataPet::get_GrowthRateMax[0]( ) -> i
	[Client]Game.DataPet::set_GrowthRateMax[1]( System.Int32 ) -> g
	[Client]Game.DataPet::get_TargetHead[0]( ) -> J
	[Client]Game.DataPet::set_TargetHead[1]( System.String ) -> b
	[Client]Game.DataPet::get_StrPoint[0]( ) -> j
	[Client]Game.DataPet::set_StrPoint[1]( System.Single ) -> A
	[Client]Game.DataPet::get_ConPoint[0]( ) -> K
	[Client]Game.DataPet::set_ConPoint[1]( System.Single ) -> a
	[Client]Game.DataPet::get_DexPoint[0]( ) -> k
	[Client]Game.DataPet::set_DexPoint[1]( System.Single ) -> B
	[Client]Game.DataPet::get_IntPoint[0]( ) -> L
	[Client]Game.DataPet::set_IntPoint[1]( System.Single ) -> b
	[Client]Game.DataPet::get_SpiritPoint[0]( ) -> l
	[Client]Game.DataPet::set_SpiritPoint[1]( System.Single ) -> C
	[Client]Game.DataPet::get_Scale[0]( ) -> M
	[Client]Game.DataPet::set_Scale[1]( System.Single ) -> c
	[Client]Game.DataPet::get_ViewScale[0]( ) -> m
	[Client]Game.DataPet::set_ViewScale[1]( System.Single ) -> D
	[Client]Game.DataPet::get_ViewX[0]( ) -> N
	[Client]Game.DataPet::set_ViewX[1]( System.Single ) -> d
	[Client]Game.DataPet::get_ViewY[0]( ) -> n
	[Client]Game.DataPet::set_ViewY[1]( System.Single ) -> E
	[Client]Game.DataPet::get_PhyAttParam[0]( ) -> O
	[Client]Game.DataPet::set_PhyAttParam[1]( System.Int32 ) -> H
	[Client]Game.DataPet::get_MagAttParam[0]( ) -> o
	[Client]Game.DataPet::set_MagAttParam[1]( System.Int32 ) -> h
	[Client]Game.DataPet::get_SkillKind[0]( ) -> P
	[Client]Game.DataPet::set_SkillKind[1]( System.Int32[] ) -> A
	[Client]Game.DataPet::get_SkillIndex[0]( ) -> p
	[Client]Game.DataPet::set_SkillIndex[1]( System.Int32[] ) -> a

	[Client]Game.DataPet::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPet::<ID>k__BackingField -> A
	System.String [Client]System.String Game.DataPet::<Name>k__BackingField -> A
	System.String [Client]System.String Game.DataPet::<ModelPath>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPet::<BattleLevel>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPet::<PetAttackType>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataPet::<QualityStar>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataPet::<StarMax>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataPet::<UpPetID>k__BackingField -> c
	System.Boolean [Client]System.Boolean Game.DataPet::<CanUpQuaStar>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPet::<StarUpNeedExp>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.DataPet::<StarAffordExp>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataPet::<FeedFatigue>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataPet::<CostFatigue>k__BackingField -> e
	System.Int32 [Client]System.Int32 Game.DataPet::<StarLimit>k__BackingField -> F
	System.Int32 [Client]System.Int32 Game.DataPet::<StarLimitNum>k__BackingField -> f
	System.String [Client]System.String Game.DataPet::<PetIcon>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataPet::<GrowthRateMin>k__BackingField -> G
	System.Int32 [Client]System.Int32 Game.DataPet::<GrowthRateMax>k__BackingField -> g
	System.String [Client]System.String Game.DataPet::<TargetHead>k__BackingField -> b
	System.Single [Client]System.Single Game.DataPet::<StrPoint>k__BackingField -> A
	System.Single [Client]System.Single Game.DataPet::<ConPoint>k__BackingField -> a
	System.Single [Client]System.Single Game.DataPet::<DexPoint>k__BackingField -> B
	System.Single [Client]System.Single Game.DataPet::<IntPoint>k__BackingField -> b
	System.Single [Client]System.Single Game.DataPet::<SpiritPoint>k__BackingField -> C
	System.Single [Client]System.Single Game.DataPet::<Scale>k__BackingField -> c
	System.Single [Client]System.Single Game.DataPet::<ViewScale>k__BackingField -> D
	System.Single [Client]System.Single Game.DataPet::<ViewX>k__BackingField -> d
	System.Single [Client]System.Single Game.DataPet::<ViewY>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataPet::<PhyAttParam>k__BackingField -> H
	System.Int32 [Client]System.Int32 Game.DataPet::<MagAttParam>k__BackingField -> h
	System.Int32[] [Client]System.Int32[] Game.DataPet::<SkillKind>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataPet::<SkillIndex>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataPet::ID -> dropped
	System.String [Client]System.String Game.DataPet::Name -> dropped
	System.String [Client]System.String Game.DataPet::ModelPath -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::BattleLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::PetAttackType -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::QualityStar -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::StarMax -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::UpPetID -> dropped
	System.Boolean [Client]System.Boolean Game.DataPet::CanUpQuaStar -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::StarUpNeedExp -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::StarAffordExp -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::FeedFatigue -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::CostFatigue -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::StarLimit -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::StarLimitNum -> dropped
	System.String [Client]System.String Game.DataPet::PetIcon -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::GrowthRateMin -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::GrowthRateMax -> dropped
	System.String [Client]System.String Game.DataPet::TargetHead -> dropped
	System.Single [Client]System.Single Game.DataPet::StrPoint -> dropped
	System.Single [Client]System.Single Game.DataPet::ConPoint -> dropped
	System.Single [Client]System.Single Game.DataPet::DexPoint -> dropped
	System.Single [Client]System.Single Game.DataPet::IntPoint -> dropped
	System.Single [Client]System.Single Game.DataPet::SpiritPoint -> dropped
	System.Single [Client]System.Single Game.DataPet::Scale -> dropped
	System.Single [Client]System.Single Game.DataPet::ViewScale -> dropped
	System.Single [Client]System.Single Game.DataPet::ViewX -> dropped
	System.Single [Client]System.Single Game.DataPet::ViewY -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::PhyAttParam -> dropped
	System.Int32 [Client]System.Int32 Game.DataPet::MagAttParam -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataPet::SkillKind -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataPet::SkillIndex -> dropped
}

[Client]Game.DataPetManager -> [Client]C.Y
{
	[Client]Game.DataPetManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetManager::Clear[0]( ) -> A
	[Client]Game.DataPetManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataPetManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataPetManager::GetDataByName[1]( System.String ) -> A
	[Client]Game.DataPetManager::GetDataListByName[1]( System.String ) -> a
	[Client]Game.DataPetManager::GetDataByModelPath[1]( System.String ) -> B
	[Client]Game.DataPetManager::GetDataListByModelPath[1]( System.String ) -> b
	[Client]Game.DataPetManager::GetDataByBattleLevel[1]( System.Int32 ) -> B
	[Client]Game.DataPetManager::GetDataListByBattleLevel[1]( System.Int32 ) -> b
	[Client]Game.DataPetManager::GetDataByPetAttackType[1]( System.Int32 ) -> C
	[Client]Game.DataPetManager::GetDataListByPetAttackType[1]( System.Int32 ) -> c
	[Client]Game.DataPetManager::GetDataByQualityStar[1]( System.Int32 ) -> D
	[Client]Game.DataPetManager::GetDataListByQualityStar[1]( System.Int32 ) -> d
	[Client]Game.DataPetManager::GetDataByStarMax[1]( System.Int32 ) -> E
	[Client]Game.DataPetManager::GetDataListByStarMax[1]( System.Int32 ) -> e
	[Client]Game.DataPetManager::GetDataByUpPetID[1]( System.Int32 ) -> F
	[Client]Game.DataPetManager::GetDataListByUpPetID[1]( System.Int32 ) -> f
	[Client]Game.DataPetManager::GetDataByCanUpQuaStar[1]( System.Boolean ) -> A
	[Client]Game.DataPetManager::GetDataListByCanUpQuaStar[1]( System.Boolean ) -> a
	[Client]Game.DataPetManager::GetDataByStarUpNeedExp[1]( System.Int32 ) -> G
	[Client]Game.DataPetManager::GetDataListByStarUpNeedExp[1]( System.Int32 ) -> g
	[Client]Game.DataPetManager::GetDataByStarAffordExp[1]( System.Int32 ) -> H
	[Client]Game.DataPetManager::GetDataListByStarAffordExp[1]( System.Int32 ) -> h
	[Client]Game.DataPetManager::GetDataByFeedFatigue[1]( System.Int32 ) -> I
	[Client]Game.DataPetManager::GetDataListByFeedFatigue[1]( System.Int32 ) -> i
	[Client]Game.DataPetManager::GetDataByCostFatigue[1]( System.Int32 ) -> J
	[Client]Game.DataPetManager::GetDataListByCostFatigue[1]( System.Int32 ) -> j
	[Client]Game.DataPetManager::GetDataByStarLimit[1]( System.Int32 ) -> K
	[Client]Game.DataPetManager::GetDataListByStarLimit[1]( System.Int32 ) -> k
	[Client]Game.DataPetManager::GetDataByStarLimitNum[1]( System.Int32 ) -> L
	[Client]Game.DataPetManager::GetDataListByStarLimitNum[1]( System.Int32 ) -> l
	[Client]Game.DataPetManager::GetDataByPetIcon[1]( System.String ) -> C
	[Client]Game.DataPetManager::GetDataListByPetIcon[1]( System.String ) -> c
	[Client]Game.DataPetManager::GetDataByGrowthRateMin[1]( System.Int32 ) -> M
	[Client]Game.DataPetManager::GetDataListByGrowthRateMin[1]( System.Int32 ) -> m
	[Client]Game.DataPetManager::GetDataByGrowthRateMax[1]( System.Int32 ) -> N
	[Client]Game.DataPetManager::GetDataListByGrowthRateMax[1]( System.Int32 ) -> n
	[Client]Game.DataPetManager::GetDataByTargetHead[1]( System.String ) -> D
	[Client]Game.DataPetManager::GetDataListByTargetHead[1]( System.String ) -> d
	[Client]Game.DataPetManager::GetDataByStrPoint[1]( System.Single ) -> A
	[Client]Game.DataPetManager::GetDataListByStrPoint[1]( System.Single ) -> a
	[Client]Game.DataPetManager::GetDataByConPoint[1]( System.Single ) -> B
	[Client]Game.DataPetManager::GetDataListByConPoint[1]( System.Single ) -> b
	[Client]Game.DataPetManager::GetDataByDexPoint[1]( System.Single ) -> C
	[Client]Game.DataPetManager::GetDataListByDexPoint[1]( System.Single ) -> c
	[Client]Game.DataPetManager::GetDataByIntPoint[1]( System.Single ) -> D
	[Client]Game.DataPetManager::GetDataListByIntPoint[1]( System.Single ) -> d
	[Client]Game.DataPetManager::GetDataBySpiritPoint[1]( System.Single ) -> E
	[Client]Game.DataPetManager::GetDataListBySpiritPoint[1]( System.Single ) -> e
	[Client]Game.DataPetManager::GetDataByScale[1]( System.Single ) -> F
	[Client]Game.DataPetManager::GetDataListByScale[1]( System.Single ) -> f
	[Client]Game.DataPetManager::GetDataByViewScale[1]( System.Single ) -> G
	[Client]Game.DataPetManager::GetDataListByViewScale[1]( System.Single ) -> g
	[Client]Game.DataPetManager::GetDataByViewX[1]( System.Single ) -> H
	[Client]Game.DataPetManager::GetDataListByViewX[1]( System.Single ) -> h
	[Client]Game.DataPetManager::GetDataByViewY[1]( System.Single ) -> I
	[Client]Game.DataPetManager::GetDataListByViewY[1]( System.Single ) -> i
	[Client]Game.DataPetManager::GetDataByPhyAttParam[1]( System.Int32 ) -> O
	[Client]Game.DataPetManager::GetDataListByPhyAttParam[1]( System.Int32 ) -> o
	[Client]Game.DataPetManager::GetDataByMagAttParam[1]( System.Int32 ) -> P
	[Client]Game.DataPetManager::GetDataListByMagAttParam[1]( System.Int32 ) -> p
	[Client]Game.DataPetManager::GetDataBySkillKind[1]( System.Int32[] ) -> A
	[Client]Game.DataPetManager::GetDataListBySkillKind[1]( System.Int32[] ) -> a
	[Client]Game.DataPetManager::GetDataBySkillIndex[1]( System.Int32[] ) -> B
	[Client]Game.DataPetManager::GetDataListBySkillIndex[1]( System.Int32[] ) -> b
	[Client]Game.DataPetManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetManager::get_Count[0]( ) -> b

	[Client]Game.DataPetManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetManager::.ctor[0]( ) skipped:  special name

	Game.DataPetManager [Client]Game.DataPetManager Game.DataPetManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPet> [Client]System.Collections.Generic.List`1<Game.DataPet> Game.DataPetManager::dataList -> A

	Game.DataPetManager [Client]Game.DataPetManager Game.DataPetManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPet> [Client]System.Collections.Generic.List`1<Game.DataPet> Game.DataPetManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetManager::Count -> dropped
}

[Client]Game.DataHelpInfo -> [Client]C.y
{
	[Client]Game.DataHelpInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataHelpInfo::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataHelpInfo::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataHelpInfo::get_DlgName[0]( ) -> A
	[Client]Game.DataHelpInfo::set_DlgName[1]( System.String ) -> A
	[Client]Game.DataHelpInfo::get_Title[0]( ) -> a
	[Client]Game.DataHelpInfo::set_Title[1]( System.String ) -> a
	[Client]Game.DataHelpInfo::get_Content[0]( ) -> B
	[Client]Game.DataHelpInfo::set_Content[1]( System.String ) -> B

	[Client]Game.DataHelpInfo::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.DataHelpInfo::<DlgName>k__BackingField -> A
	System.String [Client]System.String Game.DataHelpInfo::<Title>k__BackingField -> a
	System.String [Client]System.String Game.DataHelpInfo::<Content>k__BackingField -> B

	System.String [Client]System.String Game.DataHelpInfo::DlgName -> dropped
	System.String [Client]System.String Game.DataHelpInfo::Title -> dropped
	System.String [Client]System.String Game.DataHelpInfo::Content -> dropped
}

[Client]Game.DataHelpInfoManager -> [Client]C.Z
{
	[Client]Game.DataHelpInfoManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataHelpInfoManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataHelpInfoManager::Clear[0]( ) -> A
	[Client]Game.DataHelpInfoManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataHelpInfoManager::GetDataByDlgName[1]( System.String ) -> A
	[Client]Game.DataHelpInfoManager::GetDataListByDlgName[1]( System.String ) -> a
	[Client]Game.DataHelpInfoManager::GetDataByTitle[1]( System.String ) -> B
	[Client]Game.DataHelpInfoManager::GetDataListByTitle[1]( System.String ) -> b
	[Client]Game.DataHelpInfoManager::GetDataByContent[1]( System.String ) -> C
	[Client]Game.DataHelpInfoManager::GetDataListByContent[1]( System.String ) -> c
	[Client]Game.DataHelpInfoManager::get_Instance[0]( ) -> a
	[Client]Game.DataHelpInfoManager::get_DataList[0]( ) -> B
	[Client]Game.DataHelpInfoManager::get_Count[0]( ) -> b

	[Client]Game.DataHelpInfoManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataHelpInfoManager::.ctor[0]( ) skipped:  special name

	Game.DataHelpInfoManager [Client]Game.DataHelpInfoManager Game.DataHelpInfoManager::instance -> A
	System.Collections.Generic.List`1<Game.DataHelpInfo> [Client]System.Collections.Generic.List`1<Game.DataHelpInfo> Game.DataHelpInfoManager::dataList -> A

	Game.DataHelpInfoManager [Client]Game.DataHelpInfoManager Game.DataHelpInfoManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataHelpInfo> [Client]System.Collections.Generic.List`1<Game.DataHelpInfo> Game.DataHelpInfoManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataHelpInfoManager::Count -> dropped
}

[Client]Game.DataFriendHelpAward -> [Client]C.z
{
	[Client]Game.DataFriendHelpAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFriendHelpAward::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFriendHelpAward::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFriendHelpAward::get_HelpGoal[0]( ) -> A
	[Client]Game.DataFriendHelpAward::set_HelpGoal[1]( System.Int32 ) -> A
	[Client]Game.DataFriendHelpAward::get_HelpAwardID[0]( ) -> a
	[Client]Game.DataFriendHelpAward::set_HelpAwardID[1]( System.Int32 ) -> a

	[Client]Game.DataFriendHelpAward::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataFriendHelpAward::<HelpGoal>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataFriendHelpAward::<HelpAwardID>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataFriendHelpAward::HelpGoal -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpAward::HelpAwardID -> dropped
}

[Client]Game.DataFriendHelpAwardManager -> [Client]c.A
{
	[Client]Game.DataFriendHelpAwardManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFriendHelpAwardManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFriendHelpAwardManager::Clear[0]( ) -> A
	[Client]Game.DataFriendHelpAwardManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFriendHelpAwardManager::GetDataByHelpGoal[1]( System.Int32 ) -> A
	[Client]Game.DataFriendHelpAwardManager::GetDataListByHelpGoal[1]( System.Int32 ) -> a
	[Client]Game.DataFriendHelpAwardManager::GetDataByHelpAwardID[1]( System.Int32 ) -> B
	[Client]Game.DataFriendHelpAwardManager::GetDataListByHelpAwardID[1]( System.Int32 ) -> b
	[Client]Game.DataFriendHelpAwardManager::get_Instance[0]( ) -> a
	[Client]Game.DataFriendHelpAwardManager::get_DataList[0]( ) -> B
	[Client]Game.DataFriendHelpAwardManager::get_Count[0]( ) -> b

	[Client]Game.DataFriendHelpAwardManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataFriendHelpAwardManager::.ctor[0]( ) skipped:  special name

	Game.DataFriendHelpAwardManager [Client]Game.DataFriendHelpAwardManager Game.DataFriendHelpAwardManager::instance -> A
	System.Collections.Generic.List`1<Game.DataFriendHelpAward> [Client]System.Collections.Generic.List`1<Game.DataFriendHelpAward> Game.DataFriendHelpAwardManager::dataList -> A

	Game.DataFriendHelpAwardManager [Client]Game.DataFriendHelpAwardManager Game.DataFriendHelpAwardManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataFriendHelpAward> [Client]System.Collections.Generic.List`1<Game.DataFriendHelpAward> Game.DataFriendHelpAwardManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpAwardManager::Count -> dropped
}

[Client]Game.DataBuyBag -> [Client]c.a
{
	[Client]Game.DataBuyBag::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataBuyBag::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataBuyBag::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataBuyBag::get_Kind[0]( ) -> A
	[Client]Game.DataBuyBag::set_Kind[1]( System.Int32 ) -> A
	[Client]Game.DataBuyBag::get_Index[0]( ) -> a
	[Client]Game.DataBuyBag::set_Index[1]( System.Int32 ) -> a
	[Client]Game.DataBuyBag::get_Price[0]( ) -> B
	[Client]Game.DataBuyBag::set_Price[1]( System.Int32 ) -> B

	[Client]Game.DataBuyBag::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataBuyBag::<Kind>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataBuyBag::<Index>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataBuyBag::<Price>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataBuyBag::Kind -> dropped
	System.Int32 [Client]System.Int32 Game.DataBuyBag::Index -> dropped
	System.Int32 [Client]System.Int32 Game.DataBuyBag::Price -> dropped
}

[Client]Game.DataBuyBagManager -> [Client]c.B
{
	[Client]Game.DataBuyBagManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataBuyBagManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataBuyBagManager::Clear[0]( ) -> A
	[Client]Game.DataBuyBagManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataBuyBagManager::GetDataByKind[1]( System.Int32 ) -> A
	[Client]Game.DataBuyBagManager::GetDataListByKind[1]( System.Int32 ) -> a
	[Client]Game.DataBuyBagManager::GetDataByIndex[1]( System.Int32 ) -> B
	[Client]Game.DataBuyBagManager::GetDataListByIndex[1]( System.Int32 ) -> b
	[Client]Game.DataBuyBagManager::GetDataByPrice[1]( System.Int32 ) -> C
	[Client]Game.DataBuyBagManager::GetDataListByPrice[1]( System.Int32 ) -> c
	[Client]Game.DataBuyBagManager::get_Instance[0]( ) -> a
	[Client]Game.DataBuyBagManager::get_DataList[0]( ) -> B
	[Client]Game.DataBuyBagManager::get_Count[0]( ) -> b

	[Client]Game.DataBuyBagManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataBuyBagManager::.ctor[0]( ) skipped:  special name

	Game.DataBuyBagManager [Client]Game.DataBuyBagManager Game.DataBuyBagManager::instance -> A
	System.Collections.Generic.List`1<Game.DataBuyBag> [Client]System.Collections.Generic.List`1<Game.DataBuyBag> Game.DataBuyBagManager::dataList -> A

	Game.DataBuyBagManager [Client]Game.DataBuyBagManager Game.DataBuyBagManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataBuyBag> [Client]System.Collections.Generic.List`1<Game.DataBuyBag> Game.DataBuyBagManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataBuyBagManager::Count -> dropped
}

[Client]Game.CameraManager -> [Client]c.b
{
	[Client]Game.CameraManager::get_CameraAngleX[0]( ) -> A
	[Client]Game.CameraManager::set_CameraAngleX[1]( System.Single ) -> A
	[Client]Game.CameraManager::get_Mode[0]( ) -> a
	[Client]Game.CameraManager::set_Mode[1]( System.Int32 ) -> A
	[Client]Game.CameraManager::get_AngleX[0]( ) -> B
	[Client]Game.CameraManager::set_AngleX[1]( System.Single ) -> a
	[Client]Game.CameraManager::get_AngleY[0]( ) -> b
	[Client]Game.CameraManager::set_AngleY[1]( System.Single ) -> B
	[Client]Game.CameraManager::get_Offset[0]( ) -> C
	[Client]Game.CameraManager::set_Offset[1]( System.Single ) -> b
	[Client]Game.CameraManager::get_Height[0]( ) -> c
	[Client]Game.CameraManager::set_Height[1]( System.Single ) -> C
	[Client]Game.CameraManager::get_DistanceMin[0]( ) -> D
	[Client]Game.CameraManager::set_DistanceMin[1]( System.Single ) -> c
	[Client]Game.CameraManager::get_DistanceMax[0]( ) -> d
	[Client]Game.CameraManager::set_DistanceMax[1]( System.Single ) -> D
	[Client]Game.CameraManager::get_AngleXMax[0]( ) -> E
	[Client]Game.CameraManager::set_AngleXMax[1]( System.Single ) -> d
	[Client]Game.CameraManager::get_PlayerSetDistance[0]( ) -> e
	[Client]Game.CameraManager::set_PlayerSetDistance[1]( System.Single ) -> E
	[Client]Game.CameraManager::get_Distance[0]( ) -> F
	[Client]Game.CameraManager::set_Distance[1]( System.Single ) -> e
	[Client]Game.CameraManager::get_Fov[0]( ) -> f
	[Client]Game.CameraManager::set_Fov[1]( System.Single ) -> F
	[Client]Game.CameraManager::get_Far[0]( ) -> G
	[Client]Game.CameraManager::set_Far[1]( System.Single ) -> f
	[Client]Game.CameraManager::get_Background[0]( ) -> g
	[Client]Game.CameraManager::set_Background[1]( System.UInt32 ) -> A
	[Client]Game.CameraManager::get_PauseUpdate[0]( ) -> H
	[Client]Game.CameraManager::set_PauseUpdate[1]( System.Boolean ) -> A
	[Client]Game.CameraManager::get_Instance[0]( ) -> h
	[Client]Game.CameraManager::Init[0]( ) -> I
	[Client]Game.CameraManager::Release[0]( ) -> i
	[Client]Game.CameraManager::Reset[0]( ) -> J
	[Client]Game.CameraManager::Update[0]( ) -> j
	[Client]Game.CameraManager::LateUpdate[0]( ) -> K
	[Client]Game.CameraManager::Setup[0]( ) -> k
	[Client]Game.CameraManager::SetupDistance[0]( ) -> L
	[Client]Game.CameraManager::StartSlowMotion[0]( ) -> l
	[Client]Game.CameraManager::StartSlowMotion[1]( System.Single ) -> G
	[Client]Game.CameraManager::EndSlowMotion[0]( ) -> M
	[Client]Game.CameraManager::SetMapParams[1]( System.String ) -> A
	[Client]Game.CameraManager::GetValueInString[3]( System.String, System.String, System.Single& ) -> A
	[Client]Game.CameraManager::GetHexInString[3]( System.String, System.String, System.UInt32& ) -> A

	[Client]Game.CameraManager::.cctor[0]( ) skipped:  special name
	[Client]Game.CameraManager::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.CameraManager::DefaultFixedDeltaTime -> A
	System.Single [Client]System.Single Game.CameraManager::AngleXMin -> a
	System.Single [Client]System.Single Game.CameraManager::CameraAngleXMin -> B
	System.Single [Client]System.Single Game.CameraManager::CameraAngleXMax -> b
	log4net.ILog [Client]log4net.ILog Game.CameraManager::m_Log -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.CameraManager::m_CameraAssistPoint -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.CameraManager::m_LookAt -> A
	UnityEngine.Camera [Client]UnityEngine.Camera Game.CameraManager::m_Camera -> A
	System.Int32 [Client]System.Int32 Game.CameraManager::m_DefaultMode -> A
	System.Single [Client]System.Single Game.CameraManager::m_DefaultAngleX -> C
	System.Single [Client]System.Single Game.CameraManager::m_DefaultAngleY -> c
	System.Single [Client]System.Single Game.CameraManager::m_DefaultOffset -> D
	System.Single [Client]System.Single Game.CameraManager::m_DefaultHeight -> d
	System.Single [Client]System.Single Game.CameraManager::m_DefaultDistance -> E
	System.Single [Client]System.Single Game.CameraManager::m_DefaultFov -> e
	System.Single [Client]System.Single Game.CameraManager::m_DefaultFar -> F
	System.UInt32 [Client]System.UInt32 Game.CameraManager::m_DefaultColor -> A
	System.Single [Client]System.Single Game.CameraManager::m_DefaultDistanceMin -> f
	System.Single [Client]System.Single Game.CameraManager::m_DefaultDistanceMax -> G
	System.Single [Client]System.Single Game.CameraManager::m_DefaultOrthographicSize -> g
	System.Single [Client]System.Single Game.CameraManager::m_CurrentDistance -> H
	System.Boolean [Client]System.Boolean Game.CameraManager::m_IsOrthographic -> A
	System.Single [Client]System.Single Game.CameraManager::m_OrthographicSize -> h
	System.Single [Client]System.Single Game.CameraManager::m_EndSlowMotionTime -> I
	System.Boolean [Client]System.Boolean Game.CameraManager::m_NeedSetupCamera -> a
	System.Boolean [Client]System.Boolean Game.CameraManager::m_NeedSetupDistance -> B
	Game.CameraManager [Client]Game.CameraManager Game.CameraManager::m_Instance -> A
	System.Single [Client]System.Single Game.CameraManager::<CameraAngleX>k__BackingField -> i
	System.Int32 [Client]System.Int32 Game.CameraManager::<Mode>k__BackingField -> a
	System.Single [Client]System.Single Game.CameraManager::<AngleX>k__BackingField -> J
	System.Single [Client]System.Single Game.CameraManager::<AngleY>k__BackingField -> j
	System.Single [Client]System.Single Game.CameraManager::<Offset>k__BackingField -> K
	System.Single [Client]System.Single Game.CameraManager::<Height>k__BackingField -> k
	System.Single [Client]System.Single Game.CameraManager::<DistanceMin>k__BackingField -> L
	System.Single [Client]System.Single Game.CameraManager::<DistanceMax>k__BackingField -> l
	System.Single [Client]System.Single Game.CameraManager::<AngleXMax>k__BackingField -> M
	System.Single [Client]System.Single Game.CameraManager::<PlayerSetDistance>k__BackingField -> m
	System.Single [Client]System.Single Game.CameraManager::<Fov>k__BackingField -> N
	System.Single [Client]System.Single Game.CameraManager::<Far>k__BackingField -> n
	System.UInt32 [Client]System.UInt32 Game.CameraManager::<Background>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.CameraManager::<PauseUpdate>k__BackingField -> b

	System.Single [Client]System.Single Game.CameraManager::CameraAngleX -> dropped
	System.Int32 [Client]System.Int32 Game.CameraManager::Mode -> dropped
	System.Single [Client]System.Single Game.CameraManager::AngleX -> dropped
	System.Single [Client]System.Single Game.CameraManager::AngleY -> dropped
	System.Single [Client]System.Single Game.CameraManager::Offset -> dropped
	System.Single [Client]System.Single Game.CameraManager::Height -> dropped
	System.Single [Client]System.Single Game.CameraManager::DistanceMin -> dropped
	System.Single [Client]System.Single Game.CameraManager::DistanceMax -> dropped
	System.Single [Client]System.Single Game.CameraManager::AngleXMax -> dropped
	System.Single [Client]System.Single Game.CameraManager::PlayerSetDistance -> dropped
	System.Single [Client]System.Single Game.CameraManager::Distance -> dropped
	System.Single [Client]System.Single Game.CameraManager::Fov -> dropped
	System.Single [Client]System.Single Game.CameraManager::Far -> dropped
	System.UInt32 [Client]System.UInt32 Game.CameraManager::Background -> dropped
	System.Boolean [Client]System.Boolean Game.CameraManager::PauseUpdate -> dropped
	Game.CameraManager [Client]Game.CameraManager Game.CameraManager::Instance -> dropped
}

[Client]ZipFile/UnzipType -> [Client]c.C/c
{
	ZipFile/UnzipType [Client]ZipFile/UnzipType ZipFile/UnzipType::ToCurrentDirctory -> A
	ZipFile/UnzipType [Client]ZipFile/UnzipType ZipFile/UnzipType::ToNewDirctory -> a

	System.Int32 [Client]System.Int32 ZipFile/UnzipType::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Tar.TarArchive -> [Client]c.d
{
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::add_ProgressMessageEvent[1]( ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::remove_ProgressMessageEvent[1]( ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::OnProgressMessageEvent[2]( ICSharpCode.SharpZipLib.Tar.TarEntry, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::CreateInputTarArchive[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::CreateInputTarArchive[2]( System.IO.Stream, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::CreateOutputTarArchive[1]( System.IO.Stream ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::CreateOutputTarArchive[2]( System.IO.Stream, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::SetKeepOldFiles[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::get_AsciiTranslate[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::set_AsciiTranslate[1]( System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::SetAsciiTranslation[1]( System.Boolean ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::get_PathPrefix[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::set_PathPrefix[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::get_RootPath[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::set_RootPath[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::SetUserInfo[4]( System.Int32, System.String, System.Int32, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::get_ApplyUserInfoOverrides[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::set_ApplyUserInfoOverrides[1]( System.Boolean ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::get_UserId[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::get_UserName[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::get_GroupId[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::get_GroupName[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::get_RecordSize[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::set_IsStreamOwner[1]( System.Boolean ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::CloseArchive[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::ListContents[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::ExtractContents[1]( System.String ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::ExtractEntry[2]( System.String, ICSharpCode.SharpZipLib.Tar.TarEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::WriteEntry[2]( ICSharpCode.SharpZipLib.Tar.TarEntry, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::WriteEntryCore[2]( ICSharpCode.SharpZipLib.Tar.TarEntry, System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::Dispose[1]( System.Boolean ) -> c
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::Close[0]( ) -> f
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::EnsureDirectoryExists[1]( System.String ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::IsBinary[1]( System.String ) -> C

	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::Finalize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::.ctor[1]( ICSharpCode.SharpZipLib.Tar.TarInputStream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::.ctor[1]( ICSharpCode.SharpZipLib.Tar.TarOutputStream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarArchive::Dispose[0]( ) skipped:  external base class or interface

	ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler [Client]ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler ICSharpCode.SharpZipLib.Tar.TarArchive::ProgressMessageEvent -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarArchive::keepOldFiles -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarArchive::asciiTranslate -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarArchive::userId -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarArchive::userName -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarArchive::groupId -> a
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarArchive::groupName -> a
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarArchive::rootPath -> B
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarArchive::pathPrefix -> b
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarArchive::applyUserInfoOverrides -> B
	ICSharpCode.SharpZipLib.Tar.TarInputStream [Client]ICSharpCode.SharpZipLib.Tar.TarInputStream ICSharpCode.SharpZipLib.Tar.TarArchive::tarIn -> A
	ICSharpCode.SharpZipLib.Tar.TarOutputStream [Client]ICSharpCode.SharpZipLib.Tar.TarOutputStream ICSharpCode.SharpZipLib.Tar.TarArchive::tarOut -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarArchive::isDisposed -> b

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarArchive::AsciiTranslate -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarArchive::PathPrefix -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarArchive::RootPath -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarArchive::ApplyUserInfoOverrides -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarArchive::UserId -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarArchive::UserName -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarArchive::GroupId -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarArchive::GroupName -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarArchive::RecordSize -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarArchive::IsStreamOwner -> dropped

	ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler [Client]ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler ICSharpCode.SharpZipLib.Tar.TarArchive::ProgressMessageEvent -> dropped
}

[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform -> [Client]c.E
{
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::get_PwdVerifier[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::GetAuthCode[0]( ) -> a

	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::Dispose[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::.ctor[4]( System.String, System.Byte[], System.Int32, System.Boolean ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::TransformBlock[5]( System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::TransformFinalBlock[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::get_InputBlockSize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::get_OutputBlockSize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::get_CanTransformMultipleBlocks[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::get_CanReuseTransform[0]( ) skipped:  external base class or interface

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::PWD_VER_LENGTH -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::KEY_ROUNDS -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::ENCRYPT_BLOCK -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::_blockSize -> b
	System.Security.Cryptography.ICryptoTransform [Client]System.Security.Cryptography.ICryptoTransform ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::_encryptor -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::_counterNonce -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::_encryptBuffer -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::_encrPos -> C
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::_pwdVerifier -> B
	System.Security.Cryptography.HMACSHA1 [Client]System.Security.Cryptography.HMACSHA1 ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::_hmacsha1 -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::_finalised -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::_writeMode -> a

	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::PwdVerifier -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::InputBlockSize -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::OutputBlockSize -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::CanTransformMultipleBlocks -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Encryption.ZipAESTransform::CanReuseTransform -> dropped
}

[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase -> [Client]c.F
{
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase::TransformByte[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase::SetKeys[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase::UpdateKeys[1]( System.Byte ) -> A
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase::Reset[0]( ) -> a

	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase::.ctor[0]( ) skipped:  special name

	System.UInt32[] [Client]System.UInt32[] ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase::keys -> A
}

[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged -> [Client]c.g
{

	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::get_BlockSize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::set_BlockSize[1]( System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::get_LegalKeySizes[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::GenerateIV[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::get_LegalBlockSizes[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::get_Key[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::set_Key[1]( System.Byte[] ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::GenerateKey[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::CreateEncryptor[2]( System.Byte[], System.Byte[] ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::CreateDecryptor[2]( System.Byte[], System.Byte[] ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::.ctor[0]( ) skipped:  special name

	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::key_ -> A

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::BlockSize -> dropped
	System.Security.Cryptography.KeySizes[] [Client]System.Security.Cryptography.KeySizes[] ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::LegalKeySizes -> dropped
	System.Security.Cryptography.KeySizes[] [Client]System.Security.Cryptography.KeySizes[] ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::LegalBlockSizes -> dropped
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged::Key -> dropped
}

[Client]Game.StringFileReader -> [Client]c.H
{
	[Client]Game.StringFileReader::ReadFile[1]( System.String ) -> A
	[Client]Game.StringFileReader::ReadResource[1]( System.String ) -> a
	[Client]Game.StringFileReader::ParseString[1]( System.IO.StreamReader ) -> A
	[Client]Game.StringFileReader::GetString[1]( System.String ) -> B

	[Client]Game.StringFileReader::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.StringFileReader::ErrorFlag -> A
	System.Collections.Generic.Dictionary`2<System.String,System.String> [Client]System.Collections.Generic.Dictionary`2<System.String,System.String> Game.StringFileReader::strings -> A
}

[Client]Game.Msg.PhysicalBoxItemData -> [Client]c.h
{
	[Client]Game.Msg.PhysicalBoxItemData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.PhysicalBoxItemData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.PhysicalBoxItemData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.PhysicalBoxItemData::m_uiItemId -> A
	System.Byte [Client]System.Byte Game.Msg.PhysicalBoxItemData::m_btNum -> A
}

[Client]Game.Msg.ExpeditionClientRewardData -> [Client]c.I
{
	[Client]Game.Msg.ExpeditionClientRewardData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ExpeditionClientRewardData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ExpeditionClientRewardData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.ExpeditionClientRewardData::m_ebtType -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionClientRewardData::m_btShipId -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionClientRewardData::m_usTaskId -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionClientRewardData::m_usEventId -> a
	System.Byte [Client]System.Byte Game.Msg.ExpeditionClientRewardData::m_btAreaId -> B
	System.Byte [Client]System.Byte Game.Msg.ExpeditionClientRewardData::m_btBlockId -> b
	System.UInt32 [Client]System.UInt32 Game.Msg.ExpeditionClientRewardData::m_uiExploreTime -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionClientRewardData::m_btEventTimes -> C
	System.UInt32 [Client]System.UInt32 Game.Msg.ExpeditionClientRewardData::m_uiExp -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ExpeditionClientRewardData::m_uiSkillExp -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.ExpeditionClientRewardData::m_uiTeamExp -> b
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionClientRewardData::m_usRewardTaskId -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionClientRewardData::m_usRewardEventId -> b
	System.Byte [Client]System.Byte Game.Msg.ExpeditionClientRewardData::m_btDefiniteTime -> c
	System.Byte [Client]System.Byte Game.Msg.ExpeditionClientRewardData::m_btBonusLevel -> D
	System.Collections.Generic.List`1<Game.Msg.ExpeditionRewardItemData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionRewardItemData> Game.Msg.ExpeditionClientRewardData::m_oVecItemList -> A
}

[Client]Game.Msg.CSnapShotMonsterAll -> [Client]c.i
{
	[Client]Game.Msg.CSnapShotMonsterAll::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotMonsterAll::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotMonsterAll::.ctor[0]( ) skipped:  special name

	Game.Msg.CSnapShotFighterData [Client]Game.Msg.CSnapShotFighterData Game.Msg.CSnapShotMonsterAll::m_stFighterData -> A
	Game.Msg.CSnapShotMonsterData [Client]Game.Msg.CSnapShotMonsterData Game.Msg.CSnapShotMonsterAll::m_stMonsterData -> A
}

[Client]Game.Msg.AuctionBriefSale -> [Client]c.J
{
	[Client]Game.Msg.AuctionBriefSale::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.AuctionBriefSale::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.AuctionBriefSale::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.AuctionBriefSale::m_uiID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.AuctionBriefSale::m_uiItemID -> a
	System.Byte [Client]System.Byte Game.Msg.AuctionBriefSale::m_btNum -> A
	System.Byte [Client]System.Byte Game.Msg.AuctionBriefSale::m_btMoneyType -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.AuctionBriefSale::m_uiPrice -> B
}

[Client]Game.Logic.ShopCommodity -> [Client]c.j
{
	[Client]Game.Logic.ShopCommodity::get_Data[0]( ) -> A
	[Client]Game.Logic.ShopCommodity::set_Data[1]( Game.DataShopCommodity ) -> A
	[Client]Game.Logic.ShopCommodity::get_VarID[0]( ) -> a
	[Client]Game.Logic.ShopCommodity::set_VarID[1]( System.UInt32 ) -> A
	[Client]Game.Logic.ShopCommodity::get_IsCanBuy[0]( ) -> B
	[Client]Game.Logic.ShopCommodity::set_IsCanBuy[1]( System.Boolean ) -> A

	[Client]Game.Logic.ShopCommodity::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Logic.ShopCommodity::m_unVarID -> A
	System.Boolean [Client]System.Boolean Game.Logic.ShopCommodity::m_bCanBuy -> A
	Game.DataShopCommodity [Client]Game.DataShopCommodity Game.Logic.ShopCommodity::<Data>k__BackingField -> A

	Game.DataShopCommodity [Client]Game.DataShopCommodity Game.Logic.ShopCommodity::Data -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.ShopCommodity::VarID -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.ShopCommodity::IsCanBuy -> dropped
}

[Client]Game.Logic.ShopCommodityManager -> [Client]c.K
{
	[Client]Game.Logic.ShopCommodityManager::get_ShopCommoditys[0]( ) -> A
	[Client]Game.Logic.ShopCommodityManager::SendRequestShopCommodityList[0]( ) -> a
	[Client]Game.Logic.ShopCommodityManager::SendRequestBuyCommodity[3]( System.UInt32, System.UInt32, System.Boolean ) -> A
	[Client]Game.Logic.ShopCommodityManager::OnMsgServerAckShopCommodityList[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.ShopCommodityManager::OnMsgServerAckBuyCommodityRes[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.ShopCommodityManager::GetShopCommodity[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.Logic.ShopCommodityManager::GetShopCommodity[1]( System.Int32 ) -> A
	[Client]Game.Logic.ShopCommodityManager::GetShopCommodityHot[0]( ) -> B
	[Client]Game.Logic.ShopCommodityManager::GetShopCommodityById[1]( System.UInt32 ) -> A
	[Client]Game.Logic.ShopCommodityManager::get_Instance[0]( ) -> b

	[Client]Game.Logic.ShopCommodityManager::.ctor[0]( ) skipped:  special name
	[Client]Game.Logic.ShopCommodityManager::.cctor[0]( ) skipped:  special name

	Game.Logic.ShopCommodityManager [Client]Game.Logic.ShopCommodityManager Game.Logic.ShopCommodityManager::instance -> A
	System.Collections.Generic.Dictionary`2<System.Int32,Game.Msg.STCommodity> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.Msg.STCommodity> Game.Logic.ShopCommodityManager::m_dicShopCommodity -> A

	System.Collections.Generic.Dictionary`2<System.Int32,Game.Msg.STCommodity> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.Msg.STCommodity> Game.Logic.ShopCommodityManager::ShopCommoditys -> dropped
	Game.Logic.ShopCommodityManager [Client]Game.Logic.ShopCommodityManager Game.Logic.ShopCommodityManager::Instance -> dropped
}

[Client]Game.Logic.ExpeditionPropertyType -> [Client]c.k
{
	Game.Logic.ExpeditionPropertyType [Client]Game.Logic.ExpeditionPropertyType Game.Logic.ExpeditionPropertyType::Combat -> A
	Game.Logic.ExpeditionPropertyType [Client]Game.Logic.ExpeditionPropertyType Game.Logic.ExpeditionPropertyType::Explore -> a
	Game.Logic.ExpeditionPropertyType [Client]Game.Logic.ExpeditionPropertyType Game.Logic.ExpeditionPropertyType::Wisdom -> B

	System.Int32 [Client]System.Int32 Game.Logic.ExpeditionPropertyType::value__ skipped:  filtered
}

[Client]Game.Logic.ExpeditionShipType -> [Client]c.L
{
	Game.Logic.ExpeditionShipType [Client]Game.Logic.ExpeditionShipType Game.Logic.ExpeditionShipType::Default -> A
	Game.Logic.ExpeditionShipType [Client]Game.Logic.ExpeditionShipType Game.Logic.ExpeditionShipType::ExploreShip -> a
	Game.Logic.ExpeditionShipType [Client]Game.Logic.ExpeditionShipType Game.Logic.ExpeditionShipType::CombatShip -> B

	System.Int32 [Client]System.Int32 Game.Logic.ExpeditionShipType::value__ skipped:  filtered
}

[Client]Game.Logic.Expedition -> [Client]c.l
{
	[Client]Game.Logic.Expedition::get_Instance[0]( ) -> A
	[Client]Game.Logic.Expedition::get_Experience[0]( ) -> a
	[Client]Game.Logic.Expedition::set_Experience[1]( System.UInt32 ) -> A
	[Client]Game.Logic.Expedition::get_Level[0]( ) -> B
	[Client]Game.Logic.Expedition::set_Level[1]( System.Int32 ) -> A
	[Client]Game.Logic.Expedition::get_ActionPoint[0]( ) -> b
	[Client]Game.Logic.Expedition::set_ActionPoint[1]( System.Int32 ) -> a
	[Client]Game.Logic.Expedition::get_CurExpeditionData[0]( ) -> C
	[Client]Game.Logic.Expedition::get_NewCabinDic[0]( ) -> c
	[Client]Game.Logic.Expedition::get_OpenState[0]( ) -> D
	[Client]Game.Logic.Expedition::get_NewTaskAward[0]( ) -> d
	[Client]Game.Logic.Expedition::set_NewTaskAward[1]( System.Boolean ) -> A
	[Client]Game.Logic.Expedition::get_NewExploreAward[0]( ) -> E
	[Client]Game.Logic.Expedition::set_NewExploreAward[1]( System.Boolean ) -> a
	[Client]Game.Logic.Expedition::get_LeftRecruitCount[0]( ) -> e
	[Client]Game.Logic.Expedition::set_LeftRecruitCount[1]( System.Int32 ) -> B
	[Client]Game.Logic.Expedition::get_NewExpeditionInform[0]( ) -> F
	[Client]Game.Logic.Expedition::Reset[0]( ) -> f
	[Client]Game.Logic.Expedition::Init[1]( Game.Logic.ExpeditionShipType ) -> A
	[Client]Game.Logic.Expedition::Init[0]( ) -> G
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionInfo[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Expedition::RefreshTask[0]( ) -> g
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionTaskRefresh[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Expedition::Evolve[3]( Game.Msg.ExpeditionMonsterData, Game.Msg.ExpeditionMonsterData, Game.Msg.EExpeditionEvolutionType ) -> A
	[Client]Game.Logic.Expedition::Evolve[3]( Game.Msg.ExpeditionMonsterData, Game.Msg.ExpeditionMonsterData, System.Int32 ) -> A
	[Client]Game.Logic.Expedition::Evolve[4]( Game.Msg.ExpeditionMonsterData, Game.Msg.ExpeditionMonsterData, Game.Msg.EExpeditionEvolutionType, System.Int32 ) -> A
	[Client]Game.Logic.Expedition::EvolveBySpendMoney[2]( Game.Msg.ExpeditionMonsterData, Game.Msg.EExpeditionSpendMoneyEvolutionType ) -> A
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionMonsterEvolution[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.Expedition::BatchEvolution[2]( Game.Msg.ExpeditionMonsterData, System.Int32 ) -> A
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionMonsterBatchEvolution[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.Expedition::OnShip[3]( Game.Msg.ExpeditionMonsterData, System.Int32, System.Int32 ) -> A
	[Client]Game.Logic.Expedition::OffShip[3]( System.UInt64, System.Int32, System.Int32 ) -> A
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionBoarding[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Logic.Expedition::ExchangePosition[3]( Game.Msg.ExpeditionMonsterData, Game.Msg.ExpeditionMonsterData, System.Int32 ) -> a
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionExchangePosition[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.Logic.Expedition::ExecuteDelegateTask[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.Logic.Expedition::GenerateDelegateTaskContent[2]( System.Int32, System.Int32 ) -> a
	[Client]Game.Logic.Expedition::GenerateDelegateTaskRequest[1]( Game.DataExpeditionTask ) -> A
	[Client]Game.Logic.Expedition::OnConfirmExecuteDelegateTask[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.Logic.Expedition::SendDelegateTaskReq[2]( System.Int32, System.Int32 ) -> B
	[Client]Game.Logic.Expedition::SendExploreTaskReq[5]( System.Int32, Game.Msg.EExpeditionExploreType, System.Int32, System.Int32, System.Int32 ) -> A
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionTaskBegin[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.Logic.Expedition::AbandonMonster[4]( System.Boolean, System.Int32, System.Int32, System.UInt64 ) -> A
	[Client]Game.Logic.Expedition::OnConfirmAbandon[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> a
	[Client]Game.Logic.Expedition::ConfirmAbandonMonster[4]( System.Boolean, System.Int32, System.Int32, System.UInt64 ) -> a
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionDelMonster[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.Logic.Expedition::LockMonsterInDepositary[2]( System.UInt64, System.Boolean ) -> A
	[Client]Game.Logic.Expedition::LockMonsterOnShip[4]( System.UInt64, System.Int32, System.Int32, System.Boolean ) -> A
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionLockMonster[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionRandomEvent[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionLevelUp[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionMonsterLevelUp[1]( Game.Msg.RecvMsgPacket ) -> f
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionAddMonster[1]( Game.Msg.RecvMsgPacket ) -> G
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionTaskComplete[1]( Game.Msg.RecvMsgPacket ) -> g
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionAddExp[1]( Game.Msg.RecvMsgPacket ) -> H
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionMonsterAddExp[1]( Game.Msg.RecvMsgPacket ) -> h
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionActionPointChange[1]( Game.Msg.RecvMsgPacket ) -> I
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionAddOneShip[1]( Game.Msg.RecvMsgPacket ) -> i
	[Client]Game.Logic.Expedition::ReqAddOneCabin[1]( System.Int32 ) -> b
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionAddOneCabin[1]( Game.Msg.RecvMsgPacket ) -> J
	[Client]Game.Logic.Expedition::InitNewCabin[2]( System.Int32, System.Int32 ) -> b
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionShipToArea[1]( Game.Msg.RecvMsgPacket ) -> j
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionAreaIsExplored[1]( Game.Msg.RecvMsgPacket ) -> K
	[Client]Game.Logic.Expedition::ReqRefreshShipProperty[1]( System.Int32 ) -> C
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionRefreshShipProperty[1]( Game.Msg.RecvMsgPacket ) -> k
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionMonsterSkillList[1]( Game.Msg.RecvMsgPacket ) -> L
	[Client]Game.Logic.Expedition::RecruitMonster[1]( Game.Msg.EExpeditionRecruitType ) -> A
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionRecruitInfo[1]( Game.Msg.RecvMsgPacket ) -> l
	[Client]Game.Logic.Expedition::RefreshLeftRecruitCount[1]( Game.Msg.MsgServerAckExpeditionRecruitInfo ) -> A
	[Client]Game.Logic.Expedition::RecruitMonster[3]( System.Byte, System.Boolean, Game.Msg.EExpeditionRecruitType ) -> A
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionRecruit[1]( Game.Msg.RecvMsgPacket ) -> M
	[Client]Game.Logic.Expedition::GetExploreReward[1]( System.Int32 ) -> c
	[Client]Game.Logic.Expedition::OnConfirmGetExploreAward[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> B
	[Client]Game.Logic.Expedition::SendExploreRewardReq[1]( System.Int32 ) -> D
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionButtonFlash[1]( Game.Msg.RecvMsgPacket ) -> m
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionShipDefiniteTime[1]( Game.Msg.RecvMsgPacket ) -> N
	[Client]Game.Logic.Expedition::SendMsgClientReqShipProperty[2]( System.Int32, System.Int32 ) -> C
	[Client]Game.Logic.Expedition::OnMsgServerAckShipProperty[1]( Game.Msg.RecvMsgPacket ) -> n
	[Client]Game.Logic.Expedition::ReqExpeditionTaskAward[0]( ) -> H
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionRewardInfo[1]( Game.Msg.RecvMsgPacket ) -> O
	[Client]Game.Logic.Expedition::OnMsgServerNotifyExpeditionOpen[1]( Game.Msg.RecvMsgPacket ) -> o
	[Client]Game.Logic.Expedition::ReqExpeditionShipSkillList[0]( ) -> h
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionShipSkillList[1]( Game.Msg.RecvMsgPacket ) -> P
	[Client]Game.Logic.Expedition::ReqBattleShipInfo[0]( ) -> I
	[Client]Game.Logic.Expedition::OnMsgServerAckExpeditionShipEquipInfo[1]( Game.Msg.RecvMsgPacket ) -> p
	[Client]Game.Logic.Expedition::GetMonsterFromDepositaryOrShip[1]( System.UInt64 ) -> A
	[Client]Game.Logic.Expedition::GetMonsterInDepositary[1]( System.UInt64 ) -> a
	[Client]Game.Logic.Expedition::GetMonsterOnShipByGUID[1]( System.UInt64 ) -> B
	[Client]Game.Logic.Expedition::GetMonsterOnShipByIdx[2]( System.Int32, System.Int32 ) -> c
	[Client]Game.Logic.Expedition::GetShipMonster[1]( System.UInt64 ) -> b
	[Client]Game.Logic.Expedition::GetShipMonster[2]( System.UInt64, System.Int32 ) -> A
	[Client]Game.Logic.Expedition::AddMonsterOnShip[3]( Game.Msg.ExpeditionMonsterData, System.Byte, System.Byte ) -> A
	[Client]Game.Logic.Expedition::AddMonsterInDepositary[1]( Game.Msg.ExpeditionMonsterData ) -> A
	[Client]Game.Logic.Expedition::ExcludeMonsterInDepositary[1]( System.UInt64 ) -> C
	[Client]Game.Logic.Expedition::ExcludeMonsterOnShip[1]( System.UInt64 ) -> c
	[Client]Game.Logic.Expedition::ExcludeMonsterOnShip[2]( System.UInt64, System.Byte ) -> A
	[Client]Game.Logic.Expedition::GetShipIdMonsterLocated[1]( System.UInt64 ) -> D
	[Client]Game.Logic.Expedition::GetShipMonsterLocated[1]( System.UInt64 ) -> d
	[Client]Game.Logic.Expedition::GetShipIdAndCabinIdMonsterLocated[3]( System.UInt64, System.Int32&, System.Int32& ) -> A
	[Client]Game.Logic.Expedition::IsShipDoingTask[1]( System.Int32 ) -> d
	[Client]Game.Logic.Expedition::IsShipExploring[1]( System.Int32 ) -> E
	[Client]Game.Logic.Expedition::IsShipExploring[3]( System.Int32, System.Int32, System.Int32 ) -> A
	[Client]Game.Logic.Expedition::IsMonsterOnShip[1]( System.UInt64 ) -> E
	[Client]Game.Logic.Expedition::GetPageMonsterLocated[1]( System.UInt64 ) -> e
	[Client]Game.Logic.Expedition::RefreshShipAndDepositaryUI[1]( System.UInt64 ) -> F
	[Client]Game.Logic.Expedition::RefreshShipUI[1]( System.UInt64 ) -> f
	[Client]Game.Logic.Expedition::RefreshDepositaryUI[0]( ) -> i
	[Client]Game.Logic.Expedition::RefreshRandomTaskFromRandomEvent[1]( Game.DataExpeditionTask ) -> a
	[Client]Game.Logic.Expedition::GetMonsterPropertyByType[2]( Game.Msg.ExpeditionMonsterData, Game.Logic.ExpeditionPropertyType ) -> A
	[Client]Game.Logic.Expedition::SetAreaExploreState[3]( System.Int32, System.Byte, System.Boolean ) -> A
	[Client]Game.Logic.Expedition::GetAreaExploreState[2]( System.Int32, System.Int32 ) -> D
	[Client]Game.Logic.Expedition::GetExpeditionMonsterData[2]( System.Int32, System.Int32 ) -> d
	[Client]Game.Logic.Expedition::GetExpeditionAreaData[2]( System.Int32, System.Int32 ) -> E
	[Client]Game.Logic.Expedition::GetExpeditionSkillData[2]( System.Int32, System.Int32 ) -> e
	[Client]Game.Logic.Expedition::GetReqValueByType[3]( Game.Logic.Expedition/RequestType, System.Int32[], System.Int32[] ) -> A
	[Client]Game.Logic.Expedition::GetTimeString[1]( System.Int32 ) -> e
	[Client]Game.Logic.Expedition::GetTimeString[1]( System.TimeSpan ) -> A
	[Client]Game.Logic.Expedition::GetShipName[1]( System.Int32 ) -> F
	[Client]Game.Logic.Expedition::GetMonsterNameByQuality[1]( Game.DataExpeditionMonster ) -> A
	[Client]Game.Logic.Expedition::GetColorByQuality[1]( System.Int32 ) -> f
	[Client]Game.Logic.Expedition::GetMemberCount[2]( Game.Msg.ExpeditionMonsterData, System.Int32 ) -> a
	[Client]Game.Logic.Expedition::GetAddLevel[4]( Game.Msg.ExpeditionMonsterData, Game.DataExpeditionMonster, Game.Msg.ExpeditionMonsterData, Game.DataExpeditionMonster ) -> A
	[Client]Game.Logic.Expedition::GetAddLevel[2]( Game.Msg.ExpeditionMonsterData, System.Int32 ) -> B
	[Client]Game.Logic.Expedition::GetMaxLevelByQuality[1]( Game.DataExpeditionMonster ) -> a
	[Client]Game.Logic.Expedition::GetLevelNameByLevel[1]( System.Int32 ) -> G
	[Client]Game.Logic.Expedition::GetSkillColor[1]( System.Int32 ) -> g
	[Client]Game.Logic.Expedition::GetCombat[1]( System.Int32 ) -> H
	[Client]Game.Logic.Expedition::GetExplore[1]( System.Int32 ) -> h
	[Client]Game.Logic.Expedition::GetWisdom[1]( System.Int32 ) -> I
	[Client]Game.Logic.Expedition::GetMaxRank[1]( Game.Msg.ExpeditionMonsterData ) -> a

	[Client]Game.Logic.Expedition::.ctor[0]( ) skipped:  special name
	[Client]Game.Logic.Expedition::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Logic.Expedition::MaxCabin -> A
	System.Int32 [Client]System.Int32 Game.Logic.Expedition::MaxShip -> a
	System.Int32 [Client]System.Int32 Game.Logic.Expedition::MaxNumPerPage -> B
	Game.Logic.Expedition [Client]Game.Logic.Expedition Game.Logic.Expedition::m_Instance -> A
	Game.Msg.ExpeditionData [Client]Game.Msg.ExpeditionData Game.Logic.Expedition::m_expeditionData -> A
	System.Collections.Generic.Dictionary`2<System.Int32,System.Boolean> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Boolean> Game.Logic.Expedition::ExploreTimeUpDic -> A
	System.DateTime [Client]System.DateTime Game.Logic.Expedition::TaskStartTime -> A
	System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> Game.Logic.Expedition::m_NewCabinDic -> A
	Game.Msg.EExpeditionOpenType [Client]Game.Msg.EExpeditionOpenType Game.Logic.Expedition::m_OpenState -> A
	System.Boolean [Client]System.Boolean Game.Logic.Expedition::m_NewTaskAward -> A
	System.Boolean [Client]System.Boolean Game.Logic.Expedition::m_NewExploreAward -> a
	System.Int32 [Client]System.Int32 Game.Logic.Expedition::m_LeftRecruitCount -> b
	System.UInt32 [Client]System.UInt32 Game.Logic.Expedition::<Experience>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.Logic.Expedition::<Level>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.Logic.Expedition::<ActionPoint>k__BackingField -> c

	Game.Logic.Expedition [Client]Game.Logic.Expedition Game.Logic.Expedition::Instance -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Expedition::Experience -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Expedition::Level -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Expedition::ActionPoint -> dropped
	Game.Msg.ExpeditionData [Client]Game.Msg.ExpeditionData Game.Logic.Expedition::CurExpeditionData -> dropped
	System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> Game.Logic.Expedition::NewCabinDic -> dropped
	Game.Msg.EExpeditionOpenType [Client]Game.Msg.EExpeditionOpenType Game.Logic.Expedition::OpenState -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Expedition::NewTaskAward -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Expedition::NewExploreAward -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Expedition::LeftRecruitCount -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Expedition::NewExpeditionInform -> dropped
}

[Client]Game.Logic.Expedition/RequestType -> [Client]c.l/M
{
	Game.Logic.Expedition/RequestType [Client]Game.Logic.Expedition/RequestType Game.Logic.Expedition/RequestType::Combat -> A
	Game.Logic.Expedition/RequestType [Client]Game.Logic.Expedition/RequestType Game.Logic.Expedition/RequestType::Explore -> a
	Game.Logic.Expedition/RequestType [Client]Game.Logic.Expedition/RequestType Game.Logic.Expedition/RequestType::Wisdom -> B
	Game.Logic.Expedition/RequestType [Client]Game.Logic.Expedition/RequestType Game.Logic.Expedition/RequestType::Level -> b
	Game.Logic.Expedition/RequestType [Client]Game.Logic.Expedition/RequestType Game.Logic.Expedition/RequestType::MonsterID -> C
	Game.Logic.Expedition/RequestType [Client]Game.Logic.Expedition/RequestType Game.Logic.Expedition/RequestType::SkillID -> c

	System.Int32 [Client]System.Int32 Game.Logic.Expedition/RequestType::value__ skipped:  filtered
}

[Client]Game.Logic.Expedition/<>c__DisplayClass1 -> [Client]c.l/m
{
	[Client]Game.Logic.Expedition/<>c__DisplayClass1::<OnMsgServerAckExpeditionMonsterEvolution>b__0[1]( Game.Msg.ExpeditionShipData ) -> A

	[Client]Game.Logic.Expedition/<>c__DisplayClass1::.ctor[0]( ) skipped:  special name

	Game.Msg.MsgServerAckExpeditionMonsterEvolution [Client]Game.Msg.MsgServerAckExpeditionMonsterEvolution Game.Logic.Expedition/<>c__DisplayClass1::msg -> A
}

[Client]Game.Logic.Expedition/<>c__DisplayClass4 -> [Client]c.l/N
{
	[Client]Game.Logic.Expedition/<>c__DisplayClass4::<OnMsgServerAckExpeditionExchangePosition>b__3[1]( Game.Msg.ExpeditionShipData ) -> A

	[Client]Game.Logic.Expedition/<>c__DisplayClass4::.ctor[0]( ) skipped:  special name

	Game.Msg.MsgServerAckExpeditionExchangePosition [Client]Game.Msg.MsgServerAckExpeditionExchangePosition Game.Logic.Expedition/<>c__DisplayClass4::msg -> A
}

[Client]Game.DoubleTapGestureRecognizer -> [Client]c.n
{
	[Client]Game.DoubleTapGestureRecognizer::GetRequiredFingerCount[0]( ) -> A
	[Client]Game.DoubleTapGestureRecognizer::CanBegin[1]( Game.TouchList ) -> A
	[Client]Game.DoubleTapGestureRecognizer::OnBegin[1]( Game.TouchList ) -> a
	[Client]Game.DoubleTapGestureRecognizer::OnProcessing[1]( Game.TouchList ) -> B
	[Client]Game.DoubleTapGestureRecognizer::IsEnd[1]( Game.TouchList ) -> b
	[Client]Game.DoubleTapGestureRecognizer::add_OnDoubleTap[1]( .EventDelegate`1<Game.DoubleTapGestureRecognizer> ) -> A
	[Client]Game.DoubleTapGestureRecognizer::remove_OnDoubleTap[1]( .EventDelegate`1<Game.DoubleTapGestureRecognizer> ) -> a
	[Client]Game.DoubleTapGestureRecognizer::get_StartPos[0]( ) -> a
	[Client]Game.DoubleTapGestureRecognizer::set_StartPos[1]( UnityEngine.Vector2 ) -> A

	[Client]Game.DoubleTapGestureRecognizer::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.DoubleTapGestureRecognizer::MaxDuration -> A
	System.Single [Client]System.Single Game.DoubleTapGestureRecognizer::MaxDistance -> a
	Game.GestureRecognizer/EventDelegate`1<Game.DoubleTapGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.DoubleTapGestureRecognizer> Game.DoubleTapGestureRecognizer::OnDoubleTap -> A
	Game.DoubleTapGestureRecognizer/DoubleTapState [Client]Game.DoubleTapGestureRecognizer/DoubleTapState Game.DoubleTapGestureRecognizer::m_TapState -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.DoubleTapGestureRecognizer::<StartPos>k__BackingField -> A

	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.DoubleTapGestureRecognizer::StartPos -> dropped

	Game.GestureRecognizer/EventDelegate`1<Game.DoubleTapGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.DoubleTapGestureRecognizer> Game.DoubleTapGestureRecognizer::OnDoubleTap -> dropped
}

[Client]Game.DoubleTapGestureRecognizer/DoubleTapState -> [Client]c.n/O
{
	Game.DoubleTapGestureRecognizer/DoubleTapState [Client]Game.DoubleTapGestureRecognizer/DoubleTapState Game.DoubleTapGestureRecognizer/DoubleTapState::None -> A
	Game.DoubleTapGestureRecognizer/DoubleTapState [Client]Game.DoubleTapGestureRecognizer/DoubleTapState Game.DoubleTapGestureRecognizer/DoubleTapState::FirstTapDown -> a
	Game.DoubleTapGestureRecognizer/DoubleTapState [Client]Game.DoubleTapGestureRecognizer/DoubleTapState Game.DoubleTapGestureRecognizer/DoubleTapState::FirstTapUp -> B
	Game.DoubleTapGestureRecognizer/DoubleTapState [Client]Game.DoubleTapGestureRecognizer/DoubleTapState Game.DoubleTapGestureRecognizer/DoubleTapState::SecondTapDown -> b
	Game.DoubleTapGestureRecognizer/DoubleTapState [Client]Game.DoubleTapGestureRecognizer/DoubleTapState Game.DoubleTapGestureRecognizer/DoubleTapState::SecondTapUp -> C

	System.Int32 [Client]System.Int32 Game.DoubleTapGestureRecognizer/DoubleTapState::value__ skipped:  filtered
}

[Client]Game.Item -> [Client]c.o
{
	[Client]Game.Item::get_ItemType[0]( ) -> A
	[Client]Game.Item::set_ItemType[1]( System.Byte ) -> A
	[Client]Game.Item::get_Base[0]( ) -> a
	[Client]Game.Item::set_Base[1]( Game.DataItem ) -> A
	[Client]Game.Item::IsOther[0]( ) -> B
	[Client]Game.Item::IsEquip[0]( ) -> b
	[Client]Game.Item::IsTask[0]( ) -> C
	[Client]Game.Item::IsRestore[0]( ) -> c
	[Client]Game.Item::IsCrystal[0]( ) -> D
	[Client]Game.Item::IsGem[0]( ) -> d
	[Client]Game.Item::IsCharm[0]( ) -> E
	[Client]Game.Item::IsMaterial[0]( ) -> e
	[Client]Game.Item::IsDiamondVip[0]( ) -> F
	[Client]Game.Item::IsBook[0]( ) -> f
	[Client]Game.Item::IsPetEgg[0]( ) -> G
	[Client]Game.Item::GetItemTypeLocalName[0]( ) -> g

	[Client]Game.Item::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Item::<ItemType>k__BackingField -> A
	Game.DataItem [Client]Game.DataItem Game.Item::<Base>k__BackingField -> A

	System.Byte [Client]System.Byte Game.Item::ItemType -> dropped
	Game.DataItem [Client]Game.DataItem Game.Item::Base -> dropped
}

[Client]Game.EquipItem -> [Client]c.P
{
	[Client]Game.EquipItem::get_EquipType[0]( ) -> A
	[Client]Game.EquipItem::set_EquipType[1]( System.Byte ) -> A
	[Client]Game.EquipItem::get_Equip[0]( ) -> a
	[Client]Game.EquipItem::set_Equip[1]( Game.DataEquip ) -> A
	[Client]Game.EquipItem::GetEquipTypeLocalName[0]( ) -> B

	[Client]Game.EquipItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.EquipItem::<EquipType>k__BackingField -> A
	Game.DataEquip [Client]Game.DataEquip Game.EquipItem::<Equip>k__BackingField -> A

	System.Byte [Client]System.Byte Game.EquipItem::EquipType -> dropped
	Game.DataEquip [Client]Game.DataEquip Game.EquipItem::Equip -> dropped
}

[Client]Game.GemItem -> [Client]c.p
{
	[Client]Game.GemItem::get_Gem[0]( ) -> A
	[Client]Game.GemItem::set_Gem[1]( Game.DataGem ) -> A

	[Client]Game.GemItem::.ctor[0]( ) skipped:  special name

	Game.DataGem [Client]Game.DataGem Game.GemItem::<Gem>k__BackingField -> A

	Game.DataGem [Client]Game.DataGem Game.GemItem::Gem -> dropped
}

[Client]Game.RestoreItem -> [Client]c.Q
{
	[Client]Game.RestoreItem::get_Restore[0]( ) -> A
	[Client]Game.RestoreItem::set_Restore[1]( Game.DataRestore ) -> A

	[Client]Game.RestoreItem::.ctor[0]( ) skipped:  special name

	Game.DataRestore [Client]Game.DataRestore Game.RestoreItem::<Restore>k__BackingField -> A

	Game.DataRestore [Client]Game.DataRestore Game.RestoreItem::Restore -> dropped
}

[Client]Game.RestoreItem/SourceType -> [Client]c.Q/q
{
	Game.RestoreItem/SourceType [Client]Game.RestoreItem/SourceType Game.RestoreItem/SourceType::Normal -> A
	Game.RestoreItem/SourceType [Client]Game.RestoreItem/SourceType Game.RestoreItem/SourceType::Shop -> a

	System.Int32 [Client]System.Int32 Game.RestoreItem/SourceType::value__ skipped:  filtered
}

[Client]Game.PetEggItem -> [Client]c.R
{
	[Client]Game.PetEggItem::get_Egg[0]( ) -> A
	[Client]Game.PetEggItem::set_Egg[1]( Game.DataEgg ) -> A

	[Client]Game.PetEggItem::.ctor[0]( ) skipped:  special name

	Game.DataEgg [Client]Game.DataEgg Game.PetEggItem::<Egg>k__BackingField -> A

	Game.DataEgg [Client]Game.DataEgg Game.PetEggItem::Egg -> dropped
}

[Client]Game.CharmItem -> [Client]c.r
{
	[Client]Game.CharmItem::get_Charm[0]( ) -> A
	[Client]Game.CharmItem::set_Charm[1]( Game.DataCharm ) -> A

	[Client]Game.CharmItem::.ctor[0]( ) skipped:  special name

	Game.DataCharm [Client]Game.DataCharm Game.CharmItem::<Charm>k__BackingField -> A

	Game.DataCharm [Client]Game.DataCharm Game.CharmItem::Charm -> dropped
}

[Client]Game.CharmItem/CharmType -> [Client]c.r/S
{
	Game.CharmItem/CharmType [Client]Game.CharmItem/CharmType Game.CharmItem/CharmType::Flower -> A
	Game.CharmItem/CharmType [Client]Game.CharmItem/CharmType Game.CharmItem/CharmType::PetStrengthen -> a
	Game.CharmItem/CharmType [Client]Game.CharmItem/CharmType Game.CharmItem/CharmType::PetStrengthenSenior -> B
	Game.CharmItem/CharmType [Client]Game.CharmItem/CharmType Game.CharmItem/CharmType::PetUnlock -> b
	Game.CharmItem/CharmType [Client]Game.CharmItem/CharmType Game.CharmItem/CharmType::PetSkillChange -> C
	Game.CharmItem/CharmType [Client]Game.CharmItem/CharmType Game.CharmItem/CharmType::PetReborn -> c

	System.Int32 [Client]System.Int32 Game.CharmItem/CharmType::value__ skipped:  filtered
}

[Client]Game.ItemManager -> [Client]c.s
{
	[Client]Game.ItemManager::get_Instance[0]( ) -> A
	[Client]Game.ItemManager::LoadData[0]( ) -> a
	[Client]Game.ItemManager::GetItem[1]( System.Int32 ) -> A
	[Client]Game.ItemManager::GetItem[1]( System.UInt32 ) -> A
	[Client]Game.ItemManager::GetEquip[1]( System.Int32 ) -> a
	[Client]Game.ItemManager::GetGem[1]( System.Int32 ) -> B
	[Client]Game.ItemManager::GetRestore[1]( System.Int32 ) -> b
	[Client]Game.ItemManager::GetItemTypeByName[1]( System.String ) -> A
	[Client]Game.ItemManager::GetEquipTypeByName[1]( System.String ) -> a
	[Client]Game.ItemManager::HasSoulData[1]( Game.Msg.ClientSItemData ) -> A
	[Client]Game.ItemManager::GetItemFightPower[1]( Game.Msg.ClientSItemData ) -> a

	[Client]Game.ItemManager::.ctor[0]( ) skipped:  special name
	[Client]Game.ItemManager::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.ItemManager::m_Log -> A
	Game.ItemManager [Client]Game.ItemManager Game.ItemManager::instance -> A
	System.Collections.Generic.Dictionary`2<System.Int32,Game.Item> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.Item> Game.ItemManager::m_Items -> A
	System.Collections.Generic.Dictionary`2<System.Int32,Game.EquipItem> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.EquipItem> Game.ItemManager::m_Equips -> A
	System.Collections.Generic.Dictionary`2<System.Int32,Game.GemItem> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.GemItem> Game.ItemManager::m_Gems -> A
	System.Collections.Generic.Dictionary`2<System.Int32,Game.RestoreItem> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.RestoreItem> Game.ItemManager::m_Restores -> A
	System.Collections.Generic.Dictionary`2<System.Int32,Game.PetEggItem> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.PetEggItem> Game.ItemManager::m_PetEggs -> A
	System.Collections.Generic.Dictionary`2<System.Int32,Game.CharmItem> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.CharmItem> Game.ItemManager::m_Charms -> A

	Game.ItemManager [Client]Game.ItemManager Game.ItemManager::Instance -> dropped
}

[Client]Game.ItemManager/<>c__DisplayClass1 -> [Client]c.s/t
{
	[Client]Game.ItemManager/<>c__DisplayClass1::<GetItemFightPower>b__0[2]( System.String, System.Single ) -> A

	[Client]Game.ItemManager/<>c__DisplayClass1::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::maxHp -> A
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::physicsAttack -> a
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::magicAttack -> B
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::physicsDefence -> b
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::magicDefence -> C
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::physicsResistance -> c
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::magicResistance -> D
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::fireAttack -> d
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::frostAttack -> E
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::darkAttack -> e
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::elemDefence -> F
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::criticalOdds -> f
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::criticalOddsSub -> G
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::hit -> g
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::dodge -> H
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::raceHurt -> h
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::raceDef -> I
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::strength -> i
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::intelligence -> J
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::constitution -> j
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::energy -> K
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::agility -> k
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::addPer_gem -> L
	System.Single [Client]System.Single Game.ItemManager/<>c__DisplayClass1::addPer_white -> l
}

[Client]Game.DropPackManager -> [Client]c.U
{
	[Client]Game.DropPackManager::get_AutoPick[0]( ) -> A
	[Client]Game.DropPackManager::set_AutoPick[1]( System.Boolean ) -> A
	[Client]Game.DropPackManager::get_Count[0]( ) -> a
	[Client]Game.DropPackManager::get_Packs[0]( ) -> B
	[Client]Game.DropPackManager::get_Instance[0]( ) -> b
	[Client]Game.DropPackManager::Init[0]( ) -> C
	[Client]Game.DropPackManager::Release[0]( ) -> c
	[Client]Game.DropPackManager::Reset[0]( ) -> D
	[Client]Game.DropPackManager::Update[0]( ) -> d
	[Client]Game.DropPackManager::AddPack[1]( System.UInt32 ) -> A
	[Client]Game.DropPackManager::RemovePack[1]( System.UInt32 ) -> a
	[Client]Game.DropPackManager::RemoveAll[0]( ) -> E
	[Client]Game.DropPackManager::FindPack[1]( System.UInt32 ) -> B
	[Client]Game.DropPackManager::OnMsgServerMonsterShowDropPack[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.DropPackManager::OnMsgServerMonsterDelDropPack[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.DropPackManager::SendMsgPickPack[1]( System.UInt32 ) -> b

	[Client]Game.DropPackManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DropPackManager::.ctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.DropPackManager::m_Log -> A
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.DropPack> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.DropPack> Game.DropPackManager::m_Packs -> A
	System.Collections.Generic.List`1<Game.DropPack> [Client]System.Collections.Generic.List`1<Game.DropPack> Game.DropPackManager::m_PickedPacks -> A
	System.Single [Client]System.Single Game.DropPackManager::m_PickLastTime -> A
	Game.DropPackManager [Client]Game.DropPackManager Game.DropPackManager::m_Instance -> A
	System.Boolean [Client]System.Boolean Game.DropPackManager::<AutoPick>k__BackingField -> A

	System.Boolean [Client]System.Boolean Game.DropPackManager::AutoPick -> dropped
	System.Int32 [Client]System.Int32 Game.DropPackManager::Count -> dropped
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.DropPack> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.DropPack> Game.DropPackManager::Packs -> dropped
	Game.DropPackManager [Client]Game.DropPackManager Game.DropPackManager::Instance -> dropped
}

[Client]Game.DropPack -> [Client]c.u
{
	[Client]Game.DropPack::get_Object[0]( ) -> A
	[Client]Game.DropPack::get_Id[0]( ) -> a
	[Client]Game.DropPack::set_Id[1]( System.UInt32 ) -> A
	[Client]Game.DropPack::get_Pos[0]( ) -> B
	[Client]Game.DropPack::set_Pos[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.DropPack::get_NeedLoadModel[0]( ) -> b
	[Client]Game.DropPack::set_NeedLoadModel[1]( System.Boolean ) -> A
	[Client]Game.DropPack::get_ModelFile[0]( ) -> C
	[Client]Game.DropPack::get_PickingEnd[0]( ) -> c
	[Client]Game.DropPack::Init[0]( ) -> D
	[Client]Game.DropPack::Release[0]( ) -> d
	[Client]Game.DropPack::Reset[0]( ) -> E
	[Client]Game.DropPack::Update[0]( ) -> e
	[Client]Game.DropPack::Load[0]( ) -> F
	[Client]Game.DropPack::LoadedAction[1]( UnityEngine.Object ) -> A
	[Client]Game.DropPack::UpdateY[0]( ) -> f
	[Client]Game.DropPack::BeginPick[0]( ) -> G

	[Client]Game.DropPack::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.DropPack::m_ModelFile -> A
	System.Single [Client]System.Single Game.DropPack::PackScale -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.DropPack::m_Object -> A
	System.UInt32 [Client]System.UInt32 Game.DropPack::m_LoadTaskId -> A
	System.Boolean [Client]System.Boolean Game.DropPack::m_NeedUpdateY -> A
	System.Boolean [Client]System.Boolean Game.DropPack::m_PickingEnd -> a
	System.Boolean [Client]System.Boolean Game.DropPack::m_BeginPick -> B
	System.Single [Client]System.Single Game.DropPack::m_BeginPickTime -> a
	System.UInt32 [Client]System.UInt32 Game.DropPack::<Id>k__BackingField -> a
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.DropPack::<Pos>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DropPack::<NeedLoadModel>k__BackingField -> b

	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.DropPack::Object -> dropped
	System.UInt32 [Client]System.UInt32 Game.DropPack::Id -> dropped
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.DropPack::Pos -> dropped
	System.Boolean [Client]System.Boolean Game.DropPack::NeedLoadModel -> dropped
	System.String [Client]System.String Game.DropPack::ModelFile -> dropped
	System.Boolean [Client]System.Boolean Game.DropPack::PickingEnd -> dropped
}

[Client]Game.DataNpcList -> [Client]c.V
{
	[Client]Game.DataNpcList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataNpcList::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataNpcList::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataNpcList::get_ListID[0]( ) -> A
	[Client]Game.DataNpcList::set_ListID[1]( System.Int32 ) -> A
	[Client]Game.DataNpcList::get_NPCtype[0]( ) -> a
	[Client]Game.DataNpcList::set_NPCtype[1]( System.Int32 ) -> a
	[Client]Game.DataNpcList::get_NPCID[0]( ) -> B
	[Client]Game.DataNpcList::set_NPCID[1]( System.Int32 ) -> B
	[Client]Game.DataNpcList::get_NpcName[0]( ) -> b
	[Client]Game.DataNpcList::set_NpcName[1]( System.String ) -> A
	[Client]Game.DataNpcList::get_UseableMapID[0]( ) -> C
	[Client]Game.DataNpcList::set_UseableMapID[1]( System.Int32 ) -> b
	[Client]Game.DataNpcList::get_CarryMapid[0]( ) -> c
	[Client]Game.DataNpcList::set_CarryMapid[1]( System.Int32 ) -> C
	[Client]Game.DataNpcList::get_CarryX[0]( ) -> D
	[Client]Game.DataNpcList::set_CarryX[1]( System.Single ) -> A
	[Client]Game.DataNpcList::get_CarryY[0]( ) -> d
	[Client]Game.DataNpcList::set_CarryY[1]( System.Single ) -> a

	[Client]Game.DataNpcList::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataNpcList::<ListID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataNpcList::<NPCtype>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataNpcList::<NPCID>k__BackingField -> B
	System.String [Client]System.String Game.DataNpcList::<NpcName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataNpcList::<UseableMapID>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataNpcList::<CarryMapid>k__BackingField -> C
	System.Single [Client]System.Single Game.DataNpcList::<CarryX>k__BackingField -> A
	System.Single [Client]System.Single Game.DataNpcList::<CarryY>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataNpcList::ListID -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpcList::NPCtype -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpcList::NPCID -> dropped
	System.String [Client]System.String Game.DataNpcList::NpcName -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpcList::UseableMapID -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpcList::CarryMapid -> dropped
	System.Single [Client]System.Single Game.DataNpcList::CarryX -> dropped
	System.Single [Client]System.Single Game.DataNpcList::CarryY -> dropped
}

[Client]Game.DataNpcListManager -> [Client]c.v
{
	[Client]Game.DataNpcListManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataNpcListManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataNpcListManager::Clear[0]( ) -> A
	[Client]Game.DataNpcListManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataNpcListManager::GetDataByListID[1]( System.Int32 ) -> A
	[Client]Game.DataNpcListManager::GetDataListByListID[1]( System.Int32 ) -> a
	[Client]Game.DataNpcListManager::GetDataByNPCtype[1]( System.Int32 ) -> B
	[Client]Game.DataNpcListManager::GetDataListByNPCtype[1]( System.Int32 ) -> b
	[Client]Game.DataNpcListManager::GetDataByNPCID[1]( System.Int32 ) -> C
	[Client]Game.DataNpcListManager::GetDataListByNPCID[1]( System.Int32 ) -> c
	[Client]Game.DataNpcListManager::GetDataByNpcName[1]( System.String ) -> A
	[Client]Game.DataNpcListManager::GetDataListByNpcName[1]( System.String ) -> a
	[Client]Game.DataNpcListManager::GetDataByUseableMapID[1]( System.Int32 ) -> D
	[Client]Game.DataNpcListManager::GetDataListByUseableMapID[1]( System.Int32 ) -> d
	[Client]Game.DataNpcListManager::GetDataByCarryMapid[1]( System.Int32 ) -> E
	[Client]Game.DataNpcListManager::GetDataListByCarryMapid[1]( System.Int32 ) -> e
	[Client]Game.DataNpcListManager::GetDataByCarryX[1]( System.Single ) -> A
	[Client]Game.DataNpcListManager::GetDataListByCarryX[1]( System.Single ) -> a
	[Client]Game.DataNpcListManager::GetDataByCarryY[1]( System.Single ) -> B
	[Client]Game.DataNpcListManager::GetDataListByCarryY[1]( System.Single ) -> b
	[Client]Game.DataNpcListManager::get_Instance[0]( ) -> a
	[Client]Game.DataNpcListManager::get_DataList[0]( ) -> B
	[Client]Game.DataNpcListManager::get_Count[0]( ) -> b

	[Client]Game.DataNpcListManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataNpcListManager::.ctor[0]( ) skipped:  special name

	Game.DataNpcListManager [Client]Game.DataNpcListManager Game.DataNpcListManager::instance -> A
	System.Collections.Generic.List`1<Game.DataNpcList> [Client]System.Collections.Generic.List`1<Game.DataNpcList> Game.DataNpcListManager::dataList -> A

	Game.DataNpcListManager [Client]Game.DataNpcListManager Game.DataNpcListManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataNpcList> [Client]System.Collections.Generic.List`1<Game.DataNpcList> Game.DataNpcListManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpcListManager::Count -> dropped
}

[Client]Game.DataHuntBossInfo -> [Client]c.W
{
	[Client]Game.DataHuntBossInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataHuntBossInfo::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataHuntBossInfo::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataHuntBossInfo::get_ID[0]( ) -> A
	[Client]Game.DataHuntBossInfo::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataHuntBossInfo::get_Name[0]( ) -> a
	[Client]Game.DataHuntBossInfo::set_Name[1]( System.String ) -> A
	[Client]Game.DataHuntBossInfo::get_Level[0]( ) -> B
	[Client]Game.DataHuntBossInfo::set_Level[1]( System.String ) -> a
	[Client]Game.DataHuntBossInfo::get_Difficulty[0]( ) -> b
	[Client]Game.DataHuntBossInfo::set_Difficulty[1]( System.Int32 ) -> a
	[Client]Game.DataHuntBossInfo::get_MapInfo[0]( ) -> C
	[Client]Game.DataHuntBossInfo::set_MapInfo[1]( System.String ) -> B
	[Client]Game.DataHuntBossInfo::get_MapColor[0]( ) -> c
	[Client]Game.DataHuntBossInfo::set_MapColor[1]( System.Int32 ) -> B
	[Client]Game.DataHuntBossInfo::get_Line[0]( ) -> D
	[Client]Game.DataHuntBossInfo::set_Line[1]( System.String ) -> b
	[Client]Game.DataHuntBossInfo::get_RefreshTime[0]( ) -> d
	[Client]Game.DataHuntBossInfo::set_RefreshTime[1]( System.String ) -> C
	[Client]Game.DataHuntBossInfo::get_MapID[0]( ) -> E
	[Client]Game.DataHuntBossInfo::set_MapID[1]( System.Int32 ) -> b
	[Client]Game.DataHuntBossInfo::get_MapPosX[0]( ) -> e
	[Client]Game.DataHuntBossInfo::set_MapPosX[1]( System.Single ) -> A
	[Client]Game.DataHuntBossInfo::get_MapPosY[0]( ) -> F
	[Client]Game.DataHuntBossInfo::set_MapPosY[1]( System.Single ) -> a
	[Client]Game.DataHuntBossInfo::get_Encourage[0]( ) -> f
	[Client]Game.DataHuntBossInfo::set_Encourage[1]( System.String ) -> c
	[Client]Game.DataHuntBossInfo::get_Description[0]( ) -> G
	[Client]Game.DataHuntBossInfo::set_Description[1]( System.String ) -> D

	[Client]Game.DataHuntBossInfo::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataHuntBossInfo::<ID>k__BackingField -> A
	System.String [Client]System.String Game.DataHuntBossInfo::<Name>k__BackingField -> A
	System.String [Client]System.String Game.DataHuntBossInfo::<Level>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataHuntBossInfo::<Difficulty>k__BackingField -> a
	System.String [Client]System.String Game.DataHuntBossInfo::<MapInfo>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataHuntBossInfo::<MapColor>k__BackingField -> B
	System.String [Client]System.String Game.DataHuntBossInfo::<Line>k__BackingField -> b
	System.String [Client]System.String Game.DataHuntBossInfo::<RefreshTime>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataHuntBossInfo::<MapID>k__BackingField -> b
	System.Single [Client]System.Single Game.DataHuntBossInfo::<MapPosX>k__BackingField -> A
	System.Single [Client]System.Single Game.DataHuntBossInfo::<MapPosY>k__BackingField -> a
	System.String [Client]System.String Game.DataHuntBossInfo::<Encourage>k__BackingField -> c
	System.String [Client]System.String Game.DataHuntBossInfo::<Description>k__BackingField -> D

	System.Int32 [Client]System.Int32 Game.DataHuntBossInfo::ID -> dropped
	System.String [Client]System.String Game.DataHuntBossInfo::Name -> dropped
	System.String [Client]System.String Game.DataHuntBossInfo::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataHuntBossInfo::Difficulty -> dropped
	System.String [Client]System.String Game.DataHuntBossInfo::MapInfo -> dropped
	System.Int32 [Client]System.Int32 Game.DataHuntBossInfo::MapColor -> dropped
	System.String [Client]System.String Game.DataHuntBossInfo::Line -> dropped
	System.String [Client]System.String Game.DataHuntBossInfo::RefreshTime -> dropped
	System.Int32 [Client]System.Int32 Game.DataHuntBossInfo::MapID -> dropped
	System.Single [Client]System.Single Game.DataHuntBossInfo::MapPosX -> dropped
	System.Single [Client]System.Single Game.DataHuntBossInfo::MapPosY -> dropped
	System.String [Client]System.String Game.DataHuntBossInfo::Encourage -> dropped
	System.String [Client]System.String Game.DataHuntBossInfo::Description -> dropped
}

[Client]Game.DataHuntBossInfoManager -> [Client]c.w
{
	[Client]Game.DataHuntBossInfoManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataHuntBossInfoManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataHuntBossInfoManager::Clear[0]( ) -> A
	[Client]Game.DataHuntBossInfoManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataHuntBossInfoManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataHuntBossInfoManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataHuntBossInfoManager::GetDataByName[1]( System.String ) -> A
	[Client]Game.DataHuntBossInfoManager::GetDataListByName[1]( System.String ) -> a
	[Client]Game.DataHuntBossInfoManager::GetDataByLevel[1]( System.String ) -> B
	[Client]Game.DataHuntBossInfoManager::GetDataListByLevel[1]( System.String ) -> b
	[Client]Game.DataHuntBossInfoManager::GetDataByDifficulty[1]( System.Int32 ) -> B
	[Client]Game.DataHuntBossInfoManager::GetDataListByDifficulty[1]( System.Int32 ) -> b
	[Client]Game.DataHuntBossInfoManager::GetDataByMapInfo[1]( System.String ) -> C
	[Client]Game.DataHuntBossInfoManager::GetDataListByMapInfo[1]( System.String ) -> c
	[Client]Game.DataHuntBossInfoManager::GetDataByMapColor[1]( System.Int32 ) -> C
	[Client]Game.DataHuntBossInfoManager::GetDataListByMapColor[1]( System.Int32 ) -> c
	[Client]Game.DataHuntBossInfoManager::GetDataByLine[1]( System.String ) -> D
	[Client]Game.DataHuntBossInfoManager::GetDataListByLine[1]( System.String ) -> d
	[Client]Game.DataHuntBossInfoManager::GetDataByRefreshTime[1]( System.String ) -> E
	[Client]Game.DataHuntBossInfoManager::GetDataListByRefreshTime[1]( System.String ) -> e
	[Client]Game.DataHuntBossInfoManager::GetDataByMapID[1]( System.Int32 ) -> D
	[Client]Game.DataHuntBossInfoManager::GetDataListByMapID[1]( System.Int32 ) -> d
	[Client]Game.DataHuntBossInfoManager::GetDataByMapPosX[1]( System.Single ) -> A
	[Client]Game.DataHuntBossInfoManager::GetDataListByMapPosX[1]( System.Single ) -> a
	[Client]Game.DataHuntBossInfoManager::GetDataByMapPosY[1]( System.Single ) -> B
	[Client]Game.DataHuntBossInfoManager::GetDataListByMapPosY[1]( System.Single ) -> b
	[Client]Game.DataHuntBossInfoManager::GetDataByEncourage[1]( System.String ) -> F
	[Client]Game.DataHuntBossInfoManager::GetDataListByEncourage[1]( System.String ) -> f
	[Client]Game.DataHuntBossInfoManager::GetDataByDescription[1]( System.String ) -> G
	[Client]Game.DataHuntBossInfoManager::GetDataListByDescription[1]( System.String ) -> g
	[Client]Game.DataHuntBossInfoManager::get_Instance[0]( ) -> a
	[Client]Game.DataHuntBossInfoManager::get_DataList[0]( ) -> B
	[Client]Game.DataHuntBossInfoManager::get_Count[0]( ) -> b

	[Client]Game.DataHuntBossInfoManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataHuntBossInfoManager::.ctor[0]( ) skipped:  special name

	Game.DataHuntBossInfoManager [Client]Game.DataHuntBossInfoManager Game.DataHuntBossInfoManager::instance -> A
	System.Collections.Generic.List`1<Game.DataHuntBossInfo> [Client]System.Collections.Generic.List`1<Game.DataHuntBossInfo> Game.DataHuntBossInfoManager::dataList -> A

	Game.DataHuntBossInfoManager [Client]Game.DataHuntBossInfoManager Game.DataHuntBossInfoManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataHuntBossInfo> [Client]System.Collections.Generic.List`1<Game.DataHuntBossInfo> Game.DataHuntBossInfoManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataHuntBossInfoManager::Count -> dropped
}

[Client]Game.DataAFKMap -> [Client]c.X
{
	[Client]Game.DataAFKMap::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAFKMap::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAFKMap::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAFKMap::get_MapID[0]( ) -> A
	[Client]Game.DataAFKMap::set_MapID[1]( System.Int32 ) -> A
	[Client]Game.DataAFKMap::get_Type[0]( ) -> a
	[Client]Game.DataAFKMap::set_Type[1]( System.Int32 ) -> a
	[Client]Game.DataAFKMap::get_LevelMin[0]( ) -> B
	[Client]Game.DataAFKMap::set_LevelMin[1]( System.Int32 ) -> B
	[Client]Game.DataAFKMap::get_LevelMax[0]( ) -> b
	[Client]Game.DataAFKMap::set_LevelMax[1]( System.Int32 ) -> b
	[Client]Game.DataAFKMap::get_Icon[0]( ) -> C
	[Client]Game.DataAFKMap::set_Icon[1]( System.String ) -> A

	[Client]Game.DataAFKMap::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataAFKMap::<MapID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataAFKMap::<Type>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataAFKMap::<LevelMin>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataAFKMap::<LevelMax>k__BackingField -> b
	System.String [Client]System.String Game.DataAFKMap::<Icon>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataAFKMap::MapID -> dropped
	System.Int32 [Client]System.Int32 Game.DataAFKMap::Type -> dropped
	System.Int32 [Client]System.Int32 Game.DataAFKMap::LevelMin -> dropped
	System.Int32 [Client]System.Int32 Game.DataAFKMap::LevelMax -> dropped
	System.String [Client]System.String Game.DataAFKMap::Icon -> dropped
}

[Client]Game.DataAFKMapManager -> [Client]c.x
{
	[Client]Game.DataAFKMapManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAFKMapManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAFKMapManager::Clear[0]( ) -> A
	[Client]Game.DataAFKMapManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAFKMapManager::GetDataByMapID[1]( System.Int32 ) -> A
	[Client]Game.DataAFKMapManager::GetDataListByMapID[1]( System.Int32 ) -> a
	[Client]Game.DataAFKMapManager::GetDataByType[1]( System.Int32 ) -> B
	[Client]Game.DataAFKMapManager::GetDataListByType[1]( System.Int32 ) -> b
	[Client]Game.DataAFKMapManager::GetDataByLevelMin[1]( System.Int32 ) -> C
	[Client]Game.DataAFKMapManager::GetDataListByLevelMin[1]( System.Int32 ) -> c
	[Client]Game.DataAFKMapManager::GetDataByLevelMax[1]( System.Int32 ) -> D
	[Client]Game.DataAFKMapManager::GetDataListByLevelMax[1]( System.Int32 ) -> d
	[Client]Game.DataAFKMapManager::GetDataByIcon[1]( System.String ) -> A
	[Client]Game.DataAFKMapManager::GetDataListByIcon[1]( System.String ) -> a
	[Client]Game.DataAFKMapManager::get_Instance[0]( ) -> a
	[Client]Game.DataAFKMapManager::get_DataList[0]( ) -> B
	[Client]Game.DataAFKMapManager::get_Count[0]( ) -> b

	[Client]Game.DataAFKMapManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataAFKMapManager::.ctor[0]( ) skipped:  special name

	Game.DataAFKMapManager [Client]Game.DataAFKMapManager Game.DataAFKMapManager::instance -> A
	System.Collections.Generic.List`1<Game.DataAFKMap> [Client]System.Collections.Generic.List`1<Game.DataAFKMap> Game.DataAFKMapManager::dataList -> A

	Game.DataAFKMapManager [Client]Game.DataAFKMapManager Game.DataAFKMapManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataAFKMap> [Client]System.Collections.Generic.List`1<Game.DataAFKMap> Game.DataAFKMapManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataAFKMapManager::Count -> dropped
}

[Client]Game.BufferPool -> [Client]c.Y
{
	[Client]Game.BufferPool::Flush[0]( ) -> A
	[Client]Game.BufferPool::GetBuffer[0]( ) -> a
	[Client]Game.BufferPool::ResizeAndFlushLeft[4]( System.Byte[]&, System.Int32, System.Int32, System.Int32 ) -> A
	[Client]Game.BufferPool::ReleaseBufferToPool[1]( System.Byte[]& ) -> A

	[Client]Game.BufferPool::.ctor[0]( ) skipped:  special name
	[Client]Game.BufferPool::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.BufferPool::BufferLength -> A
	System.Int32 [Client]System.Int32 Game.BufferPool::PoolSize -> a
	log4net.ILog [Client]log4net.ILog Game.BufferPool::m_Log -> A
	System.Object[] [Client]System.Object[] Game.BufferPool::pool -> A
}

[Client]Game.QueuePath -> [Client]c.y
{

	[Client]Game.QueuePath::.ctor[3]( UnityEngine.Vector3, UnityEngine.Vector3, System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> ) skipped:  special name

	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.QueuePath::startPos -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.QueuePath::endPos -> a
	System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> [Client]System.Action`1<System.Collections.Generic.List`1<UnityEngine.Vector3>> Game.QueuePath::storeRef -> A
}

[Client]Game.Node -> [Client]c.Z
{

	[Client]Game.Node::.ctor[8]( System.Int32, System.Int32, System.Single, System.Int32, System.Single, System.Single, System.Boolean, Game.Node ) skipped:  special name
	[Client]Game.Node::.ctor[7]( System.Int32, System.Int32, System.Single, System.Int32, System.Single, System.Single, System.Boolean ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Node::x -> A
	System.Int32 [Client]System.Int32 Game.Node::y -> a
	System.Single [Client]System.Single Game.Node::yCoord -> A
	System.Single [Client]System.Single Game.Node::xCoord -> a
	System.Single [Client]System.Single Game.Node::zCoord -> B
	System.Int32 [Client]System.Int32 Game.Node::ID -> B
	System.Boolean [Client]System.Boolean Game.Node::walkable -> A
	Game.Node [Client]Game.Node Game.Node::parent -> A
	System.Int32 [Client]System.Int32 Game.Node::F -> b
	System.Int32 [Client]System.Int32 Game.Node::H -> C
	System.Int32 [Client]System.Int32 Game.Node::G -> c
	System.Int32 [Client]System.Int32 Game.Node::sortedIndex -> D
}

[Client]Game.UrlManager -> [Client]c.z
{
	[Client]Game.UrlManager::OnUrlClickEventHandler[2]( Game.UI.UICommon.IXUITextList, Game.UI.UICommon.UrlData ) -> A
	[Client]Game.UrlManager::SendRequestLookCharItem[2]( System.UInt32, System.UInt64 ) -> A
	[Client]Game.UrlManager::OnMsgServerLookCharItem[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.UrlManager::GeneratePosUrl[3]( System.String, System.Single, System.Single ) -> A
	[Client]Game.UrlManager::GeneratePlayerUrl[2]( System.UInt32, System.String ) -> A
	[Client]Game.UrlManager::GeneratePlayerUrl[3]( System.UInt32, System.String, System.Boolean ) -> A
	[Client]Game.UrlManager::GeneratePetUrl[3]( System.UInt32, System.UInt64, System.String ) -> A
	[Client]Game.UrlManager::GenerateItemUrl[3]( System.UInt32, System.UInt64, System.String ) -> a
	[Client]Game.UrlManager::GenerateEmotion[1]( System.String ) -> A
	[Client]Game.UrlManager::GenerateTeamUrl[1]( System.UInt32 ) -> A
	[Client]Game.UrlManager::GenerateGuildUrl[1]( System.UInt32 ) -> a
	[Client]Game.UrlManager::ConvertToUrl[1]( System.String ) -> a
	[Client]Game.UrlManager::ClearUrlDatas[0]( ) -> A
	[Client]Game.UrlManager::AddUrlData[1]( Game.UI.UICommon.UrlData ) -> A

	[Client]Game.UrlManager::.ctor[0]( ) skipped:  special name
	[Client]Game.UrlManager::.cctor[0]( ) skipped:  special name

	System.Collections.Generic.Dictionary`2<System.String,Game.UI.UICommon.UrlData> [Client]System.Collections.Generic.Dictionary`2<System.String,Game.UI.UICommon.UrlData> Game.UrlManager::m_dicUrlData -> A
	System.String [Client]System.String Game.UrlManager::s_strStart -> A
	System.String [Client]System.String Game.UrlManager::s_strEnd -> a
}

[Client]Game.UIManager -> [Client]D.a
{
	[Client]Game.UIManager::get_ProtectionEnabled[0]( ) -> A
	[Client]Game.UIManager::set_ProtectionEnabled[1]( System.Boolean ) -> A
	[Client]Game.UIManager::get_uiRoot[0]( ) -> a
	[Client]Game.UIManager::get_UICamera[0]( ) -> B
	[Client]Game.UIManager::get_ManualHeight[0]( ) -> b
	[Client]Game.UIManager::get_IsPad[0]( ) -> C
	[Client]Game.UIManager::set_IsPad[1]( System.Boolean ) -> a
	[Client]Game.UIManager::FindUIObject[1]( System.String ) -> A
	[Client]Game.UIManager::Init[2]( Game.UI.UICommon.IXUITool, UnityEngine.Transform ) -> A
	[Client]Game.UIManager::RunOnce[1]( System.Action ) -> A
	[Client]Game.UIManager::LoadCommonAtlasFinishedEventHandler[1]( UnityEngine.Object ) -> A
	[Client]Game.UIManager::LoadFontFinishedEventHandler[1]( UnityEngine.Object ) -> a
	[Client]Game.UIManager::Update[0]( ) -> c
	[Client]Game.UIManager::LateUpdate[0]( ) -> D
	[Client]Game.UIManager::SetLayer[2]( UnityEngine.GameObject, System.Int32 ) -> A
	[Client]Game.UIManager::AddTaskImmediate[2]( System.String, System.Action`1<UnityEngine.Object> ) -> A
	[Client]Game.UIManager::AddTask[2]( System.String, System.Action`1<UnityEngine.Object> ) -> a
	[Client]Game.UIManager::RemoveTask[2]( System.UInt32, System.Action`1<UnityEngine.Object> ) -> A
	[Client]Game.UIManager::AddDlg[1]( Game.UI.UICommon.IXUIDlg ) -> A
	[Client]Game.UIManager::ChangeLayer[3]( Game.UI.UICommon.IXUIDlg, System.Int32, System.Int32 ) -> A
	[Client]Game.UIManager::SetVisible[2]( UnityEngine.GameObject, System.Boolean ) -> A
	[Client]Game.UIManager::SetVisible[2]( Game.UI.UICommon.IXUIDlg, System.Boolean ) -> A
	[Client]Game.UIManager::Compositor[1]( Game.UI.UICommon.IXUIDlg ) -> a
	[Client]Game.UIManager::LoadAtlas[2]( System.String, System.Action`1<UnityEngine.Object> ) -> B
	[Client]Game.UIManager::LoadTexture[2]( System.String, System.Action`1<UnityEngine.Object> ) -> b
	[Client]Game.UIManager::GetMouseOrTouch[0]( ) -> d
	[Client]Game.UIManager::Play[3]( UnityEngine.Animation, Game.UI.UICommon.AnimDirection, System.EventHandler ) -> A
	[Client]Game.UIManager::OnDlgShow[1]( Game.UI.UICommon.IXUIDlg ) -> B
	[Client]Game.UIManager::OnDlgClose[1]( Game.UI.UICommon.IXUIDlg ) -> b
	[Client]Game.UIManager::StartTimer[3]( System.UInt32, System.Single, Game.TimerEventHandler ) -> A
	[Client]Game.UIManager::Timer[3]( System.UInt32, System.Single, Game.TimerEventHandler ) -> a
	[Client]Game.UIManager::InitUIProtection[0]( ) -> E
	[Client]Game.UIManager::LoadWidgetNames[0]( ) -> e
	[Client]Game.UIManager::GetComponent[1]( System.String ) -> a
	[Client]Game.UIManager::GetDlgByName[1]( System.String ) -> B
	[Client]Game.UIManager::GetHierarchy[1]( Game.UI.UICommon.IXUIObject ) -> A
	[Client]Game.UIManager::SetUIState[1]( Game.UIManager/UIState ) -> A
	[Client]Game.UIManager::CloseAllDlg[0]( ) -> F
	[Client]Game.UIManager::UnLoadAllDlg[0]( ) -> f
	[Client]Game.UIManager::AddDynamicDlg[0]( ) -> G

	[Client]Game.UIManager::OnPress[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UIManager::OnClick[1]( System.String ) skipped:  filtered
	[Client]Game.UIManager::OnUIObjectAdd[1]( Game.UI.UICommon.IXUIObject ) skipped:  filtered
	[Client]Game.UIManager::.ctor[0]( ) skipped:  special name
	[Client]Game.UIManager::.cctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UIManager::FontFile -> A
	log4net.ILog [Client]log4net.ILog Game.UIManager::m_Log -> A
	Game.UI.UICommon.IXUITool [Client]Game.UI.UICommon.IXUITool Game.UIManager::m_uiTool -> A
	UnityEngine.Transform [Client]UnityEngine.Transform Game.UIManager::m_uiRoot -> A
	System.Collections.Generic.Dictionary`2<System.String,Game.UI.UICommon.IXUIDlg> [Client]System.Collections.Generic.Dictionary`2<System.String,Game.UI.UICommon.IXUIDlg> Game.UIManager::m_dicDlgs -> A
	System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<Game.UI.UICommon.IXUIDlg>> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<Game.UI.UICommon.IXUIDlg>> Game.UIManager::m_dicUILayer -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UIManager::m_uiProtectionObj -> A
	System.Collections.Generic.Dictionary`2<System.String,XUIObjectBase> [Client]System.Collections.Generic.Dictionary`2<System.String,XUIObjectBase> Game.UIManager::m_dicWidgetComp -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UIManager::m_uiLight -> a
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.UIManager::CommonAtlasFiles -> A
	System.Int32 [Client]System.Int32 Game.UIManager::m_AtalsLoadedCount -> A
	System.Boolean [Client]System.Boolean Game.UIManager::m_bNeedUpdateDlgList -> A
	System.Collections.Generic.List`1<Game.UI.UICommon.IXUIDlg> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUIDlg> Game.UIManager::m_listDlg -> A
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.UIManager::m_listDlgDynamic -> a
	System.Boolean [Client]System.Boolean Game.UIManager::m_bIsPad -> a
	Game.UIManager/UIState [Client]Game.UIManager/UIState Game.UIManager::m_uiState -> A
	System.Action [Client]System.Action Game.UIManager::m_aciton -> A
	System.Boolean [Client]System.Boolean Game.UIManager::<ProtectionEnabled>k__BackingField -> B

	System.Boolean [Client]System.Boolean Game.UIManager::ProtectionEnabled -> dropped
	UnityEngine.Transform [Client]UnityEngine.Transform Game.UIManager::uiRoot -> dropped
	UnityEngine.Camera [Client]UnityEngine.Camera Game.UIManager::UICamera -> dropped
	System.Int32 [Client]System.Int32 Game.UIManager::ManualHeight -> dropped
	System.Boolean [Client]System.Boolean Game.UIManager::IsPad -> dropped
}

[Client]Game.UIManager/UIState -> [Client]D.a/B
{
	Game.UIManager/UIState [Client]Game.UIManager/UIState Game.UIManager/UIState::Login -> A
	Game.UIManager/UIState [Client]Game.UIManager/UIState Game.UIManager/UIState::Create -> a
	Game.UIManager/UIState [Client]Game.UIManager/UIState Game.UIManager/UIState::Select -> B
	Game.UIManager/UIState [Client]Game.UIManager/UIState Game.UIManager/UIState::Main -> b

	System.Int32 [Client]System.Int32 Game.UIManager/UIState::value__ skipped:  filtered
}

[Client]Game.UIManager/<Timer>d__0 -> [Client]D.a/b
{
	[Client]Game.UIManager/<Timer>d__0::System.Collections.Generic.IEnumerator<System.Object>.get_Current[0]( ) -> A
	[Client]Game.UIManager/<Timer>d__0::System.Collections.IEnumerator.Reset[0]( ) -> a
	[Client]Game.UIManager/<Timer>d__0::System.IDisposable.Dispose[0]( ) -> B
	[Client]Game.UIManager/<Timer>d__0::System.Collections.IEnumerator.get_Current[0]( ) -> b

	[Client]Game.UIManager/<Timer>d__0::MoveNext[0]( ) skipped:  external base class or interface
	[Client]Game.UIManager/<Timer>d__0::.ctor[1]( System.Int32 ) skipped:  special name

	System.Object [Client]System.Object Game.UIManager/<Timer>d__0::<>2__current -> A
	System.Int32 [Client]System.Int32 Game.UIManager/<Timer>d__0::<>1__state -> A
	System.UInt32 [Client]System.UInt32 Game.UIManager/<Timer>d__0::unTimerId -> A
	System.Single [Client]System.Single Game.UIManager/<Timer>d__0::fTime -> A
	Game.TimerEventHandler [Client]Game.TimerEventHandler Game.UIManager/<Timer>d__0::eventHandler -> A
	Game.UIManager [Client]Game.UIManager Game.UIManager/<Timer>d__0::<>4__this -> A

	System.Object [Client]System.Object Game.UIManager/<Timer>d__0::System.Collections.Generic.IEnumerator<System.Object>.Current -> dropped
	System.Object [Client]System.Object Game.UIManager/<Timer>d__0::System.Collections.IEnumerator.Current -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree -> [Client]D.C
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree::BuildTree[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree::GetSymbol[1]( ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree::.cctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree::.ctor[1]( System.Byte[] ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree::MAX_BITLEN -> A
	System.Int16[] [Client]System.Int16[] ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree::tree -> A
	ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree [Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree::defLitLenTree -> A
	ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree [Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree::defDistTree -> a
}

[Client]ICSharpCode.SharpZipLib.Core.ScanEventArgs -> [Client]D.D
{
	[Client]ICSharpCode.SharpZipLib.Core.ScanEventArgs::get_Name[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.ScanEventArgs::get_ContinueRunning[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.ScanEventArgs::set_ContinueRunning[1]( System.Boolean ) -> A

	[Client]ICSharpCode.SharpZipLib.Core.ScanEventArgs::.ctor[1]( System.String ) skipped:  special name

	System.String [Client]System.String ICSharpCode.SharpZipLib.Core.ScanEventArgs::name_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Core.ScanEventArgs::continueRunning_ -> A

	System.String [Client]System.String ICSharpCode.SharpZipLib.Core.ScanEventArgs::Name -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Core.ScanEventArgs::ContinueRunning -> dropped
}

[Client]ICSharpCode.SharpZipLib.Core.ProgressEventArgs -> [Client]D.d
{
	[Client]ICSharpCode.SharpZipLib.Core.ProgressEventArgs::get_Name[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.ProgressEventArgs::get_ContinueRunning[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.ProgressEventArgs::set_ContinueRunning[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.ProgressEventArgs::get_PercentComplete[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Core.ProgressEventArgs::get_Processed[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Core.ProgressEventArgs::get_Target[0]( ) -> C

	[Client]ICSharpCode.SharpZipLib.Core.ProgressEventArgs::.ctor[3]( System.String, System.Int64, System.Int64 ) skipped:  special name

	System.String [Client]System.String ICSharpCode.SharpZipLib.Core.ProgressEventArgs::name_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.ProgressEventArgs::processed_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.ProgressEventArgs::target_ -> a
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Core.ProgressEventArgs::continueRunning_ -> A

	System.String [Client]System.String ICSharpCode.SharpZipLib.Core.ProgressEventArgs::Name -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Core.ProgressEventArgs::ContinueRunning -> dropped
	System.Single [Client]System.Single ICSharpCode.SharpZipLib.Core.ProgressEventArgs::PercentComplete -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.ProgressEventArgs::Processed -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.ProgressEventArgs::Target -> dropped
}

[Client]ICSharpCode.SharpZipLib.Core.DirectoryEventArgs -> [Client]D.E
{
	[Client]ICSharpCode.SharpZipLib.Core.DirectoryEventArgs::get_HasMatchingFiles[0]( ) -> A

	[Client]ICSharpCode.SharpZipLib.Core.DirectoryEventArgs::.ctor[2]( System.String, System.Boolean ) skipped:  special name

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Core.DirectoryEventArgs::hasMatchingFiles_ -> A

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Core.DirectoryEventArgs::HasMatchingFiles -> dropped
}

[Client]ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs -> [Client]D.e
{
	[Client]ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::get_Name[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::get_Exception[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::get_ContinueRunning[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::set_ContinueRunning[1]( System.Boolean ) -> A

	[Client]ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::.ctor[2]( System.String, System.Exception ) skipped:  special name

	System.String [Client]System.String ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::name_ -> A
	System.Exception [Client]System.Exception ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::exception_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::continueRunning_ -> A

	System.String [Client]System.String ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::Name -> dropped
	System.Exception [Client]System.Exception ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::Exception -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs::ContinueRunning -> dropped
}

[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner -> [Client]D.I
{
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::OnDirectoryFailure[2]( System.String, System.Exception ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::OnFileFailure[2]( System.String, System.Exception ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::OnProcessFile[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::OnCompleteFile[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::OnProcessDirectory[2]( System.String, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::Scan[2]( System.String, System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::ScanDir[2]( System.String, System.Boolean ) -> B

	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::.ctor[2]( System.String, System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::.ctor[1]( ICSharpCode.SharpZipLib.Core.IScanFilter ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Core.FileSystemScanner::.ctor[2]( ICSharpCode.SharpZipLib.Core.IScanFilter, ICSharpCode.SharpZipLib.Core.IScanFilter ) skipped:  special name

	ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler [Client]ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler ICSharpCode.SharpZipLib.Core.FileSystemScanner::ProcessDirectory -> A
	ICSharpCode.SharpZipLib.Core.ProcessFileHandler [Client]ICSharpCode.SharpZipLib.Core.ProcessFileHandler ICSharpCode.SharpZipLib.Core.FileSystemScanner::ProcessFile -> A
	ICSharpCode.SharpZipLib.Core.CompletedFileHandler [Client]ICSharpCode.SharpZipLib.Core.CompletedFileHandler ICSharpCode.SharpZipLib.Core.FileSystemScanner::CompletedFile -> A
	ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler [Client]ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler ICSharpCode.SharpZipLib.Core.FileSystemScanner::DirectoryFailure -> A
	ICSharpCode.SharpZipLib.Core.FileFailureHandler [Client]ICSharpCode.SharpZipLib.Core.FileFailureHandler ICSharpCode.SharpZipLib.Core.FileSystemScanner::FileFailure -> A
	ICSharpCode.SharpZipLib.Core.IScanFilter [Client]ICSharpCode.SharpZipLib.Core.IScanFilter ICSharpCode.SharpZipLib.Core.FileSystemScanner::fileFilter_ -> A
	ICSharpCode.SharpZipLib.Core.IScanFilter [Client]ICSharpCode.SharpZipLib.Core.IScanFilter ICSharpCode.SharpZipLib.Core.FileSystemScanner::directoryFilter_ -> a
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Core.FileSystemScanner::alive_ -> A
}

[Client]ICSharpCode.SharpZipLib.Checksums.Adler32 -> [Client]D.i
{
	[Client]ICSharpCode.SharpZipLib.Checksums.Adler32::get_Value[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.Adler32::Reset[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Checksums.Adler32::Update[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.Adler32::Update[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.Adler32::Update[3]( System.Byte[], System.Int32, System.Int32 ) -> A

	[Client]ICSharpCode.SharpZipLib.Checksums.Adler32::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.Checksums.Adler32::BASE -> A
	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.Checksums.Adler32::checksum -> a

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Checksums.Adler32::Value -> dropped
}

[Client]Game.Msg.MsgGoldConsign -> [Client]D.J
{

	[Client]Game.Msg.MsgGoldConsign::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgGoldConsign::BaseType -> A
}

[Client]Game.Msg.MsgClientReqGoldGetList -> [Client]D.j
{

	[Client]Game.Msg.MsgClientReqGoldGetList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqGoldGetList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldGetList::Type -> A
}

[Client]Game.Msg.MsgServerAckGoldGetList -> [Client]D.K
{
	[Client]Game.Msg.MsgServerAckGoldGetList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckGoldGetList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckGoldGetList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldGetList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGoldGetList::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> [Client]System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> Game.Msg.MsgServerAckGoldGetList::m_oVecGoldList -> A
}

[Client]Game.Msg.MsgClientReqGoldBuy -> [Client]D.k
{
	[Client]Game.Msg.MsgClientReqGoldBuy::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqGoldBuy::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqGoldBuy::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqGoldBuy::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldBuy::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqGoldBuy::m_uiGoldConsignID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldBuy::m_usHandNum -> a
}

[Client]Game.Msg.MsgServerAckGoldBuy -> [Client]D.L
{
	[Client]Game.Msg.MsgServerAckGoldBuy::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckGoldBuy::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckGoldBuy::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldBuy::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGoldBuy::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldBuy::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientReqGoldSell -> [Client]D.l
{
	[Client]Game.Msg.MsgClientReqGoldSell::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqGoldSell::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqGoldSell::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqGoldSell::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldSell::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqGoldSell::m_uiGoldConsignID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldSell::m_usHandNum -> a
}

[Client]Game.Msg.MsgServerAckGoldSell -> [Client]D.M
{
	[Client]Game.Msg.MsgServerAckGoldSell::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckGoldSell::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckGoldSell::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldSell::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGoldSell::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldSell::m_ebtResult -> a
}

[Client]Game.Msg.MsgServerNotifyGoldListChange -> [Client]D.m
{
	[Client]Game.Msg.MsgServerNotifyGoldListChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyGoldListChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyGoldListChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyGoldListChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyGoldListChange::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyGoldListChange::m_uiGoldConsignID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyGoldListChange::m_usLeftHandNum -> a
}

[Client]Game.Msg.MsgClientReqGoldConsignBuy -> [Client]D.N
{
	[Client]Game.Msg.MsgClientReqGoldConsignBuy::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqGoldConsignBuy::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqGoldConsignBuy::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqGoldConsignBuy::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldConsignBuy::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqGoldConsignBuy::m_uiPrice -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldConsignBuy::m_usHandNum -> a
}

[Client]Game.Msg.MsgServerAckGoldConsignBuy -> [Client]D.n
{
	[Client]Game.Msg.MsgServerAckGoldConsignBuy::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckGoldConsignBuy::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckGoldConsignBuy::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldConsignBuy::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGoldConsignBuy::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldConsignBuy::m_btRet -> a
	Game.Msg.ClientGoldConsignInfo [Client]Game.Msg.ClientGoldConsignInfo Game.Msg.MsgServerAckGoldConsignBuy::m_stConsignData -> A
}

[Client]Game.Msg.MsgClientReqGoldConsignSell -> [Client]D.O
{
	[Client]Game.Msg.MsgClientReqGoldConsignSell::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqGoldConsignSell::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqGoldConsignSell::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqGoldConsignSell::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldConsignSell::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqGoldConsignSell::m_uiPrice -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldConsignSell::m_usHandNum -> a
}

[Client]Game.Msg.MsgServerAckGoldConsignSell -> [Client]D.o
{
	[Client]Game.Msg.MsgServerAckGoldConsignSell::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckGoldConsignSell::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckGoldConsignSell::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldConsignSell::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGoldConsignSell::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldConsignSell::m_ebtRet -> a
	Game.Msg.ClientGoldConsignInfo [Client]Game.Msg.ClientGoldConsignInfo Game.Msg.MsgServerAckGoldConsignSell::m_stConsignData -> A
}

[Client]Game.Msg.MsgClientReqGoldConsignCancel -> [Client]D.P
{
	[Client]Game.Msg.MsgClientReqGoldConsignCancel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqGoldConsignCancel::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqGoldConsignCancel::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqGoldConsignCancel::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldConsignCancel::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqGoldConsignCancel::m_uiGoldConsignID -> A
}

[Client]Game.Msg.MsgServerAckGoldConsignCancel -> [Client]D.p
{
	[Client]Game.Msg.MsgServerAckGoldConsignCancel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckGoldConsignCancel::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckGoldConsignCancel::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldConsignCancel::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGoldConsignCancel::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckGoldConsignCancel::m_uiID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldConsignCancel::m_btConType -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGoldConsignCancel::m_usAddHandNum -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldConsignCancel::m_ebtRet -> B
}

[Client]Game.Msg.MsgClientReqGoldGetMyRecord -> [Client]D.Q
{

	[Client]Game.Msg.MsgClientReqGoldGetMyRecord::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqGoldGetMyRecord::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGoldGetMyRecord::Type -> A
}

[Client]Game.Msg.MsgServerAckGoldGetMyRecord -> [Client]D.q
{
	[Client]Game.Msg.MsgServerAckGoldGetMyRecord::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckGoldGetMyRecord::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckGoldGetMyRecord::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGoldGetMyRecord::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGoldGetMyRecord::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> [Client]System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> Game.Msg.MsgServerAckGoldGetMyRecord::m_oVecGoldList -> A
}

[Client]Game.Msg.MsgFamily -> [Client]D.R
{

	[Client]Game.Msg.MsgFamily::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgFamily::BaseType -> A
}

[Client]Game.Msg.MsgClientCreateFamily -> [Client]D.r
{
	[Client]Game.Msg.MsgClientCreateFamily::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientCreateFamily::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientCreateFamily::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientCreateFamily::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientCreateFamily::Type -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientCreateFamily::m_abtFamilyName -> A
}

[Client]Game.Msg.MsgServerCreateFamilyResult -> [Client]D.S
{
	[Client]Game.Msg.MsgServerCreateFamilyResult::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCreateFamilyResult::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCreateFamilyResult::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCreateFamilyResult::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCreateFamilyResult::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCreateFamilyResult::m_usResult -> a
}

[Client]Game.Msg.MsgServerUpdateFamilyPersonalInfo -> [Client]D.s
{
	[Client]Game.Msg.MsgServerUpdateFamilyPersonalInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerUpdateFamilyPersonalInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerUpdateFamilyPersonalInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerUpdateFamilyPersonalInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerUpdateFamilyPersonalInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerUpdateFamilyPersonalInfo::m_uiPlayerID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerUpdateFamilyPersonalInfo::m_uiFamilyID -> a
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgServerUpdateFamilyPersonalInfo::m_abtFamilyName -> A
}

[Client]Game.Msg.MsgClientDisbandFamily -> [Client]D.T
{
	[Client]Game.Msg.MsgClientDisbandFamily::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientDisbandFamily::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientDisbandFamily::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientDisbandFamily::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientDisbandFamily::Type -> A
}

[Client]Game.Msg.MsgServerDisbandFamily -> [Client]D.t
{
	[Client]Game.Msg.MsgServerDisbandFamily::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerDisbandFamily::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerDisbandFamily::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerDisbandFamily::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerDisbandFamily::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerDisbandFamily::m_uiID -> A
}

[Client]Game.Msg.MsgClientReqJoinFamily -> [Client]D.U
{
	[Client]Game.Msg.MsgClientReqJoinFamily::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqJoinFamily::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqJoinFamily::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqJoinFamily::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqJoinFamily::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqJoinFamily::m_uiFamilyID -> A
}

[Client]Game.Msg.MsgServerReqJoinFamily -> [Client]D.u
{
	[Client]Game.Msg.MsgServerReqJoinFamily::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerReqJoinFamily::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerReqJoinFamily::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerReqJoinFamily::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerReqJoinFamily::Type -> A
	Game.Msg.FamilyMemberData [Client]Game.Msg.FamilyMemberData Game.Msg.MsgServerReqJoinFamily::m_stData -> A
}

[Client]Game.Msg.MsgClientAckJoinFamily -> [Client]D.V
{
	[Client]Game.Msg.MsgClientAckJoinFamily::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientAckJoinFamily::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientAckJoinFamily::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientAckJoinFamily::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientAckJoinFamily::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientAckJoinFamily::m_uiMemberID -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientAckJoinFamily::m_bResult -> A
}

[Client]Game.Msg.MsgServerFamilyDelJoin -> [Client]D.v
{
	[Client]Game.Msg.MsgServerFamilyDelJoin::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFamilyDelJoin::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFamilyDelJoin::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyDelJoin::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFamilyDelJoin::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerFamilyDelJoin::m_uiMemberID -> A
}

[Client]Game.Msg.MsgServerFamilyMemberAdd -> [Client]D.W
{
	[Client]Game.Msg.MsgServerFamilyMemberAdd::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFamilyMemberAdd::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFamilyMemberAdd::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyMemberAdd::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFamilyMemberAdd::Type -> A
	Game.Msg.FamilyMemberData [Client]Game.Msg.FamilyMemberData Game.Msg.MsgServerFamilyMemberAdd::m_stData -> A
}

[Client]Game.Msg.MsgServerFamilyTellInfo -> [Client]D.w
{
	[Client]Game.Msg.MsgServerFamilyTellInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFamilyTellInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFamilyTellInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyTellInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFamilyTellInfo::Type -> A
	Game.Msg.FamilyData [Client]Game.Msg.FamilyData Game.Msg.MsgServerFamilyTellInfo::m_stData -> A
}

[Client]Game.Msg.MsgClientFamilyInvite -> [Client]D.X
{
	[Client]Game.Msg.MsgClientFamilyInvite::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFamilyInvite::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFamilyInvite::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyInvite::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFamilyInvite::Type -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientFamilyInvite::m_abtPlayerName -> A
}

[Client]Game.Msg.MsgServerFamilyInvite -> [Client]D.x
{
	[Client]Game.Msg.MsgServerFamilyInvite::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFamilyInvite::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFamilyInvite::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyInvite::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFamilyInvite::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerFamilyInvite::m_uiFamilyID -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgServerFamilyInvite::m_abtFamilyName -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgServerFamilyInvite::m_abtPlayerName -> a
}

[Client]Game.Msg.MsgClientFamilyAckInvite -> [Client]D.Y
{
	[Client]Game.Msg.MsgClientFamilyAckInvite::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFamilyAckInvite::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFamilyAckInvite::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyAckInvite::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFamilyAckInvite::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientFamilyAckInvite::m_uiFamilyID -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientFamilyAckInvite::m_bResult -> A
}

[Client]Game.Msg.MsgClientFamilyReqLeave -> [Client]D.y
{
	[Client]Game.Msg.MsgClientFamilyReqLeave::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFamilyReqLeave::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFamilyReqLeave::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyReqLeave::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFamilyReqLeave::Type -> A
}

[Client]Game.Msg.MsgServerFamilyMemberRemove -> [Client]D.Z
{
	[Client]Game.Msg.MsgServerFamilyMemberRemove::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFamilyMemberRemove::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFamilyMemberRemove::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyMemberRemove::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFamilyMemberRemove::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerFamilyMemberRemove::m_uiMemberID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyMemberRemove::m_btReason -> a
}

[Client]Game.Msg.MsgClientFamilyKick -> [Client]D.z
{
	[Client]Game.Msg.MsgClientFamilyKick::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFamilyKick::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFamilyKick::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyKick::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFamilyKick::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientFamilyKick::m_uiMemberID -> A
}

[Client]Game.Msg.MsgServerFamilyUpdateBase -> [Client]d.A
{
	[Client]Game.Msg.MsgServerFamilyUpdateBase::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFamilyUpdateBase::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFamilyUpdateBase::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyUpdateBase::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFamilyUpdateBase::Type -> A
	Game.Msg.FamilyBaseData [Client]Game.Msg.FamilyBaseData Game.Msg.MsgServerFamilyUpdateBase::m_stData -> A
}

[Client]Game.Msg.MsgServerFamilyMemberUpdate -> [Client]d.a
{
	[Client]Game.Msg.MsgServerFamilyMemberUpdate::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFamilyMemberUpdate::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFamilyMemberUpdate::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyMemberUpdate::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFamilyMemberUpdate::Type -> A
	Game.Msg.FamilyMemberData [Client]Game.Msg.FamilyMemberData Game.Msg.MsgServerFamilyMemberUpdate::m_stData -> A
}

[Client]Game.Msg.MsgServerFamilyMemberOnline -> [Client]d.B
{
	[Client]Game.Msg.MsgServerFamilyMemberOnline::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFamilyMemberOnline::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFamilyMemberOnline::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyMemberOnline::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFamilyMemberOnline::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerFamilyMemberOnline::m_uiMemberID -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerFamilyMemberOnline::m_bOnline -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerFamilyMemberOnline::m_bShow -> a
}

[Client]Game.Msg.MsgClientReqFamilyList -> [Client]d.b
{
	[Client]Game.Msg.MsgClientReqFamilyList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqFamilyList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqFamilyList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqFamilyList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqFamilyList::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqFamilyList::m_uiPage -> A
}

[Client]Game.Msg.MsgServerAckFamilyList -> [Client]d.C
{
	[Client]Game.Msg.MsgServerAckFamilyList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckFamilyList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckFamilyList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckFamilyList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckFamilyList::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckFamilyList::m_uiPage -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckFamilyList::m_uiAllPage -> a
	System.Collections.Generic.List`1<Game.Msg.FamilySimpleData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilySimpleData> Game.Msg.MsgServerAckFamilyList::m_oVecData -> A
}

[Client]Game.Msg.MsgClientFamilyChangeNotice -> [Client]d.c
{
	[Client]Game.Msg.MsgClientFamilyChangeNotice::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFamilyChangeNotice::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFamilyChangeNotice::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyChangeNotice::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFamilyChangeNotice::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgClientFamilyChangeNotice::NoticeSize -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientFamilyChangeNotice::m_abtNotice -> A
}

[Client]Game.Msg.MsgClientFamilyChangeHireNewerNotice -> [Client]d.D
{
	[Client]Game.Msg.MsgClientFamilyChangeHireNewerNotice::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFamilyChangeHireNewerNotice::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFamilyChangeHireNewerNotice::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyChangeHireNewerNotice::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFamilyChangeHireNewerNotice::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgClientFamilyChangeHireNewerNotice::NoticeSize -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientFamilyChangeHireNewerNotice::m_abtNotice -> A
}

[Client]Game.Msg.MsgClientFamilyChangeLeader -> [Client]d.d
{
	[Client]Game.Msg.MsgClientFamilyChangeLeader::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFamilyChangeLeader::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFamilyChangeLeader::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyChangeLeader::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFamilyChangeLeader::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientFamilyChangeLeader::m_uiMemberID -> A
}

[Client]Game.Msg.MsgServerFamilyChangeLeader -> [Client]d.E
{
	[Client]Game.Msg.MsgServerFamilyChangeLeader::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFamilyChangeLeader::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFamilyChangeLeader::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFamilyChangeLeader::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFamilyChangeLeader::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerFamilyChangeLeader::m_uiOldLeader -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerFamilyChangeLeader::m_uiNewLeader -> a
}

[Client]Game.Msg.MsgClientFamilyChangeRank -> [Client]d.e
{
	[Client]Game.Msg.MsgClientFamilyChangeRank::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFamilyChangeRank::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFamilyChangeRank::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyChangeRank::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFamilyChangeRank::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientFamilyChangeRank::m_uiMemberID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyChangeRank::m_btRank -> a
}

[Client]Game.Msg.MsgClientFamilyReqInfo -> [Client]d.F
{
	[Client]Game.Msg.MsgClientFamilyReqInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFamilyReqInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFamilyReqInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFamilyReqInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFamilyReqInfo::Type -> A
}

[Client]Game.Msg.MsgEquip -> [Client]d.f
{

	[Client]Game.Msg.MsgEquip::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgEquip::BaseType -> A
}

[Client]Game.Msg.MsgServerAllPartData -> [Client]d.G
{
	[Client]Game.Msg.MsgServerAllPartData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAllPartData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAllPartData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAllPartData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAllPartData::Type -> A
	System.Collections.Generic.List`1<Game.Msg.SCharEquipPart> [Client]System.Collections.Generic.List`1<Game.Msg.SCharEquipPart> Game.Msg.MsgServerAllPartData::m_oVecPartData -> A
}

[Client]Game.Msg.MsgServerAllEquipData -> [Client]d.g
{
	[Client]Game.Msg.MsgServerAllEquipData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAllEquipData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAllEquipData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAllEquipData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAllEquipData::Type -> A
	System.Collections.Generic.List`1<Game.Msg.SCharEquipItem> [Client]System.Collections.Generic.List`1<Game.Msg.SCharEquipItem> Game.Msg.MsgServerAllEquipData::m_oVecEquipData -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAllEquipData::m_bShowDress -> A
}

[Client]Game.Msg.MsgServerEquipAck -> [Client]d.H
{
	[Client]Game.Msg.MsgServerEquipAck::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerEquipAck::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerEquipAck::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerEquipAck::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEquipAck::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerEquipAck::m_btPart -> a
	Game.Msg.ClientSItemData [Client]Game.Msg.ClientSItemData Game.Msg.MsgServerEquipAck::m_stEquipData -> A
}

[Client]Game.Msg.MsgServerUnEquipAck -> [Client]d.h
{
	[Client]Game.Msg.MsgServerUnEquipAck::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerUnEquipAck::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerUnEquipAck::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerUnEquipAck::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerUnEquipAck::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerUnEquipAck::m_btPart -> a
}

[Client]Game.Msg.MsgServerEquipChange -> [Client]d.I
{
	[Client]Game.Msg.MsgServerEquipChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerEquipChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerEquipChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerEquipChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEquipChange::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEquipChange::m_uiPlayerID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEquipChange::m_uiItemID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerEquipChange::m_btPart -> a
}

[Client]Game.Msg.MsgClientUnEquip -> [Client]d.i
{
	[Client]Game.Msg.MsgClientUnEquip::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientUnEquip::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientUnEquip::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientUnEquip::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientUnEquip::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientUnEquip::m_btPart -> a
}

[Client]Game.Msg.MsgServerPartChange -> [Client]d.J
{
	[Client]Game.Msg.MsgServerPartChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPartChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPartChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPartChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPartChange::Type -> A
	Game.Msg.SCharEquipPart [Client]Game.Msg.SCharEquipPart Game.Msg.MsgServerPartChange::m_stPartData -> A
}

[Client]Game.Msg.MsgServerBoostPartResult -> [Client]d.j
{
	[Client]Game.Msg.MsgServerBoostPartResult::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerBoostPartResult::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerBoostPartResult::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerBoostPartResult::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerBoostPartResult::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerBoostPartResult::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientReqBoostPart -> [Client]d.K
{
	[Client]Game.Msg.MsgClientReqBoostPart::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqBoostPart::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqBoostPart::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBoostPart::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqBoostPart::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBoostPart::m_btPart -> a
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientReqBoostPart::m_bImprint -> A
}

[Client]Game.Msg.MsgClientReqPartInsertGem -> [Client]d.k
{
	[Client]Game.Msg.MsgClientReqPartInsertGem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqPartInsertGem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqPartInsertGem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqPartInsertGem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqPartInsertGem::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqPartInsertGem::m_btPart -> a
	System.Collections.Generic.List`1<Game.Msg.SGemSocketData> [Client]System.Collections.Generic.List`1<Game.Msg.SGemSocketData> Game.Msg.MsgClientReqPartInsertGem::m_oVecInsertList -> A
}

[Client]Game.Msg.MsgClientReqPartPickGem -> [Client]d.L
{
	[Client]Game.Msg.MsgClientReqPartPickGem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqPartPickGem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqPartPickGem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqPartPickGem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqPartPickGem::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqPartPickGem::m_btPart -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqPartPickGem::m_btSocket -> B
}

[Client]Game.Msg.MsgServerGemPartResult -> [Client]d.l
{
	[Client]Game.Msg.MsgServerGemPartResult::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerGemPartResult::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerGemPartResult::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerGemPartResult::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerGemPartResult::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerGemPartResult::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientReqSoulChange -> [Client]d.M
{
	[Client]Game.Msg.MsgClientReqSoulChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqSoulChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqSoulChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSoulChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqSoulChange::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqSoulChange::m_ulMainUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSoulChange::m_btMainIndex -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqSoulChange::m_ulSubUID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSoulChange::m_btSubIndex -> B
}

[Client]Game.Msg.MsgServerSoulChangeResult -> [Client]d.m
{
	[Client]Game.Msg.MsgServerSoulChangeResult::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSoulChangeResult::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSoulChangeResult::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSoulChangeResult::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSoulChangeResult::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerSoulChangeResult::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientLookCharInfo -> [Client]d.N
{
	[Client]Game.Msg.MsgClientLookCharInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientLookCharInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientLookCharInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientLookCharInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientLookCharInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientLookCharInfo::m_uiCharID -> A
}

[Client]Game.Msg.MsgServerLookCharInfo -> [Client]d.n
{
	[Client]Game.Msg.MsgServerLookCharInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerLookCharInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerLookCharInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerLookCharInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLookCharInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerLookCharInfo::m_uiCharID -> A
	System.String [Client]System.String Game.Msg.MsgServerLookCharInfo::m_strName -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLookCharInfo::m_usLevel -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerLookCharInfo::m_btProfession -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerLookCharInfo::m_btSex -> B
	System.Collections.Generic.List`1<Game.Msg.SCharEquipPart> [Client]System.Collections.Generic.List`1<Game.Msg.SCharEquipPart> Game.Msg.MsgServerLookCharInfo::m_oVecPartData -> A
	System.Collections.Generic.List`1<Game.Msg.SCharEquipItem> [Client]System.Collections.Generic.List`1<Game.Msg.SCharEquipItem> Game.Msg.MsgServerLookCharInfo::m_oVecEquipData -> A
	Game.Msg.ExpeditionShipEquipInfo [Client]Game.Msg.ExpeditionShipEquipInfo Game.Msg.MsgServerLookCharInfo::m_stExpeditionShipData -> A
}

[Client]Game.Msg.MsgClientReqMagicBox -> [Client]d.O
{
	[Client]Game.Msg.MsgClientReqMagicBox::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqMagicBox::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqMagicBox::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqMagicBox::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqMagicBox::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqMagicBox::m_uiFormulaID -> A
	System.UInt64[] [Client]System.UInt64[] Game.Msg.MsgClientReqMagicBox::m_aulMainUID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqMagicBox::m_ulSubUID -> A
}

[Client]Game.Msg.MsgServerMagicBoxResult -> [Client]d.o
{
	[Client]Game.Msg.MsgServerMagicBoxResult::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMagicBoxResult::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMagicBoxResult::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMagicBoxResult::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMagicBoxResult::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerMagicBoxResult::m_ulOutComeUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerMagicBoxResult::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientLookCharItem -> [Client]d.P
{
	[Client]Game.Msg.MsgClientLookCharItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientLookCharItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientLookCharItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientLookCharItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientLookCharItem::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientLookCharItem::m_uiCharID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientLookCharItem::m_ulItemGUID -> A
}

[Client]Game.Msg.MsgServerLookCharItem -> [Client]d.p
{
	[Client]Game.Msg.MsgServerLookCharItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerLookCharItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerLookCharItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerLookCharItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLookCharItem::Type -> A
	Game.Msg.ClientSItemData [Client]Game.Msg.ClientSItemData Game.Msg.MsgServerLookCharItem::m_stItemData -> A
}

[Client]Game.Msg.MsgClientReqStoreMoney -> [Client]d.Q
{
	[Client]Game.Msg.MsgClientReqStoreMoney::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqStoreMoney::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqStoreMoney::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqStoreMoney::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqStoreMoney::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqStoreMoney::m_uiMoney -> A
}

[Client]Game.Msg.MsgClientReqFetchMoney -> [Client]d.q
{
	[Client]Game.Msg.MsgClientReqFetchMoney::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqFetchMoney::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqFetchMoney::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqFetchMoney::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqFetchMoney::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqFetchMoney::m_uiMoney -> A
}

[Client]Game.Msg.MsgClientSetDressShow -> [Client]d.R
{
	[Client]Game.Msg.MsgClientSetDressShow::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientSetDressShow::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientSetDressShow::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientSetDressShow::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSetDressShow::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientSetDressShow::m_bShow -> A
}

[Client]Game.Msg.MsgServerSetDressShow -> [Client]d.r
{
	[Client]Game.Msg.MsgServerSetDressShow::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSetDressShow::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSetDressShow::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSetDressShow::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSetDressShow::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSetDressShow::m_uiCharID -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerSetDressShow::m_bShow -> A
}

[Client]Game.Msg.MsgClientLookPetInfo -> [Client]d.S
{
	[Client]Game.Msg.MsgClientLookPetInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientLookPetInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientLookPetInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientLookPetInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientLookPetInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientLookPetInfo::m_uiCharID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientLookPetInfo::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientLookPetInfo::m_ebtType -> a
}

[Client]Game.Msg.MsgServerLookPetInfo -> [Client]d.s
{
	[Client]Game.Msg.MsgServerLookPetInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerLookPetInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerLookPetInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerLookPetInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLookPetInfo::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerLookPetInfo::m_ebtResult -> a
	Game.Msg.ClientSPetData [Client]Game.Msg.ClientSPetData Game.Msg.MsgServerLookPetInfo::m_stPetData -> A
}

[Client]Game.Msg.MsgClientTransferRandSoul -> [Client]d.T
{
	[Client]Game.Msg.MsgClientTransferRandSoul::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientTransferRandSoul::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientTransferRandSoul::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientTransferRandSoul::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTransferRandSoul::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientTransferRandSoul::m_ulMainUID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientTransferRandSoul::m_ulSubUID -> a
}

[Client]Game.Msg.MsgServerTransferRandSoul -> [Client]d.t
{
	[Client]Game.Msg.MsgServerTransferRandSoul::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTransferRandSoul::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTransferRandSoul::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTransferRandSoul::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTransferRandSoul::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerTransferRandSoul::m_ebtResult -> a
}

[Client]Game.Msg.SItemChangeInfo -> [Client]d.U
{
	[Client]Game.Msg.SItemChangeInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SItemChangeInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SItemChangeInfo::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.SItemChangeInfo::m_uiItemID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.SItemChangeInfo::m_usCount -> A
	System.Boolean [Client]System.Boolean Game.Msg.SItemChangeInfo::m_bAdd -> A
}

[Client]Game.Msg.RankExpeditionInfo -> [Client]d.u
{
	[Client]Game.Msg.RankExpeditionInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.RankExpeditionInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.RankExpeditionInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.RankExpeditionInfo::m_btShipId -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.RankExpeditionInfo::m_usCombat -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.RankExpeditionInfo::m_usExplore -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.RankExpeditionInfo::m_usWisdom -> B
	System.Collections.Generic.List`1<Game.Msg.RankExpeditionMonsterData> [Client]System.Collections.Generic.List`1<Game.Msg.RankExpeditionMonsterData> Game.Msg.RankExpeditionInfo::m_oVecMonsterData -> A
}

[Client]Game.Msg.MonsterDropCD -> [Client]d.V
{
	[Client]Game.Msg.MonsterDropCD::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MonsterDropCD::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MonsterDropCD::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.MonsterDropCD::m_uiMonsterID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MonsterDropCD::m_uiMonsterDropCD -> a
}

[Client]Game.Msg.ClientRankData -> [Client]d.v
{
	[Client]Game.Msg.ClientRankData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientRankData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientRankData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ClientRankData::m_uiCharID -> A
	System.String [Client]System.String Game.Msg.ClientRankData::m_strName -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientRankData::m_uiRankValue -> a
	System.Byte [Client]System.Byte Game.Msg.ClientRankData::m_btProfession -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientRankData::m_uiReachTime -> B
}

[Client]Game.Msg.ClientMailData -> [Client]d.W
{
	[Client]Game.Msg.ClientMailData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientMailData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientMailData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ClientMailData::m_uiID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientMailData::m_uiSenderID -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientMailData::m_uiTargetID -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientMailData::m_uiCreateTime -> b
	System.String [Client]System.String Game.Msg.ClientMailData::m_strSenderName -> A
	System.String [Client]System.String Game.Msg.ClientMailData::m_strTitle -> a
	System.String [Client]System.String Game.Msg.ClientMailData::m_strContent -> B
	System.Boolean [Client]System.Boolean Game.Msg.ClientMailData::m_bNew -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientMailData::m_uiMoney -> C
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientMailData::m_uiGold -> c
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientMailData::m_uiExp -> D
	System.Collections.Generic.List`1<System.UInt64> [Client]System.Collections.Generic.List`1<System.UInt64> Game.Msg.ClientMailData::m_oVecItemIDVec -> A
	System.Collections.Generic.List`1<Game.Msg.ClientSItemData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientSItemData> Game.Msg.ClientMailData::m_oVecItemVec -> A
	System.Byte [Client]System.Byte Game.Msg.ClientMailData::m_ebtMailType -> A
	System.Byte [Client]System.Byte Game.Msg.ClientMailData::m_ebtMailState -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientMailData::m_uiPayNum -> d
}

[Client]Game.Msg.CharAttrChange -> [Client]d.w
{
	[Client]Game.Msg.CharAttrChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CharAttrChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CharAttrChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.CharAttrChange::m_ebtAttrType -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.CharAttrChange::m_uiAttrValue -> A
}

[Client]Game.Msg.ActivityRecord -> [Client]d.X
{
	[Client]Game.Msg.ActivityRecord::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ActivityRecord::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ActivityRecord::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ActivityRecord::m_uiID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ActivityRecord::m_uiNum -> a
	System.Single [Client]System.Single Game.Msg.ActivityRecord::m_fExpAddition -> A
}

[Client]Game.Logic.RankingList -> [Client]d.x
{
	[Client]Game.Logic.RankingList::get_Instance[0]( ) -> A
	[Client]Game.Logic.RankingList::get_CurType[0]( ) -> a
	[Client]Game.Logic.RankingList::set_CurType[1]( Game.Msg.ERankListType ) -> A
	[Client]Game.Logic.RankingList::get_CurPage[0]( ) -> B
	[Client]Game.Logic.RankingList::set_CurPage[1]( System.Int32 ) -> A
	[Client]Game.Logic.RankingList::get_RankingListDic[0]( ) -> b
	[Client]Game.Logic.RankingList::Reset[0]( ) -> C
	[Client]Game.Logic.RankingList::Update[0]( ) -> c
	[Client]Game.Logic.RankingList::CanSendReq[2]( Game.Msg.ERankListType, System.Int32 ) -> A
	[Client]Game.Logic.RankingList::SendClientReqRankListMsg[2]( Game.Msg.ERankListType, System.Int32 ) -> a
	[Client]Game.Logic.RankingList::OnMsgServerAckRankList[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.RankingList::SendMsgClientReqCharOnline[3]( Game.Msg.ERankListType, System.Int32, System.Collections.Generic.List`1<System.UInt32> ) -> A
	[Client]Game.Logic.RankingList::OnMsgServerAckCharOnline[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.RankingList::SendMsgClientReqRankExpeditionInfo[1]( System.UInt32 ) -> A
	[Client]Game.Logic.RankingList::OnMsgServerAckRankExpeditionInfo[1]( Game.Msg.RecvMsgPacket ) -> B

	[Client]Game.Logic.RankingList::.ctor[0]( ) skipped:  special name
	[Client]Game.Logic.RankingList::.cctor[0]( ) skipped:  special name

	Game.Logic.RankingList [Client]Game.Logic.RankingList Game.Logic.RankingList::m_Instance -> A
	System.Collections.Generic.Dictionary`2<Game.Msg.ERankListType,Game.Logic.RankingList/RankingListData> [Client]System.Collections.Generic.Dictionary`2<Game.Msg.ERankListType,Game.Logic.RankingList/RankingListData> Game.Logic.RankingList::m_DicRankingList -> A
	System.Boolean [Client]System.Boolean Game.Logic.RankingList::NeedClearData -> A
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Logic.RankingList::<CurType>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.Logic.RankingList::<CurPage>k__BackingField -> A

	Game.Logic.RankingList [Client]Game.Logic.RankingList Game.Logic.RankingList::Instance -> dropped
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Logic.RankingList::CurType -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.RankingList::CurPage -> dropped
	System.Collections.Generic.Dictionary`2<Game.Msg.ERankListType,Game.Logic.RankingList/RankingListData> [Client]System.Collections.Generic.Dictionary`2<Game.Msg.ERankListType,Game.Logic.RankingList/RankingListData> Game.Logic.RankingList::RankingListDic -> dropped
}

[Client]Game.Logic.RankingList/RankingListData -> [Client]d.x/Y
{

	[Client]Game.Logic.RankingList/RankingListData::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<Game.Msg.ClientRankData>> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<Game.Msg.ClientRankData>> Game.Logic.RankingList/RankingListData::RankDic -> A
	System.UInt16 [Client]System.UInt16 Game.Logic.RankingList/RankingListData::Rank -> A
	System.Int32 [Client]System.Int32 Game.Logic.RankingList/RankingListData::MaxPage -> A
}

[Client]Game.Logic.Mail -> [Client]d.y
{
	[Client]Game.Logic.Mail::get_Instance[0]( ) -> A
	[Client]Game.Logic.Mail::get_MailList[0]( ) -> a
	[Client]Game.Logic.Mail::get_SelectedMail[0]( ) -> B
	[Client]Game.Logic.Mail::set_SelectedMail[1]( Game.Msg.ClientMailData ) -> A
	[Client]Game.Logic.Mail::get_SelectedMailList[0]( ) -> b
	[Client]Game.Logic.Mail::set_SelectedMailList[1]( System.Collections.Generic.List`1<Game.Msg.ClientMailData> ) -> A
	[Client]Game.Logic.Mail::get_NewMail[0]( ) -> C
	[Client]Game.Logic.Mail::set_NewMail[1]( Game.Msg.ClientMailData ) -> a
	[Client]Game.Logic.Mail::get_TargetName[0]( ) -> c
	[Client]Game.Logic.Mail::set_TargetName[1]( System.String ) -> A
	[Client]Game.Logic.Mail::get_HasNewMail[0]( ) -> D
	[Client]Game.Logic.Mail::set_HasNewMail[1]( System.Boolean ) -> A
	[Client]Game.Logic.Mail::get_UnreadMailCount[0]( ) -> d
	[Client]Game.Logic.Mail::Reset[0]( ) -> E
	[Client]Game.Logic.Mail::OnMsgServerAckRefreshMail[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Mail::SortByCreateTime[2]( Game.Msg.ClientMailData, Game.Msg.ClientMailData ) -> A
	[Client]Game.Logic.Mail::OnMsgServerNotifyReceiveMail[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Mail::ReadMail[0]( ) -> e
	[Client]Game.Logic.Mail::OnMsgServerAckSendMail[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.Mail::SendDeleteMailReq[0]( ) -> F
	[Client]Game.Logic.Mail::OnMsgServerAckDeleteMail[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.Mail::SendGetMailAccessoryReq[0]( ) -> f
	[Client]Game.Logic.Mail::OnGetAccessory[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.Logic.Mail::OnMsgServerAckGetMailAccessory[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Logic.Mail::OnDelMail[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> a
	[Client]Game.Logic.Mail::DeleteMails[0]( ) -> G
	[Client]Game.Logic.Mail::OnMsgServerAckMassDeleteMail[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.Logic.Mail::CanDelMail[1]( Game.Msg.ClientMailData ) -> B
	[Client]Game.Logic.Mail::GetMail[1]( System.UInt32 ) -> A

	[Client]Game.Logic.Mail::.ctor[0]( ) skipped:  special name
	[Client]Game.Logic.Mail::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Logic.Mail::MAILMAX -> A
	Game.Logic.Mail [Client]Game.Logic.Mail Game.Logic.Mail::m_Instance -> A
	System.Collections.Generic.List`1<Game.Msg.ClientMailData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientMailData> Game.Logic.Mail::m_mailList -> A
	Game.Msg.ClientMailData [Client]Game.Msg.ClientMailData Game.Logic.Mail::m_selectedMail -> A
	System.Collections.Generic.List`1<Game.Msg.ClientMailData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientMailData> Game.Logic.Mail::m_selectedMailList -> a
	Game.Msg.ClientMailData [Client]Game.Msg.ClientMailData Game.Logic.Mail::m_newMail -> a
	System.String [Client]System.String Game.Logic.Mail::m_strTargetName -> A
	System.Boolean [Client]System.Boolean Game.Logic.Mail::m_hasNewMail -> A

	Game.Logic.Mail [Client]Game.Logic.Mail Game.Logic.Mail::Instance -> dropped
	System.Collections.Generic.List`1<Game.Msg.ClientMailData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientMailData> Game.Logic.Mail::MailList -> dropped
	Game.Msg.ClientMailData [Client]Game.Msg.ClientMailData Game.Logic.Mail::SelectedMail -> dropped
	System.Collections.Generic.List`1<Game.Msg.ClientMailData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientMailData> Game.Logic.Mail::SelectedMailList -> dropped
	Game.Msg.ClientMailData [Client]Game.Msg.ClientMailData Game.Logic.Mail::NewMail -> dropped
	System.String [Client]System.String Game.Logic.Mail::TargetName -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Mail::HasNewMail -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Mail::UnreadMailCount -> dropped
}

[Client]Game.Logic.Mail/<>c__DisplayClass2 -> [Client]d.y/Z
{
	[Client]Game.Logic.Mail/<>c__DisplayClass2::<OnMsgServerAckGetMailAccessory>b__0[1]( Game.Msg.ClientMailData ) -> A

	[Client]Game.Logic.Mail/<>c__DisplayClass2::.ctor[0]( ) skipped:  special name

	Game.Msg.MsgServerAckGetMailAccessory [Client]Game.Msg.MsgServerAckGetMailAccessory Game.Logic.Mail/<>c__DisplayClass2::msg -> A
}

[Client]Game.Logic.Mail/<>c__DisplayClass6 -> [Client]d.y/z
{
	[Client]Game.Logic.Mail/<>c__DisplayClass6::<OnMsgServerAckMassDeleteMail>b__4[1]( Game.Msg.ClientMailData ) -> A

	[Client]Game.Logic.Mail/<>c__DisplayClass6::.ctor[0]( ) skipped:  special name

	Game.Msg.MailDeleteResult [Client]Game.Msg.MailDeleteResult Game.Logic.Mail/<>c__DisplayClass6::result -> A
}

[Client]Game.SwipeGestureRecognizer -> [Client]E.A
{
	[Client]Game.SwipeGestureRecognizer::GetRequiredFingerCount[0]( ) -> A
	[Client]Game.SwipeGestureRecognizer::CanBegin[1]( Game.TouchList ) -> A
	[Client]Game.SwipeGestureRecognizer::OnBegin[1]( Game.TouchList ) -> a
	[Client]Game.SwipeGestureRecognizer::OnProcessing[1]( Game.TouchList ) -> B
	[Client]Game.SwipeGestureRecognizer::IsEnd[1]( Game.TouchList ) -> b
	[Client]Game.SwipeGestureRecognizer::add_OnSwipe[1]( .EventDelegate`1<Game.SwipeGestureRecognizer> ) -> A
	[Client]Game.SwipeGestureRecognizer::remove_OnSwipe[1]( .EventDelegate`1<Game.SwipeGestureRecognizer> ) -> a
	[Client]Game.SwipeGestureRecognizer::get_StartPos[0]( ) -> a
	[Client]Game.SwipeGestureRecognizer::set_StartPos[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.SwipeGestureRecognizer::get_EndPos[0]( ) -> B
	[Client]Game.SwipeGestureRecognizer::set_EndPos[1]( UnityEngine.Vector2 ) -> a

	[Client]Game.SwipeGestureRecognizer::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.SwipeGestureRecognizer::MaxDuration -> A
	System.Single [Client]System.Single Game.SwipeGestureRecognizer::MinDistance -> a
	Game.GestureRecognizer/EventDelegate`1<Game.SwipeGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.SwipeGestureRecognizer> Game.SwipeGestureRecognizer::OnSwipe -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.SwipeGestureRecognizer::<StartPos>k__BackingField -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.SwipeGestureRecognizer::<EndPos>k__BackingField -> a

	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.SwipeGestureRecognizer::StartPos -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.SwipeGestureRecognizer::EndPos -> dropped

	Game.GestureRecognizer/EventDelegate`1<Game.SwipeGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.SwipeGestureRecognizer> Game.SwipeGestureRecognizer::OnSwipe -> dropped
}

[Client]Game.PinchGestureRecognizer -> [Client]E.a
{
	[Client]Game.PinchGestureRecognizer::GetRequiredFingerCount[0]( ) -> A
	[Client]Game.PinchGestureRecognizer::CanBegin[1]( Game.TouchList ) -> A
	[Client]Game.PinchGestureRecognizer::OnBegin[1]( Game.TouchList ) -> a
	[Client]Game.PinchGestureRecognizer::OnProcessing[1]( Game.TouchList ) -> B
	[Client]Game.PinchGestureRecognizer::IsEnd[1]( Game.TouchList ) -> b
	[Client]Game.PinchGestureRecognizer::OnRecognized[1]( Game.TouchList ) -> C
	[Client]Game.PinchGestureRecognizer::add_OnPinch[1]( .EventDelegate`1<Game.PinchGestureRecognizer> ) -> A
	[Client]Game.PinchGestureRecognizer::remove_OnPinch[1]( .EventDelegate`1<Game.PinchGestureRecognizer> ) -> a
	[Client]Game.PinchGestureRecognizer::get_StartPos0[0]( ) -> a
	[Client]Game.PinchGestureRecognizer::set_StartPos0[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.PinchGestureRecognizer::get_StartPos1[0]( ) -> B
	[Client]Game.PinchGestureRecognizer::set_StartPos1[1]( UnityEngine.Vector2 ) -> a
	[Client]Game.PinchGestureRecognizer::get_CurPos0[0]( ) -> b
	[Client]Game.PinchGestureRecognizer::set_CurPos0[1]( UnityEngine.Vector2 ) -> B
	[Client]Game.PinchGestureRecognizer::get_CurPos1[0]( ) -> C
	[Client]Game.PinchGestureRecognizer::set_CurPos1[1]( UnityEngine.Vector2 ) -> b
	[Client]Game.PinchGestureRecognizer::get_DeltaDistance[0]( ) -> c
	[Client]Game.PinchGestureRecognizer::set_DeltaDistance[1]( System.Single ) -> A
	[Client]Game.PinchGestureRecognizer::get_StartDistance[0]( ) -> D
	[Client]Game.PinchGestureRecognizer::get_CurDistance[0]( ) -> d

	[Client]Game.PinchGestureRecognizer::.ctor[0]( ) skipped:  special name

	Game.GestureRecognizer/EventDelegate`1<Game.PinchGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.PinchGestureRecognizer> Game.PinchGestureRecognizer::OnPinch -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.PinchGestureRecognizer::<StartPos0>k__BackingField -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.PinchGestureRecognizer::<StartPos1>k__BackingField -> a
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.PinchGestureRecognizer::<CurPos0>k__BackingField -> B
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.PinchGestureRecognizer::<CurPos1>k__BackingField -> b
	System.Single [Client]System.Single Game.PinchGestureRecognizer::<DeltaDistance>k__BackingField -> A

	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.PinchGestureRecognizer::StartPos0 -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.PinchGestureRecognizer::StartPos1 -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.PinchGestureRecognizer::CurPos0 -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.PinchGestureRecognizer::CurPos1 -> dropped
	System.Single [Client]System.Single Game.PinchGestureRecognizer::DeltaDistance -> dropped
	System.Single [Client]System.Single Game.PinchGestureRecognizer::StartDistance -> dropped
	System.Single [Client]System.Single Game.PinchGestureRecognizer::CurDistance -> dropped

	Game.GestureRecognizer/EventDelegate`1<Game.PinchGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.PinchGestureRecognizer> Game.PinchGestureRecognizer::OnPinch -> dropped
}

[Client]Game.DataTradeCreate -> [Client]E.B
{
	[Client]Game.DataTradeCreate::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataTradeCreate::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataTradeCreate::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataTradeCreate::get_Type1[0]( ) -> A
	[Client]Game.DataTradeCreate::set_Type1[1]( System.Int32 ) -> A
	[Client]Game.DataTradeCreate::get_Type2[0]( ) -> a
	[Client]Game.DataTradeCreate::set_Type2[1]( System.Int32 ) -> a
	[Client]Game.DataTradeCreate::get_Name[0]( ) -> B
	[Client]Game.DataTradeCreate::set_Name[1]( System.String ) -> A
	[Client]Game.DataTradeCreate::get_Level[0]( ) -> b
	[Client]Game.DataTradeCreate::set_Level[1]( System.String ) -> a

	[Client]Game.DataTradeCreate::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataTradeCreate::<Type1>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataTradeCreate::<Type2>k__BackingField -> a
	System.String [Client]System.String Game.DataTradeCreate::<Name>k__BackingField -> A
	System.String [Client]System.String Game.DataTradeCreate::<Level>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataTradeCreate::Type1 -> dropped
	System.Int32 [Client]System.Int32 Game.DataTradeCreate::Type2 -> dropped
	System.String [Client]System.String Game.DataTradeCreate::Name -> dropped
	System.String [Client]System.String Game.DataTradeCreate::Level -> dropped
}

[Client]Game.DataTradeCreateManager -> [Client]E.b
{
	[Client]Game.DataTradeCreateManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataTradeCreateManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataTradeCreateManager::Clear[0]( ) -> A
	[Client]Game.DataTradeCreateManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataTradeCreateManager::GetDataByType1[1]( System.Int32 ) -> A
	[Client]Game.DataTradeCreateManager::GetDataListByType1[1]( System.Int32 ) -> a
	[Client]Game.DataTradeCreateManager::GetDataByType2[1]( System.Int32 ) -> B
	[Client]Game.DataTradeCreateManager::GetDataListByType2[1]( System.Int32 ) -> b
	[Client]Game.DataTradeCreateManager::GetDataByName[1]( System.String ) -> A
	[Client]Game.DataTradeCreateManager::GetDataListByName[1]( System.String ) -> a
	[Client]Game.DataTradeCreateManager::GetDataByLevel[1]( System.String ) -> B
	[Client]Game.DataTradeCreateManager::GetDataListByLevel[1]( System.String ) -> b
	[Client]Game.DataTradeCreateManager::get_Instance[0]( ) -> a
	[Client]Game.DataTradeCreateManager::get_DataList[0]( ) -> B
	[Client]Game.DataTradeCreateManager::get_Count[0]( ) -> b

	[Client]Game.DataTradeCreateManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataTradeCreateManager::.ctor[0]( ) skipped:  special name

	Game.DataTradeCreateManager [Client]Game.DataTradeCreateManager Game.DataTradeCreateManager::instance -> A
	System.Collections.Generic.List`1<Game.DataTradeCreate> [Client]System.Collections.Generic.List`1<Game.DataTradeCreate> Game.DataTradeCreateManager::dataList -> A

	Game.DataTradeCreateManager [Client]Game.DataTradeCreateManager Game.DataTradeCreateManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataTradeCreate> [Client]System.Collections.Generic.List`1<Game.DataTradeCreate> Game.DataTradeCreateManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataTradeCreateManager::Count -> dropped
}

[Client]Game.DataSkillPosition -> [Client]E.C
{
	[Client]Game.DataSkillPosition::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSkillPosition::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSkillPosition::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSkillPosition::get_Profession[0]( ) -> A
	[Client]Game.DataSkillPosition::set_Profession[1]( System.Int32 ) -> A
	[Client]Game.DataSkillPosition::get_Position[0]( ) -> a
	[Client]Game.DataSkillPosition::set_Position[1]( System.Int32 ) -> a
	[Client]Game.DataSkillPosition::get_SkillId[0]( ) -> B
	[Client]Game.DataSkillPosition::set_SkillId[1]( System.Int32 ) -> B

	[Client]Game.DataSkillPosition::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataSkillPosition::<Profession>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataSkillPosition::<Position>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataSkillPosition::<SkillId>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataSkillPosition::Profession -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkillPosition::Position -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkillPosition::SkillId -> dropped
}

[Client]Game.DataSkillPositionManager -> [Client]E.c
{
	[Client]Game.DataSkillPositionManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSkillPositionManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSkillPositionManager::Clear[0]( ) -> A
	[Client]Game.DataSkillPositionManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSkillPositionManager::GetDataByProfession[1]( System.Int32 ) -> A
	[Client]Game.DataSkillPositionManager::GetDataListByProfession[1]( System.Int32 ) -> a
	[Client]Game.DataSkillPositionManager::GetDataByPosition[1]( System.Int32 ) -> B
	[Client]Game.DataSkillPositionManager::GetDataListByPosition[1]( System.Int32 ) -> b
	[Client]Game.DataSkillPositionManager::GetDataBySkillId[1]( System.Int32 ) -> C
	[Client]Game.DataSkillPositionManager::GetDataListBySkillId[1]( System.Int32 ) -> c
	[Client]Game.DataSkillPositionManager::get_Instance[0]( ) -> a
	[Client]Game.DataSkillPositionManager::get_DataList[0]( ) -> B
	[Client]Game.DataSkillPositionManager::get_Count[0]( ) -> b

	[Client]Game.DataSkillPositionManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataSkillPositionManager::.ctor[0]( ) skipped:  special name

	Game.DataSkillPositionManager [Client]Game.DataSkillPositionManager Game.DataSkillPositionManager::instance -> A
	System.Collections.Generic.List`1<Game.DataSkillPosition> [Client]System.Collections.Generic.List`1<Game.DataSkillPosition> Game.DataSkillPositionManager::dataList -> A

	Game.DataSkillPositionManager [Client]Game.DataSkillPositionManager Game.DataSkillPositionManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataSkillPosition> [Client]System.Collections.Generic.List`1<Game.DataSkillPosition> Game.DataSkillPositionManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataSkillPositionManager::Count -> dropped
}

[Client]Game.DataMember -> [Client]E.D
{
	[Client]Game.DataMember::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMember::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMember::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMember::get_ID[0]( ) -> A
	[Client]Game.DataMember::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataMember::get_Type[0]( ) -> a
	[Client]Game.DataMember::set_Type[1]( System.Int32 ) -> a
	[Client]Game.DataMember::get_ItemID[0]( ) -> B
	[Client]Game.DataMember::set_ItemID[1]( System.Int32 ) -> B
	[Client]Game.DataMember::get_ItemNum[0]( ) -> b
	[Client]Game.DataMember::set_ItemNum[1]( System.Int32 ) -> b
	[Client]Game.DataMember::get_Clear[0]( ) -> C
	[Client]Game.DataMember::set_Clear[1]( System.Int32 ) -> C

	[Client]Game.DataMember::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataMember::<ID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataMember::<Type>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataMember::<ItemID>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataMember::<ItemNum>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataMember::<Clear>k__BackingField -> C

	System.Int32 [Client]System.Int32 Game.DataMember::ID -> dropped
	System.Int32 [Client]System.Int32 Game.DataMember::Type -> dropped
	System.Int32 [Client]System.Int32 Game.DataMember::ItemID -> dropped
	System.Int32 [Client]System.Int32 Game.DataMember::ItemNum -> dropped
	System.Int32 [Client]System.Int32 Game.DataMember::Clear -> dropped
}

[Client]Game.DataMemberManager -> [Client]E.d
{
	[Client]Game.DataMemberManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMemberManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMemberManager::Clear[0]( ) -> A
	[Client]Game.DataMemberManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMemberManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataMemberManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataMemberManager::GetDataByType[1]( System.Int32 ) -> B
	[Client]Game.DataMemberManager::GetDataListByType[1]( System.Int32 ) -> b
	[Client]Game.DataMemberManager::GetDataByItemID[1]( System.Int32 ) -> C
	[Client]Game.DataMemberManager::GetDataListByItemID[1]( System.Int32 ) -> c
	[Client]Game.DataMemberManager::GetDataByItemNum[1]( System.Int32 ) -> D
	[Client]Game.DataMemberManager::GetDataListByItemNum[1]( System.Int32 ) -> d
	[Client]Game.DataMemberManager::GetDataByClear[1]( System.Int32 ) -> E
	[Client]Game.DataMemberManager::GetDataListByClear[1]( System.Int32 ) -> e
	[Client]Game.DataMemberManager::get_Instance[0]( ) -> a
	[Client]Game.DataMemberManager::get_DataList[0]( ) -> B
	[Client]Game.DataMemberManager::get_Count[0]( ) -> b

	[Client]Game.DataMemberManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataMemberManager::.ctor[0]( ) skipped:  special name

	Game.DataMemberManager [Client]Game.DataMemberManager Game.DataMemberManager::instance -> A
	System.Collections.Generic.List`1<Game.DataMember> [Client]System.Collections.Generic.List`1<Game.DataMember> Game.DataMemberManager::dataList -> A

	Game.DataMemberManager [Client]Game.DataMemberManager Game.DataMemberManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataMember> [Client]System.Collections.Generic.List`1<Game.DataMember> Game.DataMemberManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataMemberManager::Count -> dropped
}

[Client]Game.DataFamilyRank -> [Client]E.E
{
	[Client]Game.DataFamilyRank::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFamilyRank::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFamilyRank::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFamilyRank::get_Rank[0]( ) -> A
	[Client]Game.DataFamilyRank::set_Rank[1]( System.Int32 ) -> A
	[Client]Game.DataFamilyRank::get_Name[0]( ) -> a
	[Client]Game.DataFamilyRank::set_Name[1]( System.String ) -> A
	[Client]Game.DataFamilyRank::get_Num[0]( ) -> B
	[Client]Game.DataFamilyRank::set_Num[1]( System.Int32 ) -> a
	[Client]Game.DataFamilyRank::get_Power[0]( ) -> b
	[Client]Game.DataFamilyRank::set_Power[1]( System.Int32 ) -> B
	[Client]Game.DataFamilyRank::get_Tip[0]( ) -> C
	[Client]Game.DataFamilyRank::set_Tip[1]( System.String ) -> a
	[Client]Game.DataFamilyRank::get_Disband[0]( ) -> c
	[Client]Game.DataFamilyRank::set_Disband[1]( System.Boolean ) -> A
	[Client]Game.DataFamilyRank::get_ChangeNotice[0]( ) -> D
	[Client]Game.DataFamilyRank::set_ChangeNotice[1]( System.Boolean ) -> a
	[Client]Game.DataFamilyRank::get_ChangeRank[0]( ) -> d
	[Client]Game.DataFamilyRank::set_ChangeRank[1]( System.Boolean ) -> B
	[Client]Game.DataFamilyRank::get_Kick[0]( ) -> E
	[Client]Game.DataFamilyRank::set_Kick[1]( System.Boolean ) -> b
	[Client]Game.DataFamilyRank::get_Invite[0]( ) -> e
	[Client]Game.DataFamilyRank::set_Invite[1]( System.Boolean ) -> C
	[Client]Game.DataFamilyRank::get_ChangeSelfAbout[0]( ) -> F
	[Client]Game.DataFamilyRank::set_ChangeSelfAbout[1]( System.Boolean ) -> c
	[Client]Game.DataFamilyRank::get_ChangeHireNewerNotice[0]( ) -> f
	[Client]Game.DataFamilyRank::set_ChangeHireNewerNotice[1]( System.Boolean ) -> D

	[Client]Game.DataFamilyRank::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataFamilyRank::<Rank>k__BackingField -> A
	System.String [Client]System.String Game.DataFamilyRank::<Name>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataFamilyRank::<Num>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataFamilyRank::<Power>k__BackingField -> B
	System.String [Client]System.String Game.DataFamilyRank::<Tip>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::<Disband>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::<ChangeNotice>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::<ChangeRank>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::<Kick>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::<Invite>k__BackingField -> C
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::<ChangeSelfAbout>k__BackingField -> c
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::<ChangeHireNewerNotice>k__BackingField -> D

	System.Int32 [Client]System.Int32 Game.DataFamilyRank::Rank -> dropped
	System.String [Client]System.String Game.DataFamilyRank::Name -> dropped
	System.Int32 [Client]System.Int32 Game.DataFamilyRank::Num -> dropped
	System.Int32 [Client]System.Int32 Game.DataFamilyRank::Power -> dropped
	System.String [Client]System.String Game.DataFamilyRank::Tip -> dropped
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::Disband -> dropped
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::ChangeNotice -> dropped
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::ChangeRank -> dropped
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::Kick -> dropped
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::Invite -> dropped
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::ChangeSelfAbout -> dropped
	System.Boolean [Client]System.Boolean Game.DataFamilyRank::ChangeHireNewerNotice -> dropped
}

[Client]Game.DataFamilyRankManager -> [Client]E.e
{
	[Client]Game.DataFamilyRankManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFamilyRankManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFamilyRankManager::Clear[0]( ) -> A
	[Client]Game.DataFamilyRankManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFamilyRankManager::GetDataByRank[1]( System.Int32 ) -> A
	[Client]Game.DataFamilyRankManager::GetDataListByRank[1]( System.Int32 ) -> a
	[Client]Game.DataFamilyRankManager::GetDataByName[1]( System.String ) -> A
	[Client]Game.DataFamilyRankManager::GetDataListByName[1]( System.String ) -> a
	[Client]Game.DataFamilyRankManager::GetDataByNum[1]( System.Int32 ) -> B
	[Client]Game.DataFamilyRankManager::GetDataListByNum[1]( System.Int32 ) -> b
	[Client]Game.DataFamilyRankManager::GetDataByPower[1]( System.Int32 ) -> C
	[Client]Game.DataFamilyRankManager::GetDataListByPower[1]( System.Int32 ) -> c
	[Client]Game.DataFamilyRankManager::GetDataByTip[1]( System.String ) -> B
	[Client]Game.DataFamilyRankManager::GetDataListByTip[1]( System.String ) -> b
	[Client]Game.DataFamilyRankManager::GetDataByDisband[1]( System.Boolean ) -> A
	[Client]Game.DataFamilyRankManager::GetDataListByDisband[1]( System.Boolean ) -> a
	[Client]Game.DataFamilyRankManager::GetDataByChangeNotice[1]( System.Boolean ) -> B
	[Client]Game.DataFamilyRankManager::GetDataListByChangeNotice[1]( System.Boolean ) -> b
	[Client]Game.DataFamilyRankManager::GetDataByChangeRank[1]( System.Boolean ) -> C
	[Client]Game.DataFamilyRankManager::GetDataListByChangeRank[1]( System.Boolean ) -> c
	[Client]Game.DataFamilyRankManager::GetDataByKick[1]( System.Boolean ) -> D
	[Client]Game.DataFamilyRankManager::GetDataListByKick[1]( System.Boolean ) -> d
	[Client]Game.DataFamilyRankManager::GetDataByInvite[1]( System.Boolean ) -> E
	[Client]Game.DataFamilyRankManager::GetDataListByInvite[1]( System.Boolean ) -> e
	[Client]Game.DataFamilyRankManager::GetDataByChangeSelfAbout[1]( System.Boolean ) -> F
	[Client]Game.DataFamilyRankManager::GetDataListByChangeSelfAbout[1]( System.Boolean ) -> f
	[Client]Game.DataFamilyRankManager::GetDataByChangeHireNewerNotice[1]( System.Boolean ) -> G
	[Client]Game.DataFamilyRankManager::GetDataListByChangeHireNewerNotice[1]( System.Boolean ) -> g
	[Client]Game.DataFamilyRankManager::get_Instance[0]( ) -> a
	[Client]Game.DataFamilyRankManager::get_DataList[0]( ) -> B
	[Client]Game.DataFamilyRankManager::get_Count[0]( ) -> b

	[Client]Game.DataFamilyRankManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataFamilyRankManager::.ctor[0]( ) skipped:  special name

	Game.DataFamilyRankManager [Client]Game.DataFamilyRankManager Game.DataFamilyRankManager::instance -> A
	System.Collections.Generic.List`1<Game.DataFamilyRank> [Client]System.Collections.Generic.List`1<Game.DataFamilyRank> Game.DataFamilyRankManager::dataList -> A

	Game.DataFamilyRankManager [Client]Game.DataFamilyRankManager Game.DataFamilyRankManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataFamilyRank> [Client]System.Collections.Generic.List`1<Game.DataFamilyRank> Game.DataFamilyRankManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataFamilyRankManager::Count -> dropped
}

[Client]Game.DataAwardActivity -> [Client]E.F
{
	[Client]Game.DataAwardActivity::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAwardActivity::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAwardActivity::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAwardActivity::get_Value[0]( ) -> A
	[Client]Game.DataAwardActivity::set_Value[1]( System.Int32 ) -> A
	[Client]Game.DataAwardActivity::get_ItemId[0]( ) -> a
	[Client]Game.DataAwardActivity::set_ItemId[1]( System.Int32 ) -> a

	[Client]Game.DataAwardActivity::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataAwardActivity::<Value>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataAwardActivity::<ItemId>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataAwardActivity::Value -> dropped
	System.Int32 [Client]System.Int32 Game.DataAwardActivity::ItemId -> dropped
}

[Client]Game.DataAwardActivityManager -> [Client]E.f
{
	[Client]Game.DataAwardActivityManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAwardActivityManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAwardActivityManager::Clear[0]( ) -> A
	[Client]Game.DataAwardActivityManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAwardActivityManager::GetDataByValue[1]( System.Int32 ) -> A
	[Client]Game.DataAwardActivityManager::GetDataListByValue[1]( System.Int32 ) -> a
	[Client]Game.DataAwardActivityManager::GetDataByItemId[1]( System.Int32 ) -> B
	[Client]Game.DataAwardActivityManager::GetDataListByItemId[1]( System.Int32 ) -> b
	[Client]Game.DataAwardActivityManager::get_Instance[0]( ) -> a
	[Client]Game.DataAwardActivityManager::get_DataList[0]( ) -> B
	[Client]Game.DataAwardActivityManager::get_Count[0]( ) -> b

	[Client]Game.DataAwardActivityManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataAwardActivityManager::.ctor[0]( ) skipped:  special name

	Game.DataAwardActivityManager [Client]Game.DataAwardActivityManager Game.DataAwardActivityManager::instance -> A
	System.Collections.Generic.List`1<Game.DataAwardActivity> [Client]System.Collections.Generic.List`1<Game.DataAwardActivity> Game.DataAwardActivityManager::dataList -> A

	Game.DataAwardActivityManager [Client]Game.DataAwardActivityManager Game.DataAwardActivityManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataAwardActivity> [Client]System.Collections.Generic.List`1<Game.DataAwardActivity> Game.DataAwardActivityManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataAwardActivityManager::Count -> dropped
}

[Client]Game.GameConfig -> [Client]E.G
{
	[Client]Game.GameConfig::get_Instance[0]( ) -> A
	[Client]Game.GameConfig::get_AcceptableTaskEffectId[0]( ) -> a
	[Client]Game.GameConfig::set_AcceptableTaskEffectId[1]( System.Int32 ) -> A
	[Client]Game.GameConfig::get_FinishedTaskEffectId[0]( ) -> B
	[Client]Game.GameConfig::set_FinishedTaskEffectId[1]( System.Int32 ) -> a
	[Client]Game.GameConfig::get_UnFinishTaskEffectId[0]( ) -> b
	[Client]Game.GameConfig::set_UnFinishTaskEffectId[1]( System.Int32 ) -> B
	[Client]Game.GameConfig::get_UnAcceptableTaskEffectId[0]( ) -> C
	[Client]Game.GameConfig::set_UnAcceptableTaskEffectId[1]( System.Int32 ) -> b
	[Client]Game.GameConfig::get_LoginDir[0]( ) -> c
	[Client]Game.GameConfig::set_LoginDir[1]( System.Int32 ) -> C
	[Client]Game.GameConfig::get_ReconnectPeriod[0]( ) -> D
	[Client]Game.GameConfig::set_ReconnectPeriod[1]( System.Single ) -> A
	[Client]Game.GameConfig::get_ReconnectCount[0]( ) -> d
	[Client]Game.GameConfig::set_ReconnectCount[1]( System.Single ) -> a
	[Client]Game.GameConfig::get_PeriodToPing[0]( ) -> E
	[Client]Game.GameConfig::set_PeriodToPing[1]( System.Single ) -> B
	[Client]Game.GameConfig::get_PingInteval[0]( ) -> e
	[Client]Game.GameConfig::set_PingInteval[1]( System.Single ) -> b
	[Client]Game.GameConfig::get_PingCount[0]( ) -> F
	[Client]Game.GameConfig::set_PingCount[1]( System.Int32 ) -> c
	[Client]Game.GameConfig::get_TipIncrementSize[0]( ) -> f
	[Client]Game.GameConfig::set_TipIncrementSize[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.GameConfig::get_TipSameWidth[0]( ) -> G
	[Client]Game.GameConfig::set_TipSameWidth[1]( System.Boolean ) -> A
	[Client]Game.GameConfig::get_DelayToShowRating[0]( ) -> g
	[Client]Game.GameConfig::set_DelayToShowRating[1]( System.Single ) -> C
	[Client]Game.GameConfig::get_DelayToShowAward[0]( ) -> H
	[Client]Game.GameConfig::set_DelayToShowAward[1]( System.Single ) -> c
	[Client]Game.GameConfig::get_ConcurrentMaxCount[0]( ) -> h
	[Client]Game.GameConfig::set_ConcurrentMaxCount[1]( System.Int32 ) -> D
	[Client]Game.GameConfig::get_PayMailIcon[0]( ) -> I
	[Client]Game.GameConfig::set_PayMailIcon[1]( System.String ) -> A
	[Client]Game.GameConfig::get_CommonMailIcon[0]( ) -> i
	[Client]Game.GameConfig::set_CommonMailIcon[1]( System.String ) -> a
	[Client]Game.GameConfig::get_AccessoryMailIcon[0]( ) -> J
	[Client]Game.GameConfig::set_AccessoryMailIcon[1]( System.String ) -> B
	[Client]Game.GameConfig::get_ReadMailAlpha[0]( ) -> j
	[Client]Game.GameConfig::set_ReadMailAlpha[1]( System.Single ) -> D
	[Client]Game.GameConfig::get_PayCallBackUrlFor360[0]( ) -> K
	[Client]Game.GameConfig::set_PayCallBackUrlFor360[1]( System.String ) -> b
	[Client]Game.GameConfig::get_Badge1[0]( ) -> k
	[Client]Game.GameConfig::set_Badge1[1]( System.String ) -> C
	[Client]Game.GameConfig::get_Badge2[0]( ) -> L
	[Client]Game.GameConfig::set_Badge2[1]( System.String ) -> c
	[Client]Game.GameConfig::get_Badge3[0]( ) -> l
	[Client]Game.GameConfig::set_Badge3[1]( System.String ) -> D
	[Client]Game.GameConfig::get_Badge4[0]( ) -> M
	[Client]Game.GameConfig::set_Badge4[1]( System.String ) -> d
	[Client]Game.GameConfig::get_SoulLevelMulti0[0]( ) -> m
	[Client]Game.GameConfig::set_SoulLevelMulti0[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.GameConfig::get_SoulLevelMulti1[0]( ) -> N
	[Client]Game.GameConfig::set_SoulLevelMulti1[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.GameConfig::get_SoulLevelMulti2[0]( ) -> n
	[Client]Game.GameConfig::set_SoulLevelMulti2[1]( System.Collections.Generic.List`1<System.Int32> ) -> B
	[Client]Game.GameConfig::get_ResetYear[0]( ) -> O
	[Client]Game.GameConfig::set_ResetYear[1]( System.Int32 ) -> d
	[Client]Game.GameConfig::get_ResetMonth[0]( ) -> o
	[Client]Game.GameConfig::set_ResetMonth[1]( System.Int32 ) -> E
	[Client]Game.GameConfig::get_ResetDay[0]( ) -> P
	[Client]Game.GameConfig::set_ResetDay[1]( System.Int32 ) -> e
	[Client]Game.GameConfig::get_UpdateMinimap[0]( ) -> p
	[Client]Game.GameConfig::set_UpdateMinimap[1]( System.Boolean ) -> a
	[Client]Game.GameConfig::get_HideNpc[0]( ) -> Q
	[Client]Game.GameConfig::set_HideNpc[1]( System.Boolean ) -> B
	[Client]Game.GameConfig::get_HideNpcEffect[0]( ) -> q
	[Client]Game.GameConfig::set_HideNpcEffect[1]( System.Boolean ) -> b
	[Client]Game.GameConfig::get_PrizeShowPetSlkID[0]( ) -> R
	[Client]Game.GameConfig::set_PrizeShowPetSlkID[1]( System.UInt32 ) -> A
	[Client]Game.GameConfig::get_AppStoreAppIdForPhoneVersion[0]( ) -> r
	[Client]Game.GameConfig::set_AppStoreAppIdForPhoneVersion[1]( System.Int32 ) -> F
	[Client]Game.GameConfig::get_AppStoreAppIdForPadVersion[0]( ) -> S
	[Client]Game.GameConfig::set_AppStoreAppIdForPadVersion[1]( System.Int32 ) -> f
	[Client]Game.GameConfig::get_CommentGameTaskId[0]( ) -> s
	[Client]Game.GameConfig::set_CommentGameTaskId[1]( System.Int32 ) -> G
	[Client]Game.GameConfig::get_Check512MDevice[0]( ) -> T
	[Client]Game.GameConfig::set_Check512MDevice[1]( System.Boolean ) -> C
	[Client]Game.GameConfig::Init[0]( ) -> t
	[Client]Game.GameConfig::Get[1]( System.String ) -> E
	[Client]Game.GameConfig::CanAwardTelephoneFareByTime[0]( ) -> U
	[Client]Game.GameConfig::ParseConfig[2]( System.String, System.String ) -> A

	[Client]Game.GameConfig::.cctor[0]( ) skipped:  special name
	[Client]Game.GameConfig::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.GameConfig::m_FilePath -> A
	System.Collections.Generic.Dictionary`2<System.String,System.String> [Client]System.Collections.Generic.Dictionary`2<System.String,System.String> Game.GameConfig::m_Configs -> A
	Game.GameConfig [Client]Game.GameConfig Game.GameConfig::m_Instance -> A
	System.DateTime [Client]System.DateTime Game.GameConfig::m_FareStartTime -> A
	System.DateTime [Client]System.DateTime Game.GameConfig::m_FareEndTime -> a
	System.Int32 [Client]System.Int32 Game.GameConfig::<AcceptableTaskEffectId>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.GameConfig::<FinishedTaskEffectId>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.GameConfig::<UnFinishTaskEffectId>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.GameConfig::<UnAcceptableTaskEffectId>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.GameConfig::<LoginDir>k__BackingField -> C
	System.Single [Client]System.Single Game.GameConfig::<ReconnectPeriod>k__BackingField -> A
	System.Single [Client]System.Single Game.GameConfig::<ReconnectCount>k__BackingField -> a
	System.Single [Client]System.Single Game.GameConfig::<PeriodToPing>k__BackingField -> B
	System.Single [Client]System.Single Game.GameConfig::<PingInteval>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.GameConfig::<PingCount>k__BackingField -> c
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.GameConfig::<TipIncrementSize>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.GameConfig::<TipSameWidth>k__BackingField -> A
	System.Single [Client]System.Single Game.GameConfig::<DelayToShowRating>k__BackingField -> C
	System.Single [Client]System.Single Game.GameConfig::<DelayToShowAward>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.GameConfig::<ConcurrentMaxCount>k__BackingField -> D
	System.String [Client]System.String Game.GameConfig::<PayMailIcon>k__BackingField -> a
	System.String [Client]System.String Game.GameConfig::<CommonMailIcon>k__BackingField -> B
	System.String [Client]System.String Game.GameConfig::<AccessoryMailIcon>k__BackingField -> b
	System.Single [Client]System.Single Game.GameConfig::<ReadMailAlpha>k__BackingField -> D
	System.String [Client]System.String Game.GameConfig::<PayCallBackUrlFor360>k__BackingField -> C
	System.String [Client]System.String Game.GameConfig::<Badge1>k__BackingField -> c
	System.String [Client]System.String Game.GameConfig::<Badge2>k__BackingField -> D
	System.String [Client]System.String Game.GameConfig::<Badge3>k__BackingField -> d
	System.String [Client]System.String Game.GameConfig::<Badge4>k__BackingField -> E
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.GameConfig::<SoulLevelMulti0>k__BackingField -> A
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.GameConfig::<SoulLevelMulti1>k__BackingField -> a
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.GameConfig::<SoulLevelMulti2>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.GameConfig::<ResetYear>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.GameConfig::<ResetMonth>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.GameConfig::<ResetDay>k__BackingField -> e
	System.Boolean [Client]System.Boolean Game.GameConfig::<UpdateMinimap>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.GameConfig::<HideNpc>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.GameConfig::<HideNpcEffect>k__BackingField -> b
	System.UInt32 [Client]System.UInt32 Game.GameConfig::<PrizeShowPetSlkID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.GameConfig::<AppStoreAppIdForPhoneVersion>k__BackingField -> F
	System.Int32 [Client]System.Int32 Game.GameConfig::<AppStoreAppIdForPadVersion>k__BackingField -> f
	System.Int32 [Client]System.Int32 Game.GameConfig::<CommentGameTaskId>k__BackingField -> G
	System.Boolean [Client]System.Boolean Game.GameConfig::<Check512MDevice>k__BackingField -> C

	Game.GameConfig [Client]Game.GameConfig Game.GameConfig::Instance -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::AcceptableTaskEffectId -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::FinishedTaskEffectId -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::UnFinishTaskEffectId -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::UnAcceptableTaskEffectId -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::LoginDir -> dropped
	System.Single [Client]System.Single Game.GameConfig::ReconnectPeriod -> dropped
	System.Single [Client]System.Single Game.GameConfig::ReconnectCount -> dropped
	System.Single [Client]System.Single Game.GameConfig::PeriodToPing -> dropped
	System.Single [Client]System.Single Game.GameConfig::PingInteval -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::PingCount -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.GameConfig::TipIncrementSize -> dropped
	System.Boolean [Client]System.Boolean Game.GameConfig::TipSameWidth -> dropped
	System.Single [Client]System.Single Game.GameConfig::DelayToShowRating -> dropped
	System.Single [Client]System.Single Game.GameConfig::DelayToShowAward -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::ConcurrentMaxCount -> dropped
	System.String [Client]System.String Game.GameConfig::PayMailIcon -> dropped
	System.String [Client]System.String Game.GameConfig::CommonMailIcon -> dropped
	System.String [Client]System.String Game.GameConfig::AccessoryMailIcon -> dropped
	System.Single [Client]System.Single Game.GameConfig::ReadMailAlpha -> dropped
	System.String [Client]System.String Game.GameConfig::PayCallBackUrlFor360 -> dropped
	System.String [Client]System.String Game.GameConfig::Badge1 -> dropped
	System.String [Client]System.String Game.GameConfig::Badge2 -> dropped
	System.String [Client]System.String Game.GameConfig::Badge3 -> dropped
	System.String [Client]System.String Game.GameConfig::Badge4 -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.GameConfig::SoulLevelMulti0 -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.GameConfig::SoulLevelMulti1 -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.GameConfig::SoulLevelMulti2 -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::ResetYear -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::ResetMonth -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::ResetDay -> dropped
	System.Boolean [Client]System.Boolean Game.GameConfig::UpdateMinimap -> dropped
	System.Boolean [Client]System.Boolean Game.GameConfig::HideNpc -> dropped
	System.Boolean [Client]System.Boolean Game.GameConfig::HideNpcEffect -> dropped
	System.UInt32 [Client]System.UInt32 Game.GameConfig::PrizeShowPetSlkID -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::AppStoreAppIdForPhoneVersion -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::AppStoreAppIdForPadVersion -> dropped
	System.Int32 [Client]System.Int32 Game.GameConfig::CommentGameTaskId -> dropped
	System.Boolean [Client]System.Boolean Game.GameConfig::Check512MDevice -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream -> [Client]E.g
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Finish[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::get_IsStreamOwner[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::get_CanPatchEntries[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::get_Password[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::set_Password[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::EncryptBlock[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::InitializePassword[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::InitializeAESPassword[4]( ICSharpCode.SharpZipLib.Zip.ZipEntry, System.String, System.Byte[]&, System.Byte[]& ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Deflate[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::GetAuthCodeIfAES[0]( ) -> c

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::ReadByte[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::WriteByte[1]( System.Byte ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::BeginWrite[5]( System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::.ctor[2]( System.IO.Stream, ICSharpCode.SharpZipLib.Zip.Compression.Deflater ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::.ctor[3]( System.IO.Stream, ICSharpCode.SharpZipLib.Zip.Compression.Deflater, System.Int32 ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::BeginRead[5]( System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object ) skipped:  external base class or interface

	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::password -> A
	System.Security.Cryptography.ICryptoTransform [Client]System.Security.Cryptography.ICryptoTransform ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::cryptoTransform_ -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::AESAuthCode -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::buffer_ -> a
	ICSharpCode.SharpZipLib.Zip.Compression.Deflater [Client]ICSharpCode.SharpZipLib.Zip.Compression.Deflater ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::deflater_ -> A
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::baseOutputStream_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::isClosed_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::isStreamOwner_ -> a
	System.Security.Cryptography.RNGCryptoServiceProvider [Client]System.Security.Cryptography.RNGCryptoServiceProvider ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::_aesRnd -> A

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::IsStreamOwner -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::CanPatchEntries -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Password -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::CanSeek -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::CanWrite -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Length -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream::Position -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream -> [Client]E.H
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::Finish[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::get_IsFinished[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::SetComment[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::SetLevel[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::GetLevel[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::get_UseZip64[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::set_UseZip64[1]( ICSharpCode.SharpZipLib.Zip.UseZip64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::WriteLeShort[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::WriteLeInt[1]( System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::WriteLeLong[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::PutNextEntry[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::CloseEntry[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::WriteEncryptionHeader[1]( System.Int64 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::AddExtraDataAES[2]( ICSharpCode.SharpZipLib.Zip.ZipEntry, ICSharpCode.SharpZipLib.Zip.ZipExtraData ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::WriteAESHeader[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::CopyAndEncrypt[3]( System.Byte[], System.Int32, System.Int32 ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream::.ctor[2]( System.IO.Stream, System.Int32 ) skipped:  special name

	System.Collections.ArrayList [Client]System.Collections.ArrayList ICSharpCode.SharpZipLib.Zip.ZipOutputStream::entries -> A
	ICSharpCode.SharpZipLib.Checksums.Crc32 [Client]ICSharpCode.SharpZipLib.Checksums.Crc32 ICSharpCode.SharpZipLib.Zip.ZipOutputStream::crc -> A
	ICSharpCode.SharpZipLib.Zip.ZipEntry [Client]ICSharpCode.SharpZipLib.Zip.ZipEntry ICSharpCode.SharpZipLib.Zip.ZipOutputStream::curEntry -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipOutputStream::defaultCompressionLevel -> A
	ICSharpCode.SharpZipLib.Zip.CompressionMethod [Client]ICSharpCode.SharpZipLib.Zip.CompressionMethod ICSharpCode.SharpZipLib.Zip.ZipOutputStream::curMethod -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipOutputStream::size -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipOutputStream::offset -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.ZipOutputStream::zipComment -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipOutputStream::patchEntryHeader -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipOutputStream::crcPatchPos -> B
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.ZipOutputStream::sizePatchPos -> b
	ICSharpCode.SharpZipLib.Zip.UseZip64 [Client]ICSharpCode.SharpZipLib.Zip.UseZip64 ICSharpCode.SharpZipLib.Zip.ZipOutputStream::useZip64_ -> A

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipOutputStream::IsFinished -> dropped
	ICSharpCode.SharpZipLib.Zip.UseZip64 [Client]ICSharpCode.SharpZipLib.Zip.UseZip64 ICSharpCode.SharpZipLib.Zip.ZipOutputStream::UseZip64 -> dropped
}

[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream -> [Client]E.h
{
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::get_IsStreamOwner[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::SetEntryFactory[1]( ICSharpCode.SharpZipLib.Tar.TarInputStream/IEntryFactory ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::get_RecordSize[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::GetRecordSize[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::get_Available[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::Skip[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::get_IsMarkSupported[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::Mark[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::Reset[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::GetNextEntry[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::CopyEntryContents[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::SkipToNextEntry[0]( ) -> d

	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::ReadByte[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::WriteByte[1]( System.Byte ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream::.ctor[2]( System.IO.Stream, System.Int32 ) skipped:  special name

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarInputStream::hasHitEOF -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarInputStream::entrySize -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarInputStream::entryOffset -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Tar.TarInputStream::readBuffer -> A
	ICSharpCode.SharpZipLib.Tar.TarBuffer [Client]ICSharpCode.SharpZipLib.Tar.TarBuffer ICSharpCode.SharpZipLib.Tar.TarInputStream::tarBuffer -> A
	ICSharpCode.SharpZipLib.Tar.TarEntry [Client]ICSharpCode.SharpZipLib.Tar.TarEntry ICSharpCode.SharpZipLib.Tar.TarInputStream::currentEntry -> A
	ICSharpCode.SharpZipLib.Tar.TarInputStream/IEntryFactory [Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/IEntryFactory ICSharpCode.SharpZipLib.Tar.TarInputStream::entryFactory -> A
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Tar.TarInputStream::inputStream -> A

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarInputStream::IsStreamOwner -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarInputStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarInputStream::CanSeek -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarInputStream::CanWrite -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarInputStream::Length -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarInputStream::Position -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarInputStream::RecordSize -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarInputStream::Available -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarInputStream::IsMarkSupported -> dropped
}

[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream -> [Client]E.j
{
	[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream::Finish[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream::SetLevel[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream::GetLevel[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream::WriteHeader[0]( ) -> B

	[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream::.ctor[2]( System.IO.Stream, System.Int32 ) skipped:  special name

	ICSharpCode.SharpZipLib.Checksums.Crc32 [Client]ICSharpCode.SharpZipLib.Checksums.Crc32 ICSharpCode.SharpZipLib.GZip.GZipOutputStream::crc -> A
	ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState [Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState ICSharpCode.SharpZipLib.GZip.GZipOutputStream::state_ -> A
}

[Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState -> [Client]E.j/K
{
	ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState [Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState::Header -> A
	ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState [Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState::Footer -> a
	ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState [Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState::Finished -> B
	ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState [Client]ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState::Closed -> b

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.GZip.GZipOutputStream/OutputState::value__ skipped:  filtered
}

[Client]Game.Skill -> [Client]E.k
{
	[Client]Game.Skill::get_Data[0]( ) -> A
	[Client]Game.Skill::set_Data[1]( Game.DataSkill ) -> A
	[Client]Game.Skill::GetIntonateEffect[1]( System.Byte ) -> A
	[Client]Game.Skill::GetAttackEffect[1]( System.Byte ) -> a
	[Client]Game.Skill::GetSkillEffect[1]( System.Byte ) -> B
	[Client]Game.Skill::GetTargetEffect[1]( System.Byte ) -> b

	[Client]Game.Skill::.ctor[0]( ) skipped:  special name

	Game.DataSkill [Client]Game.DataSkill Game.Skill::<Data>k__BackingField -> A

	Game.DataSkill [Client]Game.DataSkill Game.Skill::Data -> dropped
}

[Client]Game.SkillManager -> [Client]E.L
{
	[Client]Game.SkillManager::Load[0]( ) -> A
	[Client]Game.SkillManager::GetSkill[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.SkillManager::GetSkill[1]( System.Int32 ) -> A
	[Client]Game.SkillManager::get_Instance[0]( ) -> a

	[Client]Game.SkillManager::.ctor[0]( ) skipped:  special name
	[Client]Game.SkillManager::.cctor[0]( ) skipped:  special name

	Game.SkillManager [Client]Game.SkillManager Game.SkillManager::instance -> A
	System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<Game.Skill>> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<Game.Skill>> Game.SkillManager::skills -> A

	Game.SkillManager [Client]Game.SkillManager Game.SkillManager::Instance -> dropped
}

[Client]Game.ResourceLoadType -> [Client]E.M
{
	Game.ResourceLoadType [Client]Game.ResourceLoadType Game.ResourceLoadType::Default -> A
	Game.ResourceLoadType [Client]Game.ResourceLoadType Game.ResourceLoadType::Persistent -> a
	Game.ResourceLoadType [Client]Game.ResourceLoadType Game.ResourceLoadType::Cache -> B
	Game.ResourceLoadType [Client]Game.ResourceLoadType Game.ResourceLoadType::InstantiateQueque -> b
	Game.ResourceLoadType [Client]Game.ResourceLoadType Game.ResourceLoadType::Immediate -> C
	Game.ResourceLoadType [Client]Game.ResourceLoadType Game.ResourceLoadType::ImmediateIfPossible -> c
	Game.ResourceLoadType [Client]Game.ResourceLoadType Game.ResourceLoadType::LoadObjectAsync -> D

	System.Int32 [Client]System.Int32 Game.ResourceLoadType::value__ skipped:  filtered
}

[Client]Game.ResourceLoadTask -> [Client]E.m
{

	[Client]Game.ResourceLoadTask::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.ResourceLoadTask::m_Id -> A
	System.Int32 [Client]System.Int32 Game.ResourceLoadTask::m_LoadType -> A
	System.String [Client]System.String Game.ResourceLoadTask::m_File -> A
	System.Action`1<UnityEngine.Object> [Client]System.Action`1<UnityEngine.Object> Game.ResourceLoadTask::m_Actions -> A
}

[Client]Game.ResourceCachedTask -> [Client]E.N
{

	[Client]Game.ResourceCachedTask::.ctor[0]( ) skipped:  special name

	UnityEngine.Object [Client]UnityEngine.Object Game.ResourceCachedTask::m_Object -> A
	System.Single [Client]System.Single Game.ResourceCachedTask::m_LastUseTime -> A
}

[Client]Game.ResourceIntantiateTask -> [Client]E.n
{

	[Client]Game.ResourceIntantiateTask::.ctor[0]( ) skipped:  special name

	UnityEngine.Object [Client]UnityEngine.Object Game.ResourceIntantiateTask::m_Object -> A
	System.Action`1<UnityEngine.Object> [Client]System.Action`1<UnityEngine.Object> Game.ResourceIntantiateTask::m_Action -> A
}

[Client]Game.ResourceManager -> [Client]E.O
{
	[Client]Game.ResourceManager::get_DelayLoad[0]( ) -> A
	[Client]Game.ResourceManager::set_DelayLoad[1]( System.Boolean ) -> A
	[Client]Game.ResourceManager::get_ConcurrentAllTaskMax[0]( ) -> a
	[Client]Game.ResourceManager::set_ConcurrentAllTaskMax[1]( System.Int32 ) -> A
	[Client]Game.ResourceManager::get_ConcurrentGeneralTaskMax[0]( ) -> B
	[Client]Game.ResourceManager::set_ConcurrentGeneralTaskMax[1]( System.Int32 ) -> a
	[Client]Game.ResourceManager::get_Instance[0]( ) -> b
	[Client]Game.ResourceManager::LoadSFXTexDependenceData[0]( ) -> C
	[Client]Game.ResourceManager::Init[0]( ) -> c
	[Client]Game.ResourceManager::Release[0]( ) -> D
	[Client]Game.ResourceManager::Reset[0]( ) -> d
	[Client]Game.ResourceManager::Update[0]( ) -> E
	[Client]Game.ResourceManager::OnSdkLowMemory[0]( ) -> e
	[Client]Game.ResourceManager::OnSdkTrimMemory[0]( ) -> F
	[Client]Game.ResourceManager::CleanupMemoryInterval[0]( ) -> f
	[Client]Game.ResourceManager::CleanupMemoryNow[0]( ) -> G
	[Client]Game.ResourceManager::RefreshCleanupLastTime[0]( ) -> g
	[Client]Game.ResourceManager::GetPath[1]( System.String ) -> A
	[Client]Game.ResourceManager::GetBundlePath[1]( System.String ) -> a
	[Client]Game.ResourceManager::GetWritePath[1]( System.String ) -> B
	[Client]Game.ResourceManager::ShowLoadingIndicator[0]( ) -> H
	[Client]Game.ResourceManager::HideLoadingIndicator[0]( ) -> h
	[Client]Game.ResourceManager::LoadPreLoads[0]( ) -> I
	[Client]Game.ResourceManager::RemovePreLoads[0]( ) -> i
	[Client]Game.ResourceManager::AddTask[2]( System.String, System.Action`1<UnityEngine.Object> ) -> A
	[Client]Game.ResourceManager::AddTaskModel[2]( System.String, System.Action`1<UnityEngine.Object> ) -> a
	[Client]Game.ResourceManager::AddTaskModelQueue[2]( System.String, System.Action`1<UnityEngine.Object> ) -> B
	[Client]Game.ResourceManager::AddTaskAvatar[2]( System.String, System.Action`1<UnityEngine.Object> ) -> b
	[Client]Game.ResourceManager::AddTaskUIImmediate[2]( System.String, System.Action`1<UnityEngine.Object> ) -> C
	[Client]Game.ResourceManager::AddTaskUI[2]( System.String, System.Action`1<UnityEngine.Object> ) -> c
	[Client]Game.ResourceManager::AddTaskEffectRole[2]( System.String, System.Action`1<UnityEngine.Object> ) -> D
	[Client]Game.ResourceManager::AddTaskEffect[2]( System.String, System.Action`1<UnityEngine.Object> ) -> d
	[Client]Game.ResourceManager::AddTaskPersistent[2]( System.String, System.Action`1<UnityEngine.Object> ) -> E
	[Client]Game.ResourceManager::AddTask[3]( System.String, System.Action`1<UnityEngine.Object>, System.Int32 ) -> A
	[Client]Game.ResourceManager::RemoveTask[2]( System.UInt32, System.Action`1<UnityEngine.Object> ) -> A
	[Client]Game.ResourceManager::IsLoading[1]( System.UInt32 ) -> A
	[Client]Game.ResourceManager::DoImmediateTask[1]( Game.ResourceLoadTask ) -> A
	[Client]Game.ResourceManager::DoGeneralTask[1]( Game.ResourceLoadTask ) -> a
	[Client]Game.ResourceManager::AddInstantiateQueue[2]( UnityEngine.Object, System.Action`1<UnityEngine.Object> ) -> A
	[Client]Game.ResourceManager::LoadBundleAsync[1]( Game.ResourceLoadTask ) -> B
	[Client]Game.ResourceManager::CleanupMemoryAsync[0]( ) -> J
	[Client]Game.ResourceManager::GetCounter[0]( ) -> j

	[Client]Game.ResourceManager::.cctor[0]( ) skipped:  special name
	[Client]Game.ResourceManager::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.ResourceManager::m_sfxTexDependenceFile -> A
	System.Int32 [Client]System.Int32 Game.ResourceManager::m_DefaulConcurrentAllTaskMax -> A
	System.Int32 [Client]System.Int32 Game.ResourceManager::m_DefaulConcurrentGeneralTaskMax -> a
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.ResourceManager::m_assetEffectTextures -> A
	log4net.ILog [Client]log4net.ILog Game.ResourceManager::m_Log -> A
	System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Object> [Client]System.Collections.Generic.Dictionary`2<System.String,UnityEngine.Object> Game.ResourceManager::m_PersistantBundles -> A
	System.Collections.Generic.Dictionary`2<System.String,Game.ResourceCachedTask> [Client]System.Collections.Generic.Dictionary`2<System.String,Game.ResourceCachedTask> Game.ResourceManager::m_GeneralCachedBundles -> A
	System.Collections.Generic.Dictionary`2<System.String,Game.ResourceLoadTask> [Client]System.Collections.Generic.Dictionary`2<System.String,Game.ResourceLoadTask> Game.ResourceManager::m_LoadingFiles -> A
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.ResourceLoadTask> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.ResourceLoadTask> Game.ResourceManager::m_LoadingTasks -> A
	System.Collections.Generic.Queue`1<Game.ResourceLoadTask> [Client]System.Collections.Generic.Queue`1<Game.ResourceLoadTask> Game.ResourceManager::m_DelayLoadImmediateTasks -> A
	System.Collections.Generic.Queue`1<Game.ResourceLoadTask> [Client]System.Collections.Generic.Queue`1<Game.ResourceLoadTask> Game.ResourceManager::m_DelayLoadGeneralTasks -> a
	System.Collections.Generic.Queue`1<Game.ResourceIntantiateTask> [Client]System.Collections.Generic.Queue`1<Game.ResourceIntantiateTask> Game.ResourceManager::m_DelayIntantiateTasks -> A
	System.Boolean [Client]System.Boolean Game.ResourceManager::m_ShowLoadingIndicator -> A
	System.Boolean [Client]System.Boolean Game.ResourceManager::m_CanStartCleanupMemory -> a
	System.Single [Client]System.Single Game.ResourceManager::m_CleanupMemoryLastTime -> A
	System.Single [Client]System.Single Game.ResourceManager::m_CleanupCachedBundleLastTime -> a
	System.Int32 [Client]System.Int32 Game.ResourceManager::m_CurrentAllTaskCount -> B
	System.Int32 [Client]System.Int32 Game.ResourceManager::m_CurrentGeneralTaskCount -> b
	System.UInt32 [Client]System.UInt32 Game.ResourceManager::m_Counter -> A
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> Game.ResourceManager::m_PreLoadResources -> A
	Game.ResourceManager [Client]Game.ResourceManager Game.ResourceManager::m_Instance -> A
	System.Boolean [Client]System.Boolean Game.ResourceManager::<DelayLoad>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.ResourceManager::<ConcurrentAllTaskMax>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.ResourceManager::<ConcurrentGeneralTaskMax>k__BackingField -> c

	System.Boolean [Client]System.Boolean Game.ResourceManager::DelayLoad -> dropped
	System.Int32 [Client]System.Int32 Game.ResourceManager::ConcurrentAllTaskMax -> dropped
	System.Int32 [Client]System.Int32 Game.ResourceManager::ConcurrentGeneralTaskMax -> dropped
	Game.ResourceManager [Client]Game.ResourceManager Game.ResourceManager::Instance -> dropped
}

[Client]Game.ResourceManager/<LoadBundleAsync>d__1 -> [Client]E.O/o
{
	[Client]Game.ResourceManager/<LoadBundleAsync>d__1::System.Collections.Generic.IEnumerator<System.Object>.get_Current[0]( ) -> A
	[Client]Game.ResourceManager/<LoadBundleAsync>d__1::System.Collections.IEnumerator.Reset[0]( ) -> a
	[Client]Game.ResourceManager/<LoadBundleAsync>d__1::System.IDisposable.Dispose[0]( ) -> B
	[Client]Game.ResourceManager/<LoadBundleAsync>d__1::System.Collections.IEnumerator.get_Current[0]( ) -> b

	[Client]Game.ResourceManager/<LoadBundleAsync>d__1::MoveNext[0]( ) skipped:  external base class or interface
	[Client]Game.ResourceManager/<LoadBundleAsync>d__1::.ctor[1]( System.Int32 ) skipped:  special name

	System.Object [Client]System.Object Game.ResourceManager/<LoadBundleAsync>d__1::<>2__current -> A
	System.Int32 [Client]System.Int32 Game.ResourceManager/<LoadBundleAsync>d__1::<>1__state -> A
	Game.ResourceManager [Client]Game.ResourceManager Game.ResourceManager/<LoadBundleAsync>d__1::<>4__this -> A
	Game.ResourceLoadTask [Client]Game.ResourceLoadTask Game.ResourceManager/<LoadBundleAsync>d__1::task -> A
	System.String [Client]System.String Game.ResourceManager/<LoadBundleAsync>d__1::<path>5__2 -> A
	UnityEngine.WWW [Client]UnityEngine.WWW Game.ResourceManager/<LoadBundleAsync>d__1::<www>5__3 -> A
	UnityEngine.Object [Client]UnityEngine.Object Game.ResourceManager/<LoadBundleAsync>d__1::<obj>5__4 -> A

	System.Object [Client]System.Object Game.ResourceManager/<LoadBundleAsync>d__1::System.Collections.Generic.IEnumerator<System.Object>.Current -> dropped
	System.Object [Client]System.Object Game.ResourceManager/<LoadBundleAsync>d__1::System.Collections.IEnumerator.Current -> dropped
}

[Client]Game.ResourceManager/<CleanupMemoryAsync>d__6 -> [Client]E.O/P
{
	[Client]Game.ResourceManager/<CleanupMemoryAsync>d__6::System.Collections.Generic.IEnumerator<System.Object>.get_Current[0]( ) -> A
	[Client]Game.ResourceManager/<CleanupMemoryAsync>d__6::System.Collections.IEnumerator.Reset[0]( ) -> a
	[Client]Game.ResourceManager/<CleanupMemoryAsync>d__6::System.IDisposable.Dispose[0]( ) -> B
	[Client]Game.ResourceManager/<CleanupMemoryAsync>d__6::System.Collections.IEnumerator.get_Current[0]( ) -> b

	[Client]Game.ResourceManager/<CleanupMemoryAsync>d__6::MoveNext[0]( ) skipped:  external base class or interface
	[Client]Game.ResourceManager/<CleanupMemoryAsync>d__6::.ctor[1]( System.Int32 ) skipped:  special name

	System.Object [Client]System.Object Game.ResourceManager/<CleanupMemoryAsync>d__6::<>2__current -> A
	System.Int32 [Client]System.Int32 Game.ResourceManager/<CleanupMemoryAsync>d__6::<>1__state -> A
	Game.ResourceManager [Client]Game.ResourceManager Game.ResourceManager/<CleanupMemoryAsync>d__6::<>4__this -> A

	System.Object [Client]System.Object Game.ResourceManager/<CleanupMemoryAsync>d__6::System.Collections.Generic.IEnumerator<System.Object>.Current -> dropped
	System.Object [Client]System.Object Game.ResourceManager/<CleanupMemoryAsync>d__6::System.Collections.IEnumerator.Current -> dropped
}

[Client]Game.Platform.Editor.CustomInterface -> [Client]E.p
{
	[Client]Game.Platform.Editor.CustomInterface::Init[0]( ) -> A
	[Client]Game.Platform.Editor.CustomInterface::Release[0]( ) -> a
	[Client]Game.Platform.Editor.CustomInterface::GetPath[1]( System.String ) -> A
	[Client]Game.Platform.Editor.CustomInterface::GetBundlePath[1]( System.String ) -> a
	[Client]Game.Platform.Editor.CustomInterface::GetWritePath[1]( System.String ) -> B
	[Client]Game.Platform.Editor.CustomInterface::OpenUrl[1]( System.String ) -> C

	[Client]Game.Platform.Editor.CustomInterface::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.Platform.Editor.CustomInterface::m_DataPath -> A
}

[Client]Game.Msg.MsgTask -> [Client]E.Q
{

	[Client]Game.Msg.MsgTask::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgTask::BaseType -> A
}

[Client]Game.Msg.MsgClientTaskReqTaskList -> [Client]E.q
{
	[Client]Game.Msg.MsgClientTaskReqTaskList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientTaskReqTaskList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientTaskReqTaskList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientTaskReqTaskList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskReqTaskList::Type -> A
}

[Client]Game.Msg.MsgServerTaskAckTaskList -> [Client]E.R
{
	[Client]Game.Msg.MsgServerTaskAckTaskList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTaskAckTaskList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTaskAckTaskList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckTaskList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskAckTaskList::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckTaskList::m_ebtResult -> a
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.Msg.MsgServerTaskAckTaskList::m_oVecTaskID -> A
}

[Client]Game.Msg.MsgClientTaskReqNpc -> [Client]E.r
{
	[Client]Game.Msg.MsgClientTaskReqNpc::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientTaskReqNpc::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientTaskReqNpc::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientTaskReqNpc::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskReqNpc::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientTaskReqNpc::m_uiNpcID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientTaskReqNpc::m_btAutoReq -> a
}

[Client]Game.Msg.MsgServerTaskAckNpc -> [Client]E.S
{
	[Client]Game.Msg.MsgServerTaskAckNpc::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTaskAckNpc::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTaskAckNpc::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckNpc::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskAckNpc::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerTaskAckNpc::m_uiNpcID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckNpc::m_ebtResult -> a
	System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Task> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Task> Game.Msg.MsgServerTaskAckNpc::m_oVecTask -> A
	System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Script> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Script> Game.Msg.MsgServerTaskAckNpc::m_oVecScript -> A
	System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Function> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Function> Game.Msg.MsgServerTaskAckNpc::m_oVecFunction -> A
}

[Client]Game.Msg.MsgClientTaskReqAccept -> [Client]E.s
{
	[Client]Game.Msg.MsgClientTaskReqAccept::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientTaskReqAccept::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientTaskReqAccept::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientTaskReqAccept::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskReqAccept::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskReqAccept::m_usTaskID -> a
}

[Client]Game.Msg.MsgServerTaskAckAccept -> [Client]E.T
{
	[Client]Game.Msg.MsgServerTaskAckAccept::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTaskAckAccept::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTaskAckAccept::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckAccept::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskAckAccept::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskAckAccept::m_usTaskID -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerTaskAckAccept::m_uiNpcID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckAccept::m_btResult -> a
}

[Client]Game.Msg.MsgClientTaskReqCancel -> [Client]E.t
{
	[Client]Game.Msg.MsgClientTaskReqCancel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientTaskReqCancel::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientTaskReqCancel::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientTaskReqCancel::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskReqCancel::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskReqCancel::m_usTaskID -> a
}

[Client]Game.Msg.MsgServerTaskAckCancel -> [Client]E.U
{
	[Client]Game.Msg.MsgServerTaskAckCancel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTaskAckCancel::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTaskAckCancel::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckCancel::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskAckCancel::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskAckCancel::m_usTaskID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckCancel::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientTaskReqDone -> [Client]E.u
{
	[Client]Game.Msg.MsgClientTaskReqDone::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientTaskReqDone::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientTaskReqDone::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientTaskReqDone::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskReqDone::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskReqDone::m_usTaskID -> a
}

[Client]Game.Msg.MsgServerTaskAckDone -> [Client]E.V
{
	[Client]Game.Msg.MsgServerTaskAckDone::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTaskAckDone::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTaskAckDone::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckDone::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskAckDone::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskAckDone::m_usTaskID -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerTaskAckDone::m_uiNpcID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerTaskAckDone::m_uiPlayerID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskAckDone::m_ebtResult -> a
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgServerTaskAckDone::m_abtPlayerName -> A
}

[Client]Game.Msg.MsgServerTaskUpdateTask -> [Client]E.v
{
	[Client]Game.Msg.MsgServerTaskUpdateTask::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTaskUpdateTask::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTaskUpdateTask::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskUpdateTask::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskUpdateTask::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskUpdateTask::m_btFirstUpdate -> a
	System.Collections.Generic.List`1<Game.Msg.MsgTaskUpdateTask_Task> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskUpdateTask_Task> Game.Msg.MsgServerTaskUpdateTask::m_oVecTaskID -> A
}

[Client]Game.Msg.MsgClientNpcScript -> [Client]E.W
{
	[Client]Game.Msg.MsgClientNpcScript::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientNpcScript::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientNpcScript::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientNpcScript::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientNpcScript::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientNpcScript::m_uiNpcID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientNpcScript::m_btReqID -> a
}

[Client]Game.Msg.MsgServerTaskDialogQuestion -> [Client]E.w
{
	[Client]Game.Msg.MsgServerTaskDialogQuestion::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTaskDialogQuestion::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTaskDialogQuestion::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskDialogQuestion::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskDialogQuestion::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskDialogQuestion::m_usTaskId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskDialogQuestion::m_btRound -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerTaskDialogQuestion::m_uiNpcID -> A
}

[Client]Game.Msg.MsgClientTaskDialogAnswer -> [Client]E.X
{
	[Client]Game.Msg.MsgClientTaskDialogAnswer::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientTaskDialogAnswer::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientTaskDialogAnswer::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientTaskDialogAnswer::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskDialogAnswer::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientTaskDialogAnswer::m_usTaskId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientTaskDialogAnswer::m_btRound -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientTaskDialogAnswer::m_btAnswer -> B
}

[Client]Game.Msg.MsgServerOpenDialog -> [Client]E.x
{
	[Client]Game.Msg.MsgServerOpenDialog::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerOpenDialog::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerOpenDialog::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerOpenDialog::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerOpenDialog::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerOpenDialog::m_uiDialogID -> A
}

[Client]Game.Msg.MsgClientEndDialog -> [Client]E.Y
{
	[Client]Game.Msg.MsgClientEndDialog::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientEndDialog::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientEndDialog::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientEndDialog::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientEndDialog::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientEndDialog::m_uiDialogID -> A
}

[Client]Game.Msg.MsgServerTaskNpcState -> [Client]E.y
{
	[Client]Game.Msg.MsgServerTaskNpcState::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerTaskNpcState::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerTaskNpcState::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerTaskNpcState::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskNpcState::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerTaskNpcState::m_uiNpcID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerTaskNpcState::m_usState -> a
}

[Client]Game.Msg.MsgClientDialogOption -> [Client]E.Z
{
	[Client]Game.Msg.MsgClientDialogOption::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientDialogOption::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientDialogOption::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientDialogOption::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientDialogOption::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientDialogOption::m_uiDialogID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientDialogOption::m_btOptionID -> a
}

[Client]Game.Msg.MsgServerCallNoviceHelp -> [Client]E.z
{
	[Client]Game.Msg.MsgServerCallNoviceHelp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCallNoviceHelp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCallNoviceHelp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCallNoviceHelp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCallNoviceHelp::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCallNoviceHelp::m_uiHelpID -> A
}

[Client]Game.Msg.MsgClientNoviceHelpTaskDone -> [Client]e.A
{
	[Client]Game.Msg.MsgClientNoviceHelpTaskDone::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientNoviceHelpTaskDone::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientNoviceHelpTaskDone::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientNoviceHelpTaskDone::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientNoviceHelpTaskDone::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientNoviceHelpTaskDone::m_uiTaskID -> A
}

[Client]Game.Msg.ClientSItemData -> [Client]e.a
{
	[Client]Game.Msg.ClientSItemData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientSItemData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientSItemData::.ctor[0]( ) skipped:  special name

	Game.Msg.ClientSItemBase [Client]Game.Msg.ClientSItemBase Game.Msg.ClientSItemData::m_stBase -> A
	Game.Msg.ClientUItemData [Client]Game.Msg.ClientUItemData Game.Msg.ClientSItemData::m_stData -> A
}

[Client]Game.Msg.ClientHeroData -> [Client]e.B
{
	[Client]Game.Msg.ClientHeroData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientHeroData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientHeroData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ClientHeroData::m_uiCharID -> A
	System.String [Client]System.String Game.Msg.ClientHeroData::m_strCharName -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientHeroData::m_usRank -> A
	System.Byte [Client]System.Byte Game.Msg.ClientHeroData::m_btSex -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientHeroData::m_usLevel -> a
	System.Byte [Client]System.Byte Game.Msg.ClientHeroData::m_btProfession -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientHeroData::m_uiFighterPower -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientHeroData::m_uiAwardBattleValuePerHour -> B
	Game.Msg.CSnapShotEquipData [Client]Game.Msg.CSnapShotEquipData Game.Msg.ClientHeroData::m_stEquipData -> A
}

[Client]Game.MsgManager -> [Client]e.b
{
	[Client]Game.MsgManager::get_Instance[0]( ) -> A
	[Client]Game.MsgManager::Register[2]( System.UInt16, System.Action`1<Game.Msg.RecvMsgPacket> ) -> A
	[Client]Game.MsgManager::ProcessMsg[1]( Game.Msg.MsgDynamic ) -> A

	[Client]Game.MsgManager::.cctor[0]( ) skipped:  special name
	[Client]Game.MsgManager::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.MsgManager::ShowSkillHelpLevel -> A
	log4net.ILog [Client]log4net.ILog Game.MsgManager::m_Log -> A
	System.Collections.Generic.Dictionary`2<System.UInt16,System.Action`1<Game.Msg.RecvMsgPacket>> [Client]System.Collections.Generic.Dictionary`2<System.UInt16,System.Action`1<Game.Msg.RecvMsgPacket>> Game.MsgManager::m_MsgHandlers -> A
	Game.MsgManager [Client]Game.MsgManager Game.MsgManager::m_Instance -> A

	Game.MsgManager [Client]Game.MsgManager Game.MsgManager::Instance -> dropped
}

[Client]Game.Logic.DebugCommand -> [Client]e.C
{
	[Client]Game.Logic.DebugCommand::ProcessCommand[1]( System.String ) -> A

	[Client]Game.Logic.DebugCommand::.ctor[0]( ) skipped:  special name
	[Client]Game.Logic.DebugCommand::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.Logic.DebugCommand::m_Log -> A
	System.Int32 [Client]System.Int32 Game.Logic.DebugCommand::m_TestEffectId -> A
	System.String [Client]System.String Game.Logic.DebugCommand::m_TestAction -> A
}

[Client]Game.Logic.RoleBag -> [Client]e.c
{
	[Client]Game.Logic.RoleBag::get_CurrentPackType[0]( ) -> A
	[Client]Game.Logic.RoleBag::set_CurrentPackType[1]( System.Byte ) -> A
	[Client]Game.Logic.RoleBag::get_Money[0]( ) -> a
	[Client]Game.Logic.RoleBag::set_Money[1]( System.UInt32 ) -> A
	[Client]Game.Logic.RoleBag::get_StorageMoney[0]( ) -> B
	[Client]Game.Logic.RoleBag::set_StorageMoney[1]( System.UInt32 ) -> a
	[Client]Game.Logic.RoleBag::get_Gold[0]( ) -> b
	[Client]Game.Logic.RoleBag::set_Gold[1]( System.UInt32 ) -> B
	[Client]Game.Logic.RoleBag::get_Give[0]( ) -> C
	[Client]Game.Logic.RoleBag::set_Give[1]( System.UInt32 ) -> b
	[Client]Game.Logic.RoleBag::get_BuyBackItem[0]( ) -> c
	[Client]Game.Logic.RoleBag::set_BuyBackItem[1]( System.Collections.Generic.List`1<Game.Msg.ClientBuyBackData> ) -> A
	[Client]Game.Logic.RoleBag::get_Instance[0]( ) -> D
	[Client]Game.Logic.RoleBag::Init[0]( ) -> d
	[Client]Game.Logic.RoleBag::Release[0]( ) -> E
	[Client]Game.Logic.RoleBag::Reset[0]( ) -> e
	[Client]Game.Logic.RoleBag::Update[0]( ) -> F
	[Client]Game.Logic.RoleBag::EmptySlots[0]( ) -> f
	[Client]Game.Logic.RoleBag::EmptySlots[1]( System.Byte ) -> a
	[Client]Game.Logic.RoleBag::GetPackCapacity[1]( System.Byte ) -> B
	[Client]Game.Logic.RoleBag::GetItemByIndex[2]( System.Byte, System.Byte ) -> A
	[Client]Game.Logic.RoleBag::GetNormalItem[1]( System.Byte ) -> b
	[Client]Game.Logic.RoleBag::GetTaskItem[1]( System.Byte ) -> C
	[Client]Game.Logic.RoleBag::GetFirstItemById[2]( System.Byte, System.UInt32 ) -> A
	[Client]Game.Logic.RoleBag::GetFirstItemById[1]( System.UInt32 ) -> C
	[Client]Game.Logic.RoleBag::GetItemsById[2]( System.Byte, System.UInt32 ) -> a
	[Client]Game.Logic.RoleBag::GetItemsById[1]( System.UInt32 ) -> c
	[Client]Game.Logic.RoleBag::GetItemByOnlyId[2]( System.Byte, System.Int64 ) -> A
	[Client]Game.Logic.RoleBag::GetItemByType[1]( Game.Msg.enumItemType ) -> A
	[Client]Game.Logic.RoleBag::GetItemByOnlyId[1]( System.Int64 ) -> A
	[Client]Game.Logic.RoleBag::GetItemNum[1]( System.Int32 ) -> A
	[Client]Game.Logic.RoleBag::GetItemNum[2]( System.Byte, System.Int32 ) -> A
	[Client]Game.Logic.RoleBag::GetItemFirstIndex[2]( System.Byte, System.Int32 ) -> a
	[Client]Game.Logic.RoleBag::GetItemIndexByOnlyId[2]( System.Byte, System.Int64 ) -> a
	[Client]Game.Logic.RoleBag::UseItemById[2]( System.Byte, System.Int32 ) -> B
	[Client]Game.Logic.RoleBag::UseItemById[1]( System.Int32 ) -> a
	[Client]Game.Logic.RoleBag::UseItemByOnlyId[1]( System.Int64 ) -> a
	[Client]Game.Logic.RoleBag::UseItemByIndex[2]( System.Byte, System.Byte ) -> a
	[Client]Game.Logic.RoleBag::GetCD[1]( System.Int32 ) -> B
	[Client]Game.Logic.RoleBag::CheckCD[1]( System.Int32 ) -> b
	[Client]Game.Logic.RoleBag::CanUse[1]( Game.Msg.ClientSItemData ) -> A
	[Client]Game.Logic.RoleBag::CanUse[2]( Game.Msg.ClientSItemData, System.Boolean ) -> A
	[Client]Game.Logic.RoleBag::SendMsgSortBag[0]( ) -> G
	[Client]Game.Logic.RoleBag::SendMsgSortStorage[0]( ) -> g
	[Client]Game.Logic.RoleBag::SendMsgSellItem[2]( System.Byte, System.Byte ) -> B
	[Client]Game.Logic.RoleBag::SendMsgMoveItem[3]( Game.Msg.ClientSItemData, System.Byte, System.Byte ) -> A
	[Client]Game.Logic.RoleBag::OnMsgServerAllBagItem[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.RoleBag::OnMsgServerItemCountChange[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.RoleBag::OnMsgServerItemChange[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.RoleBag::OnMsgServerItemChangeInfo[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.RoleBag::OnMsgServerSetMoney[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Logic.RoleBag::OnMsgServerSetStorageMoney[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.Logic.RoleBag::OnMsgServerSetGold[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.Logic.RoleBag::OnMsgServerSetGive[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.Logic.RoleBag::OnMsgServerSellItemRes[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.Logic.RoleBag::OnMsgServerNotifyBuyBackList[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.Logic.RoleBag::OnMsgServerBuyBackItemRes[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.Logic.RoleBag::OnMsgServerBagSizeChange[1]( Game.Msg.RecvMsgPacket ) -> f

	[Client]Game.Logic.RoleBag::.cctor[0]( ) skipped:  special name
	[Client]Game.Logic.RoleBag::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Logic.RoleBag::ErrorIndex -> A
	System.Int32 [Client]System.Int32 Game.Logic.RoleBag::PackTypeSize -> a
	System.Int32[] [Client]System.Int32[] Game.Logic.RoleBag::m_PackCapacitys -> A
	Game.Msg.ClientSItemData[][] [Client]Game.Msg.ClientSItemData[][] Game.Logic.RoleBag::m_Packs -> A
	System.Single [Client]System.Single Game.Logic.RoleBag::m_LastTimeSortBag -> A
	System.Single [Client]System.Single Game.Logic.RoleBag::m_LastTimeSortStorage -> a
	System.Collections.Generic.Dictionary`2<System.Int32,System.Single> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Single> Game.Logic.RoleBag::m_UseItemLastTimes -> A
	Game.Logic.RoleBag [Client]Game.Logic.RoleBag Game.Logic.RoleBag::m_Instance -> A
	System.Byte [Client]System.Byte Game.Logic.RoleBag::<CurrentPackType>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.RoleBag::<Money>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.RoleBag::<StorageMoney>k__BackingField -> a
	System.UInt32 [Client]System.UInt32 Game.Logic.RoleBag::<Gold>k__BackingField -> B
	System.UInt32 [Client]System.UInt32 Game.Logic.RoleBag::<Give>k__BackingField -> b
	System.Collections.Generic.List`1<Game.Msg.ClientBuyBackData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientBuyBackData> Game.Logic.RoleBag::<BuyBackItem>k__BackingField -> A

	System.Byte [Client]System.Byte Game.Logic.RoleBag::CurrentPackType -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.RoleBag::Money -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.RoleBag::StorageMoney -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.RoleBag::Gold -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.RoleBag::Give -> dropped
	System.Collections.Generic.List`1<Game.Msg.ClientBuyBackData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientBuyBackData> Game.Logic.RoleBag::BuyBackItem -> dropped
	Game.Logic.RoleBag [Client]Game.Logic.RoleBag Game.Logic.RoleBag::Instance -> dropped
}

[Client]Game.EffectManager -> [Client]e.D
{
	[Client]Game.EffectManager::get_Level[0]( ) -> A
	[Client]Game.EffectManager::set_Level[1]( Game.EffectManager/EffectLevel ) -> A
	[Client]Game.EffectManager::get_ErrorEffectId[0]( ) -> a
	[Client]Game.EffectManager::get_EffectDatas[0]( ) -> B
	[Client]Game.EffectManager::get_Instance[0]( ) -> b
	[Client]Game.EffectManager::Release[0]( ) -> C
	[Client]Game.EffectManager::LoadData[0]( ) -> c
	[Client]Game.EffectManager::PlayEffect[3]( System.Int32, System.UInt32, System.UInt32 ) -> A
	[Client]Game.EffectManager::PlayEffect[4]( System.Int32, System.UInt32, System.UInt32, System.Single ) -> A
	[Client]Game.EffectManager::PlayEffect[3]( System.Int32, System.UInt32, UnityEngine.Vector3 ) -> A
	[Client]Game.EffectManager::PlayEffect[4]( System.Int32, System.UInt32, System.UInt32, UnityEngine.Vector3 ) -> A
	[Client]Game.EffectManager::PlayEffect[5]( System.Int32, System.UInt32, System.UInt32, UnityEngine.Vector3, System.Single ) -> A
	[Client]Game.EffectManager::PlayEffect[2]( System.Int32, UnityEngine.Transform ) -> A
	[Client]Game.EffectManager::PlayEffect[4]( System.Int32, System.UInt32, Game.FlyingWeapon, System.Single ) -> A
	[Client]Game.EffectManager::GetEffect[1]( System.Int32 ) -> A
	[Client]Game.EffectManager::StopEffect[1]( System.Int32 ) -> a
	[Client]Game.EffectManager::Update[0]( ) -> D
	[Client]Game.EffectManager::ShowCharacterEffect[2]( System.UInt32, System.Boolean ) -> A
	[Client]Game.EffectManager::StopEffectByCharacter[1]( System.UInt32 ) -> A
	[Client]Game.EffectManager::GetID[0]( ) -> d

	[Client]Game.EffectManager::.cctor[0]( ) skipped:  special name
	[Client]Game.EffectManager::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.EffectManager::TouchEffectId -> A
	System.Int32 [Client]System.Int32 Game.EffectManager::SelectFriendEffect -> a
	System.Int32 [Client]System.Int32 Game.EffectManager::SelectEnemyEffect -> B
	System.Int32 [Client]System.Int32 Game.EffectManager::LevelUpEffect -> b
	System.Int32 [Client]System.Int32 Game.EffectManager::TaskCompleteEffectId -> C
	System.Int32 [Client]System.Int32 Game.EffectManager::PickPackEffectId -> c
	System.Int32 [Client]System.Int32 Game.EffectManager::NoviceHelpEffectId -> D
	System.Int32 [Client]System.Int32 Game.EffectManager::NoviceHelpMonsterFingerEffectId -> d
	System.Int32 [Client]System.Int32 Game.EffectManager::NoviceHelpMonsterArrowEffectId -> E
	System.Int32 [Client]System.Int32 Game.EffectManager::PlayEffectFailed -> e
	log4net.ILog [Client]log4net.ILog Game.EffectManager::m_Log -> A
	System.Int32[0...,0...] [Client]System.Int32[0...,0...] Game.EffectManager::CreatePlayerEffect -> A
	System.Collections.Generic.Dictionary`2<System.Int32,Game.EffectData> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.EffectData> Game.EffectManager::m_EffectDatas -> A
	System.Collections.Generic.Dictionary`2<System.Int32,Game.Effect> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.Effect> Game.EffectManager::m_Effects -> A
	System.Int32 [Client]System.Int32 Game.EffectManager::m_ID -> F
	Game.EffectManager [Client]Game.EffectManager Game.EffectManager::instance -> A
	Game.EffectManager/EffectLevel [Client]Game.EffectManager/EffectLevel Game.EffectManager::<Level>k__BackingField -> A

	Game.EffectManager/EffectLevel [Client]Game.EffectManager/EffectLevel Game.EffectManager::Level -> dropped
	System.Int32 [Client]System.Int32 Game.EffectManager::ErrorEffectId -> dropped
	System.Collections.Generic.Dictionary`2<System.Int32,Game.EffectData> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.EffectData> Game.EffectManager::EffectDatas -> dropped
	Game.EffectManager [Client]Game.EffectManager Game.EffectManager::Instance -> dropped
}

[Client]Game.EffectManager/EffectLevel -> [Client]e.D/d
{
	Game.EffectManager/EffectLevel [Client]Game.EffectManager/EffectLevel Game.EffectManager/EffectLevel::All -> A
	Game.EffectManager/EffectLevel [Client]Game.EffectManager/EffectLevel Game.EffectManager/EffectLevel::NotSkill -> a
	Game.EffectManager/EffectLevel [Client]Game.EffectManager/EffectLevel Game.EffectManager/EffectLevel::None -> B

	System.Int32 [Client]System.Int32 Game.EffectManager/EffectLevel::value__ skipped:  filtered
}

[Client]Game.MaskBase -> [Client]e.E
{
	[Client]Game.MaskBase::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.MaskBase::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.MaskBase::get_Version[0]( ) -> A
	[Client]Game.MaskBase::set_Version[1]( System.Int32 ) -> A
	[Client]Game.MaskBase::get_MaskWidth[0]( ) -> a
	[Client]Game.MaskBase::set_MaskWidth[1]( System.Int32 ) -> a
	[Client]Game.MaskBase::AllocBuffer[1]( System.Int32 ) -> B
	[Client]Game.MaskBase::GetMask[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.MaskBase::SetMask[3]( System.Int32, System.Int32, System.Boolean ) -> A

	[Client]Game.MaskBase::.ctor[0]( ) skipped:  special name

	System.Byte[] [Client]System.Byte[] Game.MaskBase::m_MaskBuffer -> A
	System.Int32 [Client]System.Int32 Game.MaskBase::<Version>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.MaskBase::<MaskWidth>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.MaskBase::Version -> dropped
	System.Int32 [Client]System.Int32 Game.MaskBase::MaskWidth -> dropped
}

[Client]Game.MaskData -> [Client]e.e
{

	[Client]Game.MaskData::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.MaskData::MyVersion -> A
}

[Client]Game.DataMagicBox -> [Client]e.F
{
	[Client]Game.DataMagicBox::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMagicBox::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMagicBox::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMagicBox::get_FormulaId[0]( ) -> A
	[Client]Game.DataMagicBox::set_FormulaId[1]( System.Int32 ) -> A
	[Client]Game.DataMagicBox::get_MainId[0]( ) -> a
	[Client]Game.DataMagicBox::set_MainId[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataMagicBox::get_MainNum[0]( ) -> B
	[Client]Game.DataMagicBox::set_MainNum[1]( System.Int32 ) -> a
	[Client]Game.DataMagicBox::get_SubId[0]( ) -> b
	[Client]Game.DataMagicBox::set_SubId[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataMagicBox::get_SubNum[0]( ) -> C
	[Client]Game.DataMagicBox::set_SubNum[1]( System.Int32 ) -> B
	[Client]Game.DataMagicBox::get_QuickId[0]( ) -> c
	[Client]Game.DataMagicBox::set_QuickId[1]( System.Int32 ) -> b
	[Client]Game.DataMagicBox::get_Cost[0]( ) -> D
	[Client]Game.DataMagicBox::set_Cost[1]( System.Int32 ) -> C
	[Client]Game.DataMagicBox::get_FormulaName[0]( ) -> d
	[Client]Game.DataMagicBox::set_FormulaName[1]( System.String ) -> A

	[Client]Game.DataMagicBox::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataMagicBox::<FormulaId>k__BackingField -> A
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataMagicBox::<MainId>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataMagicBox::<MainNum>k__BackingField -> a
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataMagicBox::<SubId>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataMagicBox::<SubNum>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataMagicBox::<QuickId>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataMagicBox::<Cost>k__BackingField -> C
	System.String [Client]System.String Game.DataMagicBox::<FormulaName>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataMagicBox::FormulaId -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataMagicBox::MainId -> dropped
	System.Int32 [Client]System.Int32 Game.DataMagicBox::MainNum -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataMagicBox::SubId -> dropped
	System.Int32 [Client]System.Int32 Game.DataMagicBox::SubNum -> dropped
	System.Int32 [Client]System.Int32 Game.DataMagicBox::QuickId -> dropped
	System.Int32 [Client]System.Int32 Game.DataMagicBox::Cost -> dropped
	System.String [Client]System.String Game.DataMagicBox::FormulaName -> dropped
}

[Client]Game.DataMagicBoxManager -> [Client]e.f
{
	[Client]Game.DataMagicBoxManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMagicBoxManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMagicBoxManager::Clear[0]( ) -> A
	[Client]Game.DataMagicBoxManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMagicBoxManager::GetDataByFormulaId[1]( System.Int32 ) -> A
	[Client]Game.DataMagicBoxManager::GetDataListByFormulaId[1]( System.Int32 ) -> a
	[Client]Game.DataMagicBoxManager::GetDataByMainId[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataMagicBoxManager::GetDataListByMainId[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataMagicBoxManager::GetDataByMainNum[1]( System.Int32 ) -> B
	[Client]Game.DataMagicBoxManager::GetDataListByMainNum[1]( System.Int32 ) -> b
	[Client]Game.DataMagicBoxManager::GetDataBySubId[1]( System.Collections.Generic.List`1<System.Int32> ) -> B
	[Client]Game.DataMagicBoxManager::GetDataListBySubId[1]( System.Collections.Generic.List`1<System.Int32> ) -> b
	[Client]Game.DataMagicBoxManager::GetDataBySubNum[1]( System.Int32 ) -> C
	[Client]Game.DataMagicBoxManager::GetDataListBySubNum[1]( System.Int32 ) -> c
	[Client]Game.DataMagicBoxManager::GetDataByQuickId[1]( System.Int32 ) -> D
	[Client]Game.DataMagicBoxManager::GetDataListByQuickId[1]( System.Int32 ) -> d
	[Client]Game.DataMagicBoxManager::GetDataByCost[1]( System.Int32 ) -> E
	[Client]Game.DataMagicBoxManager::GetDataListByCost[1]( System.Int32 ) -> e
	[Client]Game.DataMagicBoxManager::GetDataByFormulaName[1]( System.String ) -> A
	[Client]Game.DataMagicBoxManager::GetDataListByFormulaName[1]( System.String ) -> a
	[Client]Game.DataMagicBoxManager::get_Instance[0]( ) -> a
	[Client]Game.DataMagicBoxManager::get_DataList[0]( ) -> B
	[Client]Game.DataMagicBoxManager::get_Count[0]( ) -> b

	[Client]Game.DataMagicBoxManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataMagicBoxManager::.ctor[0]( ) skipped:  special name

	Game.DataMagicBoxManager [Client]Game.DataMagicBoxManager Game.DataMagicBoxManager::instance -> A
	System.Collections.Generic.List`1<Game.DataMagicBox> [Client]System.Collections.Generic.List`1<Game.DataMagicBox> Game.DataMagicBoxManager::dataList -> A

	Game.DataMagicBoxManager [Client]Game.DataMagicBoxManager Game.DataMagicBoxManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataMagicBox> [Client]System.Collections.Generic.List`1<Game.DataMagicBox> Game.DataMagicBoxManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataMagicBoxManager::Count -> dropped
}

[Client]Game.DataCreate -> [Client]e.G
{
	[Client]Game.DataCreate::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataCreate::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataCreate::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataCreate::get_Index[0]( ) -> A
	[Client]Game.DataCreate::set_Index[1]( System.Int32 ) -> A
	[Client]Game.DataCreate::get_Profession[0]( ) -> a
	[Client]Game.DataCreate::set_Profession[1]( System.Int32 ) -> a
	[Client]Game.DataCreate::get_Sex[0]( ) -> B
	[Client]Game.DataCreate::set_Sex[1]( System.Int32 ) -> B
	[Client]Game.DataCreate::get_PosX[0]( ) -> b
	[Client]Game.DataCreate::set_PosX[1]( System.Single ) -> A
	[Client]Game.DataCreate::get_PosZ[0]( ) -> C
	[Client]Game.DataCreate::set_PosZ[1]( System.Single ) -> a
	[Client]Game.DataCreate::get_LookAtX[0]( ) -> c
	[Client]Game.DataCreate::set_LookAtX[1]( System.Single ) -> B
	[Client]Game.DataCreate::get_LookAtZ[0]( ) -> D
	[Client]Game.DataCreate::set_LookAtZ[1]( System.Single ) -> b
	[Client]Game.DataCreate::get_Weapon[0]( ) -> d
	[Client]Game.DataCreate::set_Weapon[1]( System.Int32 ) -> b
	[Client]Game.DataCreate::get_Armour[0]( ) -> E
	[Client]Game.DataCreate::set_Armour[1]( System.Int32 ) -> C
	[Client]Game.DataCreate::get_Hair[0]( ) -> e
	[Client]Game.DataCreate::set_Hair[1]( System.Int32 ) -> c
	[Client]Game.DataCreate::get_HairOption[0]( ) -> F
	[Client]Game.DataCreate::set_HairOption[1]( System.Int32[] ) -> A
	[Client]Game.DataCreate::get_HairIcon[0]( ) -> f
	[Client]Game.DataCreate::set_HairIcon[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataCreate::get_IconName[0]( ) -> G
	[Client]Game.DataCreate::set_IconName[1]( System.String ) -> A
	[Client]Game.DataCreate::get_Abstrc[0]( ) -> g
	[Client]Game.DataCreate::set_Abstrc[1]( System.String ) -> a
	[Client]Game.DataCreate::get_Desc[0]( ) -> H
	[Client]Game.DataCreate::set_Desc[1]( System.String ) -> B

	[Client]Game.DataCreate::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataCreate::<Index>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataCreate::<Profession>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataCreate::<Sex>k__BackingField -> B
	System.Single [Client]System.Single Game.DataCreate::<PosX>k__BackingField -> A
	System.Single [Client]System.Single Game.DataCreate::<PosZ>k__BackingField -> a
	System.Single [Client]System.Single Game.DataCreate::<LookAtX>k__BackingField -> B
	System.Single [Client]System.Single Game.DataCreate::<LookAtZ>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataCreate::<Weapon>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataCreate::<Armour>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataCreate::<Hair>k__BackingField -> c
	System.Int32[] [Client]System.Int32[] Game.DataCreate::<HairOption>k__BackingField -> A
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataCreate::<HairIcon>k__BackingField -> A
	System.String [Client]System.String Game.DataCreate::<IconName>k__BackingField -> A
	System.String [Client]System.String Game.DataCreate::<Abstrc>k__BackingField -> a
	System.String [Client]System.String Game.DataCreate::<Desc>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataCreate::Index -> dropped
	System.Int32 [Client]System.Int32 Game.DataCreate::Profession -> dropped
	System.Int32 [Client]System.Int32 Game.DataCreate::Sex -> dropped
	System.Single [Client]System.Single Game.DataCreate::PosX -> dropped
	System.Single [Client]System.Single Game.DataCreate::PosZ -> dropped
	System.Single [Client]System.Single Game.DataCreate::LookAtX -> dropped
	System.Single [Client]System.Single Game.DataCreate::LookAtZ -> dropped
	System.Int32 [Client]System.Int32 Game.DataCreate::Weapon -> dropped
	System.Int32 [Client]System.Int32 Game.DataCreate::Armour -> dropped
	System.Int32 [Client]System.Int32 Game.DataCreate::Hair -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataCreate::HairOption -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataCreate::HairIcon -> dropped
	System.String [Client]System.String Game.DataCreate::IconName -> dropped
	System.String [Client]System.String Game.DataCreate::Abstrc -> dropped
	System.String [Client]System.String Game.DataCreate::Desc -> dropped
}

[Client]Game.DataCreateManager -> [Client]e.g
{
	[Client]Game.DataCreateManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataCreateManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataCreateManager::Clear[0]( ) -> A
	[Client]Game.DataCreateManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataCreateManager::GetDataByIndex[1]( System.Int32 ) -> A
	[Client]Game.DataCreateManager::GetDataListByIndex[1]( System.Int32 ) -> a
	[Client]Game.DataCreateManager::GetDataByProfession[1]( System.Int32 ) -> B
	[Client]Game.DataCreateManager::GetDataListByProfession[1]( System.Int32 ) -> b
	[Client]Game.DataCreateManager::GetDataBySex[1]( System.Int32 ) -> C
	[Client]Game.DataCreateManager::GetDataListBySex[1]( System.Int32 ) -> c
	[Client]Game.DataCreateManager::GetDataByPosX[1]( System.Single ) -> A
	[Client]Game.DataCreateManager::GetDataListByPosX[1]( System.Single ) -> a
	[Client]Game.DataCreateManager::GetDataByPosZ[1]( System.Single ) -> B
	[Client]Game.DataCreateManager::GetDataListByPosZ[1]( System.Single ) -> b
	[Client]Game.DataCreateManager::GetDataByLookAtX[1]( System.Single ) -> C
	[Client]Game.DataCreateManager::GetDataListByLookAtX[1]( System.Single ) -> c
	[Client]Game.DataCreateManager::GetDataByLookAtZ[1]( System.Single ) -> D
	[Client]Game.DataCreateManager::GetDataListByLookAtZ[1]( System.Single ) -> d
	[Client]Game.DataCreateManager::GetDataByWeapon[1]( System.Int32 ) -> D
	[Client]Game.DataCreateManager::GetDataListByWeapon[1]( System.Int32 ) -> d
	[Client]Game.DataCreateManager::GetDataByArmour[1]( System.Int32 ) -> E
	[Client]Game.DataCreateManager::GetDataListByArmour[1]( System.Int32 ) -> e
	[Client]Game.DataCreateManager::GetDataByHair[1]( System.Int32 ) -> F
	[Client]Game.DataCreateManager::GetDataListByHair[1]( System.Int32 ) -> f
	[Client]Game.DataCreateManager::GetDataByHairOption[1]( System.Int32[] ) -> A
	[Client]Game.DataCreateManager::GetDataListByHairOption[1]( System.Int32[] ) -> a
	[Client]Game.DataCreateManager::GetDataByHairIcon[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataCreateManager::GetDataListByHairIcon[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataCreateManager::GetDataByIconName[1]( System.String ) -> A
	[Client]Game.DataCreateManager::GetDataListByIconName[1]( System.String ) -> a
	[Client]Game.DataCreateManager::GetDataByAbstrc[1]( System.String ) -> B
	[Client]Game.DataCreateManager::GetDataListByAbstrc[1]( System.String ) -> b
	[Client]Game.DataCreateManager::GetDataByDesc[1]( System.String ) -> C
	[Client]Game.DataCreateManager::GetDataListByDesc[1]( System.String ) -> c
	[Client]Game.DataCreateManager::get_Instance[0]( ) -> a
	[Client]Game.DataCreateManager::get_DataList[0]( ) -> B
	[Client]Game.DataCreateManager::get_Count[0]( ) -> b

	[Client]Game.DataCreateManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataCreateManager::.ctor[0]( ) skipped:  special name

	Game.DataCreateManager [Client]Game.DataCreateManager Game.DataCreateManager::instance -> A
	System.Collections.Generic.List`1<Game.DataCreate> [Client]System.Collections.Generic.List`1<Game.DataCreate> Game.DataCreateManager::dataList -> A

	Game.DataCreateManager [Client]Game.DataCreateManager Game.DataCreateManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataCreate> [Client]System.Collections.Generic.List`1<Game.DataCreate> Game.DataCreateManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataCreateManager::Count -> dropped
}

[Client]Game.DataAward -> [Client]e.H
{
	[Client]Game.DataAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAward::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAward::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAward::get_ID[0]( ) -> A
	[Client]Game.DataAward::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataAward::get_Type[0]( ) -> a
	[Client]Game.DataAward::set_Type[1]( System.Int32 ) -> a
	[Client]Game.DataAward::get_LoginTotal[0]( ) -> B
	[Client]Game.DataAward::set_LoginTotal[1]( System.Int32 ) -> B
	[Client]Game.DataAward::get_TimeSpan[0]( ) -> b
	[Client]Game.DataAward::set_TimeSpan[1]( System.Int32 ) -> b
	[Client]Game.DataAward::get_LevelName[0]( ) -> C
	[Client]Game.DataAward::set_LevelName[1]( System.String ) -> A
	[Client]Game.DataAward::get_LoginInstant[0]( ) -> c
	[Client]Game.DataAward::set_LoginInstant[1]( System.Int32 ) -> C
	[Client]Game.DataAward::get_ChargeTotal[0]( ) -> D
	[Client]Game.DataAward::set_ChargeTotal[1]( System.Int32 ) -> c
	[Client]Game.DataAward::get_LevelAward[0]( ) -> d
	[Client]Game.DataAward::set_LevelAward[1]( System.Int32 ) -> D
	[Client]Game.DataAward::get_Item[0]( ) -> E
	[Client]Game.DataAward::set_Item[1]( System.Int32[] ) -> A
	[Client]Game.DataAward::get_ItemNum[0]( ) -> e
	[Client]Game.DataAward::set_ItemNum[1]( System.Int32[] ) -> a
	[Client]Game.DataAward::get_SaveIndex[0]( ) -> F
	[Client]Game.DataAward::set_SaveIndex[1]( System.Int32 ) -> d
	[Client]Game.DataAward::get_PlayerType[0]( ) -> f
	[Client]Game.DataAward::set_PlayerType[1]( System.Boolean ) -> A
	[Client]Game.DataAward::get_SpreadLevel[0]( ) -> G
	[Client]Game.DataAward::set_SpreadLevel[1]( System.Int32 ) -> E
	[Client]Game.DataAward::get_SpreadNum[0]( ) -> g
	[Client]Game.DataAward::set_SpreadNum[1]( System.Int32 ) -> e

	[Client]Game.DataAward::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataAward::<ID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataAward::<Type>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataAward::<LoginTotal>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataAward::<TimeSpan>k__BackingField -> b
	System.String [Client]System.String Game.DataAward::<LevelName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataAward::<LoginInstant>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataAward::<ChargeTotal>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataAward::<LevelAward>k__BackingField -> D
	System.Int32[] [Client]System.Int32[] Game.DataAward::<Item>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataAward::<ItemNum>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataAward::<SaveIndex>k__BackingField -> d
	System.Boolean [Client]System.Boolean Game.DataAward::<PlayerType>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataAward::<SpreadLevel>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataAward::<SpreadNum>k__BackingField -> e

	System.Int32 [Client]System.Int32 Game.DataAward::ID -> dropped
	System.Int32 [Client]System.Int32 Game.DataAward::Type -> dropped
	System.Int32 [Client]System.Int32 Game.DataAward::LoginTotal -> dropped
	System.Int32 [Client]System.Int32 Game.DataAward::TimeSpan -> dropped
	System.String [Client]System.String Game.DataAward::LevelName -> dropped
	System.Int32 [Client]System.Int32 Game.DataAward::LoginInstant -> dropped
	System.Int32 [Client]System.Int32 Game.DataAward::ChargeTotal -> dropped
	System.Int32 [Client]System.Int32 Game.DataAward::LevelAward -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataAward::Item -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataAward::ItemNum -> dropped
	System.Int32 [Client]System.Int32 Game.DataAward::SaveIndex -> dropped
	System.Boolean [Client]System.Boolean Game.DataAward::PlayerType -> dropped
	System.Int32 [Client]System.Int32 Game.DataAward::SpreadLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataAward::SpreadNum -> dropped
}

[Client]Game.DataAwardManager -> [Client]e.h
{
	[Client]Game.DataAwardManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAwardManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAwardManager::Clear[0]( ) -> A
	[Client]Game.DataAwardManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAwardManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataAwardManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataAwardManager::GetDataByType[1]( System.Int32 ) -> B
	[Client]Game.DataAwardManager::GetDataListByType[1]( System.Int32 ) -> b
	[Client]Game.DataAwardManager::GetDataByLoginTotal[1]( System.Int32 ) -> C
	[Client]Game.DataAwardManager::GetDataListByLoginTotal[1]( System.Int32 ) -> c
	[Client]Game.DataAwardManager::GetDataByTimeSpan[1]( System.Int32 ) -> D
	[Client]Game.DataAwardManager::GetDataListByTimeSpan[1]( System.Int32 ) -> d
	[Client]Game.DataAwardManager::GetDataByLevelName[1]( System.String ) -> A
	[Client]Game.DataAwardManager::GetDataListByLevelName[1]( System.String ) -> a
	[Client]Game.DataAwardManager::GetDataByLoginInstant[1]( System.Int32 ) -> E
	[Client]Game.DataAwardManager::GetDataListByLoginInstant[1]( System.Int32 ) -> e
	[Client]Game.DataAwardManager::GetDataByChargeTotal[1]( System.Int32 ) -> F
	[Client]Game.DataAwardManager::GetDataListByChargeTotal[1]( System.Int32 ) -> f
	[Client]Game.DataAwardManager::GetDataByLevelAward[1]( System.Int32 ) -> G
	[Client]Game.DataAwardManager::GetDataListByLevelAward[1]( System.Int32 ) -> g
	[Client]Game.DataAwardManager::GetDataByItem[1]( System.Int32[] ) -> A
	[Client]Game.DataAwardManager::GetDataListByItem[1]( System.Int32[] ) -> a
	[Client]Game.DataAwardManager::GetDataByItemNum[1]( System.Int32[] ) -> B
	[Client]Game.DataAwardManager::GetDataListByItemNum[1]( System.Int32[] ) -> b
	[Client]Game.DataAwardManager::GetDataBySaveIndex[1]( System.Int32 ) -> H
	[Client]Game.DataAwardManager::GetDataListBySaveIndex[1]( System.Int32 ) -> h
	[Client]Game.DataAwardManager::GetDataByPlayerType[1]( System.Boolean ) -> A
	[Client]Game.DataAwardManager::GetDataListByPlayerType[1]( System.Boolean ) -> a
	[Client]Game.DataAwardManager::GetDataBySpreadLevel[1]( System.Int32 ) -> I
	[Client]Game.DataAwardManager::GetDataListBySpreadLevel[1]( System.Int32 ) -> i
	[Client]Game.DataAwardManager::GetDataBySpreadNum[1]( System.Int32 ) -> J
	[Client]Game.DataAwardManager::GetDataListBySpreadNum[1]( System.Int32 ) -> j
	[Client]Game.DataAwardManager::get_Instance[0]( ) -> a
	[Client]Game.DataAwardManager::get_DataList[0]( ) -> B
	[Client]Game.DataAwardManager::get_Count[0]( ) -> b

	[Client]Game.DataAwardManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataAwardManager::.ctor[0]( ) skipped:  special name

	Game.DataAwardManager [Client]Game.DataAwardManager Game.DataAwardManager::instance -> A
	System.Collections.Generic.List`1<Game.DataAward> [Client]System.Collections.Generic.List`1<Game.DataAward> Game.DataAwardManager::dataList -> A

	Game.DataAwardManager [Client]Game.DataAwardManager Game.DataAwardManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataAward> [Client]System.Collections.Generic.List`1<Game.DataAward> Game.DataAwardManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataAwardManager::Count -> dropped
}

[Client]Game.RoleSkillLogic -> [Client]e.I
{
	[Client]Game.RoleSkillLogic::get_Instance[0]( ) -> A
	[Client]Game.RoleSkillLogic::CastSkill[1]( System.Int32 ) -> A
	[Client]Game.RoleSkillLogic::Update[0]( ) -> a
	[Client]Game.RoleSkillLogic::CanAttack[1]( System.Int32 ) -> a
	[Client]Game.RoleSkillLogic::IsContinueSkill[1]( System.Int32 ) -> B
	[Client]Game.RoleSkillLogic::PlaySkill[1]( System.Int32 ) -> b
	[Client]Game.RoleSkillLogic::SetCurrentSkill[1]( System.Int32 ) -> C
	[Client]Game.RoleSkillLogic::CancelCurrentSkill[0]( ) -> B
	[Client]Game.RoleSkillLogic::NotifyAttackSuccess[0]( ) -> b

	[Client]Game.RoleSkillLogic::.ctor[0]( ) skipped:  special name
	[Client]Game.RoleSkillLogic::.cctor[0]( ) skipped:  special name

	Game.RoleSkillLogic [Client]Game.RoleSkillLogic Game.RoleSkillLogic::m_Instance -> A
	System.Int32 [Client]System.Int32 Game.RoleSkillLogic::m_iFirstSkillId -> A
	System.Int32 [Client]System.Int32 Game.RoleSkillLogic::m_iLastSkillId -> a
	System.Int32 [Client]System.Int32 Game.RoleSkillLogic::m_iCurrentSkill -> B
	System.Int32 [Client]System.Int32 Game.RoleSkillLogic::m_iComboCount -> b
	System.Single [Client]System.Single Game.RoleSkillLogic::m_LastAttackSuccessTime -> A
	System.Single [Client]System.Single Game.RoleSkillLogic::m_LastShowComboTime -> a

	Game.RoleSkillLogic [Client]Game.RoleSkillLogic Game.RoleSkillLogic::Instance -> dropped
}

[Client]Game.WorkType -> [Client]e.i
{
	Game.WorkType [Client]Game.WorkType Game.WorkType::Idle -> A
	Game.WorkType [Client]Game.WorkType Game.WorkType::Move -> a
	Game.WorkType [Client]Game.WorkType Game.WorkType::Jump -> B
	Game.WorkType [Client]Game.WorkType Game.WorkType::NormalSkill -> b
	Game.WorkType [Client]Game.WorkType Game.WorkType::IntonateSkill -> C
	Game.WorkType [Client]Game.WorkType Game.WorkType::BeAttack -> c
	Game.WorkType [Client]Game.WorkType Game.WorkType::Dead -> D

	System.Int32 [Client]System.Int32 Game.WorkType::value__ skipped:  filtered
}

[Client]Game.Work -> [Client]e.J
{
	[Client]Game.Work::get_Finished[0]( ) -> c
	[Client]Game.Work::set_Finished[1]( System.Boolean ) -> A
	[Client]Game.Work::get_FirstTime[0]( ) -> D
	[Client]Game.Work::set_FirstTime[1]( System.Boolean ) -> a
	[Client]Game.Work::get_Character[0]( ) -> d
	[Client]Game.Work::set_Character[1]( Game.Character ) -> A
	[Client]Game.Work::GetWorkType[0]( ) -> A
	[Client]Game.Work::Start[0]( ) -> E
	[Client]Game.Work::End[0]( ) -> e
	[Client]Game.Work::CanDo[0]( ) -> a
	[Client]Game.Work::OnStart[0]( ) -> B
	[Client]Game.Work::OnEnd[0]( ) -> b
	[Client]Game.Work::OnUpdate[0]( ) -> C
	[Client]Game.Work::Update[0]( ) -> F
	[Client]Game.Work::Release[0]( ) -> f

	[Client]Game.Work::.ctor[0]( ) skipped:  special name
	[Client]Game.Work::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.Work::m_Log -> A
	System.Boolean [Client]System.Boolean Game.Work::<Finished>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.Work::<FirstTime>k__BackingField -> a
	Game.Character [Client]Game.Character Game.Work::<Character>k__BackingField -> A

	System.Boolean [Client]System.Boolean Game.Work::Finished -> dropped
	System.Boolean [Client]System.Boolean Game.Work::FirstTime -> dropped
	Game.Character [Client]Game.Character Game.Work::Character -> dropped
}

[Client]Game.IdleWork -> [Client]e.j
{
	[Client]Game.IdleWork::GetWorkType[0]( ) -> A
	[Client]Game.IdleWork::OnStart[0]( ) -> B
	[Client]Game.IdleWork::OnEnd[0]( ) -> b
	[Client]Game.IdleWork::OnUpdate[0]( ) -> C

	[Client]Game.IdleWork::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.IdleWork::m_ChangeTime -> A
	System.Single [Client]System.Single Game.IdleWork::m_LastChangeTime -> a
}

[Client]Game.MoveWork -> [Client]e.K
{
	[Client]Game.MoveWork::GetWorkType[0]( ) -> A
	[Client]Game.MoveWork::CanDo[0]( ) -> a
	[Client]Game.MoveWork::OnStart[0]( ) -> B
	[Client]Game.MoveWork::OnEnd[0]( ) -> b
	[Client]Game.MoveWork::OnUpdate[0]( ) -> C
	[Client]Game.MoveWork::get_Target[0]( ) -> c
	[Client]Game.MoveWork::set_Target[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.MoveWork::get_Type[0]( ) -> D
	[Client]Game.MoveWork::set_Type[1]( Game.MoveType ) -> A
	[Client]Game.MoveWork::get_Speed[0]( ) -> d
	[Client]Game.MoveWork::set_Speed[1]( System.Single ) -> A
	[Client]Game.MoveWork::get_SkillTarget[0]( ) -> E
	[Client]Game.MoveWork::set_SkillTarget[1]( Game.Character ) -> A
	[Client]Game.MoveWork::get_ToCastSkill[0]( ) -> e
	[Client]Game.MoveWork::set_ToCastSkill[1]( Game.Skill ) -> A
	[Client]Game.MoveWork::Distance[4]( System.Single, System.Single, System.Single, System.Single ) -> A

	[Client]Game.MoveWork::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.MoveWork::SkillRangeParam -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.MoveWork::m_MoveTo -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.MoveWork::<Target>k__BackingField -> a
	Game.MoveType [Client]Game.MoveType Game.MoveWork::<Type>k__BackingField -> A
	System.Single [Client]System.Single Game.MoveWork::<Speed>k__BackingField -> a
	Game.Character [Client]Game.Character Game.MoveWork::<SkillTarget>k__BackingField -> A
	Game.Skill [Client]Game.Skill Game.MoveWork::<ToCastSkill>k__BackingField -> A

	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.MoveWork::Target -> dropped
	Game.MoveType [Client]Game.MoveType Game.MoveWork::Type -> dropped
	System.Single [Client]System.Single Game.MoveWork::Speed -> dropped
	Game.Character [Client]Game.Character Game.MoveWork::SkillTarget -> dropped
	Game.Skill [Client]Game.Skill Game.MoveWork::ToCastSkill -> dropped
}

[Client]Game.SkillWork -> [Client]e.L
{
	[Client]Game.SkillWork::GetWorkType[0]( ) -> A
	[Client]Game.SkillWork::CanDo[0]( ) -> a
	[Client]Game.SkillWork::OnStart[0]( ) -> B
	[Client]Game.SkillWork::OnEnd[0]( ) -> b
	[Client]Game.SkillWork::OnUpdate[0]( ) -> C
	[Client]Game.SkillWork::get_Target[0]( ) -> c
	[Client]Game.SkillWork::set_Target[1]( System.UInt32 ) -> A
	[Client]Game.SkillWork::get_TargetPos[0]( ) -> D
	[Client]Game.SkillWork::set_TargetPos[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.SkillWork::get_Skill[0]( ) -> d
	[Client]Game.SkillWork::set_Skill[1]( Game.Skill ) -> A

	[Client]Game.SkillWork::.ctor[0]( ) skipped:  special name

	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.SkillWork::m_SkillTargetPoint -> A
	System.UInt32 [Client]System.UInt32 Game.SkillWork::<Target>k__BackingField -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.SkillWork::<TargetPos>k__BackingField -> A
	Game.Skill [Client]Game.Skill Game.SkillWork::<Skill>k__BackingField -> A

	System.UInt32 [Client]System.UInt32 Game.SkillWork::Target -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.SkillWork::TargetPos -> dropped
	Game.Skill [Client]Game.Skill Game.SkillWork::Skill -> dropped
}

[Client]Game.IntonateSkillWork -> [Client]e.l
{
	[Client]Game.IntonateSkillWork::GetWorkType[0]( ) -> A
	[Client]Game.IntonateSkillWork::OnStart[0]( ) -> B
	[Client]Game.IntonateSkillWork::OnEnd[0]( ) -> b
	[Client]Game.IntonateSkillWork::OnUpdate[0]( ) -> C
	[Client]Game.IntonateSkillWork::get_State[0]( ) -> c
	[Client]Game.IntonateSkillWork::set_State[1]( Game.IntonateSkillState ) -> A

	[Client]Game.IntonateSkillWork::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.IntonateSkillWork::m_StartTime -> A
	System.Int32 [Client]System.Int32 Game.IntonateSkillWork::m_IntonateEffectID -> A
	Game.IntonateSkillState [Client]Game.IntonateSkillState Game.IntonateSkillWork::<State>k__BackingField -> A

	Game.IntonateSkillState [Client]Game.IntonateSkillState Game.IntonateSkillWork::State -> dropped
}

[Client]Game.BeAttackedInfo -> [Client]e.M
{
	[Client]Game.BeAttackedInfo::get_AttackId[0]( ) -> A
	[Client]Game.BeAttackedInfo::set_AttackId[1]( System.UInt32 ) -> A
	[Client]Game.BeAttackedInfo::get_Skill[0]( ) -> a
	[Client]Game.BeAttackedInfo::set_Skill[1]( Game.Skill ) -> A
	[Client]Game.BeAttackedInfo::get_Hurt[0]( ) -> B
	[Client]Game.BeAttackedInfo::set_Hurt[1]( System.Int32 ) -> A
	[Client]Game.BeAttackedInfo::get_Effect[0]( ) -> b
	[Client]Game.BeAttackedInfo::set_Effect[1]( System.Byte ) -> A
	[Client]Game.BeAttackedInfo::get_HitPoint[0]( ) -> C
	[Client]Game.BeAttackedInfo::set_HitPoint[1]( System.Single ) -> A
	[Client]Game.BeAttackedInfo::get_StartTime[0]( ) -> c
	[Client]Game.BeAttackedInfo::set_StartTime[1]( System.Single ) -> a
	[Client]Game.BeAttackedInfo::get_BeImmediate[0]( ) -> D
	[Client]Game.BeAttackedInfo::set_BeImmediate[1]( System.Boolean ) -> A
	[Client]Game.BeAttackedInfo::get_BeDelay[0]( ) -> d
	[Client]Game.BeAttackedInfo::set_BeDelay[1]( System.Boolean ) -> a

	[Client]Game.BeAttackedInfo::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.BeAttackedInfo::<AttackId>k__BackingField -> A
	Game.Skill [Client]Game.Skill Game.BeAttackedInfo::<Skill>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.BeAttackedInfo::<Hurt>k__BackingField -> A
	System.Byte [Client]System.Byte Game.BeAttackedInfo::<Effect>k__BackingField -> A
	System.Single [Client]System.Single Game.BeAttackedInfo::<HitPoint>k__BackingField -> A
	System.Single [Client]System.Single Game.BeAttackedInfo::<StartTime>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.BeAttackedInfo::<BeImmediate>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.BeAttackedInfo::<BeDelay>k__BackingField -> a

	System.UInt32 [Client]System.UInt32 Game.BeAttackedInfo::AttackId -> dropped
	Game.Skill [Client]Game.Skill Game.BeAttackedInfo::Skill -> dropped
	System.Int32 [Client]System.Int32 Game.BeAttackedInfo::Hurt -> dropped
	System.Byte [Client]System.Byte Game.BeAttackedInfo::Effect -> dropped
	System.Single [Client]System.Single Game.BeAttackedInfo::HitPoint -> dropped
	System.Single [Client]System.Single Game.BeAttackedInfo::StartTime -> dropped
	System.Boolean [Client]System.Boolean Game.BeAttackedInfo::BeImmediate -> dropped
	System.Boolean [Client]System.Boolean Game.BeAttackedInfo::BeDelay -> dropped
}

[Client]Game.BeAttackedWork -> [Client]e.m
{
	[Client]Game.BeAttackedWork::GetWorkType[0]( ) -> A
	[Client]Game.BeAttackedWork::OnStart[0]( ) -> B
	[Client]Game.BeAttackedWork::OnEnd[0]( ) -> b
	[Client]Game.BeAttackedWork::OnUpdate[0]( ) -> C
	[Client]Game.BeAttackedWork::Add[1]( Game.BeAttackedInfo ) -> A

	[Client]Game.BeAttackedWork::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Game.BeAttackedInfo> [Client]System.Collections.Generic.List`1<Game.BeAttackedInfo> Game.BeAttackedWork::m_BeAttackeds -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.BeAttackedWork::m_SkillTargetPoint -> A
}

[Client]Game.DeadWork -> [Client]e.N
{
	[Client]Game.DeadWork::GetWorkType[0]( ) -> A
	[Client]Game.DeadWork::OnStart[0]( ) -> B
	[Client]Game.DeadWork::OnEnd[0]( ) -> b
	[Client]Game.DeadWork::OnUpdate[0]( ) -> C
	[Client]Game.DeadWork::get_Already[0]( ) -> c
	[Client]Game.DeadWork::set_Already[1]( System.Boolean ) -> A

	[Client]Game.DeadWork::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.DeadWork::DeadDisappareTime -> A
	System.Single [Client]System.Single Game.DeadWork::m_StartTime -> a
	System.Boolean [Client]System.Boolean Game.DeadWork::<Already>k__BackingField -> A

	System.Boolean [Client]System.Boolean Game.DeadWork::Already -> dropped
}

[Client]Game.WorkManager -> [Client]e.n
{
	[Client]Game.WorkManager::get_Item[1]( Game.WorkType ) -> A
	[Client]Game.WorkManager::Reset[0]( ) -> A
	[Client]Game.WorkManager::StopWork[1]( Game.WorkType ) -> a
	[Client]Game.WorkManager::IsWorking[1]( Game.WorkType ) -> B
	[Client]Game.WorkManager::CreateWork[1]( Game.WorkType ) -> b
	[Client]Game.WorkManager::Update[0]( ) -> a
	[Client]Game.WorkManager::Release[0]( ) -> B

	[Client]Game.WorkManager::.ctor[1]( Game.Character ) skipped:  special name

	System.Collections.Generic.Dictionary`2<Game.WorkType,Game.Work> [Client]System.Collections.Generic.Dictionary`2<Game.WorkType,Game.Work> Game.WorkManager::m_Works -> A

	Game.Work [Client]Game.Work Game.WorkManager::Item -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform -> [Client]e.O
{
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::TransformFile[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::TransformDirectory[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::get_BaseDirectory[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::set_BaseDirectory[1]( System.String ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::get_TrimIncomingPaths[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::set_TrimIncomingPaths[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::IsValidName[1]( System.String ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::MakeValidName[2]( System.String, System.Char ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::get_Replacement[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::set_Replacement[1]( System.Char ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::MaxPath -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::_baseDirectory -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::_trimIncomingPaths -> A
	System.Char [Client]System.Char ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::_replacementChar -> A
	System.Char[] [Client]System.Char[] ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::InvalidEntryChars -> A

	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::BaseDirectory -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::TrimIncomingPaths -> dropped
	System.Char [Client]System.Char ICSharpCode.SharpZipLib.Zip.WindowsNameTransform::Replacement -> dropped
}

[Client]ICSharpCode.SharpZipLib.Core.NameFilter -> [Client]e.p
{
	[Client]ICSharpCode.SharpZipLib.Core.NameFilter::IsMatch[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.NameFilter::IsValidExpression[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.NameFilter::IsValidFilterExpression[1]( System.String ) -> B
	[Client]ICSharpCode.SharpZipLib.Core.NameFilter::SplitQuoted[1]( System.String ) -> b
	[Client]ICSharpCode.SharpZipLib.Core.NameFilter::IsIncluded[1]( System.String ) -> C
	[Client]ICSharpCode.SharpZipLib.Core.NameFilter::IsExcluded[1]( System.String ) -> c
	[Client]ICSharpCode.SharpZipLib.Core.NameFilter::Compile[0]( ) -> A

	[Client]ICSharpCode.SharpZipLib.Core.NameFilter::ToString[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Core.NameFilter::.ctor[1]( System.String ) skipped:  special name

	System.String [Client]System.String ICSharpCode.SharpZipLib.Core.NameFilter::filter_ -> A
	System.Collections.ArrayList [Client]System.Collections.ArrayList ICSharpCode.SharpZipLib.Core.NameFilter::inclusions_ -> A
	System.Collections.ArrayList [Client]System.Collections.ArrayList ICSharpCode.SharpZipLib.Core.NameFilter::exclusions_ -> a
}

[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream -> [Client]e.Q
{
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::get_IsStreamOwner[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::MakeMaps[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::Initialize[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::InitBlock[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::EndBlock[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::Complete[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::BsSetStream[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::FillBuffer[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::BsR[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::BsGetUChar[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::BsGetIntVS[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::BsGetInt32[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::RecvDecodingTables[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::GetAndMoveToFrontDecode[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::SetupBlock[0]( ) -> f
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::SetupRandPartA[0]( ) -> G
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::SetupNoRandPartA[0]( ) -> g
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::SetupRandPartB[0]( ) -> H
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::SetupRandPartC[0]( ) -> h
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::SetupNoRandPartB[0]( ) -> I
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::SetupNoRandPartC[0]( ) -> i
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::SetDecompressStructureSizes[1]( System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::CompressedStreamEOF[0]( ) -> J
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::BlockOverrun[0]( ) -> j
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::BadBlockHeader[0]( ) -> K
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::CrcError[0]( ) -> k
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::HbCreateDecodeTables[7]( System.Int32[], System.Int32[], System.Int32[], System.Char[], System.Int32, System.Int32, System.Int32 ) -> A

	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::ReadByte[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::WriteByte[1]( System.Byte ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::.ctor[1]( System.IO.Stream ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::START_BLOCK_STATE -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::RAND_PART_A_STATE -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::RAND_PART_B_STATE -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::RAND_PART_C_STATE -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::NO_RAND_PART_A_STATE -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::NO_RAND_PART_B_STATE -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::NO_RAND_PART_C_STATE -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::last -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::origPtr -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::blockSize100k -> e
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::blockRandomised -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::bsBuff -> F
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::bsLive -> f
	ICSharpCode.SharpZipLib.Checksums.IChecksum [Client]ICSharpCode.SharpZipLib.Checksums.IChecksum ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::mCrc -> A
	System.Boolean[] [Client]System.Boolean[] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::inUse -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::nInUse -> G
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::seqToUnseq -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::unseqToSeq -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::selector -> B
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::selectorMtf -> b
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::tt -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::ll8 -> C
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::unzftab -> a
	System.Int32[][] [Client]System.Int32[][] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::limit -> A
	System.Int32[][] [Client]System.Int32[][] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::baseArray -> a
	System.Int32[][] [Client]System.Int32[][] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::perm -> B
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::minLens -> B
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::baseStream -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::streamEnd -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::currentChar -> g
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::currentState -> H
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::storedBlockCRC -> h
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::storedCombinedCRC -> I
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::computedBlockCRC -> i
	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::computedCombinedCRC -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::count -> J
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::chPrev -> j
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::ch2 -> K
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::tPos -> k
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::rNToGo -> L
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::rTPos -> l
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::i2 -> M
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::j2 -> m
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::z -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::isStreamOwner -> B

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::IsStreamOwner -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::CanSeek -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::CanWrite -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::Length -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.BZip2.BZip2InputStream::Position -> dropped
}

[Client]Game.SceneManager -> [Client]e.q
{
	[Client]Game.SceneManager::get_MapId[0]( ) -> A
	[Client]Game.SceneManager::set_MapId[1]( System.Int32 ) -> A
	[Client]Game.SceneManager::get_NeedLoadMap[0]( ) -> a
	[Client]Game.SceneManager::get_MapCarrys[0]( ) -> B
	[Client]Game.SceneManager::set_MapCarrys[1]( System.Collections.Generic.List`1<Game.DataSceneCarry> ) -> A
	[Client]Game.SceneManager::get_AmbientColor[0]( ) -> b
	[Client]Game.SceneManager::set_AmbientColor[1]( UnityEngine.Color ) -> A
	[Client]Game.SceneManager::get_Instance[0]( ) -> C
	[Client]Game.SceneManager::Init[0]( ) -> c
	[Client]Game.SceneManager::Release[0]( ) -> D
	[Client]Game.SceneManager::Reset[0]( ) -> d
	[Client]Game.SceneManager::Update[0]( ) -> E
	[Client]Game.SceneManager::RecoverAmbientColor[0]( ) -> e
	[Client]Game.SceneManager::ChangeMap[1]( System.UInt16 ) -> A
	[Client]Game.SceneManager::Load[0]( ) -> F
	[Client]Game.SceneManager::LoadAsync[0]( ) -> f
	[Client]Game.SceneManager::StopBgMusic[0]( ) -> G
	[Client]Game.SceneManager::StartBgMusic[0]( ) -> g
	[Client]Game.SceneManager::ChangeBgMusic[0]( ) -> H
	[Client]Game.SceneManager::LoadedBgMusicHandler[1]( UnityEngine.Object ) -> A
	[Client]Game.SceneManager::EnterCutScene[0]( ) -> h
	[Client]Game.SceneManager::EnterLoginScene[0]( ) -> I
	[Client]Game.SceneManager::EnterCreateScene[0]( ) -> i
	[Client]Game.SceneManager::PlayCutScene[0]( ) -> J
	[Client]Game.SceneManager::StopCutScene[0]( ) -> j
	[Client]Game.SceneManager::PlayVideo[1]( System.String ) -> A

	[Client]Game.SceneManager::.cctor[0]( ) skipped:  special name
	[Client]Game.SceneManager::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.SceneManager::MainCityId -> A
	System.Int32 [Client]System.Int32 Game.SceneManager::CutSceneId -> a
	System.Int32 [Client]System.Int32 Game.SceneManager::LoginSceneId -> B
	System.Int32 [Client]System.Int32 Game.SceneManager::CreateSceneId -> b
	System.Int32 [Client]System.Int32 Game.SceneManager::ArenaOffLineSceneId -> C
	log4net.ILog [Client]log4net.ILog Game.SceneManager::m_Log -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.SceneManager::m_Object -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.SceneManager::m_CutSceneObject -> a
	System.Boolean [Client]System.Boolean Game.SceneManager::m_NeedStopCutScene -> A
	System.String [Client]System.String Game.SceneManager::m_SceneFile -> A
	System.String [Client]System.String Game.SceneManager::m_SceneName -> a
	UnityEngine.AsyncOperation [Client]UnityEngine.AsyncOperation Game.SceneManager::m_AsyncRate -> A
	System.UInt32 [Client]System.UInt32 Game.SceneManager::m_MusicLoadTask -> A
	System.Boolean [Client]System.Boolean Game.SceneManager::m_NeedLoadMap -> a
	System.Boolean [Client]System.Boolean Game.SceneManager::m_NeedShowLoading -> B
	System.Int32 [Client]System.Int32 Game.SceneManager::m_LoadMapCountdown -> c
	System.Int32 [Client]System.Int32 Game.SceneManager::m_HideCountdown -> D
	System.Single [Client]System.Single Game.SceneManager::m_currSurfaceHeight -> A
	Game.SceneManager [Client]Game.SceneManager Game.SceneManager::m_Instance -> A
	System.Int32 [Client]System.Int32 Game.SceneManager::<MapId>k__BackingField -> d
	System.Collections.Generic.List`1<Game.DataSceneCarry> [Client]System.Collections.Generic.List`1<Game.DataSceneCarry> Game.SceneManager::<MapCarrys>k__BackingField -> A
	UnityEngine.Color [Client]UnityEngine.Color Game.SceneManager::<AmbientColor>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.SceneManager::MapId -> dropped
	System.Boolean [Client]System.Boolean Game.SceneManager::NeedLoadMap -> dropped
	System.Collections.Generic.List`1<Game.DataSceneCarry> [Client]System.Collections.Generic.List`1<Game.DataSceneCarry> Game.SceneManager::MapCarrys -> dropped
	UnityEngine.Color [Client]UnityEngine.Color Game.SceneManager::AmbientColor -> dropped
	Game.SceneManager [Client]Game.SceneManager Game.SceneManager::Instance -> dropped
}

[Client]Game.SceneManager/<LoadAsync>d__0 -> [Client]e.q/R
{
	[Client]Game.SceneManager/<LoadAsync>d__0::System.Collections.Generic.IEnumerator<System.Object>.get_Current[0]( ) -> A
	[Client]Game.SceneManager/<LoadAsync>d__0::System.Collections.IEnumerator.Reset[0]( ) -> a
	[Client]Game.SceneManager/<LoadAsync>d__0::System.IDisposable.Dispose[0]( ) -> B
	[Client]Game.SceneManager/<LoadAsync>d__0::System.Collections.IEnumerator.get_Current[0]( ) -> b

	[Client]Game.SceneManager/<LoadAsync>d__0::MoveNext[0]( ) skipped:  external base class or interface
	[Client]Game.SceneManager/<LoadAsync>d__0::.ctor[1]( System.Int32 ) skipped:  special name

	System.Object [Client]System.Object Game.SceneManager/<LoadAsync>d__0::<>2__current -> A
	System.Int32 [Client]System.Int32 Game.SceneManager/<LoadAsync>d__0::<>1__state -> A
	Game.SceneManager [Client]Game.SceneManager Game.SceneManager/<LoadAsync>d__0::<>4__this -> A
	System.Boolean [Client]System.Boolean Game.SceneManager/<LoadAsync>d__0::<useSteamedScene>5__1 -> A
	System.String [Client]System.String Game.SceneManager/<LoadAsync>d__0::<path>5__2 -> A
	UnityEngine.WWW [Client]UnityEngine.WWW Game.SceneManager/<LoadAsync>d__0::<www>5__3 -> A

	System.Object [Client]System.Object Game.SceneManager/<LoadAsync>d__0::System.Collections.Generic.IEnumerator<System.Object>.Current -> dropped
	System.Object [Client]System.Object Game.SceneManager/<LoadAsync>d__0::System.Collections.IEnumerator.Current -> dropped
}

[Client]Game.Msg.MsgOther -> [Client]e.r
{

	[Client]Game.Msg.MsgOther::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgOther::BaseType -> A
}

[Client]Game.Msg.MsgClientReqPVP -> [Client]e.S
{
	[Client]Game.Msg.MsgClientReqPVP::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqPVP::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqPVP::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqPVP::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqPVP::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqPVP::m_uiCharId -> A
}

[Client]Game.Msg.MsgServerReqPVP -> [Client]e.s
{
	[Client]Game.Msg.MsgServerReqPVP::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerReqPVP::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerReqPVP::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerReqPVP::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerReqPVP::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerReqPVP::m_uiCharId -> A
	System.String [Client]System.String Game.Msg.MsgServerReqPVP::m_strCharName -> A
}

[Client]Game.Msg.MsgClientAckPVP -> [Client]e.T
{
	[Client]Game.Msg.MsgClientAckPVP::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientAckPVP::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientAckPVP::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientAckPVP::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientAckPVP::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientAckPVP::m_uiCharId -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientAckPVP::m_bResult -> A
}

[Client]Game.Msg.MsgServerAckPVP -> [Client]e.t
{
	[Client]Game.Msg.MsgServerAckPVP::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckPVP::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckPVP::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckPVP::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckPVP::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckPVP::m_uiCharId -> A
	System.String [Client]System.String Game.Msg.MsgServerAckPVP::m_strCharName -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckPVP::m_bResult -> A
}

[Client]Game.Msg.MsgServerOpenUI -> [Client]e.U
{
	[Client]Game.Msg.MsgServerOpenUI::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerOpenUI::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerOpenUI::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerOpenUI::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerOpenUI::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerOpenUI::m_ebtUIIndex -> a
}

[Client]Game.Msg.MsgClientReqRankList -> [Client]e.u
{
	[Client]Game.Msg.MsgClientReqRankList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqRankList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqRankList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRankList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqRankList::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqRankList::m_usType -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRankList::m_btPage -> a
}

[Client]Game.Msg.MsgServerAckRankList -> [Client]e.V
{
	[Client]Game.Msg.MsgServerAckRankList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckRankList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckRankList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRankList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckRankList::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRankList::m_ebtType -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckRankList::m_usRank -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRankList::m_btMaxPage -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRankList::m_btBeginPage -> b
	System.Collections.Generic.List`1<Game.Msg.ClientRankData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientRankData> Game.Msg.MsgServerAckRankList::m_oVecRankData -> A
}

[Client]Game.Msg.MsgClientReqCharOnline -> [Client]e.v
{
	[Client]Game.Msg.MsgClientReqCharOnline::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqCharOnline::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqCharOnline::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqCharOnline::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqCharOnline::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqCharOnline::m_btPage -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqCharOnline::m_usType -> a
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.Msg.MsgClientReqCharOnline::m_oVecCharList -> A
}

[Client]Game.Msg.MsgServerAckCharOnline -> [Client]e.W
{
	[Client]Game.Msg.MsgServerAckCharOnline::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckCharOnline::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckCharOnline::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckCharOnline::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckCharOnline::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckCharOnline::m_btPage -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckCharOnline::m_usType -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckCharOnline::m_uiOnLIneMask -> A
}

[Client]Game.Msg.MsgClientReqRankExpeditionInfo -> [Client]e.w
{
	[Client]Game.Msg.MsgClientReqRankExpeditionInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqRankExpeditionInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqRankExpeditionInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRankExpeditionInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqRankExpeditionInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqRankExpeditionInfo::m_uiTargetID -> A
}

[Client]Game.Msg.MsgServerAckRankExpeditionInfo -> [Client]e.X
{
	[Client]Game.Msg.MsgServerAckRankExpeditionInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckRankExpeditionInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckRankExpeditionInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRankExpeditionInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckRankExpeditionInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckRankExpeditionInfo::m_uiTargetID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRankExpeditionInfo::m_btLevel -> a
	System.Collections.Generic.List`1<Game.Msg.RankExpeditionInfo> [Client]System.Collections.Generic.List`1<Game.Msg.RankExpeditionInfo> Game.Msg.MsgServerAckRankExpeditionInfo::m_oVecShipList -> A
}

[Client]Game.Msg.MsgServerCloseUI -> [Client]e.x
{
	[Client]Game.Msg.MsgServerCloseUI::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCloseUI::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCloseUI::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCloseUI::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCloseUI::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerCloseUI::m_ebtUIIndex -> a
}

[Client]Game.Msg.MsgClientReqTelephoneFare -> [Client]e.Y
{
	[Client]Game.Msg.MsgClientReqTelephoneFare::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqTelephoneFare::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqTelephoneFare::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqTelephoneFare::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqTelephoneFare::Type -> A
	System.String [Client]System.String Game.Msg.MsgClientReqTelephoneFare::m_strUDID -> A
	System.String [Client]System.String Game.Msg.MsgClientReqTelephoneFare::m_strPhoneNumber -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqTelephoneFare::m_ebtFareType -> a
}

[Client]Game.Msg.MsgServerAckTelephoneFare -> [Client]e.y
{
	[Client]Game.Msg.MsgServerAckTelephoneFare::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckTelephoneFare::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckTelephoneFare::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckTelephoneFare::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckTelephoneFare::Type -> A
}

[Client]Game.Msg.MsgClientReqCommentGame -> [Client]e.Z
{
	[Client]Game.Msg.MsgClientReqCommentGame::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqCommentGame::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqCommentGame::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqCommentGame::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqCommentGame::Type -> A
}

[Client]Game.Msg.MsgMail -> [Client]e.z
{

	[Client]Game.Msg.MsgMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgMail::BaseType -> A
}

[Client]Game.Msg.MsgClientReqSendMail -> [Client]F.A
{
	[Client]Game.Msg.MsgClientReqSendMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqSendMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqSendMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSendMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqSendMail::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqSendMail::m_uiTargetID -> A
	System.String [Client]System.String Game.Msg.MsgClientReqSendMail::m_strTargetName -> A
	System.String [Client]System.String Game.Msg.MsgClientReqSendMail::m_strContent -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqSendMail::m_uiMoney -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqSendMail::m_uiGold -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqSendMail::m_uiExp -> b
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqSendMail::m_uiPayNum -> C
	System.Collections.Generic.List`1<System.UInt64> [Client]System.Collections.Generic.List`1<System.UInt64> Game.Msg.MsgClientReqSendMail::m_oVecItemIDVec -> A
}

[Client]Game.Msg.MsgServerAckSendMail -> [Client]F.a
{
	[Client]Game.Msg.MsgServerAckSendMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckSendMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckSendMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckSendMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckSendMail::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckSendMail::m_bResult -> A
}

[Client]Game.Msg.MsgClientReqDeleteMail -> [Client]F.B
{
	[Client]Game.Msg.MsgClientReqDeleteMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqDeleteMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqDeleteMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqDeleteMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqDeleteMail::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqDeleteMail::m_uiID -> A
}

[Client]Game.Msg.MsgServerAckDeleteMail -> [Client]F.b
{
	[Client]Game.Msg.MsgServerAckDeleteMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckDeleteMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckDeleteMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckDeleteMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckDeleteMail::Type -> A
	Game.Msg.MailDeleteResult [Client]Game.Msg.MailDeleteResult Game.Msg.MsgServerAckDeleteMail::m_stDeleteResult -> A
}

[Client]Game.Msg.MsgClientReqRefreshMail -> [Client]F.C
{
	[Client]Game.Msg.MsgClientReqRefreshMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqRefreshMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqRefreshMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRefreshMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqRefreshMail::Type -> A
}

[Client]Game.Msg.MsgServerAckRefreshMail -> [Client]F.c
{
	[Client]Game.Msg.MsgServerAckRefreshMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckRefreshMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckRefreshMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRefreshMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckRefreshMail::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ClientMailData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientMailData> Game.Msg.MsgServerAckRefreshMail::m_oVecMailVec -> A
}

[Client]Game.Msg.MsgServerNotifyReceiveMail -> [Client]F.D
{
	[Client]Game.Msg.MsgServerNotifyReceiveMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyReceiveMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyReceiveMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyReceiveMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyReceiveMail::Type -> A
	Game.Msg.ClientMailData [Client]Game.Msg.ClientMailData Game.Msg.MsgServerNotifyReceiveMail::m_stMailData -> A
}

[Client]Game.Msg.MsgClientReqHaveReadMail -> [Client]F.d
{
	[Client]Game.Msg.MsgClientReqHaveReadMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqHaveReadMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqHaveReadMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqHaveReadMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqHaveReadMail::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqHaveReadMail::m_uiID -> A
}

[Client]Game.Msg.MsgClientReqGetMailAccessory -> [Client]F.E
{
	[Client]Game.Msg.MsgClientReqGetMailAccessory::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqGetMailAccessory::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqGetMailAccessory::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqGetMailAccessory::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGetMailAccessory::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqGetMailAccessory::m_uiID -> A
}

[Client]Game.Msg.MsgServerAckGetMailAccessory -> [Client]F.e
{
	[Client]Game.Msg.MsgServerAckGetMailAccessory::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckGetMailAccessory::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckGetMailAccessory::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGetMailAccessory::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGetMailAccessory::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckGetMailAccessory::m_uiID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGetMailAccessory::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientReqMassDeleteMail -> [Client]F.F
{
	[Client]Game.Msg.MsgClientReqMassDeleteMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqMassDeleteMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqMassDeleteMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqMassDeleteMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqMassDeleteMail::Type -> A
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.Msg.MsgClientReqMassDeleteMail::m_oVecMailList -> A
}

[Client]Game.Msg.MsgServerAckMassDeleteMail -> [Client]F.f
{
	[Client]Game.Msg.MsgServerAckMassDeleteMail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckMassDeleteMail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckMassDeleteMail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMassDeleteMail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckMassDeleteMail::Type -> A
	System.Collections.Generic.List`1<Game.Msg.MailDeleteResult> [Client]System.Collections.Generic.List`1<Game.Msg.MailDeleteResult> Game.Msg.MsgServerAckMassDeleteMail::m_oVecResultList -> A
}

[Client]Game.Msg.MsgHeader -> [Client]F.G
{
	[Client]Game.Msg.MsgHeader::GetHeaderLength[0]( ) -> A

	System.Int32 [Client]System.Int32 Game.Msg.MsgHeader::length -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgHeader::type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgHeader::basetype -> A
	System.Byte [Client]System.Byte Game.Msg.MsgHeader::subtype -> a
}

[Client]Game.Msg.MsgDynamic -> [Client]F.H
{
	[Client]Game.Msg.MsgDynamic::get_Buffer[0]( ) -> A
	[Client]Game.Msg.MsgDynamic::set_Buffer[1]( System.Byte[] ) -> A

	[Client]Game.Msg.MsgDynamic::Dispose[0]( ) skipped:  external base class or interface
	[Client]Game.Msg.MsgDynamic::.ctor[0]( ) skipped:  special name

	System.Byte[] [Client]System.Byte[] Game.Msg.MsgDynamic::m_Buffer -> A

	System.Byte[] [Client]System.Byte[] Game.Msg.MsgDynamic::Buffer -> dropped
}

[Client]Game.Msg.STDBRoleInfo -> [Client]F.h
{
	[Client]Game.Msg.STDBRoleInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.STDBRoleInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.STDBRoleInfo::.ctor[0]( ) skipped:  special name

	Game.Msg.STCreateInfo [Client]Game.Msg.STCreateInfo Game.Msg.STDBRoleInfo::m_stCreateInfo -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.STDBRoleInfo::m_uiRoleID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.STDBRoleInfo::m_usLevel -> A
	System.Byte [Client]System.Byte Game.Msg.STDBRoleInfo::m_btIsDel -> A
}

[Client]Game.Msg.STCommodity -> [Client]F.I
{
	[Client]Game.Msg.STCommodity::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.STCommodity::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.STCommodity::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.STCommodity::m_uiID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.STCommodity::m_usBaseType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.STCommodity::m_usSubType -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.STCommodity::m_uiPrice -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.STCommodity::m_usRebate -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.STCommodity::m_uiItemID -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.STCommodity::m_uiVarID -> b
	System.Boolean [Client]System.Boolean Game.Msg.STCommodity::m_bCanBuy -> A
	System.Boolean [Client]System.Boolean Game.Msg.STCommodity::m_bIsHot -> a
	System.Boolean [Client]System.Boolean Game.Msg.STCommodity::m_bCanUseGive -> B
	System.String [Client]System.String Game.Msg.STCommodity::m_strDescription -> A
}

[Client]Game.Msg.SGemSocketData -> [Client]F.i
{
	[Client]Game.Msg.SGemSocketData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SGemSocketData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SGemSocketData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.SGemSocketData::m_btSocketIndex -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.SGemSocketData::m_ulGemID -> A
}

[Client]Game.Msg.MsgTaskAckNpc_Task -> [Client]F.J
{
	[Client]Game.Msg.MsgTaskAckNpc_Task::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgTaskAckNpc_Task::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgTaskAckNpc_Task::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Msg.MsgTaskAckNpc_Task::m_usTaskID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgTaskAckNpc_Task::m_btTaskState -> A
}

[Client]Game.Msg.FightAssistantConfig -> [Client]F.j
{
	[Client]Game.Msg.FightAssistantConfig::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.FightAssistantConfig::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.FightAssistantConfig::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Msg.FightAssistantConfig::AutoSkillsSize -> A
	System.Boolean [Client]System.Boolean Game.Msg.FightAssistantConfig::m_bAutoFight -> A
	System.Boolean [Client]System.Boolean Game.Msg.FightAssistantConfig::m_bAutoUseMedicine -> a
	System.Boolean [Client]System.Boolean Game.Msg.FightAssistantConfig::m_bAutoUseShopMedicine -> B
	System.Single [Client]System.Single Game.Msg.FightAssistantConfig::m_fUseMedicineHp -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.FightAssistantConfig::m_abtAutoSkills -> A
	System.Boolean [Client]System.Boolean Game.Msg.FightAssistantConfig::m_bAutoPick -> b
	System.Boolean [Client]System.Boolean Game.Msg.FightAssistantConfig::m_bAutoCure -> C
	System.Single [Client]System.Single Game.Msg.FightAssistantConfig::m_fCureHp -> a
	System.Boolean [Client]System.Boolean Game.Msg.FightAssistantConfig::m_bOnlyTeam -> c
	System.Boolean [Client]System.Boolean Game.Msg.FightAssistantConfig::m_bFirstSelf -> D
	System.Byte [Client]System.Byte Game.Msg.FightAssistantConfig::m_btRange -> A
}

[Client]Game.Msg.ExpeditionRewardItemData -> [Client]F.K
{
	[Client]Game.Msg.ExpeditionRewardItemData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ExpeditionRewardItemData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ExpeditionRewardItemData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ExpeditionRewardItemData::m_uiItemId -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionRewardItemData::m_btNum -> A
}

[Client]Game.Msg.CSnapShotPetAll -> [Client]F.k
{
	[Client]Game.Msg.CSnapShotPetAll::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotPetAll::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotPetAll::.ctor[0]( ) skipped:  special name

	Game.Msg.CSnapShotFighterData [Client]Game.Msg.CSnapShotFighterData Game.Msg.CSnapShotPetAll::m_stFighterData -> A
	Game.Msg.CSnapShotPetData [Client]Game.Msg.CSnapShotPetData Game.Msg.CSnapShotPetAll::m_stPetData -> A
}

[Client]Game.Msg.CSnapShotBotData -> [Client]F.L
{
	[Client]Game.Msg.CSnapShotBotData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotBotData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotBotData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.CSnapShotBotData::m_btSex -> A
	System.Byte [Client]System.Byte Game.Msg.CSnapShotBotData::m_btProfession -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotBotData::m_uiPlayerID -> A
}

[Client]Game.Msg.CSnapShotBaseData -> [Client]F.l
{
	[Client]Game.Msg.CSnapShotBaseData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotBaseData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotBaseData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotBaseData::m_uiID -> A
	System.String [Client]System.String Game.Msg.CSnapShotBaseData::m_strName -> A
	System.Single [Client]System.Single Game.Msg.CSnapShotBaseData::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.CSnapShotBaseData::m_fPosY -> a
	System.Single [Client]System.Single Game.Msg.CSnapShotBaseData::m_fMoveSpeed -> B
}

[Client]Game.Logic.Login -> [Client]F.M
{
	[Client]Game.Logic.Login::get_LineId[0]( ) -> A
	[Client]Game.Logic.Login::set_LineId[1]( System.Int32 ) -> A
	[Client]Game.Logic.Login::get_ServerName[0]( ) -> a
	[Client]Game.Logic.Login::get_Host[0]( ) -> B
	[Client]Game.Logic.Login::get_Port[0]( ) -> b
	[Client]Game.Logic.Login::get_TestUserName[0]( ) -> C
	[Client]Game.Logic.Login::get_LoggedInPlatform[0]( ) -> c
	[Client]Game.Logic.Login::get_UserId[0]( ) -> D
	[Client]Game.Logic.Login::get_Account[0]( ) -> d
	[Client]Game.Logic.Login::get_Token[0]( ) -> E
	[Client]Game.Logic.Login::get_CharList[0]( ) -> e
	[Client]Game.Logic.Login::get_Instance[0]( ) -> F
	[Client]Game.Logic.Login::Start[0]( ) -> f
	[Client]Game.Logic.Login::ConnectAndLoginToServer[2]( System.String, System.String ) -> A
	[Client]Game.Logic.Login::ConnectCallback[0]( ) -> G
	[Client]Game.Logic.Login::OnSdkLoginSuccess[0]( ) -> g
	[Client]Game.Logic.Login::OnSdkLoginCancel[0]( ) -> H
	[Client]Game.Logic.Login::OnSdkLoginFail[0]( ) -> h
	[Client]Game.Logic.Login::OnSdkLogout[0]( ) -> I
	[Client]Game.Logic.Login::OnSdkLogoutRestart[0]( ) -> i
	[Client]Game.Logic.Login::OnSdkTokenInvalid[0]( ) -> J
	[Client]Game.Logic.Login::RefreshLoginInfo[0]( ) -> j
	[Client]Game.Logic.Login::LoginToServer[0]( ) -> K
	[Client]Game.Logic.Login::OnMsgServerVersion[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Login::OpenUpdateUrl[0]( ) -> k
	[Client]Game.Logic.Login::OnMsgServerLoginResult[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Login::OnMsgServerDisconnect[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.Login::GetDeleteLeftTime[1]( System.Int32 ) -> a
	[Client]Game.Logic.Login::OnMsgServerCharList[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.Login::ReqEnterWorld[1]( System.Int32 ) -> B
	[Client]Game.Logic.Login::OnMsgServerCreateChar[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Logic.Login::OnMsgServerAckAcessToken[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.Logic.Login::OnMsgServer360UserInfo[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.Logic.Login::SendMsgCreateChar[4]( System.String, System.UInt16, System.Byte, System.UInt32 ) -> A
	[Client]Game.Logic.Login::SendMsgSelectPlayer[0]( ) -> L
	[Client]Game.Logic.Login::GetLineInfo[0]( ) -> l
	[Client]Game.Logic.Login::OnMsgServerLineInfo[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.Logic.Login::SendMsgChangeLine[1]( System.Int32 ) -> b
	[Client]Game.Logic.Login::CancleDeleteCharacter[1]( System.Int32 ) -> C
	[Client]Game.Logic.Login::OnMsgServerCancleDeleteChar[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.Logic.Login::DeleteCharacter[1]( System.Int32 ) -> c
	[Client]Game.Logic.Login::OnMsgServerDeleteChar[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.Logic.Login::ReselectCharacter[0]( ) -> M
	[Client]Game.Logic.Login::ConnectToServer[2]( System.String, System.Int32 ) -> A
	[Client]Game.Logic.Login::SendMsgCheckVersion[0]( ) -> m
	[Client]Game.Logic.Login::SendMsgClientLogin[0]( ) -> N
	[Client]Game.Logic.Login::OnMsgServerSwitchLine[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.Logic.Login::ShowAnnouncement[0]( ) -> n
	[Client]Game.Logic.Login::CheckDeviceCapability[0]( ) -> O

	[Client]Game.Logic.Login::.cctor[0]( ) skipped:  special name
	[Client]Game.Logic.Login::.ctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.Logic.Login::m_Log -> A
	System.UInt64 [Client]System.UInt64 Game.Logic.Login::m_ServerAccountID -> A
	System.String [Client]System.String Game.Logic.Login::m_ServerName -> A
	System.String [Client]System.String Game.Logic.Login::m_Host -> a
	System.Int32 [Client]System.Int32 Game.Logic.Login::m_Port -> A
	System.String [Client]System.String Game.Logic.Login::m_strTestUser -> B
	System.Boolean [Client]System.Boolean Game.Logic.Login::m_LoggedInPlatform -> A
	System.UInt16 [Client]System.UInt16 Game.Logic.Login::m_PlatformId -> A
	System.Int64 [Client]System.Int64 Game.Logic.Login::m_UserId -> A
	System.String [Client]System.String Game.Logic.Login::m_strAccount -> b
	System.String [Client]System.String Game.Logic.Login::m_strToken -> C
	System.Single [Client]System.Single Game.Logic.Login::m_LastSendLoginMsgTime -> A
	System.Single [Client]System.Single Game.Logic.Login::m_LastSendCreateMsgTime -> a
	System.Boolean [Client]System.Boolean Game.Logic.Login::m_ReselectCharacter -> a
	System.Single [Client]System.Single Game.Logic.Login::m_GetCharListTime -> B
	Game.Msg.MsgServerCharList [Client]Game.Msg.MsgServerCharList Game.Logic.Login::m_CharList -> A
	Game.Logic.Login [Client]Game.Logic.Login Game.Logic.Login::m_Instance -> A
	System.Int32 [Client]System.Int32 Game.Logic.Login::<LineId>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.Logic.Login::LineId -> dropped
	System.String [Client]System.String Game.Logic.Login::ServerName -> dropped
	System.String [Client]System.String Game.Logic.Login::Host -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Login::Port -> dropped
	System.String [Client]System.String Game.Logic.Login::TestUserName -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Login::LoggedInPlatform -> dropped
	System.Int64 [Client]System.Int64 Game.Logic.Login::UserId -> dropped
	System.String [Client]System.String Game.Logic.Login::Account -> dropped
	System.String [Client]System.String Game.Logic.Login::Token -> dropped
	Game.Msg.MsgServerCharList [Client]Game.Msg.MsgServerCharList Game.Logic.Login::CharList -> dropped
	Game.Logic.Login [Client]Game.Logic.Login Game.Logic.Login::Instance -> dropped
}

[Client]Game.LogicManager -> [Client]F.m
{
	[Client]Game.LogicManager::get_Instance[0]( ) -> A
	[Client]Game.LogicManager::get_SystemTime[0]( ) -> a
	[Client]Game.LogicManager::Init[0]( ) -> B
	[Client]Game.LogicManager::Release[0]( ) -> b
	[Client]Game.LogicManager::Reset[0]( ) -> C
	[Client]Game.LogicManager::Update[0]( ) -> c
	[Client]Game.LogicManager::SetSystemTime[1]( System.UInt32 ) -> A
	[Client]Game.LogicManager::SendSystemTimeReq[0]( ) -> D
	[Client]Game.LogicManager::OnMsgServerAckSystemTime[1]( Game.Msg.RecvMsgPacket ) -> A

	[Client]Game.LogicManager::.cctor[0]( ) skipped:  special name
	[Client]Game.LogicManager::.ctor[0]( ) skipped:  special name

	Game.LogicManager [Client]Game.LogicManager Game.LogicManager::m_Instance -> A
	System.DateTime [Client]System.DateTime Game.LogicManager::m_SystemTime -> A
	System.Single [Client]System.Single Game.LogicManager::m_UpdateSystemTime -> A

	Game.LogicManager [Client]Game.LogicManager Game.LogicManager::Instance -> dropped
	System.DateTime [Client]System.DateTime Game.LogicManager::SystemTime -> dropped
}

[Client]Game.Logic.AppStoreReceipt -> [Client]F.N
{

	[Client]Game.Logic.AppStoreReceipt::.ctor[0]( ) skipped:  special name

	System.UInt64 [Client]System.UInt64 Game.Logic.AppStoreReceipt::m_AccountId -> A
	System.String [Client]System.String Game.Logic.AppStoreReceipt::m_ProductId -> A
	System.String [Client]System.String Game.Logic.AppStoreReceipt::m_TransactionId -> a
	System.String [Client]System.String Game.Logic.AppStoreReceipt::m_Receipt -> B
}

[Client]Game.Logic.Payment -> [Client]F.n
{
	[Client]Game.Logic.Payment::get_EnablePay[0]( ) -> A
	[Client]Game.Logic.Payment::set_EnablePay[1]( System.Boolean ) -> A
	[Client]Game.Logic.Payment::get_Instance[0]( ) -> a
	[Client]Game.Logic.Payment::Init[0]( ) -> B
	[Client]Game.Logic.Payment::InitReceipt[0]( ) -> b
	[Client]Game.Logic.Payment::Release[0]( ) -> C
	[Client]Game.Logic.Payment::Reset[0]( ) -> c
	[Client]Game.Logic.Payment::Update[0]( ) -> D
	[Client]Game.Logic.Payment::Charge[1]( System.UInt32 ) -> A
	[Client]Game.Logic.Payment::OnMsgServerChargeOrder[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Payment::OnMsgServerAckIosRecharge[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Payment::OnMessageNotify[1]( System.String ) -> A
	[Client]Game.Logic.Payment::OnMessageDebug[1]( System.String ) -> a
	[Client]Game.Logic.Payment::OnMessageTransaction[1]( System.String ) -> B
	[Client]Game.Logic.Payment::SendMsgClientReqIosRecharge[1]( Game.Logic.AppStoreReceipt ) -> A
	[Client]Game.Logic.Payment::OnOrderAppStore[1]( System.Int32 ) -> A
	[Client]Game.Logic.Payment::ReadReceiptFromDisk[0]( ) -> d
	[Client]Game.Logic.Payment::SaveReceiptToDisk[0]( ) -> E
	[Client]Game.Logic.Payment::SendMsgReqCharge[1]( System.UInt32 ) -> a
	[Client]Game.Logic.Payment::OnSdkPaySuccess[0]( ) -> e
	[Client]Game.Logic.Payment::OnSdkPayCancel[0]( ) -> F
	[Client]Game.Logic.Payment::OnSdkPayFail[0]( ) -> f
	[Client]Game.Logic.Payment::OnSdkPayInvalidOrder[0]( ) -> G
	[Client]Game.Logic.Payment::OnSdkPaySubmit[0]( ) -> g

	[Client]Game.Logic.Payment::.cctor[0]( ) skipped:  special name
	[Client]Game.Logic.Payment::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.Logic.Payment::m_FilePath -> A
	log4net.ILog [Client]log4net.ILog Game.Logic.Payment::m_Log -> A
	System.Single [Client]System.Single Game.Logic.Payment::m_LastSendPaymentMsgTime -> A
	System.Single [Client]System.Single Game.Logic.Payment::m_LastCheckReceiptTime -> a
	System.Collections.Generic.List`1<Game.Logic.AppStoreReceipt> [Client]System.Collections.Generic.List`1<Game.Logic.AppStoreReceipt> Game.Logic.Payment::m_AllReceipts -> A
	Game.Logic.Payment [Client]Game.Logic.Payment Game.Logic.Payment::m_Instance -> A
	System.Boolean [Client]System.Boolean Game.Logic.Payment::<EnablePay>k__BackingField -> A

	System.Boolean [Client]System.Boolean Game.Logic.Payment::EnablePay -> dropped
	Game.Logic.Payment [Client]Game.Logic.Payment Game.Logic.Payment::Instance -> dropped
}

[Client]Game.CharacterConfig -> [Client]F.O
{
	[Client]Game.CharacterConfig::get_TraceTaskId[0]( ) -> A
	[Client]Game.CharacterConfig::set_TraceTaskId[1]( System.UInt32 ) -> A
	[Client]Game.CharacterConfig::get_Instance[0]( ) -> a
	[Client]Game.CharacterConfig::get_ConfigFileName[0]( ) -> B
	[Client]Game.CharacterConfig::Reset[0]( ) -> b
	[Client]Game.CharacterConfig::SaveCharacterConfig[0]( ) -> C
	[Client]Game.CharacterConfig::LoadCharacterConfig[0]( ) -> c

	[Client]Game.CharacterConfig::.cctor[0]( ) skipped:  special name
	[Client]Game.CharacterConfig::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.CharacterConfig::TraceTaskName -> A
	System.UInt32 [Client]System.UInt32 Game.CharacterConfig::m_TraceTaskId -> A
	Game.CharacterConfig [Client]Game.CharacterConfig Game.CharacterConfig::m_Instance -> A

	System.UInt32 [Client]System.UInt32 Game.CharacterConfig::TraceTaskId -> dropped
	Game.CharacterConfig [Client]Game.CharacterConfig Game.CharacterConfig::Instance -> dropped
	System.String [Client]System.String Game.CharacterConfig::ConfigFileName -> dropped
}

[Client]Game.DataHumanoidModel -> [Client]F.o
{
	[Client]Game.DataHumanoidModel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataHumanoidModel::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataHumanoidModel::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataHumanoidModel::get_Id[0]( ) -> A
	[Client]Game.DataHumanoidModel::set_Id[1]( System.Int32 ) -> A
	[Client]Game.DataHumanoidModel::get_Profession[0]( ) -> a
	[Client]Game.DataHumanoidModel::set_Profession[1]( System.Int32 ) -> a
	[Client]Game.DataHumanoidModel::get_Sex[0]( ) -> B
	[Client]Game.DataHumanoidModel::set_Sex[1]( System.Int32 ) -> B
	[Client]Game.DataHumanoidModel::get_Weapon[0]( ) -> b
	[Client]Game.DataHumanoidModel::set_Weapon[1]( System.Int32 ) -> b
	[Client]Game.DataHumanoidModel::get_Armour[0]( ) -> C
	[Client]Game.DataHumanoidModel::set_Armour[1]( System.Int32 ) -> C
	[Client]Game.DataHumanoidModel::get_Hair[0]( ) -> c
	[Client]Game.DataHumanoidModel::set_Hair[1]( System.Int32 ) -> c
	[Client]Game.DataHumanoidModel::get_Dress[0]( ) -> D
	[Client]Game.DataHumanoidModel::set_Dress[1]( System.Int32 ) -> D
	[Client]Game.DataHumanoidModel::get_ShowDress[0]( ) -> d
	[Client]Game.DataHumanoidModel::set_ShowDress[1]( System.Boolean ) -> A

	[Client]Game.DataHumanoidModel::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::<Id>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::<Profession>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::<Sex>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::<Weapon>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::<Armour>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::<Hair>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::<Dress>k__BackingField -> D
	System.Boolean [Client]System.Boolean Game.DataHumanoidModel::<ShowDress>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::Id -> dropped
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::Profession -> dropped
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::Sex -> dropped
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::Weapon -> dropped
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::Armour -> dropped
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::Hair -> dropped
	System.Int32 [Client]System.Int32 Game.DataHumanoidModel::Dress -> dropped
	System.Boolean [Client]System.Boolean Game.DataHumanoidModel::ShowDress -> dropped
}

[Client]Game.DataHumanoidModelManager -> [Client]F.P
{
	[Client]Game.DataHumanoidModelManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataHumanoidModelManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataHumanoidModelManager::Clear[0]( ) -> A
	[Client]Game.DataHumanoidModelManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataHumanoidModelManager::GetDataById[1]( System.Int32 ) -> A
	[Client]Game.DataHumanoidModelManager::GetDataListById[1]( System.Int32 ) -> a
	[Client]Game.DataHumanoidModelManager::GetDataByProfession[1]( System.Int32 ) -> B
	[Client]Game.DataHumanoidModelManager::GetDataListByProfession[1]( System.Int32 ) -> b
	[Client]Game.DataHumanoidModelManager::GetDataBySex[1]( System.Int32 ) -> C
	[Client]Game.DataHumanoidModelManager::GetDataListBySex[1]( System.Int32 ) -> c
	[Client]Game.DataHumanoidModelManager::GetDataByWeapon[1]( System.Int32 ) -> D
	[Client]Game.DataHumanoidModelManager::GetDataListByWeapon[1]( System.Int32 ) -> d
	[Client]Game.DataHumanoidModelManager::GetDataByArmour[1]( System.Int32 ) -> E
	[Client]Game.DataHumanoidModelManager::GetDataListByArmour[1]( System.Int32 ) -> e
	[Client]Game.DataHumanoidModelManager::GetDataByHair[1]( System.Int32 ) -> F
	[Client]Game.DataHumanoidModelManager::GetDataListByHair[1]( System.Int32 ) -> f
	[Client]Game.DataHumanoidModelManager::GetDataByDress[1]( System.Int32 ) -> G
	[Client]Game.DataHumanoidModelManager::GetDataListByDress[1]( System.Int32 ) -> g
	[Client]Game.DataHumanoidModelManager::GetDataByShowDress[1]( System.Boolean ) -> A
	[Client]Game.DataHumanoidModelManager::GetDataListByShowDress[1]( System.Boolean ) -> a
	[Client]Game.DataHumanoidModelManager::get_Instance[0]( ) -> a
	[Client]Game.DataHumanoidModelManager::get_DataList[0]( ) -> B
	[Client]Game.DataHumanoidModelManager::get_Count[0]( ) -> b

	[Client]Game.DataHumanoidModelManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataHumanoidModelManager::.ctor[0]( ) skipped:  special name

	Game.DataHumanoidModelManager [Client]Game.DataHumanoidModelManager Game.DataHumanoidModelManager::instance -> A
	System.Collections.Generic.List`1<Game.DataHumanoidModel> [Client]System.Collections.Generic.List`1<Game.DataHumanoidModel> Game.DataHumanoidModelManager::dataList -> A

	Game.DataHumanoidModelManager [Client]Game.DataHumanoidModelManager Game.DataHumanoidModelManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataHumanoidModel> [Client]System.Collections.Generic.List`1<Game.DataHumanoidModel> Game.DataHumanoidModelManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataHumanoidModelManager::Count -> dropped
}

[Client]Game.DataFaction -> [Client]F.p
{
	[Client]Game.DataFaction::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFaction::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFaction::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFaction::get_FactionID[0]( ) -> A
	[Client]Game.DataFaction::set_FactionID[1]( System.Int32 ) -> A
	[Client]Game.DataFaction::get_FriendFactions[0]( ) -> a
	[Client]Game.DataFaction::set_FriendFactions[1]( System.Collections.Generic.List`1<System.Int32> ) -> A

	[Client]Game.DataFaction::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataFaction::<FactionID>k__BackingField -> A
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataFaction::<FriendFactions>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataFaction::FactionID -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataFaction::FriendFactions -> dropped
}

[Client]Game.DataFactionManager -> [Client]F.Q
{
	[Client]Game.DataFactionManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFactionManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFactionManager::Clear[0]( ) -> A
	[Client]Game.DataFactionManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFactionManager::GetDataByFactionID[1]( System.Int32 ) -> A
	[Client]Game.DataFactionManager::GetDataListByFactionID[1]( System.Int32 ) -> a
	[Client]Game.DataFactionManager::GetDataByFriendFactions[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataFactionManager::GetDataListByFriendFactions[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataFactionManager::get_Instance[0]( ) -> a
	[Client]Game.DataFactionManager::get_DataList[0]( ) -> B
	[Client]Game.DataFactionManager::get_Count[0]( ) -> b

	[Client]Game.DataFactionManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataFactionManager::.ctor[0]( ) skipped:  special name

	Game.DataFactionManager [Client]Game.DataFactionManager Game.DataFactionManager::instance -> A
	System.Collections.Generic.List`1<Game.DataFaction> [Client]System.Collections.Generic.List`1<Game.DataFaction> Game.DataFactionManager::dataList -> A

	Game.DataFactionManager [Client]Game.DataFactionManager Game.DataFactionManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataFaction> [Client]System.Collections.Generic.List`1<Game.DataFaction> Game.DataFactionManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataFactionManager::Count -> dropped
}

[Client]Game.DataEquipGrade -> [Client]F.q
{
	[Client]Game.DataEquipGrade::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEquipGrade::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEquipGrade::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEquipGrade::get_Grade[0]( ) -> A
	[Client]Game.DataEquipGrade::set_Grade[1]( System.Int32 ) -> A
	[Client]Game.DataEquipGrade::get_Name[0]( ) -> a
	[Client]Game.DataEquipGrade::set_Name[1]( System.String ) -> A
	[Client]Game.DataEquipGrade::get_Request[0]( ) -> B
	[Client]Game.DataEquipGrade::set_Request[1]( System.String ) -> a
	[Client]Game.DataEquipGrade::get_Image[0]( ) -> b
	[Client]Game.DataEquipGrade::set_Image[1]( System.String ) -> B
	[Client]Game.DataEquipGrade::get_Attribute[0]( ) -> C
	[Client]Game.DataEquipGrade::set_Attribute[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataEquipGrade::get_Value[0]( ) -> c
	[Client]Game.DataEquipGrade::set_Value[1]( System.Collections.Generic.List`1<System.Single> ) -> A

	[Client]Game.DataEquipGrade::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataEquipGrade::<Grade>k__BackingField -> A
	System.String [Client]System.String Game.DataEquipGrade::<Name>k__BackingField -> A
	System.String [Client]System.String Game.DataEquipGrade::<Request>k__BackingField -> a
	System.String [Client]System.String Game.DataEquipGrade::<Image>k__BackingField -> B
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataEquipGrade::<Attribute>k__BackingField -> A
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataEquipGrade::<Value>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataEquipGrade::Grade -> dropped
	System.String [Client]System.String Game.DataEquipGrade::Name -> dropped
	System.String [Client]System.String Game.DataEquipGrade::Request -> dropped
	System.String [Client]System.String Game.DataEquipGrade::Image -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataEquipGrade::Attribute -> dropped
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataEquipGrade::Value -> dropped
}

[Client]Game.DataEquipGradeManager -> [Client]F.R
{
	[Client]Game.DataEquipGradeManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEquipGradeManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEquipGradeManager::Clear[0]( ) -> A
	[Client]Game.DataEquipGradeManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEquipGradeManager::GetDataByGrade[1]( System.Int32 ) -> A
	[Client]Game.DataEquipGradeManager::GetDataListByGrade[1]( System.Int32 ) -> a
	[Client]Game.DataEquipGradeManager::GetDataByName[1]( System.String ) -> A
	[Client]Game.DataEquipGradeManager::GetDataListByName[1]( System.String ) -> a
	[Client]Game.DataEquipGradeManager::GetDataByRequest[1]( System.String ) -> B
	[Client]Game.DataEquipGradeManager::GetDataListByRequest[1]( System.String ) -> b
	[Client]Game.DataEquipGradeManager::GetDataByImage[1]( System.String ) -> C
	[Client]Game.DataEquipGradeManager::GetDataListByImage[1]( System.String ) -> c
	[Client]Game.DataEquipGradeManager::GetDataByAttribute[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataEquipGradeManager::GetDataListByAttribute[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataEquipGradeManager::GetDataByValue[1]( System.Collections.Generic.List`1<System.Single> ) -> A
	[Client]Game.DataEquipGradeManager::GetDataListByValue[1]( System.Collections.Generic.List`1<System.Single> ) -> a
	[Client]Game.DataEquipGradeManager::get_Instance[0]( ) -> a
	[Client]Game.DataEquipGradeManager::get_DataList[0]( ) -> B
	[Client]Game.DataEquipGradeManager::get_Count[0]( ) -> b

	[Client]Game.DataEquipGradeManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataEquipGradeManager::.ctor[0]( ) skipped:  special name

	Game.DataEquipGradeManager [Client]Game.DataEquipGradeManager Game.DataEquipGradeManager::instance -> A
	System.Collections.Generic.List`1<Game.DataEquipGrade> [Client]System.Collections.Generic.List`1<Game.DataEquipGrade> Game.DataEquipGradeManager::dataList -> A

	Game.DataEquipGradeManager [Client]Game.DataEquipGradeManager Game.DataEquipGradeManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataEquipGrade> [Client]System.Collections.Generic.List`1<Game.DataEquipGrade> Game.DataEquipGradeManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquipGradeManager::Count -> dropped
}

[Client]Game.DataDFAward -> [Client]F.r
{
	[Client]Game.DataDFAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataDFAward::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataDFAward::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataDFAward::get_Level[0]( ) -> A
	[Client]Game.DataDFAward::set_Level[1]( System.Int32 ) -> A
	[Client]Game.DataDFAward::get_AwardItem[0]( ) -> a
	[Client]Game.DataDFAward::set_AwardItem[1]( System.Int32[] ) -> A
	[Client]Game.DataDFAward::get_ItemCount[0]( ) -> B
	[Client]Game.DataDFAward::set_ItemCount[1]( System.Int32[] ) -> a

	[Client]Game.DataDFAward::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataDFAward::<Level>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataDFAward::<AwardItem>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataDFAward::<ItemCount>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataDFAward::Level -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataDFAward::AwardItem -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataDFAward::ItemCount -> dropped
}

[Client]Game.DataDFAwardManager -> [Client]F.S
{
	[Client]Game.DataDFAwardManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataDFAwardManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataDFAwardManager::Clear[0]( ) -> A
	[Client]Game.DataDFAwardManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataDFAwardManager::GetDataByLevel[1]( System.Int32 ) -> A
	[Client]Game.DataDFAwardManager::GetDataListByLevel[1]( System.Int32 ) -> a
	[Client]Game.DataDFAwardManager::GetDataByAwardItem[1]( System.Int32[] ) -> A
	[Client]Game.DataDFAwardManager::GetDataListByAwardItem[1]( System.Int32[] ) -> a
	[Client]Game.DataDFAwardManager::GetDataByItemCount[1]( System.Int32[] ) -> B
	[Client]Game.DataDFAwardManager::GetDataListByItemCount[1]( System.Int32[] ) -> b
	[Client]Game.DataDFAwardManager::get_Instance[0]( ) -> a
	[Client]Game.DataDFAwardManager::get_DataList[0]( ) -> B
	[Client]Game.DataDFAwardManager::get_Count[0]( ) -> b

	[Client]Game.DataDFAwardManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataDFAwardManager::.ctor[0]( ) skipped:  special name

	Game.DataDFAwardManager [Client]Game.DataDFAwardManager Game.DataDFAwardManager::instance -> A
	System.Collections.Generic.List`1<Game.DataDFAward> [Client]System.Collections.Generic.List`1<Game.DataDFAward> Game.DataDFAwardManager::dataList -> A

	Game.DataDFAwardManager [Client]Game.DataDFAwardManager Game.DataDFAwardManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataDFAward> [Client]System.Collections.Generic.List`1<Game.DataDFAward> Game.DataDFAwardManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataDFAwardManager::Count -> dropped
}

[Client]Game.Msg.ClientSPetData -> [Client]F.T
{
	[Client]Game.Msg.ClientSPetData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientSPetData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientSPetData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ClientSPetData::m_uiPetID -> A
	System.String [Client]System.String Game.Msg.ClientSPetData::m_strName -> A
	System.Byte [Client]System.Byte Game.Msg.ClientSPetData::m_btLevel -> A
	System.Byte [Client]System.Byte Game.Msg.ClientSPetData::m_btNature -> a
	System.Byte [Client]System.Byte Game.Msg.ClientSPetData::m_btQuality -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientSPetData::m_usGrowthRate -> A
	System.Byte [Client]System.Byte Game.Msg.ClientSPetData::m_btStrengthLvl -> b
	System.Byte [Client]System.Byte Game.Msg.ClientSPetData::m_btStarLevel -> C
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.Msg.ClientSPetData::m_oVecSkill -> A
}

[Client]Game.MonsterAttack -> [Client]F.t
{
	[Client]Game.MonsterAttack::get_Instance[0]( ) -> A
	[Client]Game.MonsterAttack::get_WeekScore[0]( ) -> a
	[Client]Game.MonsterAttack::set_WeekScore[1]( System.UInt32 ) -> A
	[Client]Game.MonsterAttack::get_DailyScore[0]( ) -> B
	[Client]Game.MonsterAttack::set_DailyScore[1]( System.UInt32 ) -> a
	[Client]Game.MonsterAttack::get_Rank[0]( ) -> b
	[Client]Game.MonsterAttack::set_Rank[1]( System.Byte ) -> A
	[Client]Game.MonsterAttack::get_EnterTimes[0]( ) -> C
	[Client]Game.MonsterAttack::set_EnterTimes[1]( System.Byte ) -> a
	[Client]Game.MonsterAttack::get_TotalTimes[0]( ) -> c
	[Client]Game.MonsterAttack::set_TotalTimes[1]( System.Byte ) -> B
	[Client]Game.MonsterAttack::get_FirstSorce[0]( ) -> D
	[Client]Game.MonsterAttack::set_FirstSorce[1]( System.UInt32 ) -> B
	[Client]Game.MonsterAttack::get_RankList[0]( ) -> d
	[Client]Game.MonsterAttack::set_RankList[1]( System.Collections.Generic.List`1<Game.Msg.MonsterAttackCityData> ) -> A
	[Client]Game.MonsterAttack::NeedBuy[0]( ) -> E
	[Client]Game.MonsterAttack::Reset[0]( ) -> e
	[Client]Game.MonsterAttack::ReqMonsterAttack[0]( ) -> F
	[Client]Game.MonsterAttack::OnMsgServerAckMonsterAttackCityData[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.MonsterAttack::ReqMonsterAttackRankList[0]( ) -> f
	[Client]Game.MonsterAttack::OnMsgServerAckMonsterAttackCityRankList[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.MonsterAttack::ReqAward[0]( ) -> G
	[Client]Game.MonsterAttack::OnMsgServerAckMonsterAttackCityAward[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.MonsterAttack::ReqBuyTime[0]( ) -> g
	[Client]Game.MonsterAttack::OnMsgServerAckBuyMonsterAttackCityTimes[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.MonsterAttack::ReqEnter[0]( ) -> H
	[Client]Game.MonsterAttack::OnMsgServerNotifyMonsterAttackCityEctypeData[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.MonsterAttack::ReqBuyBuff[0]( ) -> h
	[Client]Game.MonsterAttack::OnMsgServerAckMonsterAttackCityBuf[1]( Game.Msg.RecvMsgPacket ) -> c

	[Client]Game.MonsterAttack::.cctor[0]( ) skipped:  special name
	[Client]Game.MonsterAttack::.ctor[0]( ) skipped:  special name

	Game.MonsterAttack [Client]Game.MonsterAttack Game.MonsterAttack::m_Instance -> A
	System.UInt32 [Client]System.UInt32 Game.MonsterAttack::<WeekScore>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.MonsterAttack::<DailyScore>k__BackingField -> a
	System.Byte [Client]System.Byte Game.MonsterAttack::<Rank>k__BackingField -> A
	System.Byte [Client]System.Byte Game.MonsterAttack::<EnterTimes>k__BackingField -> a
	System.Byte [Client]System.Byte Game.MonsterAttack::<TotalTimes>k__BackingField -> B
	System.UInt32 [Client]System.UInt32 Game.MonsterAttack::<FirstSorce>k__BackingField -> B
	System.Collections.Generic.List`1<Game.Msg.MonsterAttackCityData> [Client]System.Collections.Generic.List`1<Game.Msg.MonsterAttackCityData> Game.MonsterAttack::<RankList>k__BackingField -> A

	Game.MonsterAttack [Client]Game.MonsterAttack Game.MonsterAttack::Instance -> dropped
	System.UInt32 [Client]System.UInt32 Game.MonsterAttack::WeekScore -> dropped
	System.UInt32 [Client]System.UInt32 Game.MonsterAttack::DailyScore -> dropped
	System.Byte [Client]System.Byte Game.MonsterAttack::Rank -> dropped
	System.Byte [Client]System.Byte Game.MonsterAttack::EnterTimes -> dropped
	System.Byte [Client]System.Byte Game.MonsterAttack::TotalTimes -> dropped
	System.UInt32 [Client]System.UInt32 Game.MonsterAttack::FirstSorce -> dropped
	System.Collections.Generic.List`1<Game.Msg.MonsterAttackCityData> [Client]System.Collections.Generic.List`1<Game.Msg.MonsterAttackCityData> Game.MonsterAttack::RankList -> dropped
}

[Client]Game.DataMonsterAttackReward -> [Client]F.U
{
	[Client]Game.DataMonsterAttackReward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMonsterAttackReward::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMonsterAttackReward::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMonsterAttackReward::get_MinRank[0]( ) -> A
	[Client]Game.DataMonsterAttackReward::set_MinRank[1]( System.Int32 ) -> A
	[Client]Game.DataMonsterAttackReward::get_MaxRank[0]( ) -> a
	[Client]Game.DataMonsterAttackReward::set_MaxRank[1]( System.Int32 ) -> a
	[Client]Game.DataMonsterAttackReward::get_Reward[0]( ) -> B
	[Client]Game.DataMonsterAttackReward::set_Reward[1]( System.Int32[] ) -> A
	[Client]Game.DataMonsterAttackReward::get_Quantity[0]( ) -> b
	[Client]Game.DataMonsterAttackReward::set_Quantity[1]( System.Int32[] ) -> a
	[Client]Game.DataMonsterAttackReward::get_Title[0]( ) -> C
	[Client]Game.DataMonsterAttackReward::set_Title[1]( System.String ) -> A

	[Client]Game.DataMonsterAttackReward::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataMonsterAttackReward::<MinRank>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataMonsterAttackReward::<MaxRank>k__BackingField -> a
	System.Int32[] [Client]System.Int32[] Game.DataMonsterAttackReward::<Reward>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataMonsterAttackReward::<Quantity>k__BackingField -> a
	System.String [Client]System.String Game.DataMonsterAttackReward::<Title>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataMonsterAttackReward::MinRank -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonsterAttackReward::MaxRank -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataMonsterAttackReward::Reward -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataMonsterAttackReward::Quantity -> dropped
	System.String [Client]System.String Game.DataMonsterAttackReward::Title -> dropped
}

[Client]Game.DataMonsterAttackRewardManager -> [Client]F.u
{
	[Client]Game.DataMonsterAttackRewardManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMonsterAttackRewardManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMonsterAttackRewardManager::Clear[0]( ) -> A
	[Client]Game.DataMonsterAttackRewardManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMonsterAttackRewardManager::GetDataByMinRank[1]( System.Int32 ) -> A
	[Client]Game.DataMonsterAttackRewardManager::GetDataListByMinRank[1]( System.Int32 ) -> a
	[Client]Game.DataMonsterAttackRewardManager::GetDataByMaxRank[1]( System.Int32 ) -> B
	[Client]Game.DataMonsterAttackRewardManager::GetDataListByMaxRank[1]( System.Int32 ) -> b
	[Client]Game.DataMonsterAttackRewardManager::GetDataByReward[1]( System.Int32[] ) -> A
	[Client]Game.DataMonsterAttackRewardManager::GetDataListByReward[1]( System.Int32[] ) -> a
	[Client]Game.DataMonsterAttackRewardManager::GetDataByQuantity[1]( System.Int32[] ) -> B
	[Client]Game.DataMonsterAttackRewardManager::GetDataListByQuantity[1]( System.Int32[] ) -> b
	[Client]Game.DataMonsterAttackRewardManager::GetDataByTitle[1]( System.String ) -> A
	[Client]Game.DataMonsterAttackRewardManager::GetDataListByTitle[1]( System.String ) -> a
	[Client]Game.DataMonsterAttackRewardManager::get_Instance[0]( ) -> a
	[Client]Game.DataMonsterAttackRewardManager::get_DataList[0]( ) -> B
	[Client]Game.DataMonsterAttackRewardManager::get_Count[0]( ) -> b

	[Client]Game.DataMonsterAttackRewardManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataMonsterAttackRewardManager::.ctor[0]( ) skipped:  special name

	Game.DataMonsterAttackRewardManager [Client]Game.DataMonsterAttackRewardManager Game.DataMonsterAttackRewardManager::instance -> A
	System.Collections.Generic.List`1<Game.DataMonsterAttackReward> [Client]System.Collections.Generic.List`1<Game.DataMonsterAttackReward> Game.DataMonsterAttackRewardManager::dataList -> A

	Game.DataMonsterAttackRewardManager [Client]Game.DataMonsterAttackRewardManager Game.DataMonsterAttackRewardManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataMonsterAttackReward> [Client]System.Collections.Generic.List`1<Game.DataMonsterAttackReward> Game.DataMonsterAttackRewardManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonsterAttackRewardManager::Count -> dropped
}

[Client]Game.DataBuyTime -> [Client]F.V
{
	[Client]Game.DataBuyTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataBuyTime::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataBuyTime::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataBuyTime::get_Times[0]( ) -> A
	[Client]Game.DataBuyTime::set_Times[1]( System.Int32 ) -> A
	[Client]Game.DataBuyTime::get_Gold[0]( ) -> a
	[Client]Game.DataBuyTime::set_Gold[1]( System.Int32 ) -> a

	[Client]Game.DataBuyTime::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataBuyTime::<Times>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataBuyTime::<Gold>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataBuyTime::Times -> dropped
	System.Int32 [Client]System.Int32 Game.DataBuyTime::Gold -> dropped
}

[Client]Game.DataBuyTimeManager -> [Client]F.v
{
	[Client]Game.DataBuyTimeManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataBuyTimeManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataBuyTimeManager::Clear[0]( ) -> A
	[Client]Game.DataBuyTimeManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataBuyTimeManager::GetDataByTimes[1]( System.Int32 ) -> A
	[Client]Game.DataBuyTimeManager::GetDataListByTimes[1]( System.Int32 ) -> a
	[Client]Game.DataBuyTimeManager::GetDataByGold[1]( System.Int32 ) -> B
	[Client]Game.DataBuyTimeManager::GetDataListByGold[1]( System.Int32 ) -> b
	[Client]Game.DataBuyTimeManager::get_Instance[0]( ) -> a
	[Client]Game.DataBuyTimeManager::get_DataList[0]( ) -> B
	[Client]Game.DataBuyTimeManager::get_Count[0]( ) -> b

	[Client]Game.DataBuyTimeManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataBuyTimeManager::.ctor[0]( ) skipped:  special name

	Game.DataBuyTimeManager [Client]Game.DataBuyTimeManager Game.DataBuyTimeManager::instance -> A
	System.Collections.Generic.List`1<Game.DataBuyTime> [Client]System.Collections.Generic.List`1<Game.DataBuyTime> Game.DataBuyTimeManager::dataList -> A

	Game.DataBuyTimeManager [Client]Game.DataBuyTimeManager Game.DataBuyTimeManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataBuyTime> [Client]System.Collections.Generic.List`1<Game.DataBuyTime> Game.DataBuyTimeManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataBuyTimeManager::Count -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator -> [Client]F.W
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::PeekBits[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::DropBits[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::GetBits[1]( System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::get_AvailableBits[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::get_AvailableBytes[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::SkipToByteBoundary[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::get_IsNeedingInput[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::CopyBytes[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::Reset[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::SetInput[3]( System.Byte[], System.Int32, System.Int32 ) -> a

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::.ctor[0]( ) skipped:  special name

	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::window_ -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::windowStart_ -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::windowEnd_ -> a
	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::buffer_ -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::bitsInBuffer_ -> B

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::AvailableBits -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::AvailableBytes -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator::IsNeedingInput -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow -> [Client]F.w
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::Write[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::SlowRepeat[3]( System.Int32, System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::Repeat[2]( System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::CopyStored[2]( ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::CopyDict[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::GetFreeSpace[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::GetAvailable[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::CopyOutput[3]( System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::Reset[0]( ) -> B

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::WindowSize -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::WindowMask -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::window -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::windowEnd -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow::windowFilled -> b
}

[Client]Game.Msg.ClientRoleInfo -> [Client]F.x
{
	[Client]Game.Msg.ClientRoleInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientRoleInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientRoleInfo::.ctor[0]( ) skipped:  special name

	Game.Msg.ClientCreateInfo [Client]Game.Msg.ClientCreateInfo Game.Msg.ClientRoleInfo::m_stCreateInfo -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientRoleInfo::m_uiRoleID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientRoleInfo::m_usLevel -> A
	Game.Msg.CSnapShotEquipData [Client]Game.Msg.CSnapShotEquipData Game.Msg.ClientRoleInfo::m_stEquipData -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientRoleInfo::m_uiLeftTime -> a
	System.Byte [Client]System.Byte Game.Msg.ClientRoleInfo::m_btIsDel -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientRoleInfo::m_uiLogoutTime -> B
}

[Client]Game.Msg.ClientRelation -> [Client]F.Y
{
	[Client]Game.Msg.ClientRelation::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientRelation::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientRelation::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Msg.ClientRelation::m_usRelation -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientRelation::m_uiID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientRelation::m_usLevel -> a
	System.String [Client]System.String Game.Msg.ClientRelation::m_strName -> A
	System.Byte [Client]System.Byte Game.Msg.ClientRelation::m_btSex -> A
	System.Byte [Client]System.Byte Game.Msg.ClientRelation::m_btProfession -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientRelation::m_uiValue -> a
	System.Byte [Client]System.Byte Game.Msg.ClientRelation::m_btServerLine -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientRelation::m_uiFightPower -> B
}

[Client]Game.Msg.ActivePointData -> [Client]F.y
{
	[Client]Game.Msg.ActivePointData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ActivePointData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ActivePointData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.ActivePointData::m_btActivityID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ActivePointData::m_usActivePoint -> A
}

[Client]Game.RichMan -> [Client]F.Z
{
	[Client]Game.RichMan::get_Instance[0]( ) -> A
	[Client]Game.RichMan::get_Position[0]( ) -> a
	[Client]Game.RichMan::get_Point[0]( ) -> B
	[Client]Game.RichMan::get_DiceNum[0]( ) -> b
	[Client]Game.RichMan::get_MultiAward[0]( ) -> C
	[Client]Game.RichMan::get_GetMultiAward[0]( ) -> c
	[Client]Game.RichMan::get_ChangeAwardIndex[0]( ) -> D
	[Client]Game.RichMan::get_BossHp[0]( ) -> d
	[Client]Game.RichMan::get_BossAward[0]( ) -> E
	[Client]Game.RichMan::get_GetBossAward[0]( ) -> e
	[Client]Game.RichMan::get_NotConsumePoint[0]( ) -> F
	[Client]Game.RichMan::get_BossAwardAdd[0]( ) -> f
	[Client]Game.RichMan::get_AutoUseGold[0]( ) -> G
	[Client]Game.RichMan::get_AwardRecords[0]( ) -> g
	[Client]Game.RichMan::get_AwardsDescriptions[0]( ) -> H
	[Client]Game.RichMan::Reset[0]( ) -> h
	[Client]Game.RichMan::ReqRichInfo[0]( ) -> I
	[Client]Game.RichMan::OnMsgServerAckRichManInfo[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.RichMan::RichDice[0]( ) -> i
	[Client]Game.RichMan::OnMsgServerAckDice[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.RichMan::ReqSelectAward[1]( Game.Msg.ERichManBonusSelectType ) -> A
	[Client]Game.RichMan::OnMsgServerAckDiceSpecial[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.RichMan::ReqRichManRecharge[1]( System.Int32 ) -> A
	[Client]Game.RichMan::OnMsgServerAckRichManRecharge[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.RichMan::ReqAutoUseGold[1]( System.Boolean ) -> A
	[Client]Game.RichMan::OnMsgServerAckRichManAutoBuy[1]( Game.Msg.RecvMsgPacket ) -> C

	[Client]Game.RichMan::.ctor[0]( ) skipped:  special name
	[Client]Game.RichMan::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.RichMan::MaxPosition -> A
	Game.RichMan [Client]Game.RichMan Game.RichMan::m_Instance -> A
	System.Int32 [Client]System.Int32 Game.RichMan::m_Position -> a
	System.Int32 [Client]System.Int32 Game.RichMan::m_Point -> B
	System.Int32 [Client]System.Int32 Game.RichMan::m_DiceNum -> b
	System.Boolean [Client]System.Boolean Game.RichMan::m_MultiAward -> A
	System.Boolean [Client]System.Boolean Game.RichMan::m_GetMultiAward -> a
	System.Int32 [Client]System.Int32 Game.RichMan::m_ChangeAwardIndex -> C
	System.Int32 [Client]System.Int32 Game.RichMan::m_BossHp -> c
	System.Int32 [Client]System.Int32 Game.RichMan::m_BossAward -> D
	System.Int32 [Client]System.Int32 Game.RichMan::m_GetBossAward -> d
	System.Boolean [Client]System.Boolean Game.RichMan::m_NotConsumePoint -> B
	System.Int32 [Client]System.Int32 Game.RichMan::m_BossAwardAdd -> E
	System.Boolean [Client]System.Boolean Game.RichMan::m_AutoUseGold -> b
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.RichMan::m_Awards -> A
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.RichMan::m_AwardsDescriptions -> A

	Game.RichMan [Client]Game.RichMan Game.RichMan::Instance -> dropped
	System.Int32 [Client]System.Int32 Game.RichMan::Position -> dropped
	System.Int32 [Client]System.Int32 Game.RichMan::Point -> dropped
	System.Int32 [Client]System.Int32 Game.RichMan::DiceNum -> dropped
	System.Boolean [Client]System.Boolean Game.RichMan::MultiAward -> dropped
	System.Boolean [Client]System.Boolean Game.RichMan::GetMultiAward -> dropped
	System.Int32 [Client]System.Int32 Game.RichMan::ChangeAwardIndex -> dropped
	System.Int32 [Client]System.Int32 Game.RichMan::BossHp -> dropped
	System.Int32 [Client]System.Int32 Game.RichMan::BossAward -> dropped
	System.Int32 [Client]System.Int32 Game.RichMan::GetBossAward -> dropped
	System.Boolean [Client]System.Boolean Game.RichMan::NotConsumePoint -> dropped
	System.Int32 [Client]System.Int32 Game.RichMan::BossAwardAdd -> dropped
	System.Boolean [Client]System.Boolean Game.RichMan::AutoUseGold -> dropped
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.RichMan::AwardRecords -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.RichMan::AwardsDescriptions -> dropped
}

[Client]Game.RichMan/RichType -> [Client]F.Z/z
{
	Game.RichMan/RichType [Client]Game.RichMan/RichType Game.RichMan/RichType::Normal -> A
	Game.RichMan/RichType [Client]Game.RichMan/RichType Game.RichMan/RichType::ChangeAward -> a
	Game.RichMan/RichType [Client]Game.RichMan/RichType Game.RichMan/RichType::Boss -> B

	System.Int32 [Client]System.Int32 Game.RichMan/RichType::value__ skipped:  filtered
}

[Client]Game.MaskFileReader -> [Client]f.A
{
	[Client]Game.MaskFileReader::get_Mask[0]( ) -> A
	[Client]Game.MaskFileReader::set_Mask[1]( Game.MaskData ) -> A
	[Client]Game.MaskFileReader::Load[1]( System.String ) -> A

	[Client]Game.MaskFileReader::.ctor[0]( ) skipped:  special name

	Game.MaskData [Client]Game.MaskData Game.MaskFileReader::m_MaskData -> A

	Game.MaskData [Client]Game.MaskData Game.MaskFileReader::Mask -> dropped
}

[Client]Game.LauncherString -> [Client]f.a
{
	[Client]Game.LauncherString::get_Instance[0]( ) -> A
	[Client]Game.LauncherString::Init[0]( ) -> a
	[Client]Game.LauncherString::Get[1]( System.String ) -> A

	[Client]Game.LauncherString::.cctor[0]( ) skipped:  special name
	[Client]Game.LauncherString::.ctor[0]( ) skipped:  special name

	Game.StringFileReader [Client]Game.StringFileReader Game.LauncherString::m_Strings -> A
	Game.LauncherString [Client]Game.LauncherString Game.LauncherString::m_Instance -> A

	Game.LauncherString [Client]Game.LauncherString Game.LauncherString::Instance -> dropped
}

[Client]Game.DataPetRebornGrowthRarity -> [Client]f.B
{
	[Client]Game.DataPetRebornGrowthRarity::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetRebornGrowthRarity::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetRebornGrowthRarity::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetRebornGrowthRarity::get_PercentMax[0]( ) -> A
	[Client]Game.DataPetRebornGrowthRarity::set_PercentMax[1]( System.Int32 ) -> A
	[Client]Game.DataPetRebornGrowthRarity::get_Rarity[0]( ) -> a
	[Client]Game.DataPetRebornGrowthRarity::set_Rarity[1]( System.String ) -> A

	[Client]Game.DataPetRebornGrowthRarity::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPetRebornGrowthRarity::<PercentMax>k__BackingField -> A
	System.String [Client]System.String Game.DataPetRebornGrowthRarity::<Rarity>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataPetRebornGrowthRarity::PercentMax -> dropped
	System.String [Client]System.String Game.DataPetRebornGrowthRarity::Rarity -> dropped
}

[Client]Game.DataPetRebornGrowthRarityManager -> [Client]f.b
{
	[Client]Game.DataPetRebornGrowthRarityManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetRebornGrowthRarityManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetRebornGrowthRarityManager::Clear[0]( ) -> A
	[Client]Game.DataPetRebornGrowthRarityManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetRebornGrowthRarityManager::GetDataByPercentMax[1]( System.Int32 ) -> A
	[Client]Game.DataPetRebornGrowthRarityManager::GetDataListByPercentMax[1]( System.Int32 ) -> a
	[Client]Game.DataPetRebornGrowthRarityManager::GetDataByRarity[1]( System.String ) -> A
	[Client]Game.DataPetRebornGrowthRarityManager::GetDataListByRarity[1]( System.String ) -> a
	[Client]Game.DataPetRebornGrowthRarityManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetRebornGrowthRarityManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetRebornGrowthRarityManager::get_Count[0]( ) -> b

	[Client]Game.DataPetRebornGrowthRarityManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetRebornGrowthRarityManager::.ctor[0]( ) skipped:  special name

	Game.DataPetRebornGrowthRarityManager [Client]Game.DataPetRebornGrowthRarityManager Game.DataPetRebornGrowthRarityManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPetRebornGrowthRarity> [Client]System.Collections.Generic.List`1<Game.DataPetRebornGrowthRarity> Game.DataPetRebornGrowthRarityManager::dataList -> A

	Game.DataPetRebornGrowthRarityManager [Client]Game.DataPetRebornGrowthRarityManager Game.DataPetRebornGrowthRarityManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPetRebornGrowthRarity> [Client]System.Collections.Generic.List`1<Game.DataPetRebornGrowthRarity> Game.DataPetRebornGrowthRarityManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetRebornGrowthRarityManager::Count -> dropped
}

[Client]Game.DataExpeditionTask -> [Client]f.C
{
	[Client]Game.DataExpeditionTask::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionTask::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionTask::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionTask::get_TaskID[0]( ) -> A
	[Client]Game.DataExpeditionTask::set_TaskID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionTask::get_TaskName[0]( ) -> a
	[Client]Game.DataExpeditionTask::set_TaskName[1]( System.String ) -> A
	[Client]Game.DataExpeditionTask::get_TaskLevel[0]( ) -> B
	[Client]Game.DataExpeditionTask::set_TaskLevel[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionTask::get_TaskExpend[0]( ) -> b
	[Client]Game.DataExpeditionTask::set_TaskExpend[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionTask::get_TaskType[0]( ) -> C
	[Client]Game.DataExpeditionTask::set_TaskType[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionTask::get_TaskTime[0]( ) -> c
	[Client]Game.DataExpeditionTask::set_TaskTime[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionTask::get_RequirementType[0]( ) -> D
	[Client]Game.DataExpeditionTask::set_RequirementType[1]( System.Int32[] ) -> A
	[Client]Game.DataExpeditionTask::get_RequirementParameter[0]( ) -> d
	[Client]Game.DataExpeditionTask::set_RequirementParameter[1]( System.Int32[] ) -> a
	[Client]Game.DataExpeditionTask::get_AwardType[0]( ) -> E
	[Client]Game.DataExpeditionTask::set_AwardType[1]( System.Int32[] ) -> B
	[Client]Game.DataExpeditionTask::get_AwardParameter[0]( ) -> e
	[Client]Game.DataExpeditionTask::set_AwardParameter[1]( System.Int32[] ) -> b
	[Client]Game.DataExpeditionTask::get_AwardChance[0]( ) -> F
	[Client]Game.DataExpeditionTask::set_AwardChance[1]( System.Int32[] ) -> C
	[Client]Game.DataExpeditionTask::get_TaskRequest[0]( ) -> f
	[Client]Game.DataExpeditionTask::set_TaskRequest[1]( System.String ) -> a
	[Client]Game.DataExpeditionTask::get_TaskDescribe[0]( ) -> G
	[Client]Game.DataExpeditionTask::set_TaskDescribe[1]( System.String ) -> B

	[Client]Game.DataExpeditionTask::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::<TaskID>k__BackingField -> A
	System.String [Client]System.String Game.DataExpeditionTask::<TaskName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::<TaskLevel>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::<TaskExpend>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::<TaskType>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::<TaskTime>k__BackingField -> C
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::<RequirementType>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::<RequirementParameter>k__BackingField -> a
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::<AwardType>k__BackingField -> B
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::<AwardParameter>k__BackingField -> b
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::<AwardChance>k__BackingField -> C
	System.String [Client]System.String Game.DataExpeditionTask::<TaskRequest>k__BackingField -> a
	System.String [Client]System.String Game.DataExpeditionTask::<TaskDescribe>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::TaskID -> dropped
	System.String [Client]System.String Game.DataExpeditionTask::TaskName -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::TaskLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::TaskExpend -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::TaskType -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTask::TaskTime -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::RequirementType -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::RequirementParameter -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::AwardType -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::AwardParameter -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionTask::AwardChance -> dropped
	System.String [Client]System.String Game.DataExpeditionTask::TaskRequest -> dropped
	System.String [Client]System.String Game.DataExpeditionTask::TaskDescribe -> dropped
}

[Client]Game.DataExpeditionTaskManager -> [Client]f.c
{
	[Client]Game.DataExpeditionTaskManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionTaskManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionTaskManager::Clear[0]( ) -> A
	[Client]Game.DataExpeditionTaskManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionTaskManager::GetDataByTaskID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionTaskManager::GetDataListByTaskID[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionTaskManager::GetDataByTaskName[1]( System.String ) -> A
	[Client]Game.DataExpeditionTaskManager::GetDataListByTaskName[1]( System.String ) -> a
	[Client]Game.DataExpeditionTaskManager::GetDataByTaskLevel[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionTaskManager::GetDataListByTaskLevel[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionTaskManager::GetDataByTaskExpend[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionTaskManager::GetDataListByTaskExpend[1]( System.Int32 ) -> c
	[Client]Game.DataExpeditionTaskManager::GetDataByTaskType[1]( System.Int32 ) -> D
	[Client]Game.DataExpeditionTaskManager::GetDataListByTaskType[1]( System.Int32 ) -> d
	[Client]Game.DataExpeditionTaskManager::GetDataByTaskTime[1]( System.Int32 ) -> E
	[Client]Game.DataExpeditionTaskManager::GetDataListByTaskTime[1]( System.Int32 ) -> e
	[Client]Game.DataExpeditionTaskManager::GetDataByRequirementType[1]( System.Int32[] ) -> A
	[Client]Game.DataExpeditionTaskManager::GetDataListByRequirementType[1]( System.Int32[] ) -> a
	[Client]Game.DataExpeditionTaskManager::GetDataByRequirementParameter[1]( System.Int32[] ) -> B
	[Client]Game.DataExpeditionTaskManager::GetDataListByRequirementParameter[1]( System.Int32[] ) -> b
	[Client]Game.DataExpeditionTaskManager::GetDataByAwardType[1]( System.Int32[] ) -> C
	[Client]Game.DataExpeditionTaskManager::GetDataListByAwardType[1]( System.Int32[] ) -> c
	[Client]Game.DataExpeditionTaskManager::GetDataByAwardParameter[1]( System.Int32[] ) -> D
	[Client]Game.DataExpeditionTaskManager::GetDataListByAwardParameter[1]( System.Int32[] ) -> d
	[Client]Game.DataExpeditionTaskManager::GetDataByAwardChance[1]( System.Int32[] ) -> E
	[Client]Game.DataExpeditionTaskManager::GetDataListByAwardChance[1]( System.Int32[] ) -> e
	[Client]Game.DataExpeditionTaskManager::GetDataByTaskRequest[1]( System.String ) -> B
	[Client]Game.DataExpeditionTaskManager::GetDataListByTaskRequest[1]( System.String ) -> b
	[Client]Game.DataExpeditionTaskManager::GetDataByTaskDescribe[1]( System.String ) -> C
	[Client]Game.DataExpeditionTaskManager::GetDataListByTaskDescribe[1]( System.String ) -> c
	[Client]Game.DataExpeditionTaskManager::get_Instance[0]( ) -> a
	[Client]Game.DataExpeditionTaskManager::get_DataList[0]( ) -> B
	[Client]Game.DataExpeditionTaskManager::get_Count[0]( ) -> b

	[Client]Game.DataExpeditionTaskManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataExpeditionTaskManager::.ctor[0]( ) skipped:  special name

	Game.DataExpeditionTaskManager [Client]Game.DataExpeditionTaskManager Game.DataExpeditionTaskManager::instance -> A
	System.Collections.Generic.List`1<Game.DataExpeditionTask> [Client]System.Collections.Generic.List`1<Game.DataExpeditionTask> Game.DataExpeditionTaskManager::dataList -> A

	Game.DataExpeditionTaskManager [Client]Game.DataExpeditionTaskManager Game.DataExpeditionTaskManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataExpeditionTask> [Client]System.Collections.Generic.List`1<Game.DataExpeditionTask> Game.DataExpeditionTaskManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTaskManager::Count -> dropped
}

[Client]Game.DataExpeditionArea -> [Client]f.D
{
	[Client]Game.DataExpeditionArea::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionArea::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionArea::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionArea::get_AreaID[0]( ) -> A
	[Client]Game.DataExpeditionArea::set_AreaID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionArea::get_AreaName[0]( ) -> a
	[Client]Game.DataExpeditionArea::set_AreaName[1]( System.String ) -> A
	[Client]Game.DataExpeditionArea::get_BlockID[0]( ) -> B
	[Client]Game.DataExpeditionArea::set_BlockID[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionArea::get_UnlockLevel[0]( ) -> b
	[Client]Game.DataExpeditionArea::set_UnlockLevel[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionArea::get_RequirementType[0]( ) -> C
	[Client]Game.DataExpeditionArea::set_RequirementType[1]( System.Int32[] ) -> A
	[Client]Game.DataExpeditionArea::get_RequirementParameter[0]( ) -> c
	[Client]Game.DataExpeditionArea::set_RequirementParameter[1]( System.Int32[] ) -> a
	[Client]Game.DataExpeditionArea::get_AreaEXP[0]( ) -> D
	[Client]Game.DataExpeditionArea::set_AreaEXP[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionArea::get_SkillEXP[0]( ) -> d
	[Client]Game.DataExpeditionArea::set_SkillEXP[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionArea::get_MonsterEXP[0]( ) -> E
	[Client]Game.DataExpeditionArea::set_MonsterEXP[1]( System.Int32 ) -> c
	[Client]Game.DataExpeditionArea::get_AwardType[0]( ) -> e
	[Client]Game.DataExpeditionArea::set_AwardType[1]( System.Int32[] ) -> B
	[Client]Game.DataExpeditionArea::get_AwardParameter[0]( ) -> F
	[Client]Game.DataExpeditionArea::set_AwardParameter[1]( System.Int32[] ) -> b
	[Client]Game.DataExpeditionArea::get_AwardChance[0]( ) -> f
	[Client]Game.DataExpeditionArea::set_AwardChance[1]( System.Int32[] ) -> C
	[Client]Game.DataExpeditionArea::get_AreaBoss[0]( ) -> G
	[Client]Game.DataExpeditionArea::set_AreaBoss[1]( System.String ) -> a
	[Client]Game.DataExpeditionArea::get_AreaRequest[0]( ) -> g
	[Client]Game.DataExpeditionArea::set_AreaRequest[1]( System.String ) -> B
	[Client]Game.DataExpeditionArea::get_AreaDescribe[0]( ) -> H
	[Client]Game.DataExpeditionArea::set_AreaDescribe[1]( System.String ) -> b
	[Client]Game.DataExpeditionArea::get_HaveBoss[0]( ) -> h
	[Client]Game.DataExpeditionArea::set_HaveBoss[1]( System.Boolean ) -> A
	[Client]Game.DataExpeditionArea::get_BossRequirementType[0]( ) -> I
	[Client]Game.DataExpeditionArea::set_BossRequirementType[1]( System.Int32[] ) -> c
	[Client]Game.DataExpeditionArea::get_BossRequirementParameter[0]( ) -> i
	[Client]Game.DataExpeditionArea::set_BossRequirementParameter[1]( System.Int32[] ) -> D
	[Client]Game.DataExpeditionArea::get_BossAwardType[0]( ) -> J
	[Client]Game.DataExpeditionArea::set_BossAwardType[1]( System.Int32[] ) -> d
	[Client]Game.DataExpeditionArea::get_BossAwardParameter[0]( ) -> j
	[Client]Game.DataExpeditionArea::set_BossAwardParameter[1]( System.Int32[] ) -> E
	[Client]Game.DataExpeditionArea::get_BossAwardChance[0]( ) -> K
	[Client]Game.DataExpeditionArea::set_BossAwardChance[1]( System.Int32[] ) -> e
	[Client]Game.DataExpeditionArea::get_BOSSRequest[0]( ) -> k
	[Client]Game.DataExpeditionArea::set_BOSSRequest[1]( System.String ) -> C
	[Client]Game.DataExpeditionArea::get_BossDescribe[0]( ) -> L
	[Client]Game.DataExpeditionArea::set_BossDescribe[1]( System.String ) -> c

	[Client]Game.DataExpeditionArea::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::<AreaID>k__BackingField -> A
	System.String [Client]System.String Game.DataExpeditionArea::<AreaName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::<BlockID>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::<UnlockLevel>k__BackingField -> B
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<RequirementType>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<RequirementParameter>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::<AreaEXP>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::<SkillEXP>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::<MonsterEXP>k__BackingField -> c
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<AwardType>k__BackingField -> B
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<AwardParameter>k__BackingField -> b
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<AwardChance>k__BackingField -> C
	System.String [Client]System.String Game.DataExpeditionArea::<AreaBoss>k__BackingField -> a
	System.String [Client]System.String Game.DataExpeditionArea::<AreaRequest>k__BackingField -> B
	System.String [Client]System.String Game.DataExpeditionArea::<AreaDescribe>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.DataExpeditionArea::<HaveBoss>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<BossRequirementType>k__BackingField -> c
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<BossRequirementParameter>k__BackingField -> D
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<BossAwardType>k__BackingField -> d
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<BossAwardParameter>k__BackingField -> E
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::<BossAwardChance>k__BackingField -> e
	System.String [Client]System.String Game.DataExpeditionArea::<BOSSRequest>k__BackingField -> C
	System.String [Client]System.String Game.DataExpeditionArea::<BossDescribe>k__BackingField -> c

	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::AreaID -> dropped
	System.String [Client]System.String Game.DataExpeditionArea::AreaName -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::BlockID -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::UnlockLevel -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::RequirementType -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::RequirementParameter -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::AreaEXP -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::SkillEXP -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionArea::MonsterEXP -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::AwardType -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::AwardParameter -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::AwardChance -> dropped
	System.String [Client]System.String Game.DataExpeditionArea::AreaBoss -> dropped
	System.String [Client]System.String Game.DataExpeditionArea::AreaRequest -> dropped
	System.String [Client]System.String Game.DataExpeditionArea::AreaDescribe -> dropped
	System.Boolean [Client]System.Boolean Game.DataExpeditionArea::HaveBoss -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::BossRequirementType -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::BossRequirementParameter -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::BossAwardType -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::BossAwardParameter -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionArea::BossAwardChance -> dropped
	System.String [Client]System.String Game.DataExpeditionArea::BOSSRequest -> dropped
	System.String [Client]System.String Game.DataExpeditionArea::BossDescribe -> dropped
}

[Client]Game.DataExpeditionAreaManager -> [Client]f.d
{
	[Client]Game.DataExpeditionAreaManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionAreaManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionAreaManager::Clear[0]( ) -> A
	[Client]Game.DataExpeditionAreaManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionAreaManager::GetDataByAreaID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionAreaManager::GetDataListByAreaID[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionAreaManager::GetDataByAreaName[1]( System.String ) -> A
	[Client]Game.DataExpeditionAreaManager::GetDataListByAreaName[1]( System.String ) -> a
	[Client]Game.DataExpeditionAreaManager::GetDataByBlockID[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionAreaManager::GetDataListByBlockID[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionAreaManager::GetDataByUnlockLevel[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionAreaManager::GetDataListByUnlockLevel[1]( System.Int32 ) -> c
	[Client]Game.DataExpeditionAreaManager::GetDataByRequirementType[1]( System.Int32[] ) -> A
	[Client]Game.DataExpeditionAreaManager::GetDataListByRequirementType[1]( System.Int32[] ) -> a
	[Client]Game.DataExpeditionAreaManager::GetDataByRequirementParameter[1]( System.Int32[] ) -> B
	[Client]Game.DataExpeditionAreaManager::GetDataListByRequirementParameter[1]( System.Int32[] ) -> b
	[Client]Game.DataExpeditionAreaManager::GetDataByAreaEXP[1]( System.Int32 ) -> D
	[Client]Game.DataExpeditionAreaManager::GetDataListByAreaEXP[1]( System.Int32 ) -> d
	[Client]Game.DataExpeditionAreaManager::GetDataBySkillEXP[1]( System.Int32 ) -> E
	[Client]Game.DataExpeditionAreaManager::GetDataListBySkillEXP[1]( System.Int32 ) -> e
	[Client]Game.DataExpeditionAreaManager::GetDataByMonsterEXP[1]( System.Int32 ) -> F
	[Client]Game.DataExpeditionAreaManager::GetDataListByMonsterEXP[1]( System.Int32 ) -> f
	[Client]Game.DataExpeditionAreaManager::GetDataByAwardType[1]( System.Int32[] ) -> C
	[Client]Game.DataExpeditionAreaManager::GetDataListByAwardType[1]( System.Int32[] ) -> c
	[Client]Game.DataExpeditionAreaManager::GetDataByAwardParameter[1]( System.Int32[] ) -> D
	[Client]Game.DataExpeditionAreaManager::GetDataListByAwardParameter[1]( System.Int32[] ) -> d
	[Client]Game.DataExpeditionAreaManager::GetDataByAwardChance[1]( System.Int32[] ) -> E
	[Client]Game.DataExpeditionAreaManager::GetDataListByAwardChance[1]( System.Int32[] ) -> e
	[Client]Game.DataExpeditionAreaManager::GetDataByAreaBoss[1]( System.String ) -> B
	[Client]Game.DataExpeditionAreaManager::GetDataListByAreaBoss[1]( System.String ) -> b
	[Client]Game.DataExpeditionAreaManager::GetDataByAreaRequest[1]( System.String ) -> C
	[Client]Game.DataExpeditionAreaManager::GetDataListByAreaRequest[1]( System.String ) -> c
	[Client]Game.DataExpeditionAreaManager::GetDataByAreaDescribe[1]( System.String ) -> D
	[Client]Game.DataExpeditionAreaManager::GetDataListByAreaDescribe[1]( System.String ) -> d
	[Client]Game.DataExpeditionAreaManager::GetDataByHaveBoss[1]( System.Boolean ) -> A
	[Client]Game.DataExpeditionAreaManager::GetDataListByHaveBoss[1]( System.Boolean ) -> a
	[Client]Game.DataExpeditionAreaManager::GetDataByBossRequirementType[1]( System.Int32[] ) -> F
	[Client]Game.DataExpeditionAreaManager::GetDataListByBossRequirementType[1]( System.Int32[] ) -> f
	[Client]Game.DataExpeditionAreaManager::GetDataByBossRequirementParameter[1]( System.Int32[] ) -> G
	[Client]Game.DataExpeditionAreaManager::GetDataListByBossRequirementParameter[1]( System.Int32[] ) -> g
	[Client]Game.DataExpeditionAreaManager::GetDataByBossAwardType[1]( System.Int32[] ) -> H
	[Client]Game.DataExpeditionAreaManager::GetDataListByBossAwardType[1]( System.Int32[] ) -> h
	[Client]Game.DataExpeditionAreaManager::GetDataByBossAwardParameter[1]( System.Int32[] ) -> I
	[Client]Game.DataExpeditionAreaManager::GetDataListByBossAwardParameter[1]( System.Int32[] ) -> i
	[Client]Game.DataExpeditionAreaManager::GetDataByBossAwardChance[1]( System.Int32[] ) -> J
	[Client]Game.DataExpeditionAreaManager::GetDataListByBossAwardChance[1]( System.Int32[] ) -> j
	[Client]Game.DataExpeditionAreaManager::GetDataByBOSSRequest[1]( System.String ) -> E
	[Client]Game.DataExpeditionAreaManager::GetDataListByBOSSRequest[1]( System.String ) -> e
	[Client]Game.DataExpeditionAreaManager::GetDataByBossDescribe[1]( System.String ) -> F
	[Client]Game.DataExpeditionAreaManager::GetDataListByBossDescribe[1]( System.String ) -> f
	[Client]Game.DataExpeditionAreaManager::get_Instance[0]( ) -> a
	[Client]Game.DataExpeditionAreaManager::get_DataList[0]( ) -> B
	[Client]Game.DataExpeditionAreaManager::get_Count[0]( ) -> b

	[Client]Game.DataExpeditionAreaManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataExpeditionAreaManager::.ctor[0]( ) skipped:  special name

	Game.DataExpeditionAreaManager [Client]Game.DataExpeditionAreaManager Game.DataExpeditionAreaManager::instance -> A
	System.Collections.Generic.List`1<Game.DataExpeditionArea> [Client]System.Collections.Generic.List`1<Game.DataExpeditionArea> Game.DataExpeditionAreaManager::dataList -> A

	Game.DataExpeditionAreaManager [Client]Game.DataExpeditionAreaManager Game.DataExpeditionAreaManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataExpeditionArea> [Client]System.Collections.Generic.List`1<Game.DataExpeditionArea> Game.DataExpeditionAreaManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionAreaManager::Count -> dropped
}

[Client]Game.DataAwardCard -> [Client]f.E
{
	[Client]Game.DataAwardCard::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAwardCard::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAwardCard::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAwardCard::get_AwardLibID[0]( ) -> A
	[Client]Game.DataAwardCard::set_AwardLibID[1]( System.Int32 ) -> A
	[Client]Game.DataAwardCard::get_ItemID[0]( ) -> a
	[Client]Game.DataAwardCard::set_ItemID[1]( System.Int32 ) -> a
	[Client]Game.DataAwardCard::get_ItemNum[0]( ) -> B
	[Client]Game.DataAwardCard::set_ItemNum[1]( System.Int32 ) -> B
	[Client]Game.DataAwardCard::get_ShowInResult[0]( ) -> b
	[Client]Game.DataAwardCard::set_ShowInResult[1]( System.Boolean ) -> A

	[Client]Game.DataAwardCard::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataAwardCard::<AwardLibID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataAwardCard::<ItemID>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataAwardCard::<ItemNum>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.DataAwardCard::<ShowInResult>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataAwardCard::AwardLibID -> dropped
	System.Int32 [Client]System.Int32 Game.DataAwardCard::ItemID -> dropped
	System.Int32 [Client]System.Int32 Game.DataAwardCard::ItemNum -> dropped
	System.Boolean [Client]System.Boolean Game.DataAwardCard::ShowInResult -> dropped
}

[Client]Game.DataAwardCardManager -> [Client]f.e
{
	[Client]Game.DataAwardCardManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAwardCardManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAwardCardManager::Clear[0]( ) -> A
	[Client]Game.DataAwardCardManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAwardCardManager::GetDataByAwardLibID[1]( System.Int32 ) -> A
	[Client]Game.DataAwardCardManager::GetDataListByAwardLibID[1]( System.Int32 ) -> a
	[Client]Game.DataAwardCardManager::GetDataByItemID[1]( System.Int32 ) -> B
	[Client]Game.DataAwardCardManager::GetDataListByItemID[1]( System.Int32 ) -> b
	[Client]Game.DataAwardCardManager::GetDataByItemNum[1]( System.Int32 ) -> C
	[Client]Game.DataAwardCardManager::GetDataListByItemNum[1]( System.Int32 ) -> c
	[Client]Game.DataAwardCardManager::GetDataByShowInResult[1]( System.Boolean ) -> A
	[Client]Game.DataAwardCardManager::GetDataListByShowInResult[1]( System.Boolean ) -> a
	[Client]Game.DataAwardCardManager::get_Instance[0]( ) -> a
	[Client]Game.DataAwardCardManager::get_DataList[0]( ) -> B
	[Client]Game.DataAwardCardManager::get_Count[0]( ) -> b

	[Client]Game.DataAwardCardManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataAwardCardManager::.ctor[0]( ) skipped:  special name

	Game.DataAwardCardManager [Client]Game.DataAwardCardManager Game.DataAwardCardManager::instance -> A
	System.Collections.Generic.List`1<Game.DataAwardCard> [Client]System.Collections.Generic.List`1<Game.DataAwardCard> Game.DataAwardCardManager::dataList -> A

	Game.DataAwardCardManager [Client]Game.DataAwardCardManager Game.DataAwardCardManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataAwardCard> [Client]System.Collections.Generic.List`1<Game.DataAwardCard> Game.DataAwardCardManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataAwardCardManager::Count -> dropped
}

[Client]ICSharpCode.SharpZipLib.LZW.LzwConstants -> [Client]f.F
{

	[Client]ICSharpCode.SharpZipLib.LZW.LzwConstants::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwConstants::MAGIC -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwConstants::MAX_BITS -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwConstants::BIT_MASK -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwConstants::EXTENDED_MASK -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwConstants::RESERVED_MASK -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwConstants::BLOCK_MODE_MASK -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwConstants::HDR_SIZE -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwConstants::INIT_BITS -> d
}

[Client]Game.Player -> [Client]f.f
{
	[Client]Game.Player::get_TitleName[0]( ) -> A
	[Client]Game.Player::Release[0]( ) -> B
	[Client]Game.Player::Reset[0]( ) -> b
	[Client]Game.Player::RefreshProperty[0]( ) -> C
	[Client]Game.Player::OnObjectLoaded[0]( ) -> d
	[Client]Game.Player::get_IsVip[0]( ) -> E
	[Client]Game.Player::set_IsVip[1]( System.Boolean ) -> A
	[Client]Game.Player::get_KillState[0]( ) -> e
	[Client]Game.Player::set_KillState[1]( Game.Msg.ePersonKillState ) -> A
	[Client]Game.Player::get_GuildID[0]( ) -> F
	[Client]Game.Player::set_GuildID[1]( System.UInt32 ) -> A
	[Client]Game.Player::get_GuildName[0]( ) -> f
	[Client]Game.Player::set_GuildName[1]( System.String ) -> A
	[Client]Game.Player::LoadedDeadSoundHandler[1]( UnityEngine.Object ) -> A
	[Client]Game.Player::PlayDeadSound[0]( ) -> G
	[Client]Game.Player::RefreshNameColor[0]( ) -> g
	[Client]Game.Player::CanAttack[0]( ) -> H
	[Client]Game.Player::CanJump[0]( ) -> h

	[Client]Game.Player::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.Player::m_bVip -> A
	Game.Msg.ePersonKillState [Client]Game.Msg.ePersonKillState Game.Player::m_KillState -> A
	System.UInt32 [Client]System.UInt32 Game.Player::m_DeadSoundLoadTask -> A
	UnityEngine.AudioClip [Client]UnityEngine.AudioClip Game.Player::m_DeadClip -> A
	System.UInt32 [Client]System.UInt32 Game.Player::m_unGuildID -> a
	System.String [Client]System.String Game.Player::m_strGuildName -> A
	Game.MonsterPosSet [Client]Game.MonsterPosSet Game.Player::m_MonsterPosSet -> A

	System.Boolean [Client]System.Boolean Game.Player::IsVip -> dropped
	Game.Msg.ePersonKillState [Client]Game.Msg.ePersonKillState Game.Player::KillState -> dropped
	System.UInt32 [Client]System.UInt32 Game.Player::GuildID -> dropped
	System.String [Client]System.String Game.Player::GuildName -> dropped
	System.String [Client]System.String Game.Player::TitleName -> dropped
}

[Client]Game.MonsterPosSet -> [Client]f.G
{
	[Client]Game.MonsterPosSet::RotateVector2[2]( UnityEngine.Vector2, System.Single ) -> A
	[Client]Game.MonsterPosSet::Initialize[0]( ) -> A
	[Client]Game.MonsterPosSet::FindNearestPoint[1]( Game.Monster ) -> A
	[Client]Game.MonsterPosSet::SetUsePlace[1]( Game.Monster ) -> a
	[Client]Game.MonsterPosSet::ClearUsePlace[1]( Game.Monster ) -> B

	[Client]Game.MonsterPosSet::.ctor[0]( ) skipped:  special name

	UnityEngine.Vector2[] [Client]UnityEngine.Vector2[] Game.MonsterPosSet::m_MonsterPos -> A
	System.Boolean[0...,0...] [Client]System.Boolean[0...,0...] Game.MonsterPosSet::m_bEmpty -> A
	System.Single [Client]System.Single Game.MonsterPosSet::m_fNear -> A
	System.Single [Client]System.Single Game.MonsterPosSet::m_fMiddle -> a
}

[Client]Game.Msg.MsgPet -> [Client]f.g
{

	[Client]Game.Msg.MsgPet::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgPet::BaseType -> A
}

[Client]Game.Msg.MsgClientPetSetBattle -> [Client]f.H
{
	[Client]Game.Msg.MsgClientPetSetBattle::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetSetBattle::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetSetBattle::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetSetBattle::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetSetBattle::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetSetBattle::m_ulDBID -> A
}

[Client]Game.Msg.MsgServerPetSetBattle -> [Client]f.h
{
	[Client]Game.Msg.MsgServerPetSetBattle::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetSetBattle::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetSetBattle::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetSetBattle::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetSetBattle::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPetSetBattle::m_uiID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetSetBattle::m_ulDBID -> A
}

[Client]Game.Msg.MsgServerPetAddPet -> [Client]f.I
{
	[Client]Game.Msg.MsgServerPetAddPet::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetAddPet::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetAddPet::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddPet::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetAddPet::Type -> A
	Game.Msg.PetData [Client]Game.Msg.PetData Game.Msg.MsgServerPetAddPet::m_stPet -> A
}

[Client]Game.Msg.MsgClientPetCallBack -> [Client]f.i
{
	[Client]Game.Msg.MsgClientPetCallBack::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetCallBack::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetCallBack::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetCallBack::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetCallBack::Type -> A
}

[Client]Game.Msg.MsgServerPetAddExp -> [Client]f.J
{
	[Client]Game.Msg.MsgServerPetAddExp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetAddExp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetAddExp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddExp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetAddExp::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetAddExp::m_ulDBID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPetAddExp::m_uiAddValue -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetAddExp::m_ulCurValue -> a
}

[Client]Game.Msg.MsgServerPetUpdatePet -> [Client]f.j
{
	[Client]Game.Msg.MsgServerPetUpdatePet::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetUpdatePet::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetUpdatePet::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetUpdatePet::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetUpdatePet::Type -> A
	Game.Msg.PetData [Client]Game.Msg.PetData Game.Msg.MsgServerPetUpdatePet::m_stPet -> A
}

[Client]Game.Msg.MsgServerPetCallBack -> [Client]f.K
{
	[Client]Game.Msg.MsgServerPetCallBack::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetCallBack::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetCallBack::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetCallBack::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetCallBack::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetCallBack::m_ebtReason -> a
}

[Client]Game.Msg.MsgServerPetRefreshList -> [Client]f.k
{
	[Client]Game.Msg.MsgServerPetRefreshList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetRefreshList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetRefreshList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRefreshList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRefreshList::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRefreshList::m_btPetBagSize -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRefreshList::m_btPetBagBuySize -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRefreshList::m_usMaxLuckyRebirthStep -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRefreshList::m_usCurLuckyRebirthStep -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPetRefreshList::m_uiLuckyIndex -> A
	System.Collections.Generic.List`1<Game.Msg.PetData> [Client]System.Collections.Generic.List`1<Game.Msg.PetData> Game.Msg.MsgServerPetRefreshList::m_oVecBagPet -> A
	System.Collections.Generic.List`1<Game.Msg.PetData> [Client]System.Collections.Generic.List`1<Game.Msg.PetData> Game.Msg.MsgServerPetRefreshList::m_oVecStoragePet -> a
}

[Client]Game.Msg.MsgClientPetPatchSkill -> [Client]f.L
{
	[Client]Game.Msg.MsgClientPetPatchSkill::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetPatchSkill::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetPatchSkill::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetPatchSkill::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetPatchSkill::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetPatchSkill::m_ulPetID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetPatchSkill::m_ulItemID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientPetPatchSkill::m_btSkillHole -> a
}

[Client]Game.Msg.MsgServerPetPatchSkill -> [Client]f.l
{
	[Client]Game.Msg.MsgServerPetPatchSkill::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetPatchSkill::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetPatchSkill::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetPatchSkill::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetPatchSkill::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetPatchSkill::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetPatchSkill::m_btSocketIndex -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPetPatchSkill::m_uiSkillID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetPatchSkill::m_ebtResult -> B
}

[Client]Game.Msg.MsgClientPetStrengthen -> [Client]f.M
{
	[Client]Game.Msg.MsgClientPetStrengthen::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetStrengthen::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetStrengthen::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetStrengthen::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetStrengthen::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetStrengthen::m_ulPetID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientPetStrengthen::m_ebtBoostType -> a
}

[Client]Game.Msg.MsgServerPetStrengthen -> [Client]f.m
{
	[Client]Game.Msg.MsgServerPetStrengthen::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetStrengthen::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetStrengthen::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetStrengthen::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetStrengthen::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetStrengthen::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetStrengthen::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientPetTalentCompose -> [Client]f.N
{
	[Client]Game.Msg.MsgClientPetTalentCompose::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetTalentCompose::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetTalentCompose::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetTalentCompose::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetTalentCompose::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetTalentCompose::m_ulMainUID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetTalentCompose::m_ulSubUID -> a
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.Msg.MsgClientPetTalentCompose::m_oVecLocked -> A
}

[Client]Game.Msg.MsgServerPetTalentCompose -> [Client]f.n
{
	[Client]Game.Msg.MsgServerPetTalentCompose::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetTalentCompose::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetTalentCompose::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetTalentCompose::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetTalentCompose::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetTalentCompose::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientPetRemove -> [Client]f.O
{
	[Client]Game.Msg.MsgClientPetRemove::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetRemove::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetRemove::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetRemove::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetRemove::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetRemove::m_ulDBID -> A
}

[Client]Game.Msg.MsgServerPetRemove -> [Client]f.o
{
	[Client]Game.Msg.MsgServerPetRemove::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetRemove::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetRemove::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRemove::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRemove::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetRemove::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRemove::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientPetOpenSkillSocket -> [Client]f.P
{
	[Client]Game.Msg.MsgClientPetOpenSkillSocket::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetOpenSkillSocket::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetOpenSkillSocket::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetOpenSkillSocket::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetOpenSkillSocket::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetOpenSkillSocket::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientPetOpenSkillSocket::m_btIndex -> a
}

[Client]Game.Msg.MsgServerPetOpenSkillSocket -> [Client]f.p
{
	[Client]Game.Msg.MsgServerPetOpenSkillSocket::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetOpenSkillSocket::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetOpenSkillSocket::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetOpenSkillSocket::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetOpenSkillSocket::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetOpenSkillSocket::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetOpenSkillSocket::m_btIndex -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetOpenSkillSocket::m_ebtType -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetOpenSkillSocket::m_ebtResult -> b
}

[Client]Game.Msg.MsgClientPetAddStarExp -> [Client]f.Q
{
	[Client]Game.Msg.MsgClientPetAddStarExp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetAddStarExp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetAddStarExp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetAddStarExp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetAddStarExp::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetAddStarExp::m_ulMainUID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetAddStarExp::m_ulSubUID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientPetAddStarExp::m_btSubNum -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientPetAddStarExp::m_ebtType -> B
}

[Client]Game.Msg.MsgServerPetAddStarExp -> [Client]f.q
{
	[Client]Game.Msg.MsgServerPetAddStarExp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetAddStarExp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetAddStarExp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddStarExp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetAddStarExp::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetAddStarExp::m_ulDBID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPetAddStarExp::m_uiCurExp -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddStarExp::m_btCurStar -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddStarExp::m_btCurFatigue -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddStarExp::m_ebtResult -> b
}

[Client]Game.Msg.MsgClientPetRecoverFatigue -> [Client]f.R
{
	[Client]Game.Msg.MsgClientPetRecoverFatigue::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetRecoverFatigue::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetRecoverFatigue::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetRecoverFatigue::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetRecoverFatigue::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetRecoverFatigue::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientPetRecoverFatigue::m_ebtType -> a
}

[Client]Game.Msg.MsgServerPetRecoverFatigue -> [Client]f.r
{
	[Client]Game.Msg.MsgServerPetRecoverFatigue::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetRecoverFatigue::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetRecoverFatigue::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRecoverFatigue::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRecoverFatigue::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetRecoverFatigue::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRecoverFatigue::m_ebtResult -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRecoverFatigue::m_btCurFatigue -> B
}

[Client]Game.Msg.MsgClientPetChangeSkillSocketType -> [Client]f.S
{
	[Client]Game.Msg.MsgClientPetChangeSkillSocketType::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetChangeSkillSocketType::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetChangeSkillSocketType::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetChangeSkillSocketType::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetChangeSkillSocketType::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetChangeSkillSocketType::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientPetChangeSkillSocketType::m_btIndex -> a
}

[Client]Game.Msg.MsgServerPetChangeSkillSocketType -> [Client]f.s
{
	[Client]Game.Msg.MsgServerPetChangeSkillSocketType::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetChangeSkillSocketType::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetChangeSkillSocketType::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetChangeSkillSocketType::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetChangeSkillSocketType::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetChangeSkillSocketType::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetChangeSkillSocketType::m_btIndex -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetChangeSkillSocketType::m_ebtType -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetChangeSkillSocketType::m_ebtResult -> b
}

[Client]Game.Msg.MsgClientPetRebirth -> [Client]f.T
{
	[Client]Game.Msg.MsgClientPetRebirth::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetRebirth::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetRebirth::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetRebirth::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetRebirth::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetRebirth::m_ulDBID -> A
}

[Client]Game.Msg.MsgServerPetRebirth -> [Client]f.t
{
	[Client]Game.Msg.MsgServerPetRebirth::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetRebirth::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetRebirth::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRebirth::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRebirth::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetRebirth::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRebirth::m_ebtResult -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRebirth::m_btNature -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRebirth::m_btQuality -> b
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRebirth::m_usGrowthRate -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRebirth::m_usMaxLuckyRebirthStep -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRebirth::m_usCurLuckyRebirthStep -> b
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPetRebirth::m_uiLuckyIndex -> A
}

[Client]Game.Msg.MsgClientPetRename -> [Client]f.U
{
	[Client]Game.Msg.MsgClientPetRename::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetRename::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetRename::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetRename::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetRename::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetRename::m_ulDBID -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientPetRename::m_abtName -> A
}

[Client]Game.Msg.MsgServerPetRename -> [Client]f.u
{
	[Client]Game.Msg.MsgServerPetRename::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetRename::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetRename::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetRename::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetRename::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetRename::m_ulDBID -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgServerPetRename::m_abtName -> A
}

[Client]Game.Msg.MsgServerBattlePetRename -> [Client]f.V
{
	[Client]Game.Msg.MsgServerBattlePetRename::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerBattlePetRename::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerBattlePetRename::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerBattlePetRename::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerBattlePetRename::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerBattlePetRename::m_uiPetID -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgServerBattlePetRename::m_abtName -> A
}

[Client]Game.Msg.MsgClientPetBackToEgg -> [Client]f.v
{
	[Client]Game.Msg.MsgClientPetBackToEgg::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetBackToEgg::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetBackToEgg::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetBackToEgg::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetBackToEgg::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetBackToEgg::m_ulDBID -> A
}

[Client]Game.Msg.MsgServerPetBackToEgg -> [Client]f.W
{
	[Client]Game.Msg.MsgServerPetBackToEgg::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetBackToEgg::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetBackToEgg::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetBackToEgg::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetBackToEgg::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetBackToEgg::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientPetAddStar -> [Client]f.w
{
	[Client]Game.Msg.MsgClientPetAddStar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientPetAddStar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientPetAddStar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetAddStar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetAddStar::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientPetAddStar::m_ulMainUID -> A
	System.Collections.Generic.List`1<System.UInt64> [Client]System.Collections.Generic.List`1<System.UInt64> Game.Msg.MsgClientPetAddStar::m_oVecSubUID -> A
}

[Client]Game.Msg.MsgServerPetAddStar -> [Client]f.X
{
	[Client]Game.Msg.MsgServerPetAddStar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetAddStar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetAddStar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddStar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetAddStar::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerPetAddStar::m_ulDBID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPetAddStar::m_uiCurExp -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddStar::m_btCurStar -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddStar::m_btCurFatigue -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetAddStar::m_ebtResult -> b
}

[Client]Game.Msg.MsgClientPetBagSizeUp -> [Client]f.x
{

	[Client]Game.Msg.MsgClientPetBagSizeUp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPetBagSizeUp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPetBagSizeUp::Type -> A
}

[Client]Game.Msg.MsgServerPetBagSizeChange -> [Client]f.Y
{
	[Client]Game.Msg.MsgServerPetBagSizeChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPetBagSizeChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPetBagSizeChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPetBagSizeChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPetBagSizeChange::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetBagSizeChange::m_ebtResult -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetBagSizeChange::m_btNewSize -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerPetBagSizeChange::m_btNewBuySize -> b
}

[Client]Game.Msg.MsgClientSetPetRebirthResult -> [Client]f.y
{
	[Client]Game.Msg.MsgClientSetPetRebirthResult::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientSetPetRebirthResult::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientSetPetRebirthResult::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientSetPetRebirthResult::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSetPetRebirthResult::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientSetPetRebirthResult::m_ulDBID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientSetPetRebirthResult::m_ebtResult -> a
}

[Client]Game.Msg.MsgServerSetPetRebirthResult -> [Client]f.Z
{
	[Client]Game.Msg.MsgServerSetPetRebirthResult::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSetPetRebirthResult::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSetPetRebirthResult::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSetPetRebirthResult::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSetPetRebirthResult::Type -> A
}

[Client]Game.Msg.EHeroRankBuyChanllengeTimeResult -> [Client]f.z
{
	Game.Msg.EHeroRankBuyChanllengeTimeResult [Client]Game.Msg.EHeroRankBuyChanllengeTimeResult Game.Msg.EHeroRankBuyChanllengeTimeResult::EHeroRankBuyChanllengeTimeResult_Sucess -> A
	Game.Msg.EHeroRankBuyChanllengeTimeResult [Client]Game.Msg.EHeroRankBuyChanllengeTimeResult Game.Msg.EHeroRankBuyChanllengeTimeResult::EHeroRankBuyChanllengeTimeResult_NotEnoughMoney -> a
	Game.Msg.EHeroRankBuyChanllengeTimeResult [Client]Game.Msg.EHeroRankBuyChanllengeTimeResult Game.Msg.EHeroRankBuyChanllengeTimeResult::EHeroRankBuyChanllengeTimeResult_OverFlow -> B

	System.Int32 [Client]System.Int32 Game.Msg.EHeroRankBuyChanllengeTimeResult::value__ skipped:  filtered
}

[Client]Game.Msg.EHeroRankGetAwardResult -> [Client]G.A
{
	Game.Msg.EHeroRankGetAwardResult [Client]Game.Msg.EHeroRankGetAwardResult Game.Msg.EHeroRankGetAwardResult::EHeroRankGetAwardResult_Sucess -> A
	Game.Msg.EHeroRankGetAwardResult [Client]Game.Msg.EHeroRankGetAwardResult Game.Msg.EHeroRankGetAwardResult::EHeroRankGetAwardResult_Fail -> a

	System.Int32 [Client]System.Int32 Game.Msg.EHeroRankGetAwardResult::value__ skipped:  filtered
}

[Client]Game.Msg.EHeroRankTrend -> [Client]G.a
{
	Game.Msg.EHeroRankTrend [Client]Game.Msg.EHeroRankTrend Game.Msg.EHeroRankTrend::eHeroRankTrend_Stable -> A
	Game.Msg.EHeroRankTrend [Client]Game.Msg.EHeroRankTrend Game.Msg.EHeroRankTrend::eHeroRankTrend_Up -> a
	Game.Msg.EHeroRankTrend [Client]Game.Msg.EHeroRankTrend Game.Msg.EHeroRankTrend::eHeroRankTrend_Down -> B

	System.Int32 [Client]System.Int32 Game.Msg.EHeroRankTrend::value__ skipped:  filtered
}

[Client]Game.Msg.EBattleRecordResult -> [Client]G.B
{
	Game.Msg.EBattleRecordResult [Client]Game.Msg.EBattleRecordResult Game.Msg.EBattleRecordResult::eBattleRecordResult_Sucess -> A
	Game.Msg.EBattleRecordResult [Client]Game.Msg.EBattleRecordResult Game.Msg.EBattleRecordResult::eBattleRecordResult_Fail -> a
	Game.Msg.EBattleRecordResult [Client]Game.Msg.EBattleRecordResult Game.Msg.EBattleRecordResult::eBattleRecordResult_Stable -> B

	System.Int32 [Client]System.Int32 Game.Msg.EBattleRecordResult::value__ skipped:  filtered
}

[Client]Game.Msg.EHeroBattleResult -> [Client]G.b
{
	Game.Msg.EHeroBattleResult [Client]Game.Msg.EHeroBattleResult Game.Msg.EHeroBattleResult::EHeroBattleResult_Sucess -> A
	Game.Msg.EHeroBattleResult [Client]Game.Msg.EHeroBattleResult Game.Msg.EHeroBattleResult::EHeroBattleResult_Fail -> a
	Game.Msg.EHeroBattleResult [Client]Game.Msg.EHeroBattleResult Game.Msg.EHeroBattleResult::EHeroBattleResult_OverTime -> B

	System.Int32 [Client]System.Int32 Game.Msg.EHeroBattleResult::value__ skipped:  filtered
}

[Client]Game.Msg.EStartHeroBattle_Ret -> [Client]G.C
{
	Game.Msg.EStartHeroBattle_Ret [Client]Game.Msg.EStartHeroBattle_Ret Game.Msg.EStartHeroBattle_Ret::eStartHeroBattle_Sucess -> A
	Game.Msg.EStartHeroBattle_Ret [Client]Game.Msg.EStartHeroBattle_Ret Game.Msg.EStartHeroBattle_Ret::eStartHeroBattle_TargetError -> a
	Game.Msg.EStartHeroBattle_Ret [Client]Game.Msg.EStartHeroBattle_Ret Game.Msg.EStartHeroBattle_Ret::eStartHeroBattle_TargetInBattle -> B
	Game.Msg.EStartHeroBattle_Ret [Client]Game.Msg.EStartHeroBattle_Ret Game.Msg.EStartHeroBattle_Ret::eStartHeroBattle_InBattle -> b
	Game.Msg.EStartHeroBattle_Ret [Client]Game.Msg.EStartHeroBattle_Ret Game.Msg.EStartHeroBattle_Ret::eStartHeroBattle_RankError -> C

	System.Int32 [Client]System.Int32 Game.Msg.EStartHeroBattle_Ret::value__ skipped:  filtered
}

[Client]Game.Msg.EServerUIIndex -> [Client]G.c
{
	Game.Msg.EServerUIIndex [Client]Game.Msg.EServerUIIndex Game.Msg.EServerUIIndex::eServerUIIndex_None -> A
	Game.Msg.EServerUIIndex [Client]Game.Msg.EServerUIIndex Game.Msg.EServerUIIndex::eServerUIIndex_FriendHelp -> a

	System.Int32 [Client]System.Int32 Game.Msg.EServerUIIndex::value__ skipped:  filtered
}

[Client]Game.Msg.ESkillHoleState -> [Client]G.D
{
	Game.Msg.ESkillHoleState [Client]Game.Msg.ESkillHoleState Game.Msg.ESkillHoleState::eHoleInvalid -> A
	Game.Msg.ESkillHoleState [Client]Game.Msg.ESkillHoleState Game.Msg.ESkillHoleState::eHoleCanBeUsed -> a

	System.Int32 [Client]System.Int32 Game.Msg.ESkillHoleState::value__ skipped:  filtered
}

[Client]Game.Msg.EItemStatus -> [Client]G.d
{
	Game.Msg.EItemStatus [Client]Game.Msg.EItemStatus Game.Msg.EItemStatus::eStateIsLocked -> A
	Game.Msg.EItemStatus [Client]Game.Msg.EItemStatus Game.Msg.EItemStatus::eCanNotdeal -> a
	Game.Msg.EItemStatus [Client]Game.Msg.EItemStatus Game.Msg.EItemStatus::eStateIsSoulBounded -> B
	Game.Msg.EItemStatus [Client]Game.Msg.EItemStatus Game.Msg.EItemStatus::eStateIsBlessed -> b
	Game.Msg.EItemStatus [Client]Game.Msg.EItemStatus Game.Msg.EItemStatus::eStateIsActivated -> C
	Game.Msg.EItemStatus [Client]Game.Msg.EItemStatus Game.Msg.EItemStatus::eStateIsSetTime -> c
	Game.Msg.EItemStatus [Client]Game.Msg.EItemStatus Game.Msg.EItemStatus::eStateIsUnLocking -> D

	System.Int32 [Client]System.Int32 Game.Msg.EItemStatus::value__ skipped:  filtered
}

[Client]Game.Msg.EPetPosition -> [Client]G.E
{
	Game.Msg.EPetPosition [Client]Game.Msg.EPetPosition Game.Msg.EPetPosition::ePetPos_Bag -> A
	Game.Msg.EPetPosition [Client]Game.Msg.EPetPosition Game.Msg.EPetPosition::ePetPos_Storage -> a
	Game.Msg.EPetPosition [Client]Game.Msg.EPetPosition Game.Msg.EPetPosition::ePetPos_Battle -> B
	Game.Msg.EPetPosition [Client]Game.Msg.EPetPosition Game.Msg.EPetPosition::ePetPos_Default -> b
	Game.Msg.EPetPosition [Client]Game.Msg.EPetPosition Game.Msg.EPetPosition::ePetPos_Max -> C

	System.Int32 [Client]System.Int32 Game.Msg.EPetPosition::value__ skipped:  filtered
}

[Client]Game.Msg.ENpcTaskState -> [Client]G.e
{
	Game.Msg.ENpcTaskState [Client]Game.Msg.ENpcTaskState Game.Msg.ENpcTaskState::eCanDoneSuccessTask -> A
	Game.Msg.ENpcTaskState [Client]Game.Msg.ENpcTaskState Game.Msg.ENpcTaskState::eCanDoneFailedTask -> a
	Game.Msg.ENpcTaskState [Client]Game.Msg.ENpcTaskState Game.Msg.ENpcTaskState::eCanAcceptTask -> B
	Game.Msg.ENpcTaskState [Client]Game.Msg.ENpcTaskState Game.Msg.ENpcTaskState::eCannotDoneTask -> b
	Game.Msg.ENpcTaskState [Client]Game.Msg.ENpcTaskState Game.Msg.ENpcTaskState::eCannotAcceptTask -> C

	System.Int32 [Client]System.Int32 Game.Msg.ENpcTaskState::value__ skipped:  filtered
}

[Client]Game.Msg.ETaskMsgResult -> [Client]G.F
{
	Game.Msg.ETaskMsgResult [Client]Game.Msg.ETaskMsgResult Game.Msg.ETaskMsgResult::TaskMsgResult_Success -> A
	Game.Msg.ETaskMsgResult [Client]Game.Msg.ETaskMsgResult Game.Msg.ETaskMsgResult::TaskMsgResult_Failed -> a

	System.Int32 [Client]System.Int32 Game.Msg.ETaskMsgResult::value__ skipped:  filtered
}

[Client]Game.Msg.ETaskAckDoneResult -> [Client]G.f
{
	Game.Msg.ETaskAckDoneResult [Client]Game.Msg.ETaskAckDoneResult Game.Msg.ETaskAckDoneResult::TaskAckDoneResult_Success -> A
	Game.Msg.ETaskAckDoneResult [Client]Game.Msg.ETaskAckDoneResult Game.Msg.ETaskAckDoneResult::TaskAckDoneResult_CannotAddItem -> a
	Game.Msg.ETaskAckDoneResult [Client]Game.Msg.ETaskAckDoneResult Game.Msg.ETaskAckDoneResult::TaskAckDoneResult_CannotFlyMap -> B
	Game.Msg.ETaskAckDoneResult [Client]Game.Msg.ETaskAckDoneResult Game.Msg.ETaskAckDoneResult::TaskAckDoneResult_Failed -> b

	System.Int32 [Client]System.Int32 Game.Msg.ETaskAckDoneResult::value__ skipped:  filtered
}

[Client]Game.Msg.ETaskState -> [Client]G.G
{
	Game.Msg.ETaskState [Client]Game.Msg.ETaskState Game.Msg.ETaskState::eTaskCanAccept -> A
	Game.Msg.ETaskState [Client]Game.Msg.ETaskState Game.Msg.ETaskState::eTaskCanDone -> a
	Game.Msg.ETaskState [Client]Game.Msg.ETaskState Game.Msg.ETaskState::eTaskCanNotDone -> B
	Game.Msg.ETaskState [Client]Game.Msg.ETaskState Game.Msg.ETaskState::eTaskFailed -> b

	System.Int32 [Client]System.Int32 Game.Msg.ETaskState::value__ skipped:  filtered
}

[Client]Game.Msg.ETaskAcceptResult -> [Client]G.g
{
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultSuccess -> A
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultFull -> a
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultFailed -> B
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedPreTask -> b
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedLevel -> C
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedItem -> c
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedMoney -> D
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedPrestige -> d
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedPK -> E
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedSkill -> e
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedProfession -> F
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedSex -> f
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultBagFull -> G
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultClose -> g
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedTitle -> H
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultMaxLimit -> h
	Game.Msg.ETaskAcceptResult [Client]Game.Msg.ETaskAcceptResult Game.Msg.ETaskAcceptResult::eTaskAcceptResultNeedTime -> I

	System.Int32 [Client]System.Int32 Game.Msg.ETaskAcceptResult::value__ skipped:  filtered
}

[Client]Game.Msg.ENpcFunction -> [Client]G.H
{
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunDialog -> A
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunHelp -> a
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunShop -> B
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunTransmit -> b
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunLearnSkill -> C
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunStorage -> c
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunExplorer -> D
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunAuction -> d
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunGoldConsign -> E
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunCreateFamily -> e
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunJoinFamily -> F
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunDisbandFamily -> f
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunHundredTower -> G
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunMonsterAttack -> g
	Game.Msg.ENpcFunction [Client]Game.Msg.ENpcFunction Game.Msg.ENpcFunction::eNpcFunMediaCard -> H

	System.Int32 [Client]System.Int32 Game.Msg.ENpcFunction::value__ skipped:  filtered
}

[Client]Game.Msg.ePersonKillState -> [Client]G.h
{
	Game.Msg.ePersonKillState [Client]Game.Msg.ePersonKillState Game.Msg.ePersonKillState::PersonKill_Normal -> A
	Game.Msg.ePersonKillState [Client]Game.Msg.ePersonKillState Game.Msg.ePersonKillState::PersonKill_Attacker -> a
	Game.Msg.ePersonKillState [Client]Game.Msg.ePersonKillState Game.Msg.ePersonKillState::PersonKill_Killer -> B

	System.Int32 [Client]System.Int32 Game.Msg.ePersonKillState::value__ skipped:  filtered
}

[Client]Game.Msg.enumDeathType -> [Client]G.I
{
	Game.Msg.enumDeathType [Client]Game.Msg.enumDeathType Game.Msg.enumDeathType::ePkDeath -> A
	Game.Msg.enumDeathType [Client]Game.Msg.enumDeathType Game.Msg.enumDeathType::eMosterDeath -> a
	Game.Msg.enumDeathType [Client]Game.Msg.enumDeathType Game.Msg.enumDeathType::eSystemDeath -> B

	System.Int32 [Client]System.Int32 Game.Msg.enumDeathType::value__ skipped:  filtered
}

[Client]Game.Msg.enumReliveType -> [Client]G.i
{
	Game.Msg.enumReliveType [Client]Game.Msg.enumReliveType Game.Msg.enumReliveType::eNormalRelive -> A
	Game.Msg.enumReliveType [Client]Game.Msg.enumReliveType Game.Msg.enumReliveType::ePerfectRelive -> a
	Game.Msg.enumReliveType [Client]Game.Msg.enumReliveType Game.Msg.enumReliveType::eGolgothaRelive -> B

	System.Int32 [Client]System.Int32 Game.Msg.enumReliveType::value__ skipped:  filtered
}

[Client]Game.Msg.ESkillErrorInf -> [Client]G.J
{
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Success -> A
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_ActionCut -> a
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Collection -> B
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_BagFull -> b
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_NoCollectionItem -> C
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_CollectionItemLackHP -> c
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_CollectMonsterDead -> D
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_SkillCantRelease -> d
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Not_enough_Level -> E
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Not_exist -> e
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Map_cant_ride -> F
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_GhostListFull -> f
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_GhostNumUpperLimit -> G
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_MonsterOwnerWrong -> g
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_LackItem -> H
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_MonsterSealWrong -> h
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_MonsterLevelTooHigh -> I
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Not_enough_MP -> i
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Not_enough_XP -> J
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_HP_is_full -> j
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Cool_down_pub -> K
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Cool_down_skill -> k
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Cool_Ban_skill -> L
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Single_sword -> l
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Double_sword -> M
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Shield -> m
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Single_stick -> N
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Double_stick -> n
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsRideOn -> O
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsTransform -> o
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsFaint -> P
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsInvincibility -> p
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsOnSales -> Q
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_HavenotTool -> q
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_FullBag -> R
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_TwoHandBlade -> r
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsDagger -> S
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsHeadship -> s
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsInSpecialMap -> T
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Not_enough_GuildRes -> t
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsAllMiss -> U
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsVehicle -> u
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_myself -> V
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Range_error -> v
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Digreed_error -> W
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsFaceToFace -> w
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_baby -> X
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_friend -> x
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_family -> Y
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_guild -> y
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_lover -> Z
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_brother -> z
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_Deadman -> aA
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_Player -> aa
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_NPC -> aB
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_coppermine -> ab
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_drag -> aC
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_wood -> ac
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_fried -> aD
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_myhost -> ad
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Is_monster -> aE
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Enemy -> ae
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_TargetInvincibility -> aF
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_Boss -> af
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_NotRideState -> aG
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsExtVehicle -> ag
	Game.Msg.ESkillErrorInf [Client]Game.Msg.ESkillErrorInf Game.Msg.ESkillErrorInf::eEr_IsDefense -> aH

	System.Int32 [Client]System.Int32 Game.Msg.ESkillErrorInf::value__ skipped:  filtered
}

[Client]Game.Msg.ECharAttr -> [Client]G.j
{
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_Invalid -> A
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_HP -> a
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_MP -> B
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_MaxHP -> b
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_MaxMP -> C
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_HPRecover -> c
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_HitOdds -> D
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_AttackSpeed -> d
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_AttackRange -> E
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_MoveSpeed -> e
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_Dodge -> F
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_Strength -> f
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_Constitution -> G
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_Agility -> g
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_Intelligence -> H
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_Energy -> h
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_CriticalOdds -> I
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_CriticalOddsSub -> i
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_PhysicsAttack -> J
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_MagicAttack -> j
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_FireAttack -> K
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_FrostAttack -> k
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_DarkAttack -> L
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_PhysicsDef -> l
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_MagicDef -> M
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_ElemDef -> m
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_ResistancePhysics -> N
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_ResistanceMagic -> n
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_RaceHurt -> O
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_RaceDef -> o
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_Shield -> P
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_AttackGemPer -> p
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_DefGemPer -> Q
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_HpGemPer -> q
	Game.Msg.ECharAttr [Client]Game.Msg.ECharAttr Game.Msg.ECharAttr::CharAttr_Max -> R

	System.Int32 [Client]System.Int32 Game.Msg.ECharAttr::value__ skipped:  filtered
}

[Client]Game.Msg.eAttrType -> [Client]G.K
{
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_Invalid -> A
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AttackSpeed -> a
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MoveSpeed -> B
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_Hit -> b
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_Dodge -> C
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddStr -> c
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddCon -> D
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddAgi -> d
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddInt -> E
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddEne -> e
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_CriticalOdds -> F
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_CriticalOddsSub -> f
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_PhysicsAttack -> G
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MagicAttack -> g
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_FireAttack -> H
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_FrostAttack -> h
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_DarkAttack -> I
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_RaceHurt -> i
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_PhysicsDefence -> J
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MagicDefence -> j
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_ElemDefence -> K
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MaxHP -> k
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_HpRecover -> L
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_PhysicsAttackPercent -> l
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MagicAttackPercent -> M
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_FireAttackPercent -> m
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_FrostAttackPercent -> N
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_DarkAttackPercent -> n
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_RaceDef -> O
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_PhysicsDefencePercent -> o
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MagicDefencePercent -> P
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_ResistancePhysics -> p
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_ResistanceMagic -> Q
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MaxHPPercent -> q
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_HpRecoverPercent -> R
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_HitPercent -> r
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_DodgePercent -> S
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddStrPercent -> s
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddConPercent -> T
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddAgiPercent -> t
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddIntPercent -> U
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddEnePercent -> u
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddPer_White -> V
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddPer_Yellow -> v
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddPer_Gem -> W
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AddSkill -> w
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_Attack -> X
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_Defence -> x
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AttackPercent -> Y
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_ResistancePercent -> y
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_PhysicsAttackPertenthousand -> Z
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MagicAttackPertenthousand -> z
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_PhysicsDefencePertenthousand -> aA
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MagicDefencePertenthousand -> aa
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_MaxHpPertenthousand -> aB
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_AttackPertenthousand -> ab
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_DefencePertenthousand -> aC
	Game.Msg.eAttrType [Client]Game.Msg.eAttrType Game.Msg.eAttrType::eAttrType_Max -> ac

	System.Int32 [Client]System.Int32 Game.Msg.eAttrType::value__ skipped:  filtered
}

[Client]Game.Msg.EPetQuality -> [Client]G.k
{
	Game.Msg.EPetQuality [Client]Game.Msg.EPetQuality Game.Msg.EPetQuality::ePetQuality_Normal -> A
	Game.Msg.EPetQuality [Client]Game.Msg.EPetQuality Game.Msg.EPetQuality::ePetQuality_Better -> a
	Game.Msg.EPetQuality [Client]Game.Msg.EPetQuality Game.Msg.EPetQuality::ePetQuality_Good -> B
	Game.Msg.EPetQuality [Client]Game.Msg.EPetQuality Game.Msg.EPetQuality::ePetQuality_Excellent -> b
	Game.Msg.EPetQuality [Client]Game.Msg.EPetQuality Game.Msg.EPetQuality::ePetQuality_Perfect -> C
	Game.Msg.EPetQuality [Client]Game.Msg.EPetQuality Game.Msg.EPetQuality::ePetQuality_Max -> c

	System.Int32 [Client]System.Int32 Game.Msg.EPetQuality::value__ skipped:  filtered
}

[Client]Game.Msg.EPetNature -> [Client]G.L
{
	Game.Msg.EPetNature [Client]Game.Msg.EPetNature Game.Msg.EPetNature::ePetNature_Calm -> A
	Game.Msg.EPetNature [Client]Game.Msg.EPetNature Game.Msg.EPetNature::ePetNature_Blood -> a
	Game.Msg.EPetNature [Client]Game.Msg.EPetNature Game.Msg.EPetNature::ePetNature_Tough -> B
	Game.Msg.EPetNature [Client]Game.Msg.EPetNature Game.Msg.EPetNature::ePetNature_Earnest -> b
	Game.Msg.EPetNature [Client]Game.Msg.EPetNature Game.Msg.EPetNature::ePetNature_Bold -> C
	Game.Msg.EPetNature [Client]Game.Msg.EPetNature Game.Msg.EPetNature::ePetNature_Fortitude -> c
	Game.Msg.EPetNature [Client]Game.Msg.EPetNature Game.Msg.EPetNature::ePetNature_Max -> D

	System.Int32 [Client]System.Int32 Game.Msg.EPetNature::value__ skipped:  filtered
}

[Client]Game.Msg.ELearnSkillRet -> [Client]G.l
{
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_Success -> A
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughLevel -> a
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughMoney -> B
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughExp -> b
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughGodValue -> C
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughGodLevel -> c
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughGuildOffer -> D
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughFamilyOffer -> d
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughPerSkillLevel -> E
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughGroupSkillLevel -> e
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_NotEnoughFamilyLibLevel -> F
	Game.Msg.ELearnSkillRet [Client]Game.Msg.ELearnSkillRet Game.Msg.ELearnSkillRet::eLearnSkill_PlayerNotRelive -> f

	System.Int32 [Client]System.Int32 Game.Msg.ELearnSkillRet::value__ skipped:  filtered
}

[Client]Game.Msg.ESkillDelayType -> [Client]G.M
{
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_Immediately -> A
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_Fly -> a
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_CallBack -> B
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_Status -> b
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_KeepCall -> C
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_AccCall -> c
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_Trap -> D
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_Collection -> d
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_CollectBox -> E
	Game.Msg.ESkillDelayType [Client]Game.Msg.ESkillDelayType Game.Msg.ESkillDelayType::eDelayType_BackToHome -> e

	System.Int32 [Client]System.Int32 Game.Msg.ESkillDelayType::value__ skipped:  filtered
}

[Client]Game.Msg.EEffectInfo -> [Client]G.m
{
	Game.Msg.EEffectInfo [Client]Game.Msg.EEffectInfo Game.Msg.EEffectInfo::eEffect_Miss -> A
	Game.Msg.EEffectInfo [Client]Game.Msg.EEffectInfo Game.Msg.EEffectInfo::eEffect_Critical -> a
	Game.Msg.EEffectInfo [Client]Game.Msg.EEffectInfo Game.Msg.EEffectInfo::eEffect_WardOff -> B
	Game.Msg.EEffectInfo [Client]Game.Msg.EEffectInfo Game.Msg.EEffectInfo::eEffect_Dead -> b

	System.Int32 [Client]System.Int32 Game.Msg.EEffectInfo::value__ skipped:  filtered
}

[Client]Game.Msg.eStatusSpecialFlag -> [Client]G.N
{
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_None -> A
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_Fixed -> a
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_Silence -> B
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_Hide -> b
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_NoAttack -> C
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_Invincibility -> c
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_GM -> D
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_ForceAttack -> d
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_Shield_BeHit -> E
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_Shidld_BeHurt -> e
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_All_Miss -> F
	Game.Msg.eStatusSpecialFlag [Client]Game.Msg.eStatusSpecialFlag Game.Msg.eStatusSpecialFlag::eStatus_NoDead -> f

	System.Int32 [Client]System.Int32 Game.Msg.eStatusSpecialFlag::value__ skipped:  filtered
}

[Client]Game.Msg.eSkillEffect -> [Client]G.n
{
	Game.Msg.eSkillEffect [Client]Game.Msg.eSkillEffect Game.Msg.eSkillEffect::eSkillEffect_AOENum -> A
	Game.Msg.eSkillEffect [Client]Game.Msg.eSkillEffect Game.Msg.eSkillEffect::eSkillEffect_ColdDown -> a
	Game.Msg.eSkillEffect [Client]Game.Msg.eSkillEffect Game.Msg.eSkillEffect::eSkillEffect_PerpareTime -> B
	Game.Msg.eSkillEffect [Client]Game.Msg.eSkillEffect Game.Msg.eSkillEffect::eSkillEffect_Range -> b
	Game.Msg.eSkillEffect [Client]Game.Msg.eSkillEffect Game.Msg.eSkillEffect::eSkillEffect_TargetRange -> C
	Game.Msg.eSkillEffect [Client]Game.Msg.eSkillEffect Game.Msg.eSkillEffect::eSkillEffect_Formula -> c

	System.Int32 [Client]System.Int32 Game.Msg.eSkillEffect::value__ skipped:  filtered
}

[Client]Game.Msg.enumEquipPart -> [Client]G.O
{
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_ErrorPart -> A
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Weapon -> a
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Helmet -> B
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Armour -> b
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Shoulder -> C
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Glove -> c
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Shoe -> D
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Ring -> d
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Earring -> E
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Neck -> e
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Amulet -> F
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Back -> f
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Dress -> G
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_SoulJade -> g
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Sangreal -> H
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Hair -> h
	Game.Msg.enumEquipPart [Client]Game.Msg.enumEquipPart Game.Msg.enumEquipPart::eEquip_Max -> I

	System.Int32 [Client]System.Int32 Game.Msg.enumEquipPart::value__ skipped:  filtered
}

[Client]Game.Msg.eSocketStatus -> [Client]G.o
{
	Game.Msg.eSocketStatus [Client]Game.Msg.eSocketStatus Game.Msg.eSocketStatus::SOCKET_INVALID -> A
	Game.Msg.eSocketStatus [Client]Game.Msg.eSocketStatus Game.Msg.eSocketStatus::SOCKET_EMPTY -> a
	Game.Msg.eSocketStatus [Client]Game.Msg.eSocketStatus Game.Msg.eSocketStatus::SOCKET_INSET -> B

	System.Int32 [Client]System.Int32 Game.Msg.eSocketStatus::value__ skipped:  filtered
}

[Client]Game.Msg.ePetSkillSocketType -> [Client]G.P
{
	Game.Msg.ePetSkillSocketType [Client]Game.Msg.ePetSkillSocketType Game.Msg.ePetSkillSocketType::ePetSocket_Invalid -> A
	Game.Msg.ePetSkillSocketType [Client]Game.Msg.ePetSkillSocketType Game.Msg.ePetSkillSocketType::ePetSocket_Attack -> a
	Game.Msg.ePetSkillSocketType [Client]Game.Msg.ePetSkillSocketType Game.Msg.ePetSkillSocketType::ePetSocket_Enhance -> B
	Game.Msg.ePetSkillSocketType [Client]Game.Msg.ePetSkillSocketType Game.Msg.ePetSkillSocketType::ePetSocket_Assist -> b
	Game.Msg.ePetSkillSocketType [Client]Game.Msg.ePetSkillSocketType Game.Msg.ePetSkillSocketType::ePetSocket_Debuff -> C
	Game.Msg.ePetSkillSocketType [Client]Game.Msg.ePetSkillSocketType Game.Msg.ePetSkillSocketType::ePetSocket_Recover -> c
	Game.Msg.ePetSkillSocketType [Client]Game.Msg.ePetSkillSocketType Game.Msg.ePetSkillSocketType::ePetSocket_Special -> D

	System.Int32 [Client]System.Int32 Game.Msg.ePetSkillSocketType::value__ skipped:  filtered
}

[Client]Game.Msg.eClientCharType -> [Client]G.p
{
	Game.Msg.eClientCharType [Client]Game.Msg.eClientCharType Game.Msg.eClientCharType::eClientCharType_Player -> A
	Game.Msg.eClientCharType [Client]Game.Msg.eClientCharType Game.Msg.eClientCharType::eClientCharType_Npc -> a
	Game.Msg.eClientCharType [Client]Game.Msg.eClientCharType Game.Msg.eClientCharType::eClientCharType_Monster -> B
	Game.Msg.eClientCharType [Client]Game.Msg.eClientCharType Game.Msg.eClientCharType::eClientCharType_Pet -> b
	Game.Msg.eClientCharType [Client]Game.Msg.eClientCharType Game.Msg.eClientCharType::eClientCharType_Bot -> C

	System.Int32 [Client]System.Int32 Game.Msg.eClientCharType::value__ skipped:  filtered
}

[Client]Game.Msg.eRelationType -> [Client]G.Q
{
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationFriend -> A
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationEnemy -> a
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationStudent -> B
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationBlackList -> b
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationTemp -> C
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationPrentice -> c
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationTeacher -> D
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationMaster -> d
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationBrother -> E
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.Msg.eRelationType::eRelationMarriage -> e

	System.Int32 [Client]System.Int32 Game.Msg.eRelationType::value__ skipped:  filtered
}

[Client]Game.Msg.ePetPatchSkill -> [Client]G.q
{
	Game.Msg.ePetPatchSkill [Client]Game.Msg.ePetPatchSkill Game.Msg.ePetPatchSkill::ePatchSkillSuccess -> A
	Game.Msg.ePetPatchSkill [Client]Game.Msg.ePetPatchSkill Game.Msg.ePetPatchSkill::ePatchSkillPetIsBattle -> a
	Game.Msg.ePetPatchSkill [Client]Game.Msg.ePetPatchSkill Game.Msg.ePetPatchSkill::ePatchSkillPetIsLocked -> B
	Game.Msg.ePetPatchSkill [Client]Game.Msg.ePetPatchSkill Game.Msg.ePetPatchSkill::ePatchSkillHaveSkill -> b
	Game.Msg.ePetPatchSkill [Client]Game.Msg.ePetPatchSkill Game.Msg.ePetPatchSkill::ePatchSkillHighLevelExist -> C
	Game.Msg.ePetPatchSkill [Client]Game.Msg.ePetPatchSkill Game.Msg.ePetPatchSkill::ePatchSkillSocketInvalid -> c
	Game.Msg.ePetPatchSkill [Client]Game.Msg.ePetPatchSkill Game.Msg.ePetPatchSkill::ePatchSkillWrongType -> D
	Game.Msg.ePetPatchSkill [Client]Game.Msg.ePetPatchSkill Game.Msg.ePetPatchSkill::ePatchSkillPetLevelNotEnough -> d
	Game.Msg.ePetPatchSkill [Client]Game.Msg.ePetPatchSkill Game.Msg.ePetPatchSkill::ePatchSkillNotEnoughMoney -> E

	System.Int32 [Client]System.Int32 Game.Msg.ePetPatchSkill::value__ skipped:  filtered
}

[Client]Game.Msg.ePetStrengthen -> [Client]G.R
{
	Game.Msg.ePetStrengthen [Client]Game.Msg.ePetStrengthen Game.Msg.ePetStrengthen::ePetStrengthenSuccess -> A
	Game.Msg.ePetStrengthen [Client]Game.Msg.ePetStrengthen Game.Msg.ePetStrengthen::ePetStrengthenExtraSuccess -> a
	Game.Msg.ePetStrengthen [Client]Game.Msg.ePetStrengthen Game.Msg.ePetStrengthen::ePetStrengthenPetIsBattle -> B
	Game.Msg.ePetStrengthen [Client]Game.Msg.ePetStrengthen Game.Msg.ePetStrengthen::ePetStrengthenNotEnoughMoney -> b
	Game.Msg.ePetStrengthen [Client]Game.Msg.ePetStrengthen Game.Msg.ePetStrengthen::ePetStrengthenNotEnoughCommon -> C
	Game.Msg.ePetStrengthen [Client]Game.Msg.ePetStrengthen Game.Msg.ePetStrengthen::ePetStrengthenNotEnoughEnsure -> c
	Game.Msg.ePetStrengthen [Client]Game.Msg.ePetStrengthen Game.Msg.ePetStrengthen::ePetStrengthenCommonFailed -> D
	Game.Msg.ePetStrengthen [Client]Game.Msg.ePetStrengthen Game.Msg.ePetStrengthen::ePetStrengthenEnsureFailed -> d

	System.Int32 [Client]System.Int32 Game.Msg.ePetStrengthen::value__ skipped:  filtered
}

[Client]Game.Msg.ePetTalentCompose -> [Client]G.r
{
	Game.Msg.ePetTalentCompose [Client]Game.Msg.ePetTalentCompose Game.Msg.ePetTalentCompose::eTalentComposeSuccess -> A
	Game.Msg.ePetTalentCompose [Client]Game.Msg.ePetTalentCompose Game.Msg.ePetTalentCompose::eTalentComposePetKindInvalid -> a
	Game.Msg.ePetTalentCompose [Client]Game.Msg.ePetTalentCompose Game.Msg.ePetTalentCompose::eTalentComposeSuccessByLocked -> B
	Game.Msg.ePetTalentCompose [Client]Game.Msg.ePetTalentCompose Game.Msg.ePetTalentCompose::eTalentComposeLackGive -> b
	Game.Msg.ePetTalentCompose [Client]Game.Msg.ePetTalentCompose Game.Msg.ePetTalentCompose::eTalentComposePetIsBattle -> C
	Game.Msg.ePetTalentCompose [Client]Game.Msg.ePetTalentCompose Game.Msg.ePetTalentCompose::eTalentComposePetIsLocked -> c

	System.Int32 [Client]System.Int32 Game.Msg.ePetTalentCompose::value__ skipped:  filtered
}

[Client]Game.Msg.ePetRemoveResult -> [Client]G.S
{
	Game.Msg.ePetRemoveResult [Client]Game.Msg.ePetRemoveResult Game.Msg.ePetRemoveResult::ePetRemoveSuccess -> A
	Game.Msg.ePetRemoveResult [Client]Game.Msg.ePetRemoveResult Game.Msg.ePetRemoveResult::ePetRemoveFailed -> a
	Game.Msg.ePetRemoveResult [Client]Game.Msg.ePetRemoveResult Game.Msg.ePetRemoveResult::ePetRemoveIsEvoing -> B
	Game.Msg.ePetRemoveResult [Client]Game.Msg.ePetRemoveResult Game.Msg.ePetRemoveResult::ePetRemoveIsBattle -> b
	Game.Msg.ePetRemoveResult [Client]Game.Msg.ePetRemoveResult Game.Msg.ePetRemoveResult::ePetRemoveIsLocked -> C
	Game.Msg.ePetRemoveResult [Client]Game.Msg.ePetRemoveResult Game.Msg.ePetRemoveResult::ePetRemoveSuccessByUsed -> c

	System.Int32 [Client]System.Int32 Game.Msg.ePetRemoveResult::value__ skipped:  filtered
}

[Client]Game.Msg.ePetOpenSkillSocket -> [Client]G.s
{
	Game.Msg.ePetOpenSkillSocket [Client]Game.Msg.ePetOpenSkillSocket Game.Msg.ePetOpenSkillSocket::eOpenSkillSocketSuccess -> A
	Game.Msg.ePetOpenSkillSocket [Client]Game.Msg.ePetOpenSkillSocket Game.Msg.ePetOpenSkillSocket::eOpenSkillSocketPetIsBattle -> a
	Game.Msg.ePetOpenSkillSocket [Client]Game.Msg.ePetOpenSkillSocket Game.Msg.ePetOpenSkillSocket::eOpenSkillSocketNotEnoughMaterial -> B
	Game.Msg.ePetOpenSkillSocket [Client]Game.Msg.ePetOpenSkillSocket Game.Msg.ePetOpenSkillSocket::eOpenSkillSocketNotEnoughMoney -> b
	Game.Msg.ePetOpenSkillSocket [Client]Game.Msg.ePetOpenSkillSocket Game.Msg.ePetOpenSkillSocket::eOpenSkillSocketIsOpened -> C

	System.Int32 [Client]System.Int32 Game.Msg.ePetOpenSkillSocket::value__ skipped:  filtered
}

[Client]Game.Msg.ePetAddStarSubType -> [Client]G.T
{
	Game.Msg.ePetAddStarSubType [Client]Game.Msg.ePetAddStarSubType Game.Msg.ePetAddStarSubType::eTypeItem -> A
	Game.Msg.ePetAddStarSubType [Client]Game.Msg.ePetAddStarSubType Game.Msg.ePetAddStarSubType::eTypePet -> a

	System.Int32 [Client]System.Int32 Game.Msg.ePetAddStarSubType::value__ skipped:  filtered
}

[Client]Game.Msg.eFatigueRecoverType -> [Client]G.t
{
	Game.Msg.eFatigueRecoverType [Client]Game.Msg.eFatigueRecoverType Game.Msg.eFatigueRecoverType::eRecoverOnePoint -> A
	Game.Msg.eFatigueRecoverType [Client]Game.Msg.eFatigueRecoverType Game.Msg.eFatigueRecoverType::eRecoverAllPoint -> a

	System.Int32 [Client]System.Int32 Game.Msg.eFatigueRecoverType::value__ skipped:  filtered
}

[Client]Game.Msg.eFatigueRecoverResult -> [Client]G.U
{
	Game.Msg.eFatigueRecoverResult [Client]Game.Msg.eFatigueRecoverResult Game.Msg.eFatigueRecoverResult::eFatigueRecoverSuccess -> A
	Game.Msg.eFatigueRecoverResult [Client]Game.Msg.eFatigueRecoverResult Game.Msg.eFatigueRecoverResult::eFatigueRecoverNotEnoughItem -> a
	Game.Msg.eFatigueRecoverResult [Client]Game.Msg.eFatigueRecoverResult Game.Msg.eFatigueRecoverResult::eFatigueRecoverIsNoNeed -> B
	Game.Msg.eFatigueRecoverResult [Client]Game.Msg.eFatigueRecoverResult Game.Msg.eFatigueRecoverResult::eFatigueRecoverIsBattle -> b

	System.Int32 [Client]System.Int32 Game.Msg.eFatigueRecoverResult::value__ skipped:  filtered
}

[Client]Game.Msg.ePetRebirthResult -> [Client]G.u
{
	Game.Msg.ePetRebirthResult [Client]Game.Msg.ePetRebirthResult Game.Msg.ePetRebirthResult::ePetRebirthSuccess -> A
	Game.Msg.ePetRebirthResult [Client]Game.Msg.ePetRebirthResult Game.Msg.ePetRebirthResult::ePetRebirthNotEnoughItem -> a
	Game.Msg.ePetRebirthResult [Client]Game.Msg.ePetRebirthResult Game.Msg.ePetRebirthResult::ePetRebirthNotEnoughMoney -> B
	Game.Msg.ePetRebirthResult [Client]Game.Msg.ePetRebirthResult Game.Msg.ePetRebirthResult::ePetRebirthIsBattle -> b
	Game.Msg.ePetRebirthResult [Client]Game.Msg.ePetRebirthResult Game.Msg.ePetRebirthResult::ePetRebirthFailed -> C

	System.Int32 [Client]System.Int32 Game.Msg.ePetRebirthResult::value__ skipped:  filtered
}

[Client]Game.Msg.eSetPetRebirthResult -> [Client]G.V
{
	Game.Msg.eSetPetRebirthResult [Client]Game.Msg.eSetPetRebirthResult Game.Msg.eSetPetRebirthResult::eSetPetReirthResultOld -> A
	Game.Msg.eSetPetRebirthResult [Client]Game.Msg.eSetPetRebirthResult Game.Msg.eSetPetRebirthResult::eSetPetReirthResultNew -> a

	System.Int32 [Client]System.Int32 Game.Msg.eSetPetRebirthResult::value__ skipped:  filtered
}

[Client]Game.Msg.eLookBattlePetType -> [Client]G.v
{
	Game.Msg.eLookBattlePetType [Client]Game.Msg.eLookBattlePetType Game.Msg.eLookBattlePetType::eLookBattlePetByPet -> A
	Game.Msg.eLookBattlePetType [Client]Game.Msg.eLookBattlePetType Game.Msg.eLookBattlePetType::eLookBattlePetByPlayer -> a

	System.Int32 [Client]System.Int32 Game.Msg.eLookBattlePetType::value__ skipped:  filtered
}

[Client]Game.Msg.eLookBattlePetResult -> [Client]G.W
{
	Game.Msg.eLookBattlePetResult [Client]Game.Msg.eLookBattlePetResult Game.Msg.eLookBattlePetResult::eLookPetInfoSuccess -> A
	Game.Msg.eLookBattlePetResult [Client]Game.Msg.eLookBattlePetResult Game.Msg.eLookBattlePetResult::eLookPetInfoPlayerOffLine -> a
	Game.Msg.eLookBattlePetResult [Client]Game.Msg.eLookBattlePetResult Game.Msg.eLookBattlePetResult::eLookPetInfoNoPetInBattle -> B
	Game.Msg.eLookBattlePetResult [Client]Game.Msg.eLookBattlePetResult Game.Msg.eLookBattlePetResult::eLookPetInfoPetNoExist -> b

	System.Int32 [Client]System.Int32 Game.Msg.eLookBattlePetResult::value__ skipped:  filtered
}

[Client]Game.Msg.eTransferRandSoulResult -> [Client]G.w
{
	Game.Msg.eTransferRandSoulResult [Client]Game.Msg.eTransferRandSoulResult Game.Msg.eTransferRandSoulResult::eTransferRandSoulSuccess -> A
	Game.Msg.eTransferRandSoulResult [Client]Game.Msg.eTransferRandSoulResult Game.Msg.eTransferRandSoulResult::eTransferRandSoulInvalidLevel -> a
	Game.Msg.eTransferRandSoulResult [Client]Game.Msg.eTransferRandSoulResult Game.Msg.eTransferRandSoulResult::eTransferRandSoulInvalidPart -> B
	Game.Msg.eTransferRandSoulResult [Client]Game.Msg.eTransferRandSoulResult Game.Msg.eTransferRandSoulResult::eTransferRandSoulNotEoughGold -> b

	System.Int32 [Client]System.Int32 Game.Msg.eTransferRandSoulResult::value__ skipped:  filtered
}

[Client]Game.Msg.ePetBoostType -> [Client]G.X
{
	Game.Msg.ePetBoostType [Client]Game.Msg.ePetBoostType Game.Msg.ePetBoostType::ePetCommonBoost -> A
	Game.Msg.ePetBoostType [Client]Game.Msg.ePetBoostType Game.Msg.ePetBoostType::ePetEnsureBoost -> a

	System.Int32 [Client]System.Int32 Game.Msg.ePetBoostType::value__ skipped:  filtered
}

[Client]Game.Msg.eAddStarExpResult -> [Client]G.x
{
	Game.Msg.eAddStarExpResult [Client]Game.Msg.eAddStarExpResult Game.Msg.eAddStarExpResult::eAddStarExpSuccess -> A
	Game.Msg.eAddStarExpResult [Client]Game.Msg.eAddStarExpResult Game.Msg.eAddStarExpResult::eAddStarExpItemTypeError -> a
	Game.Msg.eAddStarExpResult [Client]Game.Msg.eAddStarExpResult Game.Msg.eAddStarExpResult::eAddStarExpFatigueNotEnough -> B
	Game.Msg.eAddStarExpResult [Client]Game.Msg.eAddStarExpResult Game.Msg.eAddStarExpResult::eAddStarExpNotEnoughMoney -> b
	Game.Msg.eAddStarExpResult [Client]Game.Msg.eAddStarExpResult Game.Msg.eAddStarExpResult::eAddStarExpSubNotEnough -> C
	Game.Msg.eAddStarExpResult [Client]Game.Msg.eAddStarExpResult Game.Msg.eAddStarExpResult::eAddStarExpMainPetIsBattle -> c
	Game.Msg.eAddStarExpResult [Client]Game.Msg.eAddStarExpResult Game.Msg.eAddStarExpResult::eAddStarExpSubPetIsBattle -> D
	Game.Msg.eAddStarExpResult [Client]Game.Msg.eAddStarExpResult Game.Msg.eAddStarExpResult::eAddStarExpSubPetIsLocked -> d
	Game.Msg.eAddStarExpResult [Client]Game.Msg.eAddStarExpResult Game.Msg.eAddStarExpResult::eAddStarExpPetIsMaxStar -> E

	System.Int32 [Client]System.Int32 Game.Msg.eAddStarExpResult::value__ skipped:  filtered
}

[Client]Game.Msg.eAddStarResult -> [Client]G.Y
{
	Game.Msg.eAddStarResult [Client]Game.Msg.eAddStarResult Game.Msg.eAddStarResult::eAddStarSuccess -> A
	Game.Msg.eAddStarResult [Client]Game.Msg.eAddStarResult Game.Msg.eAddStarResult::eAddStarMainPetIsBattle -> a
	Game.Msg.eAddStarResult [Client]Game.Msg.eAddStarResult Game.Msg.eAddStarResult::eAddStarSubPetInvalid -> B
	Game.Msg.eAddStarResult [Client]Game.Msg.eAddStarResult Game.Msg.eAddStarResult::eAddStarPetIsMaxStar -> b
	Game.Msg.eAddStarResult [Client]Game.Msg.eAddStarResult Game.Msg.eAddStarResult::eAddStarNotEnoughMoney -> C
	Game.Msg.eAddStarResult [Client]Game.Msg.eAddStarResult Game.Msg.eAddStarResult::eAddStarNotEnoughPet -> c
	Game.Msg.eAddStarResult [Client]Game.Msg.eAddStarResult Game.Msg.eAddStarResult::eAddStarSubPetIsBattleOrLocked -> D

	System.Int32 [Client]System.Int32 Game.Msg.eAddStarResult::value__ skipped:  filtered
}

[Client]Game.Msg.ePetCallBack -> [Client]G.y
{
	Game.Msg.ePetCallBack [Client]Game.Msg.ePetCallBack Game.Msg.ePetCallBack::eCallBackMasterDead -> A
	Game.Msg.ePetCallBack [Client]Game.Msg.ePetCallBack Game.Msg.ePetCallBack::eCallBackPetDead -> a
	Game.Msg.ePetCallBack [Client]Game.Msg.ePetCallBack Game.Msg.ePetCallBack::eCallBackAndSetBattleOther -> B
	Game.Msg.ePetCallBack [Client]Game.Msg.ePetCallBack Game.Msg.ePetCallBack::eCallBackToRest -> b

	System.Int32 [Client]System.Int32 Game.Msg.ePetCallBack::value__ skipped:  filtered
}

[Client]Game.Msg.ePetChangeSocketType -> [Client]G.Z
{
	Game.Msg.ePetChangeSocketType [Client]Game.Msg.ePetChangeSocketType Game.Msg.ePetChangeSocketType::ePetChangeSocketTypeSuccess -> A
	Game.Msg.ePetChangeSocketType [Client]Game.Msg.ePetChangeSocketType Game.Msg.ePetChangeSocketType::ePetChangeSocketTypeNotEnoughItem -> a
	Game.Msg.ePetChangeSocketType [Client]Game.Msg.ePetChangeSocketType Game.Msg.ePetChangeSocketType::ePetChangeSocketTypeNotEnoughMoney -> B
	Game.Msg.ePetChangeSocketType [Client]Game.Msg.ePetChangeSocketType Game.Msg.ePetChangeSocketType::ePetChangeSocketTypeIsBattle -> b
	Game.Msg.ePetChangeSocketType [Client]Game.Msg.ePetChangeSocketType Game.Msg.ePetChangeSocketType::ePetChangeSocketTypeSocketNotOpen -> C

	System.Int32 [Client]System.Int32 Game.Msg.ePetChangeSocketType::value__ skipped:  filtered
}

[Client]Game.Msg.ePetOpenSocketResult -> [Client]G.z
{
	Game.Msg.ePetOpenSocketResult [Client]Game.Msg.ePetOpenSocketResult Game.Msg.ePetOpenSocketResult::ePetOpenSocketSuccess -> A
	Game.Msg.ePetOpenSocketResult [Client]Game.Msg.ePetOpenSocketResult Game.Msg.ePetOpenSocketResult::ePetOpenSocketNotEnoughItem -> a
	Game.Msg.ePetOpenSocketResult [Client]Game.Msg.ePetOpenSocketResult Game.Msg.ePetOpenSocketResult::ePetOpenSocketNotEnoughMoney -> B
	Game.Msg.ePetOpenSocketResult [Client]Game.Msg.ePetOpenSocketResult Game.Msg.ePetOpenSocketResult::ePetOpenSocketIsBattle -> b
	Game.Msg.ePetOpenSocketResult [Client]Game.Msg.ePetOpenSocketResult Game.Msg.ePetOpenSocketResult::ePetOpenSocketIsOpenAll -> C

	System.Int32 [Client]System.Int32 Game.Msg.ePetOpenSocketResult::value__ skipped:  filtered
}

[Client]Game.Msg.ePetBackToEggResult -> [Client]g.A
{
	Game.Msg.ePetBackToEggResult [Client]Game.Msg.ePetBackToEggResult Game.Msg.ePetBackToEggResult::ePetBackToEggSuccess -> A
	Game.Msg.ePetBackToEggResult [Client]Game.Msg.ePetBackToEggResult Game.Msg.ePetBackToEggResult::ePetBackToEggNotEnoughGold -> a
	Game.Msg.ePetBackToEggResult [Client]Game.Msg.ePetBackToEggResult Game.Msg.ePetBackToEggResult::ePetBackToEggPackIsFull -> B
	Game.Msg.ePetBackToEggResult [Client]Game.Msg.ePetBackToEggResult Game.Msg.ePetBackToEggResult::ePetBackToEggPetIsBattle -> b
	Game.Msg.ePetBackToEggResult [Client]Game.Msg.ePetBackToEggResult Game.Msg.ePetBackToEggResult::ePetBackToEggPetIsLocked -> C
	Game.Msg.ePetBackToEggResult [Client]Game.Msg.ePetBackToEggResult Game.Msg.ePetBackToEggResult::ePetBackToEggPetCanNotBeBack -> c

	System.Int32 [Client]System.Int32 Game.Msg.ePetBackToEggResult::value__ skipped:  filtered
}

[Client]Game.Msg.EMoveSkillEffectType -> [Client]g.a
{
	Game.Msg.EMoveSkillEffectType [Client]Game.Msg.EMoveSkillEffectType Game.Msg.EMoveSkillEffectType::eMoveSkill_None -> A
	Game.Msg.EMoveSkillEffectType [Client]Game.Msg.EMoveSkillEffectType Game.Msg.EMoveSkillEffectType::eMoveSkill_Assault -> a
	Game.Msg.EMoveSkillEffectType [Client]Game.Msg.EMoveSkillEffectType Game.Msg.EMoveSkillEffectType::eMoveSkill_Dodge -> B
	Game.Msg.EMoveSkillEffectType [Client]Game.Msg.EMoveSkillEffectType Game.Msg.EMoveSkillEffectType::eMoveSkill_PushOther -> b
	Game.Msg.EMoveSkillEffectType [Client]Game.Msg.EMoveSkillEffectType Game.Msg.EMoveSkillEffectType::eMoveSkill_PullOther -> C

	System.Int32 [Client]System.Int32 Game.Msg.EMoveSkillEffectType::value__ skipped:  filtered
}

[Client]Game.Msg.EnumMonsterType -> [Client]g.B
{
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMT_NormalMonster -> A
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMT_BossMonster -> a
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMT_Building -> B
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMT_Collection -> b
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMT_Task -> C
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMT_OneDamage -> c
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMT_Trap -> D
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMT_Defense -> d
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMT_Treasure -> E
	Game.Msg.EnumMonsterType [Client]Game.Msg.EnumMonsterType Game.Msg.EnumMonsterType::eMt_MonsterTypeMax -> e

	System.Int32 [Client]System.Int32 Game.Msg.EnumMonsterType::value__ skipped:  filtered
}

[Client]Game.Msg.eServerCharState -> [Client]g.b
{
	Game.Msg.eServerCharState [Client]Game.Msg.eServerCharState Game.Msg.eServerCharState::eCharState_Normal -> A
	Game.Msg.eServerCharState [Client]Game.Msg.eServerCharState Game.Msg.eServerCharState::eCharState_Death -> a
	Game.Msg.eServerCharState [Client]Game.Msg.eServerCharState Game.Msg.eServerCharState::eCharState_Max -> B

	System.Int32 [Client]System.Int32 Game.Msg.eServerCharState::value__ skipped:  filtered
}

[Client]Game.Msg.EItemDataType -> [Client]g.C
{
	Game.Msg.EItemDataType [Client]Game.Msg.EItemDataType Game.Msg.EItemDataType::ItemData_None -> A
	Game.Msg.EItemDataType [Client]Game.Msg.EItemDataType Game.Msg.EItemDataType::ItemData_EquipData -> a
	Game.Msg.EItemDataType [Client]Game.Msg.EItemDataType Game.Msg.EItemDataType::ItemData_Restore -> B

	System.Int32 [Client]System.Int32 Game.Msg.EItemDataType::value__ skipped:  filtered
}

[Client]Game.Msg.enumItemType -> [Client]g.c
{
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_OTHER -> A
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_EQUIP -> a
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_TASK -> B
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_RESTORE -> b
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_CRYSTAL -> C
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_GEM -> c
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_CHARM -> D
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_MATERIAL -> d
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_DIAMONDVIP -> E
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_BOOK -> e
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_PET -> F
	Game.Msg.enumItemType [Client]Game.Msg.enumItemType Game.Msg.enumItemType::ITEMTYPE_MAX -> f

	System.Int32 [Client]System.Int32 Game.Msg.enumItemType::value__ skipped:  filtered
}

[Client]Game.Msg.EMoneyDoneResult -> [Client]g.D
{
	Game.Msg.EMoneyDoneResult [Client]Game.Msg.EMoneyDoneResult Game.Msg.EMoneyDoneResult::eMoneyDoneResult_Success -> A
	Game.Msg.EMoneyDoneResult [Client]Game.Msg.EMoneyDoneResult Game.Msg.EMoneyDoneResult::eMoneyDoneResult_NoMoney -> a
	Game.Msg.EMoneyDoneResult [Client]Game.Msg.EMoneyDoneResult Game.Msg.EMoneyDoneResult::eMoneyDoneResult_IDError -> B
	Game.Msg.EMoneyDoneResult [Client]Game.Msg.EMoneyDoneResult Game.Msg.EMoneyDoneResult::eMoneyDoneResult_CanNotDo -> b
	Game.Msg.EMoneyDoneResult [Client]Game.Msg.EMoneyDoneResult Game.Msg.EMoneyDoneResult::eMoneyDoneResult_MaxTimes -> C

	System.Int32 [Client]System.Int32 Game.Msg.EMoneyDoneResult::value__ skipped:  filtered
}

[Client]Game.Msg.EMonsterAttackCityAwardResult -> [Client]g.d
{
	Game.Msg.EMonsterAttackCityAwardResult [Client]Game.Msg.EMonsterAttackCityAwardResult Game.Msg.EMonsterAttackCityAwardResult::eMonsterAttackCityAwardResult_Success -> A
	Game.Msg.EMonsterAttackCityAwardResult [Client]Game.Msg.EMonsterAttackCityAwardResult Game.Msg.EMonsterAttackCityAwardResult::eMonsterAttackCityAwardResult_HaveNoAward -> a

	System.Int32 [Client]System.Int32 Game.Msg.EMonsterAttackCityAwardResult::value__ skipped:  filtered
}

[Client]Game.Msg.EBuyMonsterAttackCityTimesResult -> [Client]g.E
{
	Game.Msg.EBuyMonsterAttackCityTimesResult [Client]Game.Msg.EBuyMonsterAttackCityTimesResult Game.Msg.EBuyMonsterAttackCityTimesResult::eBuyMonsterAttackCityTimesResult_Success -> A
	Game.Msg.EBuyMonsterAttackCityTimesResult [Client]Game.Msg.EBuyMonsterAttackCityTimesResult Game.Msg.EBuyMonsterAttackCityTimesResult::eBuyMonsterAttackCityTimesResult_MoneyNotEnouth -> a
	Game.Msg.EBuyMonsterAttackCityTimesResult [Client]Game.Msg.EBuyMonsterAttackCityTimesResult Game.Msg.EBuyMonsterAttackCityTimesResult::eBuyMonsterAttackCityTimesResult_ReachMaxTimes -> B

	System.Int32 [Client]System.Int32 Game.Msg.EBuyMonsterAttackCityTimesResult::value__ skipped:  filtered
}

[Client]Game.Msg.EMonsterAttackCityBufResult -> [Client]g.e
{
	Game.Msg.EMonsterAttackCityBufResult [Client]Game.Msg.EMonsterAttackCityBufResult Game.Msg.EMonsterAttackCityBufResult::eMonsterAttackCityBufResult_Success -> A
	Game.Msg.EMonsterAttackCityBufResult [Client]Game.Msg.EMonsterAttackCityBufResult Game.Msg.EMonsterAttackCityBufResult::eMonsterAttackCityBufResult_MoneyNotEnough -> a
	Game.Msg.EMonsterAttackCityBufResult [Client]Game.Msg.EMonsterAttackCityBufResult Game.Msg.EMonsterAttackCityBufResult::eMonsterAttackCityBufResult_AlreadyHave -> B

	System.Int32 [Client]System.Int32 Game.Msg.EMonsterAttackCityBufResult::value__ skipped:  filtered
}

[Client]Game.Msg.EMediaCardResult -> [Client]g.F
{
	Game.Msg.EMediaCardResult [Client]Game.Msg.EMediaCardResult Game.Msg.EMediaCardResult::eMediaCardResult_Success -> A
	Game.Msg.EMediaCardResult [Client]Game.Msg.EMediaCardResult Game.Msg.EMediaCardResult::eMediaCardResult_NotExist -> a
	Game.Msg.EMediaCardResult [Client]Game.Msg.EMediaCardResult Game.Msg.EMediaCardResult::eMediaCardResult_Used -> B
	Game.Msg.EMediaCardResult [Client]Game.Msg.EMediaCardResult Game.Msg.EMediaCardResult::eMediaCardResult_NeedWait -> b
	Game.Msg.EMediaCardResult [Client]Game.Msg.EMediaCardResult Game.Msg.EMediaCardResult::eMediaCardResult_CardError -> C
	Game.Msg.EMediaCardResult [Client]Game.Msg.EMediaCardResult Game.Msg.EMediaCardResult::eMediaCardResult_UsedSameType -> c

	System.Int32 [Client]System.Int32 Game.Msg.EMediaCardResult::value__ skipped:  filtered
}

[Client]Game.Msg.EInvitationCodeResult -> [Client]g.f
{
	Game.Msg.EInvitationCodeResult [Client]Game.Msg.EInvitationCodeResult Game.Msg.EInvitationCodeResult::eInvitationCodeResult_Success -> A
	Game.Msg.EInvitationCodeResult [Client]Game.Msg.EInvitationCodeResult Game.Msg.EInvitationCodeResult::eInvitationCodeResult_CodeInvalid -> a
	Game.Msg.EInvitationCodeResult [Client]Game.Msg.EInvitationCodeResult Game.Msg.EInvitationCodeResult::eInvitationCodeResult_HaveInvited -> B
	Game.Msg.EInvitationCodeResult [Client]Game.Msg.EInvitationCodeResult Game.Msg.EInvitationCodeResult::eInvitationCodeResult_CodeError -> b
	Game.Msg.EInvitationCodeResult [Client]Game.Msg.EInvitationCodeResult Game.Msg.EInvitationCodeResult::eInvitationCodeResult_NeedWait -> C

	System.Int32 [Client]System.Int32 Game.Msg.EInvitationCodeResult::value__ skipped:  filtered
}

[Client]Game.Msg.EGetAllServerAwardResult -> [Client]g.G
{
	Game.Msg.EGetAllServerAwardResult [Client]Game.Msg.EGetAllServerAwardResult Game.Msg.EGetAllServerAwardResult::eGetAllServerAwardResult_Success -> A
	Game.Msg.EGetAllServerAwardResult [Client]Game.Msg.EGetAllServerAwardResult Game.Msg.EGetAllServerAwardResult::eGetAllServerAwardResult_NoSpace -> a
	Game.Msg.EGetAllServerAwardResult [Client]Game.Msg.EGetAllServerAwardResult Game.Msg.EGetAllServerAwardResult::eGetAllServerAwardResult_AwardInvalid -> B
	Game.Msg.EGetAllServerAwardResult [Client]Game.Msg.EGetAllServerAwardResult Game.Msg.EGetAllServerAwardResult::eGetAllServerAwardResult_HaveGot -> b

	System.Int32 [Client]System.Int32 Game.Msg.EGetAllServerAwardResult::value__ skipped:  filtered
}

[Client]Game.Msg.EFirstRechargeAwardResult -> [Client]g.g
{
	Game.Msg.EFirstRechargeAwardResult [Client]Game.Msg.EFirstRechargeAwardResult Game.Msg.EFirstRechargeAwardResult::eFirstRechargeAwardResult_Success -> A
	Game.Msg.EFirstRechargeAwardResult [Client]Game.Msg.EFirstRechargeAwardResult Game.Msg.EFirstRechargeAwardResult::eFirstRechargeAwardResult_NoSpace -> a

	System.Int32 [Client]System.Int32 Game.Msg.EFirstRechargeAwardResult::value__ skipped:  filtered
}

[Client]Game.Msg.EMailType -> [Client]g.H
{
	Game.Msg.EMailType [Client]Game.Msg.EMailType Game.Msg.EMailType::eMailType_System -> A
	Game.Msg.EMailType [Client]Game.Msg.EMailType Game.Msg.EMailType::eMailType_User -> a
	Game.Msg.EMailType [Client]Game.Msg.EMailType Game.Msg.EMailType::eMailType_Pay -> B
	Game.Msg.EMailType [Client]Game.Msg.EMailType Game.Msg.EMailType::eMailType_Return -> b
	Game.Msg.EMailType [Client]Game.Msg.EMailType Game.Msg.EMailType::eMailType_PayMoney -> C

	System.Int32 [Client]System.Int32 Game.Msg.EMailType::value__ skipped:  filtered
}

[Client]Game.Msg.EMailState -> [Client]g.h
{
	Game.Msg.EMailState [Client]Game.Msg.EMailState Game.Msg.EMailState::eMailState_None -> A
	Game.Msg.EMailState [Client]Game.Msg.EMailState Game.Msg.EMailState::eMailState_Receive -> a
	Game.Msg.EMailState [Client]Game.Msg.EMailState Game.Msg.EMailState::eMailState_Read -> B
	Game.Msg.EMailState [Client]Game.Msg.EMailState Game.Msg.EMailState::eMailState_GetAccessory -> b
	Game.Msg.EMailState [Client]Game.Msg.EMailState Game.Msg.EMailState::eMailState_Delete -> C

	System.Int32 [Client]System.Int32 Game.Msg.EMailState::value__ skipped:  filtered
}

[Client]Game.Msg.EGetAccessoryResult -> [Client]g.I
{
	Game.Msg.EGetAccessoryResult [Client]Game.Msg.EGetAccessoryResult Game.Msg.EGetAccessoryResult::eGetAccessoryResult_Success -> A
	Game.Msg.EGetAccessoryResult [Client]Game.Msg.EGetAccessoryResult Game.Msg.EGetAccessoryResult::eGetAccessoryResult_MailIdError -> a
	Game.Msg.EGetAccessoryResult [Client]Game.Msg.EGetAccessoryResult Game.Msg.EGetAccessoryResult::eGetAccessoryResult_TargetError -> B
	Game.Msg.EGetAccessoryResult [Client]Game.Msg.EGetAccessoryResult Game.Msg.EGetAccessoryResult::eGetAccessoryResult_MailIsNew -> b
	Game.Msg.EGetAccessoryResult [Client]Game.Msg.EGetAccessoryResult Game.Msg.EGetAccessoryResult::eGetAccessoryResult_NoAccessory -> C
	Game.Msg.EGetAccessoryResult [Client]Game.Msg.EGetAccessoryResult Game.Msg.EGetAccessoryResult::eGetAccessoryResult_BagFull -> c
	Game.Msg.EGetAccessoryResult [Client]Game.Msg.EGetAccessoryResult Game.Msg.EGetAccessoryResult::eGetAccessoryResult_DuplicateGet -> D
	Game.Msg.EGetAccessoryResult [Client]Game.Msg.EGetAccessoryResult Game.Msg.EGetAccessoryResult::eGetAccessoryResult_ItemIdError -> d
	Game.Msg.EGetAccessoryResult [Client]Game.Msg.EGetAccessoryResult Game.Msg.EGetAccessoryResult::eGetAccessoryResult_NoMoney -> E

	System.Int32 [Client]System.Int32 Game.Msg.EGetAccessoryResult::value__ skipped:  filtered
}

[Client]Game.Msg.EDeleteMailResult -> [Client]g.i
{
	Game.Msg.EDeleteMailResult [Client]Game.Msg.EDeleteMailResult Game.Msg.EDeleteMailResult::eDeleteMailResult_Success -> A
	Game.Msg.EDeleteMailResult [Client]Game.Msg.EDeleteMailResult Game.Msg.EDeleteMailResult::eDeleteMailResult_MailIdError -> a
	Game.Msg.EDeleteMailResult [Client]Game.Msg.EDeleteMailResult Game.Msg.EDeleteMailResult::eDeleteMailResult_HaveAccessory -> B

	System.Int32 [Client]System.Int32 Game.Msg.EDeleteMailResult::value__ skipped:  filtered
}

[Client]Game.Msg.EBoardingType -> [Client]g.J
{
	Game.Msg.EBoardingType [Client]Game.Msg.EBoardingType Game.Msg.EBoardingType::eBoardingType_IN -> A
	Game.Msg.EBoardingType [Client]Game.Msg.EBoardingType Game.Msg.EBoardingType::eBoardingType_OUT -> a

	System.Int32 [Client]System.Int32 Game.Msg.EBoardingType::value__ skipped:  filtered
}

[Client]Game.Msg.EExchangePositionType -> [Client]g.j
{
	Game.Msg.EExchangePositionType [Client]Game.Msg.EExchangePositionType Game.Msg.EExchangePositionType::eExchangePositionType_2Board -> A
	Game.Msg.EExchangePositionType [Client]Game.Msg.EExchangePositionType Game.Msg.EExchangePositionType::eExchangePositionType_1Board1Depositary -> a
	Game.Msg.EExchangePositionType [Client]Game.Msg.EExchangePositionType Game.Msg.EExchangePositionType::eExchangePositionType_1Depositary1Board -> B
	Game.Msg.EExchangePositionType [Client]Game.Msg.EExchangePositionType Game.Msg.EExchangePositionType::eExchangePositionType_1Board -> b

	System.Int32 [Client]System.Int32 Game.Msg.EExchangePositionType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionPositionType -> [Client]g.K
{
	Game.Msg.EExpeditionPositionType [Client]Game.Msg.EExpeditionPositionType Game.Msg.EExpeditionPositionType::eExpeditionPositionType_OnBoard -> A
	Game.Msg.EExpeditionPositionType [Client]Game.Msg.EExpeditionPositionType Game.Msg.EExpeditionPositionType::eExpeditionPositionType_InDepositary -> a

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionPositionType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionReturnValueType -> [Client]g.k
{
	Game.Msg.EExpeditionReturnValueType [Client]Game.Msg.EExpeditionReturnValueType Game.Msg.EExpeditionReturnValueType::eExpeditionReturnValueType_Correct -> A
	Game.Msg.EExpeditionReturnValueType [Client]Game.Msg.EExpeditionReturnValueType Game.Msg.EExpeditionReturnValueType::eExpeditionReturnValueType_ExpeditionInfoError -> a
	Game.Msg.EExpeditionReturnValueType [Client]Game.Msg.EExpeditionReturnValueType Game.Msg.EExpeditionReturnValueType::eExpeditionReturnValueType_MoneyNotEnough -> B
	Game.Msg.EExpeditionReturnValueType [Client]Game.Msg.EExpeditionReturnValueType Game.Msg.EExpeditionReturnValueType::eExpeditionReturnValueType_DepositaryIsFull -> b
	Game.Msg.EExpeditionReturnValueType [Client]Game.Msg.EExpeditionReturnValueType Game.Msg.EExpeditionReturnValueType::eExpeditionReturnValueType_ConditionsNotMeet -> C
	Game.Msg.EExpeditionReturnValueType [Client]Game.Msg.EExpeditionReturnValueType Game.Msg.EExpeditionReturnValueType::eExpeditionReturnValueType_ItemNotEnough -> c

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionReturnValueType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionTaskType -> [Client]g.L
{
	Game.Msg.EExpeditionTaskType [Client]Game.Msg.EExpeditionTaskType Game.Msg.EExpeditionTaskType::eExpeditionTaskType_Explore -> A
	Game.Msg.EExpeditionTaskType [Client]Game.Msg.EExpeditionTaskType Game.Msg.EExpeditionTaskType::eExpeditionTaskType_Task -> a
	Game.Msg.EExpeditionTaskType [Client]Game.Msg.EExpeditionTaskType Game.Msg.EExpeditionTaskType::eExpeditionTaskType_Event -> B

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionTaskType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionExploreType -> [Client]g.l
{
	Game.Msg.EExpeditionExploreType [Client]Game.Msg.EExpeditionExploreType Game.Msg.EExpeditionExploreType::eExpeditionExploreType_All -> A
	Game.Msg.EExpeditionExploreType [Client]Game.Msg.EExpeditionExploreType Game.Msg.EExpeditionExploreType::eExpeditionExploreType_Combat -> a
	Game.Msg.EExpeditionExploreType [Client]Game.Msg.EExpeditionExploreType Game.Msg.EExpeditionExploreType::eExpeditionExploreType_Explore -> B
	Game.Msg.EExpeditionExploreType [Client]Game.Msg.EExpeditionExploreType Game.Msg.EExpeditionExploreType::eExpeditionExploreType_Wisdom -> b

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionExploreType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionLockType -> [Client]g.M
{
	Game.Msg.EExpeditionLockType [Client]Game.Msg.EExpeditionLockType Game.Msg.EExpeditionLockType::eExpeditionLockType_Lock -> A
	Game.Msg.EExpeditionLockType [Client]Game.Msg.EExpeditionLockType Game.Msg.EExpeditionLockType::eExpeditionLockType_UnLock -> a

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionLockType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionRewardType -> [Client]g.m
{
	Game.Msg.EExpeditionRewardType [Client]Game.Msg.EExpeditionRewardType Game.Msg.EExpeditionRewardType::eExpeditionRewardType_Task -> A
	Game.Msg.EExpeditionRewardType [Client]Game.Msg.EExpeditionRewardType Game.Msg.EExpeditionRewardType::eExpeditionRewardType_Event -> a
	Game.Msg.EExpeditionRewardType [Client]Game.Msg.EExpeditionRewardType Game.Msg.EExpeditionRewardType::eExpeditionRewardType_Explore -> B
	Game.Msg.EExpeditionRewardType [Client]Game.Msg.EExpeditionRewardType Game.Msg.EExpeditionRewardType::eExpeditionRewardType_ExploreBoss -> b
	Game.Msg.EExpeditionRewardType [Client]Game.Msg.EExpeditionRewardType Game.Msg.EExpeditionRewardType::eExpeditionRewardType_ExploreByEvent -> C
	Game.Msg.EExpeditionRewardType [Client]Game.Msg.EExpeditionRewardType Game.Msg.EExpeditionRewardType::eExpeditionRewardType_ExploreByDefiniteTime -> c

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionRewardType::value__ skipped:  filtered
}

[Client]Game.Msg.EAwardResult -> [Client]g.N
{
	Game.Msg.EAwardResult [Client]Game.Msg.EAwardResult Game.Msg.EAwardResult::eAwardResult_Success -> A
	Game.Msg.EAwardResult [Client]Game.Msg.EAwardResult Game.Msg.EAwardResult::eAwardResult_BagNoSpace -> a
	Game.Msg.EAwardResult [Client]Game.Msg.EAwardResult Game.Msg.EAwardResult::eAwardResult_NotVIP -> B

	System.Int32 [Client]System.Int32 Game.Msg.EAwardResult::value__ skipped:  filtered
}

[Client]Game.Msg.ERichManBonusSelectType -> [Client]g.n
{
	Game.Msg.ERichManBonusSelectType [Client]Game.Msg.ERichManBonusSelectType Game.Msg.ERichManBonusSelectType::eRichManBonusSelectType_Get -> A
	Game.Msg.ERichManBonusSelectType [Client]Game.Msg.ERichManBonusSelectType Game.Msg.ERichManBonusSelectType::eRichManBonusSelectType_Change -> a

	System.Int32 [Client]System.Int32 Game.Msg.ERichManBonusSelectType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionEvolutionPositionType -> [Client]g.O
{
	Game.Msg.EExpeditionEvolutionPositionType [Client]Game.Msg.EExpeditionEvolutionPositionType Game.Msg.EExpeditionEvolutionPositionType::eExpeditionEvolutionPositionType_1Board1Depositary -> A
	Game.Msg.EExpeditionEvolutionPositionType [Client]Game.Msg.EExpeditionEvolutionPositionType Game.Msg.EExpeditionEvolutionPositionType::eExpeditionEvolutionPositionType_2Depositary -> a

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionEvolutionPositionType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionEvolutionType -> [Client]g.o
{
	Game.Msg.EExpeditionEvolutionType [Client]Game.Msg.EExpeditionEvolutionType Game.Msg.EExpeditionEvolutionType::eExpeditionEvolutionType_LevelUp -> A
	Game.Msg.EExpeditionEvolutionType [Client]Game.Msg.EExpeditionEvolutionType Game.Msg.EExpeditionEvolutionType::eExpeditionEvolutionType_Evolution -> a
	Game.Msg.EExpeditionEvolutionType [Client]Game.Msg.EExpeditionEvolutionType Game.Msg.EExpeditionEvolutionType::eExpeditionEvolutionType_Skill -> B

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionEvolutionType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionSpendMoneyEvolutionType -> [Client]g.P
{
	Game.Msg.EExpeditionSpendMoneyEvolutionType [Client]Game.Msg.EExpeditionSpendMoneyEvolutionType Game.Msg.EExpeditionSpendMoneyEvolutionType::eExpeditionSpendMoneyEvolutionType_One -> A
	Game.Msg.EExpeditionSpendMoneyEvolutionType [Client]Game.Msg.EExpeditionSpendMoneyEvolutionType Game.Msg.EExpeditionSpendMoneyEvolutionType::eExpeditionSpendMoneyEvolutionType_All -> a

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionSpendMoneyEvolutionType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionButtonFlashType -> [Client]g.p
{
	Game.Msg.EExpeditionButtonFlashType [Client]Game.Msg.EExpeditionButtonFlashType Game.Msg.EExpeditionButtonFlashType::eExpeditionButtonFlashType_Recruit -> A
	Game.Msg.EExpeditionButtonFlashType [Client]Game.Msg.EExpeditionButtonFlashType Game.Msg.EExpeditionButtonFlashType::eExpeditionButtonFlashType_Explore -> a
	Game.Msg.EExpeditionButtonFlashType [Client]Game.Msg.EExpeditionButtonFlashType Game.Msg.EExpeditionButtonFlashType::eExpeditionButtonFlashType_Task -> B

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionButtonFlashType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionOpenType -> [Client]g.Q
{
	Game.Msg.EExpeditionOpenType [Client]Game.Msg.EExpeditionOpenType Game.Msg.EExpeditionOpenType::eExpeditionOpenType_Close -> A
	Game.Msg.EExpeditionOpenType [Client]Game.Msg.EExpeditionOpenType Game.Msg.EExpeditionOpenType::eExpeditionOpenType_StepOne -> a
	Game.Msg.EExpeditionOpenType [Client]Game.Msg.EExpeditionOpenType Game.Msg.EExpeditionOpenType::eExpeditionOpenType_StepTwo -> B

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionOpenType::value__ skipped:  filtered
}

[Client]Game.Msg.EExpeditionRecruitType -> [Client]g.q
{
	Game.Msg.EExpeditionRecruitType [Client]Game.Msg.EExpeditionRecruitType Game.Msg.EExpeditionRecruitType::eExpeditionRecruitType_Explore -> A
	Game.Msg.EExpeditionRecruitType [Client]Game.Msg.EExpeditionRecruitType Game.Msg.EExpeditionRecruitType::eExpeditionRecruitType_Combat -> a

	System.Int32 [Client]System.Int32 Game.Msg.EExpeditionRecruitType::value__ skipped:  filtered
}

[Client]Game.Msg.EPlatformType -> [Client]g.R
{
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_None -> A
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_Tiger -> a
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_91 -> B
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_PP -> b
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_360 -> C
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_Downjoy -> c
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_Mi -> D
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_UC -> d
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_PP2 -> E
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_WDJ -> e
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_Tongbu -> F
	Game.Msg.EPlatformType [Client]Game.Msg.EPlatformType Game.Msg.EPlatformType::EPlatformType_Baidu -> f

	System.Int32 [Client]System.Int32 Game.Msg.EPlatformType::value__ skipped:  filtered
}

[Client]Game.Msg.ERuntimeType -> [Client]g.r
{
	Game.Msg.ERuntimeType [Client]Game.Msg.ERuntimeType Game.Msg.ERuntimeType::ERuntimeType_None -> A
	Game.Msg.ERuntimeType [Client]Game.Msg.ERuntimeType Game.Msg.ERuntimeType::ERuntimeType_iOSCydia -> a
	Game.Msg.ERuntimeType [Client]Game.Msg.ERuntimeType Game.Msg.ERuntimeType::ERuntimeType_Android -> B
	Game.Msg.ERuntimeType [Client]Game.Msg.ERuntimeType Game.Msg.ERuntimeType::ERuntimeType_iOS -> b
	Game.Msg.ERuntimeType [Client]Game.Msg.ERuntimeType Game.Msg.ERuntimeType::ERuntimeType_Win -> C
	Game.Msg.ERuntimeType [Client]Game.Msg.ERuntimeType Game.Msg.ERuntimeType::ERuntimeType_iOSCydiaHD -> c
	Game.Msg.ERuntimeType [Client]Game.Msg.ERuntimeType Game.Msg.ERuntimeType::ERuntimeType_AndroidHD -> D
	Game.Msg.ERuntimeType [Client]Game.Msg.ERuntimeType Game.Msg.ERuntimeType::ERuntimeType_iOSHD -> d

	System.Int32 [Client]System.Int32 Game.Msg.ERuntimeType::value__ skipped:  filtered
}

[Client]Game.Msg.enumDBClientResult -> [Client]g.S
{
	Game.Msg.enumDBClientResult [Client]Game.Msg.enumDBClientResult Game.Msg.enumDBClientResult::eDBClientSucceed -> A
	Game.Msg.enumDBClientResult [Client]Game.Msg.enumDBClientResult Game.Msg.enumDBClientResult::eDBClientFailed -> a

	System.Int32 [Client]System.Int32 Game.Msg.enumDBClientResult::value__ skipped:  filtered
}

[Client]Game.Msg.EMapCarryRet -> [Client]g.s
{
	Game.Msg.EMapCarryRet [Client]Game.Msg.EMapCarryRet Game.Msg.EMapCarryRet::eMapCarryRet_Sucess -> A
	Game.Msg.EMapCarryRet [Client]Game.Msg.EMapCarryRet Game.Msg.EMapCarryRet::eMapCarryRet_CanotCarryOut -> a
	Game.Msg.EMapCarryRet [Client]Game.Msg.EMapCarryRet Game.Msg.EMapCarryRet::eMapCarryRet_CanotCarryIn -> B
	Game.Msg.EMapCarryRet [Client]Game.Msg.EMapCarryRet Game.Msg.EMapCarryRet::eMapCarryRet_CarryEctypeError -> b
	Game.Msg.EMapCarryRet [Client]Game.Msg.EMapCarryRet Game.Msg.EMapCarryRet::eMapCarryRet_CarryError -> C

	System.Int32 [Client]System.Int32 Game.Msg.EMapCarryRet::value__ skipped:  filtered
}

[Client]Game.Msg.ELoginCheckRet -> [Client]g.T
{
	Game.Msg.ELoginCheckRet [Client]Game.Msg.ELoginCheckRet Game.Msg.ELoginCheckRet::eLoginCheckRet_AlreadyOnline -> A
	Game.Msg.ELoginCheckRet [Client]Game.Msg.ELoginCheckRet Game.Msg.ELoginCheckRet::eLoginCheckRet_Success -> a
	Game.Msg.ELoginCheckRet [Client]Game.Msg.ELoginCheckRet Game.Msg.ELoginCheckRet::eLoginCheckRet_OnlineMax -> B
	Game.Msg.ELoginCheckRet [Client]Game.Msg.ELoginCheckRet Game.Msg.ELoginCheckRet::eLoginCheckRet_Forbid -> b
	Game.Msg.ELoginCheckRet [Client]Game.Msg.ELoginCheckRet Game.Msg.ELoginCheckRet::eLoginCheckRet_CheckFail -> C
	Game.Msg.ELoginCheckRet [Client]Game.Msg.ELoginCheckRet Game.Msg.ELoginCheckRet::eLoginCheckRet_TimeOut -> c
	Game.Msg.ELoginCheckRet [Client]Game.Msg.ELoginCheckRet Game.Msg.ELoginCheckRet::eLoginCheckRet_NoUserInfo -> D

	System.Int32 [Client]System.Int32 Game.Msg.ELoginCheckRet::value__ skipped:  filtered
}

[Client]Game.Msg.EChatType -> [Client]g.t
{
	Game.Msg.EChatType [Client]Game.Msg.EChatType Game.Msg.EChatType::eChatType_Stage -> A
	Game.Msg.EChatType [Client]Game.Msg.EChatType Game.Msg.EChatType::eChatType_Family -> a
	Game.Msg.EChatType [Client]Game.Msg.EChatType Game.Msg.EChatType::eChatType_Team -> B
	Game.Msg.EChatType [Client]Game.Msg.EChatType Game.Msg.EChatType::eChatType_World -> b
	Game.Msg.EChatType [Client]Game.Msg.EChatType Game.Msg.EChatType::eChatType_Private -> C
	Game.Msg.EChatType [Client]Game.Msg.EChatType Game.Msg.EChatType::eChatType_System -> c
	Game.Msg.EChatType [Client]Game.Msg.EChatType Game.Msg.EChatType::eChatType_Broadcast -> D

	System.Int32 [Client]System.Int32 Game.Msg.EChatType::value__ skipped:  filtered
}

[Client]Game.Msg.eItemShopResult -> [Client]g.U
{
	Game.Msg.eItemShopResult [Client]Game.Msg.eItemShopResult Game.Msg.eItemShopResult::eItemShopSucceed -> A
	Game.Msg.eItemShopResult [Client]Game.Msg.eItemShopResult Game.Msg.eItemShopResult::eItemShopFailed -> a
	Game.Msg.eItemShopResult [Client]Game.Msg.eItemShopResult Game.Msg.eItemShopResult::eItemShopLackMoney -> B
	Game.Msg.eItemShopResult [Client]Game.Msg.eItemShopResult Game.Msg.eItemShopResult::eItemShopCanNotSell -> b
	Game.Msg.eItemShopResult [Client]Game.Msg.eItemShopResult Game.Msg.eItemShopResult::eItemShopBagFull -> C
	Game.Msg.eItemShopResult [Client]Game.Msg.eItemShopResult Game.Msg.eItemShopResult::eItemShopLackGive -> c

	System.Int32 [Client]System.Int32 Game.Msg.eItemShopResult::value__ skipped:  filtered
}

[Client]Game.Msg.eNpcSaleItemCostType -> [Client]g.u
{
	Game.Msg.eNpcSaleItemCostType [Client]Game.Msg.eNpcSaleItemCostType Game.Msg.eNpcSaleItemCostType::eNpcSaleItemCostByMoney -> A
	Game.Msg.eNpcSaleItemCostType [Client]Game.Msg.eNpcSaleItemCostType Game.Msg.eNpcSaleItemCostType::eNpcSaleItemCostByGive -> a
	Game.Msg.eNpcSaleItemCostType [Client]Game.Msg.eNpcSaleItemCostType Game.Msg.eNpcSaleItemCostType::eNpcSaleItemCostByGold -> B
	Game.Msg.eNpcSaleItemCostType [Client]Game.Msg.eNpcSaleItemCostType Game.Msg.eNpcSaleItemCostType::eNpcSaleItemCostByItem -> b
	Game.Msg.eNpcSaleItemCostType [Client]Game.Msg.eNpcSaleItemCostType Game.Msg.eNpcSaleItemCostType::eNpcSaleItemCostByArenaOffLineSorce -> C

	System.Int32 [Client]System.Int32 Game.Msg.eNpcSaleItemCostType::value__ skipped:  filtered
}

[Client]Game.Msg.eItemChangeReason -> [Client]g.V
{
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonUnDefine -> A
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonMove -> a
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonDestory -> B
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonTaskReward -> b
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonDeathPublish -> C
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonOverdue -> c
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonCollection -> D
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonPick -> d
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonBuy -> E
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonProduce -> e
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonScript -> F
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonRelation -> f
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonDebugCmd -> G
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonChat -> g
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonSrotOrder -> H
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonUse -> h
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonDeal -> I
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonEquip -> i
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonCarry -> J
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonRider -> j
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonPet -> K
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonTrump -> k
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonExplorer -> L
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonMail -> l
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonGemCompose -> M
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonMagicBox -> m
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonEncourge -> N
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonGuild -> n
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonAward -> O
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonLock -> o
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonPrize -> P
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonComeBackAward -> p
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonEquipCompose -> Q
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonExpedition -> q
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonPtVIPAward -> R
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonLoginAward -> r
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonLevelAward -> S
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonRichManAward -> s
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonCardAward -> T
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonAuctionBuy -> t
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonPetAddStarExp -> U
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonPetRecoverFatigue -> u
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonOnLineAward -> V
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonRechargeAward -> v
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonAllServerAward -> W
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonFirstRechargeAward -> w
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonMonsterAttackCityBuf -> X
	Game.Msg.eItemChangeReason [Client]Game.Msg.eItemChangeReason Game.Msg.eItemChangeReason::eReasonFiveStarAward -> x

	System.Int32 [Client]System.Int32 Game.Msg.eItemChangeReason::value__ skipped:  filtered
}

[Client]Game.Msg.eAddFriendAckRet -> [Client]g.v
{
	Game.Msg.eAddFriendAckRet [Client]Game.Msg.eAddFriendAckRet Game.Msg.eAddFriendAckRet::eAddFriendAckRet_Succeed -> A
	Game.Msg.eAddFriendAckRet [Client]Game.Msg.eAddFriendAckRet Game.Msg.eAddFriendAckRet::eAddFriendAckRet_Accepted -> a
	Game.Msg.eAddFriendAckRet [Client]Game.Msg.eAddFriendAckRet Game.Msg.eAddFriendAckRet::eAddFriendAckRet_Refused -> B
	Game.Msg.eAddFriendAckRet [Client]Game.Msg.eAddFriendAckRet Game.Msg.eAddFriendAckRet::eAddFriendAckRet_NotOnLine -> b

	System.Int32 [Client]System.Int32 Game.Msg.eAddFriendAckRet::value__ skipped:  filtered
}

[Client]Game.Msg.EEctypeGrade -> [Client]g.W
{
	Game.Msg.EEctypeGrade [Client]Game.Msg.EEctypeGrade Game.Msg.EEctypeGrade::eEctypeGrade_A -> A
	Game.Msg.EEctypeGrade [Client]Game.Msg.EEctypeGrade Game.Msg.EEctypeGrade::eEctypeGrade_S -> a
	Game.Msg.EEctypeGrade [Client]Game.Msg.EEctypeGrade Game.Msg.EEctypeGrade::eEctypeGrade_SS -> B

	System.Int32 [Client]System.Int32 Game.Msg.EEctypeGrade::value__ skipped:  filtered
}

[Client]Game.Msg.ECallFriendType -> [Client]g.w
{
	Game.Msg.ECallFriendType [Client]Game.Msg.ECallFriendType Game.Msg.ECallFriendType::eCallFriendType_Player -> A
	Game.Msg.ECallFriendType [Client]Game.Msg.ECallFriendType Game.Msg.ECallFriendType::eCallFriendType_Npc -> a

	System.Int32 [Client]System.Int32 Game.Msg.ECallFriendType::value__ skipped:  filtered
}

[Client]Game.Msg.eEctypeExtraAwardIndex -> [Client]g.X
{
	Game.Msg.eEctypeExtraAwardIndex [Client]Game.Msg.eEctypeExtraAwardIndex Game.Msg.eEctypeExtraAwardIndex::eCommonAwardIndex -> A
	Game.Msg.eEctypeExtraAwardIndex [Client]Game.Msg.eEctypeExtraAwardIndex Game.Msg.eEctypeExtraAwardIndex::ePtVIPAwardIndex -> a

	System.Int32 [Client]System.Int32 Game.Msg.eEctypeExtraAwardIndex::value__ skipped:  filtered
}

[Client]Game.Msg.eAfkEctypeDealResult -> [Client]g.x
{
	Game.Msg.eAfkEctypeDealResult [Client]Game.Msg.eAfkEctypeDealResult Game.Msg.eAfkEctypeDealResult::eAfkEctypeSpeedUpSuccess -> A
	Game.Msg.eAfkEctypeDealResult [Client]Game.Msg.eAfkEctypeDealResult Game.Msg.eAfkEctypeDealResult::eAfkEctypeDirectFinishSuccess -> a
	Game.Msg.eAfkEctypeDealResult [Client]Game.Msg.eAfkEctypeDealResult Game.Msg.eAfkEctypeDealResult::eAfkEctypeAlreadySpeedUp -> B
	Game.Msg.eAfkEctypeDealResult [Client]Game.Msg.eAfkEctypeDealResult Game.Msg.eAfkEctypeDealResult::eAfkEctypeAlreadyFetchAll -> b
	Game.Msg.eAfkEctypeDealResult [Client]Game.Msg.eAfkEctypeDealResult Game.Msg.eAfkEctypeDealResult::eAfkEctypeNotEnoughGold -> C
	Game.Msg.eAfkEctypeDealResult [Client]Game.Msg.eAfkEctypeDealResult Game.Msg.eAfkEctypeDealResult::eAfkEctypeExpIsFull -> c

	System.Int32 [Client]System.Int32 Game.Msg.eAfkEctypeDealResult::value__ skipped:  filtered
}

[Client]Game.Msg.eEctypeExtraAwardResult -> [Client]g.Y
{
	Game.Msg.eEctypeExtraAwardResult [Client]Game.Msg.eEctypeExtraAwardResult Game.Msg.eEctypeExtraAwardResult::eCommonAwardResult_Success -> A
	Game.Msg.eEctypeExtraAwardResult [Client]Game.Msg.eEctypeExtraAwardResult Game.Msg.eEctypeExtraAwardResult::ePtVIPAwardResult_Success -> a
	Game.Msg.eEctypeExtraAwardResult [Client]Game.Msg.eEctypeExtraAwardResult Game.Msg.eEctypeExtraAwardResult::eExtraAward_IsAllReadyFetch -> B
	Game.Msg.eEctypeExtraAwardResult [Client]Game.Msg.eEctypeExtraAwardResult Game.Msg.eEctypeExtraAwardResult::eExtraAward_NotEnoughGold -> b
	Game.Msg.eEctypeExtraAwardResult [Client]Game.Msg.eEctypeExtraAwardResult Game.Msg.eEctypeExtraAwardResult::eExtraAward_IsNotPtVIP -> C

	System.Int32 [Client]System.Int32 Game.Msg.eEctypeExtraAwardResult::value__ skipped:  filtered
}

[Client]Game.Msg.eEnterAfkEctypeResult -> [Client]g.y
{
	Game.Msg.eEnterAfkEctypeResult [Client]Game.Msg.eEnterAfkEctypeResult Game.Msg.eEnterAfkEctypeResult::EnterAfkEctypeSuccess -> A
	Game.Msg.eEnterAfkEctypeResult [Client]Game.Msg.eEnterAfkEctypeResult Game.Msg.eEnterAfkEctypeResult::EnterAfkEctypeInvalidLevel -> a
	Game.Msg.eEnterAfkEctypeResult [Client]Game.Msg.eEnterAfkEctypeResult Game.Msg.eEnterAfkEctypeResult::EnterAfkEctypeInvalidSrcMap -> B

	System.Int32 [Client]System.Int32 Game.Msg.eEnterAfkEctypeResult::value__ skipped:  filtered
}

[Client]Game.Msg.ePartBoostResult -> [Client]g.Z
{
	Game.Msg.ePartBoostResult [Client]Game.Msg.ePartBoostResult Game.Msg.ePartBoostResult::eBoost_Part_Success -> A
	Game.Msg.ePartBoostResult [Client]Game.Msg.ePartBoostResult Game.Msg.ePartBoostResult::eBoost_Part_Success_UseCharm -> a
	Game.Msg.ePartBoostResult [Client]Game.Msg.ePartBoostResult Game.Msg.ePartBoostResult::eBoost_Part_Failed -> B
	Game.Msg.ePartBoostResult [Client]Game.Msg.ePartBoostResult Game.Msg.ePartBoostResult::eBoost_Part_Failed_UseCharm -> b
	Game.Msg.ePartBoostResult [Client]Game.Msg.ePartBoostResult Game.Msg.ePartBoostResult::eBoost_Part_None -> C

	System.Int32 [Client]System.Int32 Game.Msg.ePartBoostResult::value__ skipped:  filtered
}

[Client]Game.Msg.eGemPartResult -> [Client]g.z
{
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Insert_Success -> A
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Insert_No_Gems -> a
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Insert_Less_Money -> B
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Insert_Part_Invalid -> b
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Insert_Socket_Invalid -> C
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Insert_GemID_Invalid -> c
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Insert_GemType_Invalid -> D
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Insert_GemNum_Limited -> d
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Insert_GemStatus_Invalid -> E
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Pick_Success -> e
	Game.Msg.eGemPartResult [Client]Game.Msg.eGemPartResult Game.Msg.eGemPartResult::eGem_Pick_Failed -> F

	System.Int32 [Client]System.Int32 Game.Msg.eGemPartResult::value__ skipped:  filtered
}

[Client]Game.Msg.eSoulChangeResult -> [Client]H.A
{
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_UpGrade_Success -> A
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_UpGrade_Failed -> a
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Inherit_Success -> B
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Inherit_Failed -> b
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Change_Not_Enough_Money -> C
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Index_Invalid -> c
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Equip_Invalid -> D
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Equip_Part_Invalid -> d
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Class_Invalid -> E
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Equip_Level_Invalid -> e
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Max_Level -> F
	Game.Msg.eSoulChangeResult [Client]Game.Msg.eSoulChangeResult Game.Msg.eSoulChangeResult::eSoul_Bag_State_Invalid -> f

	System.Int32 [Client]System.Int32 Game.Msg.eSoulChangeResult::value__ skipped:  filtered
}

[Client]Game.Msg.eMagicBoxResult -> [Client]H.a
{
	Game.Msg.eMagicBoxResult [Client]Game.Msg.eMagicBoxResult Game.Msg.eMagicBoxResult::eMagic_Box_Success -> A
	Game.Msg.eMagicBoxResult [Client]Game.Msg.eMagicBoxResult Game.Msg.eMagicBoxResult::eMagic_Box_Failed -> a
	Game.Msg.eMagicBoxResult [Client]Game.Msg.eMagicBoxResult Game.Msg.eMagicBoxResult::eMagic_Box_Not_Enough_Money -> B
	Game.Msg.eMagicBoxResult [Client]Game.Msg.eMagicBoxResult Game.Msg.eMagicBoxResult::eMagic_Box_No_Formula -> b
	Game.Msg.eMagicBoxResult [Client]Game.Msg.eMagicBoxResult Game.Msg.eMagicBoxResult::eMagic_Box_Not_Enough_Main -> C
	Game.Msg.eMagicBoxResult [Client]Game.Msg.eMagicBoxResult Game.Msg.eMagicBoxResult::eMagic_Box_Not_Enough_Sub -> c

	System.Int32 [Client]System.Int32 Game.Msg.eMagicBoxResult::value__ skipped:  filtered
}

[Client]Game.Msg.EClientBagType -> [Client]H.B
{
	Game.Msg.EClientBagType [Client]Game.Msg.EClientBagType Game.Msg.EClientBagType::eBagClientTypePack -> A
	Game.Msg.EClientBagType [Client]Game.Msg.EClientBagType Game.Msg.EClientBagType::eBagClientTypeTaskPack -> a
	Game.Msg.EClientBagType [Client]Game.Msg.EClientBagType Game.Msg.EClientBagType::eBagClientTypeStorage -> B
	Game.Msg.EClientBagType [Client]Game.Msg.EClientBagType Game.Msg.EClientBagType::eBagClientTypeMax -> b

	System.Int32 [Client]System.Int32 Game.Msg.EClientBagType::value__ skipped:  filtered
}

[Client]Game.Msg.eBagSizeUpResult -> [Client]H.b
{
	Game.Msg.eBagSizeUpResult [Client]Game.Msg.eBagSizeUpResult Game.Msg.eBagSizeUpResult::eBagSizeUpResultSuccess -> A
	Game.Msg.eBagSizeUpResult [Client]Game.Msg.eBagSizeUpResult Game.Msg.eBagSizeUpResult::eBagSizeUpResultNotEnoughGold -> a
	Game.Msg.eBagSizeUpResult [Client]Game.Msg.eBagSizeUpResult Game.Msg.eBagSizeUpResult::eBagSizeUpResultIsMaxSize -> B

	System.Int32 [Client]System.Int32 Game.Msg.eBagSizeUpResult::value__ skipped:  filtered
}

[Client]Game.Msg.ePetBagSizeChange -> [Client]H.C
{
	Game.Msg.ePetBagSizeChange [Client]Game.Msg.ePetBagSizeChange Game.Msg.ePetBagSizeChange::ePetBagSizeUpSuccess -> A
	Game.Msg.ePetBagSizeChange [Client]Game.Msg.ePetBagSizeChange Game.Msg.ePetBagSizeChange::ePetBagSizeChangeNotEnoughGold -> a
	Game.Msg.ePetBagSizeChange [Client]Game.Msg.ePetBagSizeChange Game.Msg.ePetBagSizeChange::ePetBagSizeChangeIsMaxSize -> B

	System.Int32 [Client]System.Int32 Game.Msg.ePetBagSizeChange::value__ skipped:  filtered
}

[Client]Game.Msg.eBuyNpcShopItemResult -> [Client]H.c
{
	Game.Msg.eBuyNpcShopItemResult [Client]Game.Msg.eBuyNpcShopItemResult Game.Msg.eBuyNpcShopItemResult::eBuyNpcShopItemSuccess -> A
	Game.Msg.eBuyNpcShopItemResult [Client]Game.Msg.eBuyNpcShopItemResult Game.Msg.eBuyNpcShopItemResult::eBuyNpcShopItemOutOfRange -> a
	Game.Msg.eBuyNpcShopItemResult [Client]Game.Msg.eBuyNpcShopItemResult Game.Msg.eBuyNpcShopItemResult::eBuyNpcShopItemBagIsFull -> B
	Game.Msg.eBuyNpcShopItemResult [Client]Game.Msg.eBuyNpcShopItemResult Game.Msg.eBuyNpcShopItemResult::eBuyNpcShopItemNotEnoughMoney -> b
	Game.Msg.eBuyNpcShopItemResult [Client]Game.Msg.eBuyNpcShopItemResult Game.Msg.eBuyNpcShopItemResult::eBuyNpcShopItemNotEnoughGold -> C
	Game.Msg.eBuyNpcShopItemResult [Client]Game.Msg.eBuyNpcShopItemResult Game.Msg.eBuyNpcShopItemResult::eBuyNpcShopItemNotEnoughGive -> c
	Game.Msg.eBuyNpcShopItemResult [Client]Game.Msg.eBuyNpcShopItemResult Game.Msg.eBuyNpcShopItemResult::eBuyNpcShopItemNotEnoughItem -> D
	Game.Msg.eBuyNpcShopItemResult [Client]Game.Msg.eBuyNpcShopItemResult Game.Msg.eBuyNpcShopItemResult::eBuyNpcShopItemOverNumLimit -> d
	Game.Msg.eBuyNpcShopItemResult [Client]Game.Msg.eBuyNpcShopItemResult Game.Msg.eBuyNpcShopItemResult::eBuyNpcShopItemNotEnoughBattleValue -> E

	System.Int32 [Client]System.Int32 Game.Msg.eBuyNpcShopItemResult::value__ skipped:  filtered
}

[Client]Game.Msg.eProfessionIndex -> [Client]H.D
{
	Game.Msg.eProfessionIndex [Client]Game.Msg.eProfessionIndex Game.Msg.eProfessionIndex::eProfessionIdx_Any -> A
	Game.Msg.eProfessionIndex [Client]Game.Msg.eProfessionIndex Game.Msg.eProfessionIndex::eProfessionIdx_Warrior -> a
	Game.Msg.eProfessionIndex [Client]Game.Msg.eProfessionIndex Game.Msg.eProfessionIndex::eProfessionIdx_Mage -> B
	Game.Msg.eProfessionIndex [Client]Game.Msg.eProfessionIndex Game.Msg.eProfessionIndex::eProfessionIdx_Priest -> b
	Game.Msg.eProfessionIndex [Client]Game.Msg.eProfessionIndex Game.Msg.eProfessionIndex::eProfessionIdx_Max -> C

	System.Int32 [Client]System.Int32 Game.Msg.eProfessionIndex::value__ skipped:  filtered
}

[Client]Game.Msg.enumSex -> [Client]H.d
{
	Game.Msg.enumSex [Client]Game.Msg.enumSex Game.Msg.enumSex::Sex_Male -> A
	Game.Msg.enumSex [Client]Game.Msg.enumSex Game.Msg.enumSex::Sex_Female -> a
	Game.Msg.enumSex [Client]Game.Msg.enumSex Game.Msg.enumSex::Sex_Max -> B

	System.Int32 [Client]System.Int32 Game.Msg.enumSex::value__ skipped:  filtered
}

[Client]Game.Msg.eLeaveTeam -> [Client]H.E
{
	Game.Msg.eLeaveTeam [Client]Game.Msg.eLeaveTeam Game.Msg.eLeaveTeam::eLeaveTeamSelf -> A
	Game.Msg.eLeaveTeam [Client]Game.Msg.eLeaveTeam Game.Msg.eLeaveTeam::eLeaveTeamExpel -> a

	System.Int32 [Client]System.Int32 Game.Msg.eLeaveTeam::value__ skipped:  filtered
}

[Client]Game.Msg.EAuctionSellRet -> [Client]H.e
{
	Game.Msg.EAuctionSellRet [Client]Game.Msg.EAuctionSellRet Game.Msg.EAuctionSellRet::eAuctionSellRet_Sucess -> A
	Game.Msg.EAuctionSellRet [Client]Game.Msg.EAuctionSellRet Game.Msg.EAuctionSellRet::eAuctionSellRet_Fail -> a
	Game.Msg.EAuctionSellRet [Client]Game.Msg.EAuctionSellRet Game.Msg.EAuctionSellRet::eAuctionSellRet_ItemError -> B
	Game.Msg.EAuctionSellRet [Client]Game.Msg.EAuctionSellRet Game.Msg.EAuctionSellRet::eAuctionSellRet_MoneyError -> b

	System.Int32 [Client]System.Int32 Game.Msg.EAuctionSellRet::value__ skipped:  filtered
}

[Client]Game.Msg.EAuctionMoneyType -> [Client]H.F
{
	Game.Msg.EAuctionMoneyType [Client]Game.Msg.EAuctionMoneyType Game.Msg.EAuctionMoneyType::eAuctionMoneyType_None -> A
	Game.Msg.EAuctionMoneyType [Client]Game.Msg.EAuctionMoneyType Game.Msg.EAuctionMoneyType::eAuctionMoneyType_Money -> a
	Game.Msg.EAuctionMoneyType [Client]Game.Msg.EAuctionMoneyType Game.Msg.EAuctionMoneyType::eAuctionMoneyType_Gold -> B
	Game.Msg.EAuctionMoneyType [Client]Game.Msg.EAuctionMoneyType Game.Msg.EAuctionMoneyType::eAuctionMoneyType_Max -> b

	System.Int32 [Client]System.Int32 Game.Msg.EAuctionMoneyType::value__ skipped:  filtered
}

[Client]Game.Msg.EAuctionItemType -> [Client]H.f
{
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_None -> A
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Equipment -> a
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Helmet -> B
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Armor -> b
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Shoulder -> C
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Glove -> c
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Shoe -> D
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Ring -> d
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Earing -> E
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Neck -> e
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Amulet -> F
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_SoulJade -> f
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Sangreal -> G
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Gem -> g
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_EquipIntensify -> H
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_SummonPet -> h
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Composite -> I
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Other -> i
	Game.Msg.EAuctionItemType [Client]Game.Msg.EAuctionItemType Game.Msg.EAuctionItemType::eAuctionItemType_Max -> J

	System.Int32 [Client]System.Int32 Game.Msg.EAuctionItemType::value__ skipped:  filtered
}

[Client]Game.Msg.EGoldConsignResult -> [Client]H.G
{
	Game.Msg.EGoldConsignResult [Client]Game.Msg.EGoldConsignResult Game.Msg.EGoldConsignResult::eGoldConsignSucceed -> A
	Game.Msg.EGoldConsignResult [Client]Game.Msg.EGoldConsignResult Game.Msg.EGoldConsignResult::eGoldConsignFailed -> a
	Game.Msg.EGoldConsignResult [Client]Game.Msg.EGoldConsignResult Game.Msg.EGoldConsignResult::eGoldConsignSystem -> B
	Game.Msg.EGoldConsignResult [Client]Game.Msg.EGoldConsignResult Game.Msg.EGoldConsignResult::eGoldConsignLackMoney -> b
	Game.Msg.EGoldConsignResult [Client]Game.Msg.EGoldConsignResult Game.Msg.EGoldConsignResult::eGoldConsignLackGold -> C
	Game.Msg.EGoldConsignResult [Client]Game.Msg.EGoldConsignResult Game.Msg.EGoldConsignResult::eGoldConsignInvalidPara -> c

	System.Int32 [Client]System.Int32 Game.Msg.EGoldConsignResult::value__ skipped:  filtered
}

[Client]Game.Msg.EGoldConsignType -> [Client]H.g
{
	Game.Msg.EGoldConsignType [Client]Game.Msg.EGoldConsignType Game.Msg.EGoldConsignType::eGoldConsignType_None -> A
	Game.Msg.EGoldConsignType [Client]Game.Msg.EGoldConsignType Game.Msg.EGoldConsignType::eGoldConsignBuy -> a
	Game.Msg.EGoldConsignType [Client]Game.Msg.EGoldConsignType Game.Msg.EGoldConsignType::eGoldConsignSell -> B

	System.Int32 [Client]System.Int32 Game.Msg.EGoldConsignType::value__ skipped:  filtered
}

[Client]Game.Msg.enumNameResult -> [Client]H.H
{
	Game.Msg.enumNameResult [Client]Game.Msg.enumNameResult Game.Msg.enumNameResult::eNR_Succeed -> A
	Game.Msg.enumNameResult [Client]Game.Msg.enumNameResult Game.Msg.enumNameResult::eNR_Exist -> a
	Game.Msg.enumNameResult [Client]Game.Msg.enumNameResult Game.Msg.enumNameResult::eNR_InvalidName -> B
	Game.Msg.enumNameResult [Client]Game.Msg.enumNameResult Game.Msg.enumNameResult::eNR_SystemErr -> b
	Game.Msg.enumNameResult [Client]Game.Msg.enumNameResult Game.Msg.enumNameResult::eNR_TimeOut -> C
	Game.Msg.enumNameResult [Client]Game.Msg.enumNameResult Game.Msg.enumNameResult::eNR_ShortName -> c

	System.Int32 [Client]System.Int32 Game.Msg.enumNameResult::value__ skipped:  filtered
}

[Client]Game.Msg.ECreateFamilyResult -> [Client]H.h
{
	Game.Msg.ECreateFamilyResult [Client]Game.Msg.ECreateFamilyResult Game.Msg.ECreateFamilyResult::eCFRSuccess -> A
	Game.Msg.ECreateFamilyResult [Client]Game.Msg.ECreateFamilyResult Game.Msg.ECreateFamilyResult::eCFRNameExist -> a
	Game.Msg.ECreateFamilyResult [Client]Game.Msg.ECreateFamilyResult Game.Msg.ECreateFamilyResult::eCFRNameInvalid -> B
	Game.Msg.ECreateFamilyResult [Client]Game.Msg.ECreateFamilyResult Game.Msg.ECreateFamilyResult::eCFRSystemErr -> b
	Game.Msg.ECreateFamilyResult [Client]Game.Msg.ECreateFamilyResult Game.Msg.ECreateFamilyResult::eCFRTimeout -> C
	Game.Msg.ECreateFamilyResult [Client]Game.Msg.ECreateFamilyResult Game.Msg.ECreateFamilyResult::eCFRNameShort -> c

	System.Int32 [Client]System.Int32 Game.Msg.ECreateFamilyResult::value__ skipped:  filtered
}

[Client]Game.Msg.ERankListType -> [Client]H.I
{
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_None -> A
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_Level -> a
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_FighterPower -> B
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_Kill -> b
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_HundredTower -> C
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_Expedition -> c
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_ProfessionWarrior -> D
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_ProfessionMage -> d
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_ProfessionPriest -> E
	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.Msg.ERankListType::eRankListType_Max -> e

	System.Int32 [Client]System.Int32 Game.Msg.ERankListType::value__ skipped:  filtered
}

[Client]Game.Msg.ETelephoneFareType -> [Client]H.i
{
	Game.Msg.ETelephoneFareType [Client]Game.Msg.ETelephoneFareType Game.Msg.ETelephoneFareType::ETelephoneFareType_Fare -> A
	Game.Msg.ETelephoneFareType [Client]Game.Msg.ETelephoneFareType Game.Msg.ETelephoneFareType::ETelephoneFareType_Flow -> a

	System.Int32 [Client]System.Int32 Game.Msg.ETelephoneFareType::value__ skipped:  filtered
}

[Client]Game.Msg.EKickReason -> [Client]H.J
{
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_Logout -> A
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_AccountAlreadyLogin -> a
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_GateServerDisconnect -> B
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_DBReqKick -> b
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_DefWallow -> C
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_OverTime -> c
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_ForbidLogin -> D
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_ManagerServerDisconnect -> d
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_GameServerDisconnect -> E
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_ClientDisconnect -> e
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_InvalidSpeed -> F
	Game.Msg.EKickReason [Client]Game.Msg.EKickReason Game.Msg.EKickReason::Kick_Default -> f

	System.Int32 [Client]System.Int32 Game.Msg.EKickReason::value__ skipped:  filtered
}

[Client]Game.Msg.EnumName -> [Client]H.j
{

	[Client]Game.Msg.EnumName::.ctor[0]( ) skipped:  special name
	[Client]Game.Msg.EnumName::.cctor[0]( ) skipped:  special name

	System.String[] [Client]System.String[] Game.Msg.EnumName::EHeroRankBuyChanllengeTimeResultName -> A
	System.String[] [Client]System.String[] Game.Msg.EnumName::EHeroRankGetAwardResultName -> a
	System.String[] [Client]System.String[] Game.Msg.EnumName::EHeroRankTrendName -> B
	System.String[] [Client]System.String[] Game.Msg.EnumName::EBattleRecordResultName -> b
	System.String[] [Client]System.String[] Game.Msg.EnumName::EHeroBattleResultName -> C
	System.String[] [Client]System.String[] Game.Msg.EnumName::EStartHeroBattle_RetName -> c
	System.String[] [Client]System.String[] Game.Msg.EnumName::ETaskAcceptResultName -> D
	System.String[] [Client]System.String[] Game.Msg.EnumName::ENpcFunctionName -> d
	System.String[] [Client]System.String[] Game.Msg.EnumName::ESkillErrorInfName -> E
	System.String[] [Client]System.String[] Game.Msg.EnumName::EPetQualityName -> e
	System.String[] [Client]System.String[] Game.Msg.EnumName::EPetNatureName -> F
	System.String[] [Client]System.String[] Game.Msg.EnumName::ELearnSkillRetName -> f
	System.String[] [Client]System.String[] Game.Msg.EnumName::ePetSkillSocketTypeName -> G
	System.String[] [Client]System.String[] Game.Msg.EnumName::ePetPatchSkillName -> g
	System.String[] [Client]System.String[] Game.Msg.EnumName::ePetStrengthenName -> H
	System.String[] [Client]System.String[] Game.Msg.EnumName::ePetRemoveResultName -> h
	System.String[] [Client]System.String[] Game.Msg.EnumName::ePetOpenSkillSocketName -> I
	System.String[] [Client]System.String[] Game.Msg.EnumName::ePetRebirthResultName -> i
	System.String[] [Client]System.String[] Game.Msg.EnumName::eLookBattlePetResultName -> J
	System.String[] [Client]System.String[] Game.Msg.EnumName::eTransferRandSoulResultName -> j
	System.String[] [Client]System.String[] Game.Msg.EnumName::eAddStarExpResultName -> K
	System.String[] [Client]System.String[] Game.Msg.EnumName::eAddStarResultName -> k
	System.String[] [Client]System.String[] Game.Msg.EnumName::ePetCallBackName -> L
	System.String[] [Client]System.String[] Game.Msg.EnumName::ePetBackToEggResultName -> l
	System.String[] [Client]System.String[] Game.Msg.EnumName::EMoneyDoneResultName -> M
	System.String[] [Client]System.String[] Game.Msg.EnumName::EMonsterAttackCityAwardResultName -> m
	System.String[] [Client]System.String[] Game.Msg.EnumName::EBuyMonsterAttackCityTimesResultName -> N
	System.String[] [Client]System.String[] Game.Msg.EnumName::EMonsterAttackCityBufResultName -> n
	System.String[] [Client]System.String[] Game.Msg.EnumName::EMediaCardResultName -> O
	System.String[] [Client]System.String[] Game.Msg.EnumName::EInvitationCodeResultName -> o
	System.String[] [Client]System.String[] Game.Msg.EnumName::EGetAllServerAwardResultName -> P
	System.String[] [Client]System.String[] Game.Msg.EnumName::EFirstRechargeAwardResultName -> p
	System.String[] [Client]System.String[] Game.Msg.EnumName::eItemShopResultName -> Q
	System.String[] [Client]System.String[] Game.Msg.EnumName::eNpcSaleItemCostTypeName -> q
	System.String[] [Client]System.String[] Game.Msg.EnumName::eAfkEctypeDealResultName -> R
	System.String[] [Client]System.String[] Game.Msg.EnumName::eEnterAfkEctypeResultName -> r
	System.String[] [Client]System.String[] Game.Msg.EnumName::ePetBagSizeChangeName -> S
	System.String[] [Client]System.String[] Game.Msg.EnumName::eBuyNpcShopItemResultName -> s
	System.String[] [Client]System.String[] Game.Msg.EnumName::ECreateFamilyResultName -> T
}

[Client]Game.Msg.ExpeditionMonsterData -> [Client]H.K
{
	[Client]Game.Msg.ExpeditionMonsterData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ExpeditionMonsterData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ExpeditionMonsterData::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionMonsterData::m_usID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.ExpeditionMonsterData::m_ulGUID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionMonsterData::m_usLevel -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ExpeditionMonsterData::m_uiExp -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionMonsterData::m_btExpeditionRank -> A
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> Game.Msg.ExpeditionMonsterData::m_oVecSkill -> A
	System.Boolean [Client]System.Boolean Game.Msg.ExpeditionMonsterData::m_bIsLock -> A
}

[Client]Game.Msg.CSnapShotPetData -> [Client]H.k
{
	[Client]Game.Msg.CSnapShotPetData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotPetData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotPetData::.ctor[0]( ) skipped:  special name

	System.UInt64 [Client]System.UInt64 Game.Msg.CSnapShotPetData::m_ulDBID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotPetData::m_uiPetID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotPetData::m_uiMasterID -> a
	System.Byte [Client]System.Byte Game.Msg.CSnapShotPetData::m_btQuality -> A
	System.Byte [Client]System.Byte Game.Msg.CSnapShotPetData::m_btClever -> a
}

[Client]Game.Logic.ChatData -> [Client]H.L
{

	[Client]Game.Logic.ChatData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Logic.ChatData::m_ebtChannel -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.ChatData::m_uiCharID -> A
	System.String [Client]System.String Game.Logic.ChatData::m_strName -> A
	System.String [Client]System.String Game.Logic.ChatData::m_strContent -> a
	System.UInt64[] [Client]System.UInt64[] Game.Logic.ChatData::m_aulItemList -> A
}

[Client]Game.Logic.Chat -> [Client]H.l
{
	[Client]Game.Logic.Chat::get_ChatHistory[0]( ) -> A
	[Client]Game.Logic.Chat::get_Instance[0]( ) -> a
	[Client]Game.Logic.Chat::Init[0]( ) -> B
	[Client]Game.Logic.Chat::Release[0]( ) -> b
	[Client]Game.Logic.Chat::Reset[0]( ) -> C
	[Client]Game.Logic.Chat::Update[0]( ) -> c
	[Client]Game.Logic.Chat::SendMsgUserChat[2]( System.Byte, System.String ) -> A
	[Client]Game.Logic.Chat::SendMsgUserChat[3]( System.Byte, System.String, System.String ) -> A
	[Client]Game.Logic.Chat::OnMsgServerUserChat[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Chat::OnMsgServerShowText[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Chat::OnMsgServerShowMessageBox[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.Chat::OnMsgServerShowDialogBox[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.Chat::OnMsgServerScrollBar[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Logic.Chat::RecvChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.Logic.Chat::AddSystemInfo[1]( System.String ) -> A
	[Client]Game.Logic.Chat::AddBroadcastInfo[1]( System.String ) -> a
	[Client]Game.Logic.Chat::MaskWord[1]( System.String ) -> B

	[Client]Game.Logic.Chat::.cctor[0]( ) skipped:  special name
	[Client]Game.Logic.Chat::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Logic.Chat::MaxChatSize -> A
	System.Collections.Generic.List`1<Game.Logic.ChatData> [Client]System.Collections.Generic.List`1<Game.Logic.ChatData> Game.Logic.Chat::m_ChatHistory -> A
	log4net.ILog [Client]log4net.ILog Game.Logic.Chat::m_Log -> A
	Game.Logic.Chat [Client]Game.Logic.Chat Game.Logic.Chat::m_Instance -> A

	System.Collections.Generic.List`1<Game.Logic.ChatData> [Client]System.Collections.Generic.List`1<Game.Logic.ChatData> Game.Logic.Chat::ChatHistory -> dropped
	Game.Logic.Chat [Client]Game.Logic.Chat Game.Logic.Chat::Instance -> dropped
}

[Client]Game.Logic.Guild -> [Client]H.M
{
	[Client]Game.Logic.Guild::get_Instance[0]( ) -> A
	[Client]Game.Logic.Guild::get_MemberCount[0]( ) -> a
	[Client]Game.Logic.Guild::get_JoinList[0]( ) -> B
	[Client]Game.Logic.Guild::get_Notice[0]( ) -> b
	[Client]Game.Logic.Guild::get_MemberList[0]( ) -> C
	[Client]Game.Logic.Guild::get_GuildID[0]( ) -> c
	[Client]Game.Logic.Guild::get_GuildName[0]( ) -> D
	[Client]Game.Logic.Guild::get_GuildLeaderID[0]( ) -> d
	[Client]Game.Logic.Guild::get_CreateTime[0]( ) -> E
	[Client]Game.Logic.Guild::get_Power[0]( ) -> e
	[Client]Game.Logic.Guild::get_HireNotice[0]( ) -> F
	[Client]Game.Logic.Guild::get_GuildList[0]( ) -> f
	[Client]Game.Logic.Guild::get_GuildListPageCount[0]( ) -> G
	[Client]Game.Logic.Guild::get_GuildListCurPage[0]( ) -> g
	[Client]Game.Logic.Guild::Reset[0]( ) -> H
	[Client]Game.Logic.Guild::SendMsgCreateGuild[1]( System.String ) -> A
	[Client]Game.Logic.Guild::OnMsgServerAckCreateGuildResult[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Guild::SendMsgDisbandGuild[0]( ) -> h
	[Client]Game.Logic.Guild::OnMsgServerDisbandGuild[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Guild::OnMsgServerUpdateGuildPersonalInfo[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.Guild::SendMsgClientReqJoinGuild[1]( System.UInt32 ) -> A
	[Client]Game.Logic.Guild::OnMsgServerReqJoinGuild[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.Guild::SendMsgClientAckJoinGuild[2]( System.UInt32, System.Boolean ) -> A
	[Client]Game.Logic.Guild::OnMsgServerGuildDelJoin[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Logic.Guild::OnMsgServerGuildMemberAdd[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.Logic.Guild::OnMsgServerGuildTellInfo[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.Logic.Guild::SendMsgClientGuildInvite[1]( System.String ) -> a
	[Client]Game.Logic.Guild::OnMsgServerGuildInvite[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.Logic.Guild::SendMsgClientGuildAckInvite[2]( System.UInt32, System.Boolean ) -> a
	[Client]Game.Logic.Guild::SendMsgClientGuildReqLeave[0]( ) -> I
	[Client]Game.Logic.Guild::OnMsgServerGuildMemberRemove[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.Logic.Guild::SendMsgClientGuildKick[1]( System.UInt32 ) -> a
	[Client]Game.Logic.Guild::OnMsgServerGuildUpdateBase[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.Logic.Guild::OnMsgServerGuildMemberUpdate[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.Logic.Guild::OnMsgServerFamilyMemberOnline[1]( Game.Msg.RecvMsgPacket ) -> f
	[Client]Game.Logic.Guild::SendMsgClientReqGuildList[1]( System.UInt32 ) -> B
	[Client]Game.Logic.Guild::OnMsgServerAckGuildList[1]( Game.Msg.RecvMsgPacket ) -> G
	[Client]Game.Logic.Guild::SendMsgClientGuildChangeNotice[1]( System.String ) -> B
	[Client]Game.Logic.Guild::SendMsgClientFamilyChangeHireNewerNotice[1]( System.String ) -> b
	[Client]Game.Logic.Guild::SendMsgClientGuildChangeLeader[1]( System.UInt32 ) -> b
	[Client]Game.Logic.Guild::OnMsgServerGuildChangeLeader[1]( Game.Msg.RecvMsgPacket ) -> g
	[Client]Game.Logic.Guild::SendMsgClientGuildChangeRank[2]( System.UInt32, System.Byte ) -> A
	[Client]Game.Logic.Guild::RequestGuildInfo[0]( ) -> i
	[Client]Game.Logic.Guild::CanDisbandGuild[0]( ) -> J
	[Client]Game.Logic.Guild::CanInvite[0]( ) -> j
	[Client]Game.Logic.Guild::CanKick[0]( ) -> K
	[Client]Game.Logic.Guild::CanChangeNotice[0]( ) -> k
	[Client]Game.Logic.Guild::CanChangeRank[0]( ) -> L
	[Client]Game.Logic.Guild::CanTransfer[0]( ) -> l
	[Client]Game.Logic.Guild::IsLeader[0]( ) -> M
	[Client]Game.Logic.Guild::GetMember[1]( System.UInt32 ) -> C
	[Client]Game.Logic.Guild::GetMemberByIndex[1]( System.Int32 ) -> A
	[Client]Game.Logic.Guild::GetJoin[1]( System.UInt32 ) -> c
	[Client]Game.Logic.Guild::GetJoinByIndex[1]( System.Int32 ) -> a
	[Client]Game.Logic.Guild::OnAddMember[1]( Game.Msg.FamilyMemberData ) -> A
	[Client]Game.Logic.Guild::OnDelMember[1]( System.UInt32 ) -> D
	[Client]Game.Logic.Guild::OnAddJoin[1]( Game.Msg.FamilyMemberData ) -> a
	[Client]Game.Logic.Guild::OnDelJoin[1]( System.UInt32 ) -> d
	[Client]Game.Logic.Guild::OnDisbandGuild[1]( System.UInt32 ) -> E
	[Client]Game.Logic.Guild::ClearGuildData[0]( ) -> m
	[Client]Game.Logic.Guild::OnGuildMemberOnline[3]( System.UInt32, System.Boolean, System.Boolean ) -> A
	[Client]Game.Logic.Guild::OnGuildMemberUpdate[1]( Game.Msg.FamilyMemberData ) -> B

	[Client]Game.Logic.Guild::.ctor[0]( ) skipped:  special name
	[Client]Game.Logic.Guild::.cctor[0]( ) skipped:  special name

	Game.Logic.Guild [Client]Game.Logic.Guild Game.Logic.Guild::m_Instance -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::m_uiGuildID -> A
	System.String [Client]System.String Game.Logic.Guild::m_strGuildName -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::m_uiGuildLeaderID -> a
	System.Byte [Client]System.Byte Game.Logic.Guild::m_btGuildPicID -> A
	System.String [Client]System.String Game.Logic.Guild::m_strNotice -> a
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::m_uiCreateTime -> B
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::m_uiMemberTotalPower -> b
	System.String [Client]System.String Game.Logic.Guild::m_strHireNewMemberNotice -> B
	System.String [Client]System.String Game.Logic.Guild::m_LeaderName -> b
	System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> Game.Logic.Guild::m_listGuildMember -> A
	System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> Game.Logic.Guild::m_listGuildJoin -> a
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::m_unGuildListPageCount -> C
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::m_unGuildListCurPage -> c
	System.Collections.Generic.List`1<Game.Msg.FamilySimpleData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilySimpleData> Game.Logic.Guild::m_listGuildData -> A
	System.Collections.Generic.List`1<Game.Msg.FamilySimpleData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilySimpleData> Game.Logic.Guild::m_listAllGuildSimpleData -> a

	Game.Logic.Guild [Client]Game.Logic.Guild Game.Logic.Guild::Instance -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Guild::MemberCount -> dropped
	System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> Game.Logic.Guild::JoinList -> dropped
	System.String [Client]System.String Game.Logic.Guild::Notice -> dropped
	System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> Game.Logic.Guild::MemberList -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::GuildID -> dropped
	System.String [Client]System.String Game.Logic.Guild::GuildName -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::GuildLeaderID -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::CreateTime -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::Power -> dropped
	System.String [Client]System.String Game.Logic.Guild::HireNotice -> dropped
	System.Collections.Generic.List`1<Game.Msg.FamilySimpleData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilySimpleData> Game.Logic.Guild::GuildList -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::GuildListPageCount -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Guild::GuildListCurPage -> dropped
}

[Client]Game.MoveType -> [Client]H.m
{
	Game.MoveType [Client]Game.MoveType Game.MoveType::Normal -> A
	Game.MoveType [Client]Game.MoveType Game.MoveType::CastSkill -> a
	Game.MoveType [Client]Game.MoveType Game.MoveType::FastMove -> B
	Game.MoveType [Client]Game.MoveType Game.MoveType::ReqNpc -> b

	System.Int32 [Client]System.Int32 Game.MoveType::value__ skipped:  filtered
}

[Client]Game.IntonateSkillState -> [Client]H.N
{
	Game.IntonateSkillState [Client]Game.IntonateSkillState Game.IntonateSkillState::Start -> A
	Game.IntonateSkillState [Client]Game.IntonateSkillState Game.IntonateSkillState::Intonating -> a
	Game.IntonateSkillState [Client]Game.IntonateSkillState Game.IntonateSkillState::End -> B
	Game.IntonateSkillState [Client]Game.IntonateSkillState Game.IntonateSkillState::Cut -> b

	System.Int32 [Client]System.Int32 Game.IntonateSkillState::value__ skipped:  filtered
}

[Client]Game.Event -> [Client]H.n
{
	[Client]Game.Event::get_Character[0]( ) -> a
	[Client]Game.Event::set_Character[1]( Game.Character ) -> A
	[Client]Game.Event::get_DoLater[0]( ) -> B
	[Client]Game.Event::set_DoLater[1]( System.Boolean ) -> A
	[Client]Game.Event::OnEvent[0]( ) -> A

	[Client]Game.Event::.ctor[0]( ) skipped:  special name
	[Client]Game.Event::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.Event::m_Log -> A
	Game.Character [Client]Game.Character Game.Event::<Character>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.Event::<DoLater>k__BackingField -> A

	Game.Character [Client]Game.Character Game.Event::Character -> dropped
	System.Boolean [Client]System.Boolean Game.Event::DoLater -> dropped
}

[Client]Game.SkillEvent -> [Client]H.O
{
	[Client]Game.SkillEvent::OnEvent[0]( ) -> A
	[Client]Game.SkillEvent::get_TargetId[0]( ) -> a
	[Client]Game.SkillEvent::set_TargetId[1]( System.UInt32 ) -> A
	[Client]Game.SkillEvent::get_TargetPos[0]( ) -> B
	[Client]Game.SkillEvent::set_TargetPos[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.SkillEvent::get_Skill[0]( ) -> b
	[Client]Game.SkillEvent::set_Skill[1]( Game.Skill ) -> A
	[Client]Game.SkillEvent::get_Type[0]( ) -> C
	[Client]Game.SkillEvent::set_Type[1]( Game.SkillEvent/SkillEventType ) -> A

	[Client]Game.SkillEvent::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.SkillEvent::<TargetId>k__BackingField -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.SkillEvent::<TargetPos>k__BackingField -> A
	Game.Skill [Client]Game.Skill Game.SkillEvent::<Skill>k__BackingField -> A
	Game.SkillEvent/SkillEventType [Client]Game.SkillEvent/SkillEventType Game.SkillEvent::<Type>k__BackingField -> A

	System.UInt32 [Client]System.UInt32 Game.SkillEvent::TargetId -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.SkillEvent::TargetPos -> dropped
	Game.Skill [Client]Game.Skill Game.SkillEvent::Skill -> dropped
	Game.SkillEvent/SkillEventType [Client]Game.SkillEvent/SkillEventType Game.SkillEvent::Type -> dropped
}

[Client]Game.SkillEvent/SkillEventType -> [Client]H.O/o
{
	Game.SkillEvent/SkillEventType [Client]Game.SkillEvent/SkillEventType Game.SkillEvent/SkillEventType::CallAction -> A
	Game.SkillEvent/SkillEventType [Client]Game.SkillEvent/SkillEventType Game.SkillEvent/SkillEventType::Reply -> a
	Game.SkillEvent/SkillEventType [Client]Game.SkillEvent/SkillEventType Game.SkillEvent/SkillEventType::Cut -> B

	System.Int32 [Client]System.Int32 Game.SkillEvent/SkillEventType::value__ skipped:  filtered
}

[Client]Game.BeAttackedEvent -> [Client]H.P
{
	[Client]Game.BeAttackedEvent::OnEvent[0]( ) -> A
	[Client]Game.BeAttackedEvent::get_AttackId[0]( ) -> a
	[Client]Game.BeAttackedEvent::set_AttackId[1]( System.UInt32 ) -> A
	[Client]Game.BeAttackedEvent::get_Skill[0]( ) -> B
	[Client]Game.BeAttackedEvent::set_Skill[1]( Game.Skill ) -> A
	[Client]Game.BeAttackedEvent::get_Hurt[0]( ) -> b
	[Client]Game.BeAttackedEvent::set_Hurt[1]( System.Int32 ) -> A
	[Client]Game.BeAttackedEvent::get_Effect[0]( ) -> C
	[Client]Game.BeAttackedEvent::set_Effect[1]( System.Byte ) -> A
	[Client]Game.BeAttackedEvent::get_HitPoint[0]( ) -> c
	[Client]Game.BeAttackedEvent::set_HitPoint[1]( System.Single ) -> A
	[Client]Game.BeAttackedEvent::get_BeImmediate[0]( ) -> D
	[Client]Game.BeAttackedEvent::set_BeImmediate[1]( System.Boolean ) -> A
	[Client]Game.BeAttackedEvent::get_BeDelay[0]( ) -> d
	[Client]Game.BeAttackedEvent::set_BeDelay[1]( System.Boolean ) -> a

	[Client]Game.BeAttackedEvent::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.BeAttackedEvent::<AttackId>k__BackingField -> A
	Game.Skill [Client]Game.Skill Game.BeAttackedEvent::<Skill>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.BeAttackedEvent::<Hurt>k__BackingField -> A
	System.Byte [Client]System.Byte Game.BeAttackedEvent::<Effect>k__BackingField -> A
	System.Single [Client]System.Single Game.BeAttackedEvent::<HitPoint>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.BeAttackedEvent::<BeImmediate>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.BeAttackedEvent::<BeDelay>k__BackingField -> a

	System.UInt32 [Client]System.UInt32 Game.BeAttackedEvent::AttackId -> dropped
	Game.Skill [Client]Game.Skill Game.BeAttackedEvent::Skill -> dropped
	System.Int32 [Client]System.Int32 Game.BeAttackedEvent::Hurt -> dropped
	System.Byte [Client]System.Byte Game.BeAttackedEvent::Effect -> dropped
	System.Single [Client]System.Single Game.BeAttackedEvent::HitPoint -> dropped
	System.Boolean [Client]System.Boolean Game.BeAttackedEvent::BeImmediate -> dropped
	System.Boolean [Client]System.Boolean Game.BeAttackedEvent::BeDelay -> dropped
}

[Client]Game.MoveEvent -> [Client]H.p
{
	[Client]Game.MoveEvent::OnEvent[0]( ) -> A
	[Client]Game.MoveEvent::get_TargetPos[0]( ) -> a
	[Client]Game.MoveEvent::set_TargetPos[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.MoveEvent::get_Type[0]( ) -> B
	[Client]Game.MoveEvent::set_Type[1]( Game.MoveType ) -> A
	[Client]Game.MoveEvent::get_Speed[0]( ) -> b
	[Client]Game.MoveEvent::set_Speed[1]( System.Single ) -> A
	[Client]Game.MoveEvent::get_SkillTarget[0]( ) -> C
	[Client]Game.MoveEvent::set_SkillTarget[1]( Game.Character ) -> A
	[Client]Game.MoveEvent::get_ToCastSkill[0]( ) -> c
	[Client]Game.MoveEvent::set_ToCastSkill[1]( Game.Skill ) -> A

	[Client]Game.MoveEvent::.ctor[0]( ) skipped:  special name

	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.MoveEvent::<TargetPos>k__BackingField -> A
	Game.MoveType [Client]Game.MoveType Game.MoveEvent::<Type>k__BackingField -> A
	System.Single [Client]System.Single Game.MoveEvent::<Speed>k__BackingField -> A
	Game.Character [Client]Game.Character Game.MoveEvent::<SkillTarget>k__BackingField -> A
	Game.Skill [Client]Game.Skill Game.MoveEvent::<ToCastSkill>k__BackingField -> A

	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.MoveEvent::TargetPos -> dropped
	Game.MoveType [Client]Game.MoveType Game.MoveEvent::Type -> dropped
	System.Single [Client]System.Single Game.MoveEvent::Speed -> dropped
	Game.Character [Client]Game.Character Game.MoveEvent::SkillTarget -> dropped
	Game.Skill [Client]Game.Skill Game.MoveEvent::ToCastSkill -> dropped
}

[Client]Game.DeadEvent -> [Client]H.q
{
	[Client]Game.DeadEvent::OnEvent[0]( ) -> A
	[Client]Game.DeadEvent::get_Already[0]( ) -> a
	[Client]Game.DeadEvent::set_Already[1]( System.Boolean ) -> A

	[Client]Game.DeadEvent::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.DeadEvent::<Already>k__BackingField -> A

	System.Boolean [Client]System.Boolean Game.DeadEvent::Already -> dropped
}

[Client]Game.EventQueue -> [Client]H.r
{
	[Client]Game.EventQueue::get_Count[0]( ) -> A
	[Client]Game.EventQueue::System.Collections.IEnumerable.GetEnumerator[0]( ) -> a
	[Client]Game.EventQueue::Clear[0]( ) -> B
	[Client]Game.EventQueue::Push[1]( Game.Event ) -> A
	[Client]Game.EventQueue::Update[0]( ) -> b

	[Client]Game.EventQueue::GetEnumerator[0]( ) skipped:  external base class or interface
	[Client]Game.EventQueue::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Game.Event> [Client]System.Collections.Generic.List`1<Game.Event> Game.EventQueue::m_Events -> A

	System.Int32 [Client]System.Int32 Game.EventQueue::Count -> dropped
}

[Client]Game.DataPetstorageUnlock -> [Client]H.S
{
	[Client]Game.DataPetstorageUnlock::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetstorageUnlock::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetstorageUnlock::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetstorageUnlock::get_Count[0]( ) -> A
	[Client]Game.DataPetstorageUnlock::set_Count[1]( System.Int32 ) -> A
	[Client]Game.DataPetstorageUnlock::get_Price[0]( ) -> a
	[Client]Game.DataPetstorageUnlock::set_Price[1]( System.Int32 ) -> a

	[Client]Game.DataPetstorageUnlock::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPetstorageUnlock::<Count>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPetstorageUnlock::<Price>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataPetstorageUnlock::Count -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstorageUnlock::Price -> dropped
}

[Client]Game.DataPetstorageUnlockManager -> [Client]H.s
{
	[Client]Game.DataPetstorageUnlockManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetstorageUnlockManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetstorageUnlockManager::Clear[0]( ) -> A
	[Client]Game.DataPetstorageUnlockManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetstorageUnlockManager::GetDataByCount[1]( System.Int32 ) -> A
	[Client]Game.DataPetstorageUnlockManager::GetDataListByCount[1]( System.Int32 ) -> a
	[Client]Game.DataPetstorageUnlockManager::GetDataByPrice[1]( System.Int32 ) -> B
	[Client]Game.DataPetstorageUnlockManager::GetDataListByPrice[1]( System.Int32 ) -> b
	[Client]Game.DataPetstorageUnlockManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetstorageUnlockManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetstorageUnlockManager::get_Count[0]( ) -> b

	[Client]Game.DataPetstorageUnlockManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetstorageUnlockManager::.ctor[0]( ) skipped:  special name

	Game.DataPetstorageUnlockManager [Client]Game.DataPetstorageUnlockManager Game.DataPetstorageUnlockManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPetstorageUnlock> [Client]System.Collections.Generic.List`1<Game.DataPetstorageUnlock> Game.DataPetstorageUnlockManager::dataList -> A

	Game.DataPetstorageUnlockManager [Client]Game.DataPetstorageUnlockManager Game.DataPetstorageUnlockManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPetstorageUnlock> [Client]System.Collections.Generic.List`1<Game.DataPetstorageUnlock> Game.DataPetstorageUnlockManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetstorageUnlockManager::Count -> dropped
}

[Client]Game.DataNpcScript -> [Client]H.T
{
	[Client]Game.DataNpcScript::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataNpcScript::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataNpcScript::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataNpcScript::get_NpcID[0]( ) -> A
	[Client]Game.DataNpcScript::set_NpcID[1]( System.Int32 ) -> A
	[Client]Game.DataNpcScript::get_Option[0]( ) -> a
	[Client]Game.DataNpcScript::set_Option[1]( System.Collections.Generic.List`1<System.String> ) -> A

	[Client]Game.DataNpcScript::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataNpcScript::<NpcID>k__BackingField -> A
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataNpcScript::<Option>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataNpcScript::NpcID -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataNpcScript::Option -> dropped
}

[Client]Game.DataNpcScriptManager -> [Client]H.t
{
	[Client]Game.DataNpcScriptManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataNpcScriptManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataNpcScriptManager::Clear[0]( ) -> A
	[Client]Game.DataNpcScriptManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataNpcScriptManager::GetDataByNpcID[1]( System.Int32 ) -> A
	[Client]Game.DataNpcScriptManager::GetDataListByNpcID[1]( System.Int32 ) -> a
	[Client]Game.DataNpcScriptManager::GetDataByOption[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataNpcScriptManager::GetDataListByOption[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataNpcScriptManager::get_Instance[0]( ) -> a
	[Client]Game.DataNpcScriptManager::get_DataList[0]( ) -> B
	[Client]Game.DataNpcScriptManager::get_Count[0]( ) -> b

	[Client]Game.DataNpcScriptManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataNpcScriptManager::.ctor[0]( ) skipped:  special name

	Game.DataNpcScriptManager [Client]Game.DataNpcScriptManager Game.DataNpcScriptManager::instance -> A
	System.Collections.Generic.List`1<Game.DataNpcScript> [Client]System.Collections.Generic.List`1<Game.DataNpcScript> Game.DataNpcScriptManager::dataList -> A

	Game.DataNpcScriptManager [Client]Game.DataNpcScriptManager Game.DataNpcScriptManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataNpcScript> [Client]System.Collections.Generic.List`1<Game.DataNpcScript> Game.DataNpcScriptManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataNpcScriptManager::Count -> dropped
}

[Client]Game.DataMaskDynamic -> [Client]H.U
{
	[Client]Game.DataMaskDynamic::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMaskDynamic::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMaskDynamic::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMaskDynamic::get_MapId[0]( ) -> A
	[Client]Game.DataMaskDynamic::set_MapId[1]( System.Int32 ) -> A
	[Client]Game.DataMaskDynamic::get_MaskId[0]( ) -> a
	[Client]Game.DataMaskDynamic::set_MaskId[1]( System.Int32 ) -> a
	[Client]Game.DataMaskDynamic::get_InitMode[0]( ) -> B
	[Client]Game.DataMaskDynamic::set_InitMode[1]( System.Boolean ) -> A
	[Client]Game.DataMaskDynamic::get_MaskName[0]( ) -> b
	[Client]Game.DataMaskDynamic::set_MaskName[1]( System.String ) -> A
	[Client]Game.DataMaskDynamic::get_PosX[0]( ) -> C
	[Client]Game.DataMaskDynamic::set_PosX[1]( System.Collections.Generic.List`1<System.Single> ) -> A
	[Client]Game.DataMaskDynamic::get_PosY[0]( ) -> c
	[Client]Game.DataMaskDynamic::set_PosY[1]( System.Collections.Generic.List`1<System.Single> ) -> a

	[Client]Game.DataMaskDynamic::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataMaskDynamic::<MapId>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataMaskDynamic::<MaskId>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataMaskDynamic::<InitMode>k__BackingField -> A
	System.String [Client]System.String Game.DataMaskDynamic::<MaskName>k__BackingField -> A
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataMaskDynamic::<PosX>k__BackingField -> A
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataMaskDynamic::<PosY>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataMaskDynamic::MapId -> dropped
	System.Int32 [Client]System.Int32 Game.DataMaskDynamic::MaskId -> dropped
	System.Boolean [Client]System.Boolean Game.DataMaskDynamic::InitMode -> dropped
	System.String [Client]System.String Game.DataMaskDynamic::MaskName -> dropped
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataMaskDynamic::PosX -> dropped
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataMaskDynamic::PosY -> dropped
}

[Client]Game.DataMaskDynamicManager -> [Client]H.u
{
	[Client]Game.DataMaskDynamicManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMaskDynamicManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMaskDynamicManager::Clear[0]( ) -> A
	[Client]Game.DataMaskDynamicManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMaskDynamicManager::GetDataByMapId[1]( System.Int32 ) -> A
	[Client]Game.DataMaskDynamicManager::GetDataListByMapId[1]( System.Int32 ) -> a
	[Client]Game.DataMaskDynamicManager::GetDataByMaskId[1]( System.Int32 ) -> B
	[Client]Game.DataMaskDynamicManager::GetDataListByMaskId[1]( System.Int32 ) -> b
	[Client]Game.DataMaskDynamicManager::GetDataByInitMode[1]( System.Boolean ) -> A
	[Client]Game.DataMaskDynamicManager::GetDataListByInitMode[1]( System.Boolean ) -> a
	[Client]Game.DataMaskDynamicManager::GetDataByMaskName[1]( System.String ) -> A
	[Client]Game.DataMaskDynamicManager::GetDataListByMaskName[1]( System.String ) -> a
	[Client]Game.DataMaskDynamicManager::GetDataByPosX[1]( System.Collections.Generic.List`1<System.Single> ) -> A
	[Client]Game.DataMaskDynamicManager::GetDataListByPosX[1]( System.Collections.Generic.List`1<System.Single> ) -> a
	[Client]Game.DataMaskDynamicManager::GetDataByPosY[1]( System.Collections.Generic.List`1<System.Single> ) -> B
	[Client]Game.DataMaskDynamicManager::GetDataListByPosY[1]( System.Collections.Generic.List`1<System.Single> ) -> b
	[Client]Game.DataMaskDynamicManager::get_Instance[0]( ) -> a
	[Client]Game.DataMaskDynamicManager::get_DataList[0]( ) -> B
	[Client]Game.DataMaskDynamicManager::get_Count[0]( ) -> b

	[Client]Game.DataMaskDynamicManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataMaskDynamicManager::.ctor[0]( ) skipped:  special name

	Game.DataMaskDynamicManager [Client]Game.DataMaskDynamicManager Game.DataMaskDynamicManager::instance -> A
	System.Collections.Generic.List`1<Game.DataMaskDynamic> [Client]System.Collections.Generic.List`1<Game.DataMaskDynamic> Game.DataMaskDynamicManager::dataList -> A

	Game.DataMaskDynamicManager [Client]Game.DataMaskDynamicManager Game.DataMaskDynamicManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataMaskDynamic> [Client]System.Collections.Generic.List`1<Game.DataMaskDynamic> Game.DataMaskDynamicManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataMaskDynamicManager::Count -> dropped
}

[Client]Game.DataExpeditionMonsterSkill -> [Client]H.V
{
	[Client]Game.DataExpeditionMonsterSkill::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionMonsterSkill::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionMonsterSkill::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionMonsterSkill::get_SkillID[0]( ) -> A
	[Client]Game.DataExpeditionMonsterSkill::set_SkillID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionMonsterSkill::get_SkillLevel[0]( ) -> a
	[Client]Game.DataExpeditionMonsterSkill::set_SkillLevel[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionMonsterSkill::get_SkillName[0]( ) -> B
	[Client]Game.DataExpeditionMonsterSkill::set_SkillName[1]( System.String ) -> A
	[Client]Game.DataExpeditionMonsterSkill::get_ConditionType[0]( ) -> b
	[Client]Game.DataExpeditionMonsterSkill::set_ConditionType[1]( System.Int32[] ) -> A
	[Client]Game.DataExpeditionMonsterSkill::get_ConditionParameter[0]( ) -> C
	[Client]Game.DataExpeditionMonsterSkill::set_ConditionParameter[1]( System.Int32[] ) -> a
	[Client]Game.DataExpeditionMonsterSkill::get_CombatRevise[0]( ) -> c
	[Client]Game.DataExpeditionMonsterSkill::set_CombatRevise[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionMonsterSkill::get_ExploreRevise[0]( ) -> D
	[Client]Game.DataExpeditionMonsterSkill::set_ExploreRevise[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionMonsterSkill::get_WisdomRevise[0]( ) -> d
	[Client]Game.DataExpeditionMonsterSkill::set_WisdomRevise[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionMonsterSkill::get_ItemId[0]( ) -> E
	[Client]Game.DataExpeditionMonsterSkill::set_ItemId[1]( System.Int32[] ) -> B
	[Client]Game.DataExpeditionMonsterSkill::get_AwardRate[0]( ) -> e
	[Client]Game.DataExpeditionMonsterSkill::set_AwardRate[1]( System.Int32[] ) -> b
	[Client]Game.DataExpeditionMonsterSkill::get_AwardType[0]( ) -> F
	[Client]Game.DataExpeditionMonsterSkill::set_AwardType[1]( System.Int32[] ) -> C
	[Client]Game.DataExpeditionMonsterSkill::get_Attr[0]( ) -> f
	[Client]Game.DataExpeditionMonsterSkill::set_Attr[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataExpeditionMonsterSkill::get_AttrValue[0]( ) -> G
	[Client]Game.DataExpeditionMonsterSkill::set_AttrValue[1]( System.Int32[] ) -> c
	[Client]Game.DataExpeditionMonsterSkill::get_LeaveChance[0]( ) -> g
	[Client]Game.DataExpeditionMonsterSkill::set_LeaveChance[1]( System.Int32 ) -> c
	[Client]Game.DataExpeditionMonsterSkill::get_LevelUpChance[0]( ) -> H
	[Client]Game.DataExpeditionMonsterSkill::set_LevelUpChance[1]( System.Int32 ) -> D
	[Client]Game.DataExpeditionMonsterSkill::get_DoubleLeaveChance[0]( ) -> h
	[Client]Game.DataExpeditionMonsterSkill::set_DoubleLeaveChance[1]( System.Int32 ) -> d
	[Client]Game.DataExpeditionMonsterSkill::get_LearnPrice[0]( ) -> I
	[Client]Game.DataExpeditionMonsterSkill::set_LearnPrice[1]( System.Int32 ) -> E
	[Client]Game.DataExpeditionMonsterSkill::get_NameColor[0]( ) -> i
	[Client]Game.DataExpeditionMonsterSkill::set_NameColor[1]( System.Int32 ) -> e
	[Client]Game.DataExpeditionMonsterSkill::get_PropertyDescribe[0]( ) -> J
	[Client]Game.DataExpeditionMonsterSkill::set_PropertyDescribe[1]( System.String ) -> a

	[Client]Game.DataExpeditionMonsterSkill::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<SkillID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<SkillLevel>k__BackingField -> a
	System.String [Client]System.String Game.DataExpeditionMonsterSkill::<SkillName>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::<ConditionType>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::<ConditionParameter>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<CombatRevise>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<ExploreRevise>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<WisdomRevise>k__BackingField -> C
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::<ItemId>k__BackingField -> B
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::<AwardRate>k__BackingField -> b
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::<AwardType>k__BackingField -> C
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataExpeditionMonsterSkill::<Attr>k__BackingField -> A
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::<AttrValue>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<LeaveChance>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<LevelUpChance>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<DoubleLeaveChance>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<LearnPrice>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::<NameColor>k__BackingField -> e
	System.String [Client]System.String Game.DataExpeditionMonsterSkill::<PropertyDescribe>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::SkillID -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::SkillLevel -> dropped
	System.String [Client]System.String Game.DataExpeditionMonsterSkill::SkillName -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::ConditionType -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::ConditionParameter -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::CombatRevise -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::ExploreRevise -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::WisdomRevise -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::ItemId -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::AwardRate -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::AwardType -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataExpeditionMonsterSkill::Attr -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataExpeditionMonsterSkill::AttrValue -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::LeaveChance -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::LevelUpChance -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::DoubleLeaveChance -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::LearnPrice -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkill::NameColor -> dropped
	System.String [Client]System.String Game.DataExpeditionMonsterSkill::PropertyDescribe -> dropped
}

[Client]Game.DataExpeditionMonsterSkillManager -> [Client]H.v
{
	[Client]Game.DataExpeditionMonsterSkillManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionMonsterSkillManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionMonsterSkillManager::Clear[0]( ) -> A
	[Client]Game.DataExpeditionMonsterSkillManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataBySkillID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListBySkillID[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataBySkillLevel[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListBySkillLevel[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataBySkillName[1]( System.String ) -> A
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListBySkillName[1]( System.String ) -> a
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByConditionType[1]( System.Int32[] ) -> A
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByConditionType[1]( System.Int32[] ) -> a
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByConditionParameter[1]( System.Int32[] ) -> B
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByConditionParameter[1]( System.Int32[] ) -> b
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByCombatRevise[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByCombatRevise[1]( System.Int32 ) -> c
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByExploreRevise[1]( System.Int32 ) -> D
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByExploreRevise[1]( System.Int32 ) -> d
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByWisdomRevise[1]( System.Int32 ) -> E
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByWisdomRevise[1]( System.Int32 ) -> e
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByItemId[1]( System.Int32[] ) -> C
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByItemId[1]( System.Int32[] ) -> c
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByAwardRate[1]( System.Int32[] ) -> D
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByAwardRate[1]( System.Int32[] ) -> d
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByAwardType[1]( System.Int32[] ) -> E
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByAwardType[1]( System.Int32[] ) -> e
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByAttr[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByAttr[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByAttrValue[1]( System.Int32[] ) -> F
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByAttrValue[1]( System.Int32[] ) -> f
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByLeaveChance[1]( System.Int32 ) -> F
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByLeaveChance[1]( System.Int32 ) -> f
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByLevelUpChance[1]( System.Int32 ) -> G
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByLevelUpChance[1]( System.Int32 ) -> g
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByDoubleLeaveChance[1]( System.Int32 ) -> H
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByDoubleLeaveChance[1]( System.Int32 ) -> h
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByLearnPrice[1]( System.Int32 ) -> I
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByLearnPrice[1]( System.Int32 ) -> i
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByNameColor[1]( System.Int32 ) -> J
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByNameColor[1]( System.Int32 ) -> j
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataByPropertyDescribe[1]( System.String ) -> B
	[Client]Game.DataExpeditionMonsterSkillManager::GetDataListByPropertyDescribe[1]( System.String ) -> b
	[Client]Game.DataExpeditionMonsterSkillManager::get_Instance[0]( ) -> a
	[Client]Game.DataExpeditionMonsterSkillManager::get_DataList[0]( ) -> B
	[Client]Game.DataExpeditionMonsterSkillManager::get_Count[0]( ) -> b

	[Client]Game.DataExpeditionMonsterSkillManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataExpeditionMonsterSkillManager::.ctor[0]( ) skipped:  special name

	Game.DataExpeditionMonsterSkillManager [Client]Game.DataExpeditionMonsterSkillManager Game.DataExpeditionMonsterSkillManager::instance -> A
	System.Collections.Generic.List`1<Game.DataExpeditionMonsterSkill> [Client]System.Collections.Generic.List`1<Game.DataExpeditionMonsterSkill> Game.DataExpeditionMonsterSkillManager::dataList -> A

	Game.DataExpeditionMonsterSkillManager [Client]Game.DataExpeditionMonsterSkillManager Game.DataExpeditionMonsterSkillManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataExpeditionMonsterSkill> [Client]System.Collections.Generic.List`1<Game.DataExpeditionMonsterSkill> Game.DataExpeditionMonsterSkillManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterSkillManager::Count -> dropped
}

[Client]Game.DataExpeditionMonster -> [Client]H.W
{
	[Client]Game.DataExpeditionMonster::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionMonster::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionMonster::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionMonster::get_MonsterID[0]( ) -> A
	[Client]Game.DataExpeditionMonster::set_MonsterID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionMonster::get_MonsterName[0]( ) -> a
	[Client]Game.DataExpeditionMonster::set_MonsterName[1]( System.String ) -> A
	[Client]Game.DataExpeditionMonster::get_MonsterClass[0]( ) -> B
	[Client]Game.DataExpeditionMonster::set_MonsterClass[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionMonster::get_MonsterRank[0]( ) -> b
	[Client]Game.DataExpeditionMonster::set_MonsterRank[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionMonster::get_MonsterStar[0]( ) -> C
	[Client]Game.DataExpeditionMonster::set_MonsterStar[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionMonster::get_BasicCombat[0]( ) -> c
	[Client]Game.DataExpeditionMonster::set_BasicCombat[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionMonster::get_BasicExplore[0]( ) -> D
	[Client]Game.DataExpeditionMonster::set_BasicExplore[1]( System.Int32 ) -> c
	[Client]Game.DataExpeditionMonster::get_BasicWisdom[0]( ) -> d
	[Client]Game.DataExpeditionMonster::set_BasicWisdom[1]( System.Int32 ) -> D
	[Client]Game.DataExpeditionMonster::get_GrowCombat[0]( ) -> E
	[Client]Game.DataExpeditionMonster::set_GrowCombat[1]( System.Int32 ) -> d
	[Client]Game.DataExpeditionMonster::get_GrowExplore[0]( ) -> e
	[Client]Game.DataExpeditionMonster::set_GrowExplore[1]( System.Int32 ) -> E
	[Client]Game.DataExpeditionMonster::get_GrowWisdom[0]( ) -> F
	[Client]Game.DataExpeditionMonster::set_GrowWisdom[1]( System.Int32 ) -> e
	[Client]Game.DataExpeditionMonster::get_HeadPath[0]( ) -> f
	[Client]Game.DataExpeditionMonster::set_HeadPath[1]( System.String ) -> a
	[Client]Game.DataExpeditionMonster::get_ModelPath[0]( ) -> G
	[Client]Game.DataExpeditionMonster::set_ModelPath[1]( System.String ) -> B
	[Client]Game.DataExpeditionMonster::get_ModelScale[0]( ) -> g
	[Client]Game.DataExpeditionMonster::set_ModelScale[1]( System.Int32 ) -> F
	[Client]Game.DataExpeditionMonster::get_Quality[0]( ) -> H
	[Client]Game.DataExpeditionMonster::set_Quality[1]( System.Int32 ) -> f

	[Client]Game.DataExpeditionMonster::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<MonsterID>k__BackingField -> A
	System.String [Client]System.String Game.DataExpeditionMonster::<MonsterName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<MonsterClass>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<MonsterRank>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<MonsterStar>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<BasicCombat>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<BasicExplore>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<BasicWisdom>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<GrowCombat>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<GrowExplore>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<GrowWisdom>k__BackingField -> e
	System.String [Client]System.String Game.DataExpeditionMonster::<HeadPath>k__BackingField -> a
	System.String [Client]System.String Game.DataExpeditionMonster::<ModelPath>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<ModelScale>k__BackingField -> F
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::<Quality>k__BackingField -> f

	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::MonsterID -> dropped
	System.String [Client]System.String Game.DataExpeditionMonster::MonsterName -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::MonsterClass -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::MonsterRank -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::MonsterStar -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::BasicCombat -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::BasicExplore -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::BasicWisdom -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::GrowCombat -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::GrowExplore -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::GrowWisdom -> dropped
	System.String [Client]System.String Game.DataExpeditionMonster::HeadPath -> dropped
	System.String [Client]System.String Game.DataExpeditionMonster::ModelPath -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::ModelScale -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonster::Quality -> dropped
}

[Client]Game.DataExpeditionMonsterManager -> [Client]H.w
{
	[Client]Game.DataExpeditionMonsterManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionMonsterManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionMonsterManager::Clear[0]( ) -> A
	[Client]Game.DataExpeditionMonsterManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionMonsterManager::GetDataByMonsterID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionMonsterManager::GetDataListByMonsterID[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionMonsterManager::GetDataByMonsterName[1]( System.String ) -> A
	[Client]Game.DataExpeditionMonsterManager::GetDataListByMonsterName[1]( System.String ) -> a
	[Client]Game.DataExpeditionMonsterManager::GetDataByMonsterClass[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionMonsterManager::GetDataListByMonsterClass[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionMonsterManager::GetDataByMonsterRank[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionMonsterManager::GetDataListByMonsterRank[1]( System.Int32 ) -> c
	[Client]Game.DataExpeditionMonsterManager::GetDataByMonsterStar[1]( System.Int32 ) -> D
	[Client]Game.DataExpeditionMonsterManager::GetDataListByMonsterStar[1]( System.Int32 ) -> d
	[Client]Game.DataExpeditionMonsterManager::GetDataByBasicCombat[1]( System.Int32 ) -> E
	[Client]Game.DataExpeditionMonsterManager::GetDataListByBasicCombat[1]( System.Int32 ) -> e
	[Client]Game.DataExpeditionMonsterManager::GetDataByBasicExplore[1]( System.Int32 ) -> F
	[Client]Game.DataExpeditionMonsterManager::GetDataListByBasicExplore[1]( System.Int32 ) -> f
	[Client]Game.DataExpeditionMonsterManager::GetDataByBasicWisdom[1]( System.Int32 ) -> G
	[Client]Game.DataExpeditionMonsterManager::GetDataListByBasicWisdom[1]( System.Int32 ) -> g
	[Client]Game.DataExpeditionMonsterManager::GetDataByGrowCombat[1]( System.Int32 ) -> H
	[Client]Game.DataExpeditionMonsterManager::GetDataListByGrowCombat[1]( System.Int32 ) -> h
	[Client]Game.DataExpeditionMonsterManager::GetDataByGrowExplore[1]( System.Int32 ) -> I
	[Client]Game.DataExpeditionMonsterManager::GetDataListByGrowExplore[1]( System.Int32 ) -> i
	[Client]Game.DataExpeditionMonsterManager::GetDataByGrowWisdom[1]( System.Int32 ) -> J
	[Client]Game.DataExpeditionMonsterManager::GetDataListByGrowWisdom[1]( System.Int32 ) -> j
	[Client]Game.DataExpeditionMonsterManager::GetDataByHeadPath[1]( System.String ) -> B
	[Client]Game.DataExpeditionMonsterManager::GetDataListByHeadPath[1]( System.String ) -> b
	[Client]Game.DataExpeditionMonsterManager::GetDataByModelPath[1]( System.String ) -> C
	[Client]Game.DataExpeditionMonsterManager::GetDataListByModelPath[1]( System.String ) -> c
	[Client]Game.DataExpeditionMonsterManager::GetDataByModelScale[1]( System.Int32 ) -> K
	[Client]Game.DataExpeditionMonsterManager::GetDataListByModelScale[1]( System.Int32 ) -> k
	[Client]Game.DataExpeditionMonsterManager::GetDataByQuality[1]( System.Int32 ) -> L
	[Client]Game.DataExpeditionMonsterManager::GetDataListByQuality[1]( System.Int32 ) -> l
	[Client]Game.DataExpeditionMonsterManager::get_Instance[0]( ) -> a
	[Client]Game.DataExpeditionMonsterManager::get_DataList[0]( ) -> B
	[Client]Game.DataExpeditionMonsterManager::get_Count[0]( ) -> b

	[Client]Game.DataExpeditionMonsterManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataExpeditionMonsterManager::.ctor[0]( ) skipped:  special name

	Game.DataExpeditionMonsterManager [Client]Game.DataExpeditionMonsterManager Game.DataExpeditionMonsterManager::instance -> A
	System.Collections.Generic.List`1<Game.DataExpeditionMonster> [Client]System.Collections.Generic.List`1<Game.DataExpeditionMonster> Game.DataExpeditionMonsterManager::dataList -> A

	Game.DataExpeditionMonsterManager [Client]Game.DataExpeditionMonsterManager Game.DataExpeditionMonsterManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataExpeditionMonster> [Client]System.Collections.Generic.List`1<Game.DataExpeditionMonster> Game.DataExpeditionMonsterManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionMonsterManager::Count -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents -> [Client]H.X
{
	[Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents::OnDirectoryFailure[2]( System.String, System.Exception ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents::OnFileFailure[2]( System.String, System.Exception ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents::OnProcessFile[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents::OnCompletedFile[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents::OnProcessDirectory[2]( System.String, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents::get_ProgressInterval[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents::set_ProgressInterval[1]( System.TimeSpan ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents::.ctor[0]( ) skipped:  special name

	ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler [Client]ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler ICSharpCode.SharpZipLib.Zip.FastZipEvents::ProcessDirectory -> A
	ICSharpCode.SharpZipLib.Core.ProcessFileHandler [Client]ICSharpCode.SharpZipLib.Core.ProcessFileHandler ICSharpCode.SharpZipLib.Zip.FastZipEvents::ProcessFile -> A
	ICSharpCode.SharpZipLib.Core.ProgressHandler [Client]ICSharpCode.SharpZipLib.Core.ProgressHandler ICSharpCode.SharpZipLib.Zip.FastZipEvents::Progress -> A
	ICSharpCode.SharpZipLib.Core.CompletedFileHandler [Client]ICSharpCode.SharpZipLib.Core.CompletedFileHandler ICSharpCode.SharpZipLib.Zip.FastZipEvents::CompletedFile -> A
	ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler [Client]ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler ICSharpCode.SharpZipLib.Zip.FastZipEvents::DirectoryFailure -> A
	ICSharpCode.SharpZipLib.Core.FileFailureHandler [Client]ICSharpCode.SharpZipLib.Core.FileFailureHandler ICSharpCode.SharpZipLib.Zip.FastZipEvents::FileFailure -> A
	System.TimeSpan [Client]System.TimeSpan ICSharpCode.SharpZipLib.Zip.FastZipEvents::progressInterval_ -> A

	System.TimeSpan [Client]System.TimeSpan ICSharpCode.SharpZipLib.Zip.FastZipEvents::ProgressInterval -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.FastZip -> [Client]H.x
{
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::get_CreateEmptyDirectories[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::set_CreateEmptyDirectories[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::get_Password[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::set_Password[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::get_NameTransform[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::set_NameTransform[1]( ICSharpCode.SharpZipLib.Core.INameTransform ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::get_EntryFactory[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::set_EntryFactory[1]( ICSharpCode.SharpZipLib.Zip.IEntryFactory ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::get_UseZip64[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::set_UseZip64[1]( ICSharpCode.SharpZipLib.Zip.UseZip64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::get_RestoreDateTimeOnExtract[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::set_RestoreDateTimeOnExtract[1]( System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::get_RestoreAttributesOnExtract[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::set_RestoreAttributesOnExtract[1]( System.Boolean ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::CreateZip[5]( System.String, System.String, System.Boolean, System.String, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::CreateZip[4]( System.String, System.String, System.Boolean, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::CreateZip[5]( System.IO.Stream, System.String, System.Boolean, System.String, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::ExtractZip[3]( System.String, System.String, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::ExtractZip[7]( System.String, System.String, ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite, ICSharpCode.SharpZipLib.Zip.FastZip/ConfirmOverwriteDelegate, System.String, System.String, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::ExtractZip[8]( System.IO.Stream, System.String, ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite, ICSharpCode.SharpZipLib.Zip.FastZip/ConfirmOverwriteDelegate, System.String, System.String, System.Boolean, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::ProcessDirectory[2]( System.Object, ICSharpCode.SharpZipLib.Core.DirectoryEventArgs ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::ProcessFile[2]( System.Object, ICSharpCode.SharpZipLib.Core.ScanEventArgs ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::AddFileContents[2]( System.String, System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::ExtractFileEntry[2]( ICSharpCode.SharpZipLib.Zip.ZipEntry, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::ExtractEntry[1]( ICSharpCode.SharpZipLib.Zip.ZipEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::MakeExternalAttributes[1]( System.IO.FileInfo ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::NameIsValid[1]( System.String ) -> a

	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip::.ctor[1]( ICSharpCode.SharpZipLib.Zip.FastZipEvents ) skipped:  special name

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.FastZip::continueRunning_ -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.FastZip::buffer_ -> A
	ICSharpCode.SharpZipLib.Zip.ZipOutputStream [Client]ICSharpCode.SharpZipLib.Zip.ZipOutputStream ICSharpCode.SharpZipLib.Zip.FastZip::outputStream_ -> A
	ICSharpCode.SharpZipLib.Zip.ZipFile [Client]ICSharpCode.SharpZipLib.Zip.ZipFile ICSharpCode.SharpZipLib.Zip.FastZip::zipFile_ -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.FastZip::sourceDirectory_ -> A
	ICSharpCode.SharpZipLib.Core.NameFilter [Client]ICSharpCode.SharpZipLib.Core.NameFilter ICSharpCode.SharpZipLib.Zip.FastZip::fileFilter_ -> A
	ICSharpCode.SharpZipLib.Core.NameFilter [Client]ICSharpCode.SharpZipLib.Core.NameFilter ICSharpCode.SharpZipLib.Zip.FastZip::directoryFilter_ -> a
	ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite [Client]ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite ICSharpCode.SharpZipLib.Zip.FastZip::overwrite_ -> A
	ICSharpCode.SharpZipLib.Zip.FastZip/ConfirmOverwriteDelegate [Client]ICSharpCode.SharpZipLib.Zip.FastZip/ConfirmOverwriteDelegate ICSharpCode.SharpZipLib.Zip.FastZip::confirmDelegate_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.FastZip::restoreDateTimeOnExtract_ -> a
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.FastZip::restoreAttributesOnExtract_ -> B
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.FastZip::createEmptyDirectories_ -> b
	ICSharpCode.SharpZipLib.Zip.FastZipEvents [Client]ICSharpCode.SharpZipLib.Zip.FastZipEvents ICSharpCode.SharpZipLib.Zip.FastZip::events_ -> A
	ICSharpCode.SharpZipLib.Zip.IEntryFactory [Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory ICSharpCode.SharpZipLib.Zip.FastZip::entryFactory_ -> A
	ICSharpCode.SharpZipLib.Core.INameTransform [Client]ICSharpCode.SharpZipLib.Core.INameTransform ICSharpCode.SharpZipLib.Zip.FastZip::extractNameTransform_ -> A
	ICSharpCode.SharpZipLib.Zip.UseZip64 [Client]ICSharpCode.SharpZipLib.Zip.UseZip64 ICSharpCode.SharpZipLib.Zip.FastZip::useZip64_ -> A
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.FastZip::password_ -> a

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.FastZip::CreateEmptyDirectories -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Zip.FastZip::Password -> dropped
	ICSharpCode.SharpZipLib.Core.INameTransform [Client]ICSharpCode.SharpZipLib.Core.INameTransform ICSharpCode.SharpZipLib.Zip.FastZip::NameTransform -> dropped
	ICSharpCode.SharpZipLib.Zip.IEntryFactory [Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory ICSharpCode.SharpZipLib.Zip.FastZip::EntryFactory -> dropped
	ICSharpCode.SharpZipLib.Zip.UseZip64 [Client]ICSharpCode.SharpZipLib.Zip.UseZip64 ICSharpCode.SharpZipLib.Zip.FastZip::UseZip64 -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.FastZip::RestoreDateTimeOnExtract -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.FastZip::RestoreAttributesOnExtract -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite -> [Client]H.x/Y
{
	ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite [Client]ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite::Prompt -> A
	ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite [Client]ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite::Never -> a
	ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite [Client]ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite::Always -> B

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.FastZip/Overwrite::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream -> [Client]H.Z
{
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::get_IsStreamOwner[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::ResetBuf[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::Fill[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::ParseHeader[0]( ) -> B

	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::ReadByte[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::WriteByte[1]( System.Byte ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::BeginWrite[5]( System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.LZW.LzwInputStream::.ctor[1]( System.IO.Stream ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::TBL_CLEAR -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::TBL_FIRST -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::EXTRA -> B
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.LZW.LzwInputStream::baseInputStream -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.LZW.LzwInputStream::isStreamOwner -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.LZW.LzwInputStream::isClosed -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.LZW.LzwInputStream::one -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.LZW.LzwInputStream::headerParsed -> B
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.LZW.LzwInputStream::tabPrefix -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.LZW.LzwInputStream::tabSuffix -> a
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.LZW.LzwInputStream::zeros -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.LZW.LzwInputStream::stack -> B
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.LZW.LzwInputStream::blockMode -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::nBits -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::maxBits -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::maxMaxCode -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::maxCode -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::bitMask -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::oldCode -> E
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.LZW.LzwInputStream::finChar -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::stackP -> e
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::freeEnt -> F
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.LZW.LzwInputStream::data -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::bitPos -> f
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::end -> G
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.LZW.LzwInputStream::got -> g
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.LZW.LzwInputStream::eof -> C

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.LZW.LzwInputStream::IsStreamOwner -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.LZW.LzwInputStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.LZW.LzwInputStream::CanSeek -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.LZW.LzwInputStream::CanWrite -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.LZW.LzwInputStream::Length -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.LZW.LzwInputStream::Position -> dropped
}

[Client]Game.Helpers -> [Client]H.z
{
	[Client]Game.Helpers::AppendLine[1]( System.Text.StringBuilder ) -> A
	[Client]Game.Helpers::IsNullOrEmpty[1]( System.String ) -> A
	[Client]Game.Helpers::DebugWriteLine[2]( System.String, System.Object ) -> A
	[Client]Game.Helpers::DebugWriteLine[1]( System.String ) -> a
	[Client]Game.Helpers::TraceWriteLine[1]( System.String ) -> B
	[Client]Game.Helpers::DebugAssert[2]( System.Boolean, System.String ) -> A
	[Client]Game.Helpers::DebugAssert[3]( System.Boolean, System.String, System.Object[] ) -> A
	[Client]Game.Helpers::DebugAssert[1]( System.Boolean ) -> A
	[Client]Game.Helpers::Sort[2]( System.Int32[], System.Object[] ) -> A
	[Client]Game.Helpers::BlockCopy[5]( System.Byte[], System.Int32, System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]Game.Helpers::IsInfinity[1]( System.Single ) -> A
	[Client]Game.Helpers::GetInstanceMethod[2]( System.Type, System.String ) -> A
	[Client]Game.Helpers::GetStaticMethod[2]( System.Type, System.String ) -> a
	[Client]Game.Helpers::GetInstanceMethod[3]( System.Type, System.String, System.Type[] ) -> A
	[Client]Game.Helpers::IsSubclassOf[2]( System.Type, System.Type ) -> A
	[Client]Game.Helpers::IsInfinity[1]( System.Double ) -> A
	[Client]Game.Helpers::GetTypeCode[1]( System.Type ) -> A
	[Client]Game.Helpers::GetUnderlyingType[1]( System.Type ) -> a
	[Client]Game.Helpers::IsValueType[1]( System.Type ) -> B
	[Client]Game.Helpers::IsEnum[1]( System.Type ) -> b
	[Client]Game.Helpers::GetGetMethod[3]( System.Reflection.PropertyInfo, System.Boolean, System.Boolean ) -> A
	[Client]Game.Helpers::GetSetMethod[3]( System.Reflection.PropertyInfo, System.Boolean, System.Boolean ) -> a
	[Client]Game.Helpers::GetConstructor[3]( System.Type, System.Type[], System.Boolean ) -> A
	[Client]Game.Helpers::GetConstructors[2]( System.Type, System.Boolean ) -> A
	[Client]Game.Helpers::GetProperty[3]( System.Type, System.String, System.Boolean ) -> A
	[Client]Game.Helpers::ParseEnum[2]( System.Type, System.String ) -> B
	[Client]Game.Helpers::GetInstanceFieldsAndProperties[2]( System.Type, System.Boolean ) -> a
	[Client]Game.Helpers::GetMemberType[1]( System.Reflection.MemberInfo ) -> A
	[Client]Game.Helpers::IsAssignableFrom[2]( System.Type, System.Type ) -> a

	[Client]Game.Helpers::.ctor[0]( ) skipped:  special name
	[Client]Game.Helpers::.cctor[0]( ) skipped:  special name

	System.Type[] [Client]System.Type[] Game.Helpers::EmptyTypes -> A
}

[Client]Game.ProtoTypeCode -> [Client]h.A
{
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Empty -> A
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Unknown -> a
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Boolean -> B
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Char -> b
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::SByte -> C
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Byte -> c
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Int16 -> D
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::UInt16 -> d
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Int32 -> E
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::UInt32 -> e
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Int64 -> F
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::UInt64 -> f
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Single -> G
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Double -> g
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Decimal -> H
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::DateTime -> h
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::String -> I
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::TimeSpan -> i
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::ByteArray -> J
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Guid -> j
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Uri -> K
	Game.ProtoTypeCode [Client]Game.ProtoTypeCode Game.ProtoTypeCode::Type -> k

	System.Int32 [Client]System.Int32 Game.ProtoTypeCode::value__ skipped:  filtered
}

[Client]Game.Msg.MsgAward -> [Client]h.a
{

	[Client]Game.Msg.MsgAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgAward::BaseType -> A
}

[Client]Game.Msg.MsgClientReqPtVIPInfo -> [Client]h.B
{
	[Client]Game.Msg.MsgClientReqPtVIPInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqPtVIPInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqPtVIPInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqPtVIPInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqPtVIPInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckPtVIPInfo -> [Client]h.b
{
	[Client]Game.Msg.MsgServerAckPtVIPInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckPtVIPInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckPtVIPInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckPtVIPInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckPtVIPInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckPtVIPInfo::m_uiAwardInfo -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckPtVIPInfo::m_uiBecomeTime -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckPtVIPInfo::m_uiExpireTime -> B
}

[Client]Game.Msg.MsgClientReqPtVIPAward -> [Client]h.C
{
	[Client]Game.Msg.MsgClientReqPtVIPAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqPtVIPAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqPtVIPAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqPtVIPAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqPtVIPAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqPtVIPAward::m_btPeriod -> a
}

[Client]Game.Msg.MsgServerAckPtVIPAward -> [Client]h.c
{
	[Client]Game.Msg.MsgServerAckPtVIPAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckPtVIPAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckPtVIPAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckPtVIPAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckPtVIPAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckPtVIPAward::m_btPeriod -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckPtVIPAward::m_ebtResult -> B
}

[Client]Game.Msg.MsgClientReqLoginAwardInfo -> [Client]h.D
{
	[Client]Game.Msg.MsgClientReqLoginAwardInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqLoginAwardInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqLoginAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqLoginAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqLoginAwardInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckLoginAwardInfo -> [Client]h.d
{
	[Client]Game.Msg.MsgServerAckLoginAwardInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckLoginAwardInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckLoginAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckLoginAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckLoginAwardInfo::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckLoginAwardInfo::m_btInstantDays -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckLoginAwardInfo::m_usTotalDays -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckLoginAwardInfo::m_uiAwardInfo -> A
}

[Client]Game.Msg.MsgClientReqLoginAward -> [Client]h.E
{
	[Client]Game.Msg.MsgClientReqLoginAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqLoginAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqLoginAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqLoginAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqLoginAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqLoginAward::m_btID -> a
}

[Client]Game.Msg.MsgServerAckLoginAward -> [Client]h.e
{
	[Client]Game.Msg.MsgServerAckLoginAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckLoginAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckLoginAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckLoginAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckLoginAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckLoginAward::m_btID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckLoginAward::m_ebtResult -> B
}

[Client]Game.Msg.MsgClientReqLevelAwardInfo -> [Client]h.F
{
	[Client]Game.Msg.MsgClientReqLevelAwardInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqLevelAwardInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqLevelAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqLevelAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqLevelAwardInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckLevelAwardInfo -> [Client]h.f
{
	[Client]Game.Msg.MsgServerAckLevelAwardInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckLevelAwardInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckLevelAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckLevelAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckLevelAwardInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckLevelAwardInfo::m_uiAwardInfo -> A
}

[Client]Game.Msg.MsgClientReqLevelAward -> [Client]h.G
{
	[Client]Game.Msg.MsgClientReqLevelAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqLevelAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqLevelAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqLevelAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqLevelAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqLevelAward::m_btID -> a
}

[Client]Game.Msg.MsgServerAckLevelAward -> [Client]h.g
{
	[Client]Game.Msg.MsgServerAckLevelAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckLevelAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckLevelAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckLevelAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckLevelAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckLevelAward::m_btID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckLevelAward::m_ebtResult -> B
}

[Client]Game.Msg.MsgClientReqExtendPtVIPTime -> [Client]h.H
{
	[Client]Game.Msg.MsgClientReqExtendPtVIPTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExtendPtVIPTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExtendPtVIPTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExtendPtVIPTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExtendPtVIPTime::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExtendPtVIPTime::m_btNumber -> a
}

[Client]Game.Msg.MsgClientReqRichManInfo -> [Client]h.h
{
	[Client]Game.Msg.MsgClientReqRichManInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqRichManInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqRichManInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRichManInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqRichManInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckRichManInfo -> [Client]h.I
{
	[Client]Game.Msg.MsgServerAckRichManInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckRichManInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckRichManInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRichManInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckRichManInfo::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRichManInfo::m_btCurPoint -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRichManInfo::m_btCurStep -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckRichManInfo::m_uiCurGive -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckRichManInfo::m_bMultipleAward -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRichManInfo::m_btEnterTimes -> b
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRichManInfo::m_btBonusIndex -> C
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckRichManInfo::m_bAutoBuy -> a
}

[Client]Game.Msg.MsgClientReqDice -> [Client]h.i
{
	[Client]Game.Msg.MsgClientReqDice::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqDice::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqDice::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqDice::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqDice::Type -> A
}

[Client]Game.Msg.MsgServerAckDice -> [Client]h.J
{
	[Client]Game.Msg.MsgServerAckDice::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckDice::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckDice::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckDice::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckDice::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckDice::m_btCurPoint -> a
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckDice::m_bNotConsumePoint -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckDice::m_uiBonusItemId -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckDice::m_uiCurGive -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckDice::m_btCurStep -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckDice::m_btEnterTimes -> b
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckDice::m_bMultipleAward -> a
}

[Client]Game.Msg.MsgClientReqDiceSpecial -> [Client]h.j
{
	[Client]Game.Msg.MsgClientReqDiceSpecial::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqDiceSpecial::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqDiceSpecial::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqDiceSpecial::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqDiceSpecial::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqDiceSpecial::m_ebtSelectType -> a
}

[Client]Game.Msg.MsgServerAckDiceSpecial -> [Client]h.K
{
	[Client]Game.Msg.MsgServerAckDiceSpecial::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckDiceSpecial::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckDiceSpecial::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckDiceSpecial::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckDiceSpecial::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckDiceSpecial::m_ebtSelectType -> a
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckDiceSpecial::m_bSuccess -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckDiceSpecial::m_btBonusIndex -> B
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckDiceSpecial::m_bMultipleAward -> a
}

[Client]Game.Msg.MsgClientReqRichManRecharge -> [Client]h.k
{
	[Client]Game.Msg.MsgClientReqRichManRecharge::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqRichManRecharge::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqRichManRecharge::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRichManRecharge::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqRichManRecharge::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRichManRecharge::m_btPoint -> a
}

[Client]Game.Msg.MsgServerAckRichManRecharge -> [Client]h.L
{
	[Client]Game.Msg.MsgServerAckRichManRecharge::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckRichManRecharge::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckRichManRecharge::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRichManRecharge::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckRichManRecharge::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckRichManRecharge::m_bSuccess -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRichManRecharge::m_btCurPoint -> a
}

[Client]Game.Msg.MsgServerShowAwardCardMenu -> [Client]h.l
{
	[Client]Game.Msg.MsgServerShowAwardCardMenu::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerShowAwardCardMenu::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerShowAwardCardMenu::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerShowAwardCardMenu::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerShowAwardCardMenu::Type -> A
}

[Client]Game.Msg.MsgClientReqAwardCard -> [Client]h.M
{
	[Client]Game.Msg.MsgClientReqAwardCard::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqAwardCard::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqAwardCard::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqAwardCard::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqAwardCard::Type -> A
}

[Client]Game.Msg.MsgServerAckAwardCard -> [Client]h.m
{
	[Client]Game.Msg.MsgServerAckAwardCard::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckAwardCard::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckAwardCard::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAwardCard::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckAwardCard::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckAwardCard::m_bSuccess -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckAwardCard::m_uiItemID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckAwardCard::m_uiLibID -> a
}

[Client]Game.Msg.MsgClientReqRichManAutoBuy -> [Client]h.N
{
	[Client]Game.Msg.MsgClientReqRichManAutoBuy::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqRichManAutoBuy::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqRichManAutoBuy::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRichManAutoBuy::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqRichManAutoBuy::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientReqRichManAutoBuy::m_bSet -> A
}

[Client]Game.Msg.MsgServerAckRichManAutoBuy -> [Client]h.n
{
	[Client]Game.Msg.MsgServerAckRichManAutoBuy::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckRichManAutoBuy::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckRichManAutoBuy::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRichManAutoBuy::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckRichManAutoBuy::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckRichManAutoBuy::m_bSet -> A
}

[Client]Game.Msg.MsgClientReqOnLineAwardInfo -> [Client]h.O
{

	[Client]Game.Msg.MsgClientReqOnLineAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqOnLineAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqOnLineAwardInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckOnLineAwardInfo -> [Client]h.o
{
	[Client]Game.Msg.MsgServerAckOnLineAwardInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckOnLineAwardInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckOnLineAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckOnLineAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckOnLineAwardInfo::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckOnLineAwardInfo::m_btIndex -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckOnLineAwardInfo::m_usOnLineTime -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckOnLineAwardInfo::m_uiAwardInfo -> A
}

[Client]Game.Msg.MsgClientReqOnLineAward -> [Client]h.P
{

	[Client]Game.Msg.MsgClientReqOnLineAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqOnLineAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqOnLineAward::Type -> A
}

[Client]Game.Msg.MsgServerAckOnLineAward -> [Client]h.p
{
	[Client]Game.Msg.MsgServerAckOnLineAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckOnLineAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckOnLineAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckOnLineAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckOnLineAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckOnLineAward::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientReqRechargeAwardInfo -> [Client]h.Q
{
	[Client]Game.Msg.MsgClientReqRechargeAwardInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqRechargeAwardInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqRechargeAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRechargeAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqRechargeAwardInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckRechargeAwardInfo -> [Client]h.q
{
	[Client]Game.Msg.MsgServerAckRechargeAwardInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckRechargeAwardInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckRechargeAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRechargeAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckRechargeAwardInfo::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckRechargeAwardInfo::m_uiTotalNum -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckRechargeAwardInfo::m_uiAwardInfo -> a
}

[Client]Game.Msg.MsgClientReqRechargeAward -> [Client]h.R
{
	[Client]Game.Msg.MsgClientReqRechargeAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqRechargeAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqRechargeAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRechargeAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqRechargeAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqRechargeAward::m_btID -> a
}

[Client]Game.Msg.MsgServerAckRechargeAward -> [Client]h.r
{
	[Client]Game.Msg.MsgServerAckRechargeAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckRechargeAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckRechargeAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRechargeAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckRechargeAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRechargeAward::m_btID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckRechargeAward::m_ebtResult -> B
}

[Client]Game.Msg.MsgServerNotifyFirstRechargeInfo -> [Client]h.S
{
	[Client]Game.Msg.MsgServerNotifyFirstRechargeInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyFirstRechargeInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyFirstRechargeInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyFirstRechargeInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyFirstRechargeInfo::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerNotifyFirstRechargeInfo::m_bHaveRecharge -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerNotifyFirstRechargeInfo::m_bHaveGotBonus -> a
}

[Client]Game.Msg.MsgServerNotifyInvitationInfo -> [Client]h.s
{
	[Client]Game.Msg.MsgServerNotifyInvitationInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyInvitationInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyInvitationInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyInvitationInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyInvitationInfo::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyInvitationInfo::m_btInviteNum -> a
	System.String [Client]System.String Game.Msg.MsgServerNotifyInvitationInfo::m_strInvitationCode -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerNotifyInvitationInfo::m_bHaveGotInvitedBonus -> A
}

[Client]Game.Msg.MsgClientReqActivateMediaCard -> [Client]h.T
{
	[Client]Game.Msg.MsgClientReqActivateMediaCard::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqActivateMediaCard::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqActivateMediaCard::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqActivateMediaCard::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqActivateMediaCard::Type -> A
	System.String [Client]System.String Game.Msg.MsgClientReqActivateMediaCard::m_strCardNo -> A
}

[Client]Game.Msg.MsgServerAckActivateMediaCard -> [Client]h.t
{
	[Client]Game.Msg.MsgServerAckActivateMediaCard::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckActivateMediaCard::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckActivateMediaCard::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckActivateMediaCard::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckActivateMediaCard::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckActivateMediaCard::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientReqInvitationCode -> [Client]h.U
{
	[Client]Game.Msg.MsgClientReqInvitationCode::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqInvitationCode::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqInvitationCode::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqInvitationCode::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqInvitationCode::Type -> A
	System.String [Client]System.String Game.Msg.MsgClientReqInvitationCode::m_strInvitationCode -> A
}

[Client]Game.Msg.MsgServerAckInvitationCode -> [Client]h.u
{
	[Client]Game.Msg.MsgServerAckInvitationCode::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckInvitationCode::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckInvitationCode::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckInvitationCode::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckInvitationCode::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckInvitationCode::m_ebtResult -> a
}

[Client]Game.Msg.MsgServerNotifyAllServerAward -> [Client]h.V
{

	[Client]Game.Msg.MsgServerNotifyAllServerAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyAllServerAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyAllServerAward::Type -> A
}

[Client]Game.Msg.MsgClientReqAllServerAwardInfo -> [Client]h.v
{

	[Client]Game.Msg.MsgClientReqAllServerAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqAllServerAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqAllServerAwardInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckAllServerAwardInfo -> [Client]h.W
{
	[Client]Game.Msg.MsgServerAckAllServerAwardInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckAllServerAwardInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckAllServerAwardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAllServerAwardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckAllServerAwardInfo::Type -> A
	System.Collections.Generic.List`1<Game.Msg.AllServerAwardData> [Client]System.Collections.Generic.List`1<Game.Msg.AllServerAwardData> Game.Msg.MsgServerAckAllServerAwardInfo::m_oVecAwardList -> A
}

[Client]Game.Msg.MsgClientReqAllServerAwardByID -> [Client]h.w
{
	[Client]Game.Msg.MsgClientReqAllServerAwardByID::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqAllServerAwardByID::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqAllServerAwardByID::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqAllServerAwardByID::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqAllServerAwardByID::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqAllServerAwardByID::m_uiID -> A
}

[Client]Game.Msg.MsgServerAckAllServerAwardByID -> [Client]h.X
{
	[Client]Game.Msg.MsgServerAckAllServerAwardByID::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckAllServerAwardByID::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckAllServerAwardByID::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAllServerAwardByID::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckAllServerAwardByID::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckAllServerAwardByID::m_uiID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAllServerAwardByID::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientReqFirstRechargeAward -> [Client]h.x
{

	[Client]Game.Msg.MsgClientReqFirstRechargeAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqFirstRechargeAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqFirstRechargeAward::Type -> A
}

[Client]Game.Msg.MsgServerAckFirstRechargeAward -> [Client]h.Y
{
	[Client]Game.Msg.MsgServerAckFirstRechargeAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckFirstRechargeAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckFirstRechargeAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckFirstRechargeAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckFirstRechargeAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckFirstRechargeAward::m_ebtResult -> a
}

[Client]Game.Msg.MsgAuction -> [Client]h.y
{

	[Client]Game.Msg.MsgAuction::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgAuction::BaseType -> A
}

[Client]Game.Msg.MsgClientQuerySaleList -> [Client]h.Z
{
	[Client]Game.Msg.MsgClientQuerySaleList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientQuerySaleList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientQuerySaleList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientQuerySaleList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientQuerySaleList::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientQuerySaleList::m_btMoneyType -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientQuerySaleList::m_btItemType -> B
	System.Byte [Client]System.Byte Game.Msg.MsgClientQuerySaleList::m_btSubType -> b
	System.Byte [Client]System.Byte Game.Msg.MsgClientQuerySaleList::m_btLevel -> C
	System.Collections.Generic.List`1<System.UInt16> [Client]System.Collections.Generic.List`1<System.UInt16> Game.Msg.MsgClientQuerySaleList::m_oVecSoulID -> A
}

[Client]Game.Msg.MsgServerAckSaleList -> [Client]h.z
{
	[Client]Game.Msg.MsgServerAckSaleList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckSaleList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckSaleList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckSaleList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckSaleList::Type -> A
	System.Collections.Generic.List`1<Game.Msg.AuctionBriefSale> [Client]System.Collections.Generic.List`1<Game.Msg.AuctionBriefSale> Game.Msg.MsgServerAckSaleList::m_oVecSaleList -> A
}

[Client]Game.Msg.MsgClientReqBuyItem -> [Client]I.A
{
	[Client]Game.Msg.MsgClientReqBuyItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqBuyItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqBuyItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBuyItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqBuyItem::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqBuyItem::m_uiID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBuyItem::m_btNum -> a
}

[Client]Game.Msg.MsgServerAckBuyItem -> [Client]I.a
{
	[Client]Game.Msg.MsgServerAckBuyItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckBuyItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckBuyItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBuyItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckBuyItem::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckBuyItem::m_uiID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBuyItem::m_btRet -> a
}

[Client]Game.Msg.MsgServerNotifyMyOnSale -> [Client]I.B
{
	[Client]Game.Msg.MsgServerNotifyMyOnSale::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyMyOnSale::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyMyOnSale::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyMyOnSale::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyMyOnSale::Type -> A
	System.Collections.Generic.List`1<Game.Msg.AuctionDetailSale> [Client]System.Collections.Generic.List`1<Game.Msg.AuctionDetailSale> Game.Msg.MsgServerNotifyMyOnSale::m_oVecSoldList -> A
}

[Client]Game.Msg.MsgClientReqSellItem -> [Client]I.b
{
	[Client]Game.Msg.MsgClientReqSellItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqSellItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqSellItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSellItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqSellItem::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqSellItem::m_ulItemGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSellItem::m_btCount -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqSellItem::m_uiPrice -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSellItem::m_btMoneyType -> B
}

[Client]Game.Msg.MsgServerAckSellItem -> [Client]I.C
{
	[Client]Game.Msg.MsgServerAckSellItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckSellItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckSellItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckSellItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckSellItem::Type -> A
	Game.Msg.AuctionDetailSale [Client]Game.Msg.AuctionDetailSale Game.Msg.MsgServerAckSellItem::m_stSaleData -> A
}

[Client]Game.Msg.MsgClientReqCancelSell -> [Client]I.c
{
	[Client]Game.Msg.MsgClientReqCancelSell::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqCancelSell::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqCancelSell::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqCancelSell::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqCancelSell::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqCancelSell::m_uiID -> A
}

[Client]Game.Msg.MsgServerDelMySell -> [Client]I.D
{
	[Client]Game.Msg.MsgServerDelMySell::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerDelMySell::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerDelMySell::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerDelMySell::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerDelMySell::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerDelMySell::m_uiID -> A
}

[Client]Game.Msg.MsgClientReqSaleDetail -> [Client]I.d
{
	[Client]Game.Msg.MsgClientReqSaleDetail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqSaleDetail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqSaleDetail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSaleDetail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqSaleDetail::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqSaleDetail::m_uiID -> A
}

[Client]Game.Msg.MsgServerAckSaleDetail -> [Client]I.E
{
	[Client]Game.Msg.MsgServerAckSaleDetail::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckSaleDetail::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckSaleDetail::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckSaleDetail::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckSaleDetail::Type -> A
	Game.Msg.AuctionDetailSale [Client]Game.Msg.AuctionDetailSale Game.Msg.MsgServerAckSaleDetail::m_stSaleData -> A
}

[Client]Game.Msg.MsgServerUpdateMySale -> [Client]I.e
{
	[Client]Game.Msg.MsgServerUpdateMySale::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerUpdateMySale::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerUpdateMySale::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerUpdateMySale::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerUpdateMySale::Type -> A
	Game.Msg.AuctionDetailSale [Client]Game.Msg.AuctionDetailSale Game.Msg.MsgServerUpdateMySale::m_stSaleData -> A
}

[Client]Game.Msg.MsgClientQuerySaleListByItem -> [Client]I.F
{
	[Client]Game.Msg.MsgClientQuerySaleListByItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientQuerySaleListByItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientQuerySaleListByItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientQuerySaleListByItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientQuerySaleListByItem::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientQuerySaleListByItem::m_uiItemID -> A
}

[Client]Game.Msg.PetData -> [Client]I.f
{
	[Client]Game.Msg.PetData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.PetData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.PetData::.ctor[0]( ) skipped:  special name

	System.UInt64 [Client]System.UInt64 Game.Msg.PetData::m_ulDBID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.PetData::m_uiMasterID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.PetData::m_uiPetID -> a
	System.String [Client]System.String Game.Msg.PetData::m_strName -> A
	System.Byte [Client]System.Byte Game.Msg.PetData::m_btStrengthLvl -> A
	System.Byte [Client]System.Byte Game.Msg.PetData::m_btMaxStrengthLvl -> a
	System.Byte [Client]System.Byte Game.Msg.PetData::m_btStarLevel -> B
	System.Byte [Client]System.Byte Game.Msg.PetData::m_btFeedFatigue -> b
	System.UInt16 [Client]System.UInt16 Game.Msg.PetData::m_usStrengthValue -> A
	System.Byte [Client]System.Byte Game.Msg.PetData::m_btLevel -> C
	System.UInt32 [Client]System.UInt32 Game.Msg.PetData::m_uiExp -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.PetData::m_uiStarExp -> b
	System.Byte [Client]System.Byte Game.Msg.PetData::m_btNature -> c
	System.Byte [Client]System.Byte Game.Msg.PetData::m_btQuality -> D
	System.UInt16 [Client]System.UInt16 Game.Msg.PetData::m_usGrowthRate -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.PetData::m_usPoint -> B
	System.Byte [Client]System.Byte Game.Msg.PetData::m_btPosition -> d
	System.Single [Client]System.Single Game.Msg.PetData::m_fStr -> A
	System.Single [Client]System.Single Game.Msg.PetData::m_fCon -> a
	System.Single [Client]System.Single Game.Msg.PetData::m_fDex -> B
	System.Single [Client]System.Single Game.Msg.PetData::m_fInt -> b
	System.Single [Client]System.Single Game.Msg.PetData::m_fSpirit -> C
	System.UInt32 [Client]System.UInt32 Game.Msg.PetData::m_uiHP -> C
	System.UInt32 [Client]System.UInt32 Game.Msg.PetData::m_uiHPMax -> c
	System.UInt16 [Client]System.UInt16 Game.Msg.PetData::m_usHit -> b
	System.UInt16 [Client]System.UInt16 Game.Msg.PetData::m_usDodge -> C
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iPhyAttack -> A
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iMagAttack -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.PetData::m_usCriticalHit -> c
	System.Byte [Client]System.Byte Game.Msg.PetData::m_btRace -> E
	System.UInt32 [Client]System.UInt32 Game.Msg.PetData::m_uiStorageTime -> D
	System.UInt32 [Client]System.UInt32 Game.Msg.PetData::m_uiLockTime -> d
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iPhyDef -> B
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iMagDef -> b
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iFireAtt -> C
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iFrostAtt -> c
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iLightAtt -> D
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iDarkAtt -> d
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iElemDef -> E
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iRaceTypeAtt -> e
	System.Int32 [Client]System.Int32 Game.Msg.PetData::m_iRaceTypeDef -> F
	System.UInt32 [Client]System.UInt32 Game.Msg.PetData::m_uiPetPower -> E
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.Msg.PetData::m_oVecSkill -> A
	System.Collections.Generic.List`1<System.Byte> [Client]System.Collections.Generic.List`1<System.Byte> Game.Msg.PetData::m_oVecSkillHole -> A
}

[Client]Game.Msg.FamilyData -> [Client]I.g
{
	[Client]Game.Msg.FamilyData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.FamilyData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.FamilyData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyData::m_uiID -> A
	System.String [Client]System.String Game.Msg.FamilyData::m_strName -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyData::m_uiLeader -> a
	System.String [Client]System.String Game.Msg.FamilyData::m_strNotice -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyData::m_uiCreateTime -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyData::m_uiMemberTotalPower -> b
	System.String [Client]System.String Game.Msg.FamilyData::m_strHireNewMemberNotice -> B
	System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> Game.Msg.FamilyData::m_oVecMember -> A
	System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> [Client]System.Collections.Generic.List`1<Game.Msg.FamilyMemberData> Game.Msg.FamilyData::m_oVecJoin -> a
}

[Client]Game.Msg.CSnapShotPlayerData -> [Client]I.H
{
	[Client]Game.Msg.CSnapShotPlayerData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotPlayerData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotPlayerData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.CSnapShotPlayerData::m_btSex -> A
	System.Byte [Client]System.Byte Game.Msg.CSnapShotPlayerData::m_btVip -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.CSnapShotPlayerData::m_usProfession -> A
	System.Byte [Client]System.Byte Game.Msg.CSnapShotPlayerData::m_ebtKillState -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotPlayerData::m_uiFamilyID -> A
	System.String [Client]System.String Game.Msg.CSnapShotPlayerData::m_strFamilyName -> A
}

[Client]Game.Msg.ClientSEquipSocket -> [Client]I.h
{
	[Client]Game.Msg.ClientSEquipSocket::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientSEquipSocket::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientSEquipSocket::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.ClientSEquipSocket::m_btStatus -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientSEquipSocket::m_uiGem -> A
	System.Byte [Client]System.Byte Game.Msg.ClientSEquipSocket::m_btAttrType -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientSEquipSocket::m_ussAttrValue -> A
	System.Byte [Client]System.Byte Game.Msg.ClientSEquipSocket::m_btFlare -> B
}

[Client]Game.Logic.Reward -> [Client]I.I
{
	[Client]Game.Logic.Reward::get_Instance[0]( ) -> A
	[Client]Game.Logic.Reward::get_InviteCode[0]( ) -> a
	[Client]Game.Logic.Reward::set_InviteCode[1]( System.String ) -> A
	[Client]Game.Logic.Reward::get_InvitedNum[0]( ) -> B
	[Client]Game.Logic.Reward::set_InvitedNum[1]( System.Int32 ) -> A
	[Client]Game.Logic.Reward::get_InviteGot[0]( ) -> b
	[Client]Game.Logic.Reward::set_InviteGot[1]( System.Boolean ) -> A
	[Client]Game.Logic.Reward::get_InstantDays[0]( ) -> C
	[Client]Game.Logic.Reward::set_InstantDays[1]( System.Byte ) -> A
	[Client]Game.Logic.Reward::get_TotalDays[0]( ) -> c
	[Client]Game.Logic.Reward::set_TotalDays[1]( System.UInt16 ) -> A
	[Client]Game.Logic.Reward::get_OnlineAwardTime[0]( ) -> D
	[Client]Game.Logic.Reward::set_OnlineAwardTime[1]( System.UInt16 ) -> a
	[Client]Game.Logic.Reward::get_OnlineAwardLastIndex[0]( ) -> d
	[Client]Game.Logic.Reward::set_OnlineAwardLastIndex[1]( System.Byte ) -> a
	[Client]Game.Logic.Reward::get_NoneOnlineAward[0]( ) -> E
	[Client]Game.Logic.Reward::set_NoneOnlineAward[1]( System.Boolean ) -> a
	[Client]Game.Logic.Reward::get_AwardNum[0]( ) -> e
	[Client]Game.Logic.Reward::get_LoginAwardNum[0]( ) -> F
	[Client]Game.Logic.Reward::set_LoginAwardNum[1]( System.Int32 ) -> a
	[Client]Game.Logic.Reward::get_LevelAwardNum[0]( ) -> f
	[Client]Game.Logic.Reward::set_LevelAwardNum[1]( System.Int32 ) -> B
	[Client]Game.Logic.Reward::get_OnlineAwardNum[0]( ) -> G
	[Client]Game.Logic.Reward::set_OnlineAwardNum[1]( System.Int32 ) -> b
	[Client]Game.Logic.Reward::get_RechargeAwardNum[0]( ) -> g
	[Client]Game.Logic.Reward::set_RechargeAwardNum[1]( System.Int32 ) -> C
	[Client]Game.Logic.Reward::get_VIPAwardNum[0]( ) -> H
	[Client]Game.Logic.Reward::set_VIPAwardNum[1]( System.Int32 ) -> c
	[Client]Game.Logic.Reward::get_IsVIP[0]( ) -> h
	[Client]Game.Logic.Reward::get_VIPBecomeTime[0]( ) -> I
	[Client]Game.Logic.Reward::set_VIPBecomeTime[1]( System.DateTime ) -> A
	[Client]Game.Logic.Reward::get_VIPExpireTime[0]( ) -> i
	[Client]Game.Logic.Reward::set_VIPExpireTime[1]( System.DateTime ) -> a
	[Client]Game.Logic.Reward::get_VipUnitPrice[0]( ) -> J
	[Client]Game.Logic.Reward::set_VipUnitPrice[1]( System.Int32 ) -> D
	[Client]Game.Logic.Reward::get_HaveRecharge[0]( ) -> j
	[Client]Game.Logic.Reward::set_HaveRecharge[1]( System.Boolean ) -> B
	[Client]Game.Logic.Reward::get_HaveGotBonus[0]( ) -> K
	[Client]Game.Logic.Reward::set_HaveGotBonus[1]( System.Boolean ) -> b
	[Client]Game.Logic.Reward::get_HaveAllServerAward[0]( ) -> k
	[Client]Game.Logic.Reward::set_HaveAllServerAward[1]( System.Boolean ) -> C
	[Client]Game.Logic.Reward::get_AllServerAwardDataList[0]( ) -> L
	[Client]Game.Logic.Reward::Reset[0]( ) -> l
	[Client]Game.Logic.Reward::OnMsgServerNotifyFirstRechargeInfo[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Reward::GetFirstRechargeAward[0]( ) -> M
	[Client]Game.Logic.Reward::OnMsgServerAckFirstRechargeAward[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Reward::InitVIPInfo[1]( System.Boolean ) -> c
	[Client]Game.Logic.Reward::OnMsgServerAckPtVIPInfo[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.Reward::ReceiveVIPAward[1]( System.Int32 ) -> d
	[Client]Game.Logic.Reward::OnMsgServerAckPtVIPAward[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.Reward::GetVIPAwardState[1]( System.Int32 ) -> E
	[Client]Game.Logic.Reward::SetVIPAwardState[2]( System.Int32, System.Boolean ) -> A
	[Client]Game.Logic.Reward::ExtendVipTime[1]( System.Int32 ) -> e
	[Client]Game.Logic.Reward::GetUnReceivedVIPAwardNum[0]( ) -> m
	[Client]Game.Logic.Reward::InitLoginInfo[0]( ) -> N
	[Client]Game.Logic.Reward::OnMsgServerAckLoginAwardInfo[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Logic.Reward::ReceiveLoginAward[1]( System.Int32 ) -> F
	[Client]Game.Logic.Reward::OnMsgServerAckLoginAward[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.Logic.Reward::RefreshLoginAwardState[0]( ) -> n
	[Client]Game.Logic.Reward::RefreshLoginAwardState[1]( System.Int32 ) -> f
	[Client]Game.Logic.Reward::GetLoginAwardState[1]( System.Int32 ) -> G
	[Client]Game.Logic.Reward::CanGetLoginAward[1]( System.Int32 ) -> g
	[Client]Game.Logic.Reward::SetLoginAwardState[2]( System.Int32, System.Boolean ) -> a
	[Client]Game.Logic.Reward::GetUnReceivedLoginAwardNum[0]( ) -> O
	[Client]Game.Logic.Reward::InitLevelInfo[0]( ) -> o
	[Client]Game.Logic.Reward::OnMsgServerAckLevelAwardInfo[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.Logic.Reward::ReceiveLevelAward[1]( System.Int32 ) -> H
	[Client]Game.Logic.Reward::OnMsgServerAckLevelAward[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.Logic.Reward::GetLevelAwardState[1]( System.Int32 ) -> h
	[Client]Game.Logic.Reward::SetLevelAwardState[2]( System.Int32, System.Boolean ) -> B
	[Client]Game.Logic.Reward::GetUnReceivedLevelAwardNum[0]( ) -> P
	[Client]Game.Logic.Reward::InitOnlineAward[0]( ) -> p
	[Client]Game.Logic.Reward::OnMsgServerAckOnLineAwardInfo[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.Logic.Reward::GetUnReceivedOnlineAwardNum[0]( ) -> Q
	[Client]Game.Logic.Reward::GetOnlineAward[0]( ) -> q
	[Client]Game.Logic.Reward::OnMsgServerAckOnLineAward[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.Logic.Reward::IsTheLastOnlineAward[1]( Game.DataAward ) -> A
	[Client]Game.Logic.Reward::GetOnlineAwardState[1]( System.Int32 ) -> I
	[Client]Game.Logic.Reward::SetOnlineAwardState[2]( System.Int32, System.Boolean ) -> b
	[Client]Game.Logic.Reward::GetAwardDataByTypeAndSaveIndex[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.Logic.Reward::InitRechargeAward[0]( ) -> R
	[Client]Game.Logic.Reward::OnMsgServerAckRechargeAwardInfo[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.Logic.Reward::GetRechargeAward[1]( System.Int32 ) -> i
	[Client]Game.Logic.Reward::OnMsgServerAckRechargeAward[1]( Game.Msg.RecvMsgPacket ) -> f
	[Client]Game.Logic.Reward::GetRechargeAwardState[1]( System.Int32 ) -> J
	[Client]Game.Logic.Reward::SetRechargeAwardState[2]( System.Int32, System.Boolean ) -> C
	[Client]Game.Logic.Reward::GetUnReceivedRechargeAwardNum[0]( ) -> r
	[Client]Game.Logic.Reward::OnMsgServerNotifyInvitationInfo[1]( Game.Msg.RecvMsgPacket ) -> G
	[Client]Game.Logic.Reward::ReqInviteCode[1]( System.String ) -> a
	[Client]Game.Logic.Reward::OnMsgServerAckInvitationCode[1]( Game.Msg.RecvMsgPacket ) -> g
	[Client]Game.Logic.Reward::OnMsgServerNotifyAllServerAward[1]( Game.Msg.RecvMsgPacket ) -> H
	[Client]Game.Logic.Reward::SendClientReqAllServerAwardInfo[0]( ) -> S
	[Client]Game.Logic.Reward::OnMsgServerAckAllServerAwardInfo[1]( Game.Msg.RecvMsgPacket ) -> h
	[Client]Game.Logic.Reward::SendClientReqAllServerAwardByID[1]( System.UInt32 ) -> A
	[Client]Game.Logic.Reward::OnMsgServerAckAllServerAwardByID[1]( Game.Msg.RecvMsgPacket ) -> I
	[Client]Game.Logic.Reward::RemoveAllServerAwardByID[1]( System.UInt32 ) -> a
	[Client]Game.Logic.Reward::SortBySaveIndex[2]( Game.DataAward, Game.DataAward ) -> A

	[Client]Game.Logic.Reward::.ctor[0]( ) skipped:  special name
	[Client]Game.Logic.Reward::.cctor[0]( ) skipped:  special name

	Game.Logic.Reward [Client]Game.Logic.Reward Game.Logic.Reward::m_Instance -> A
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.Logic.Reward::m_ListCachedId -> A
	System.Boolean [Client]System.Boolean Game.Logic.Reward::m_InitVipByDlgPrize -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.Reward::m_VIPAwardInfo -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.Reward::m_LoginAwardInfo -> a
	System.Collections.Generic.Dictionary`2<System.Int32,Game.Logic.Reward/enumAwardState> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.Logic.Reward/enumAwardState> Game.Logic.Reward::m_dicLoginAwardState -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.Reward::m_LevelAwardInfo -> B
	System.UInt32 [Client]System.UInt32 Game.Logic.Reward::m_OnlineAwardInfo -> b
	System.UInt32 [Client]System.UInt32 Game.Logic.Reward::m_RechargeAwardInfo -> C
	System.UInt32 [Client]System.UInt32 Game.Logic.Reward::RechargeNum -> c
	System.Boolean [Client]System.Boolean Game.Logic.Reward::m_HaveAllServerAward -> a
	System.Collections.Generic.List`1<Game.Msg.AllServerAwardData> [Client]System.Collections.Generic.List`1<Game.Msg.AllServerAwardData> Game.Logic.Reward::m_AllServerAwardDataList -> A
	System.String [Client]System.String Game.Logic.Reward::<InviteCode>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.Logic.Reward::<InvitedNum>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.Logic.Reward::<InviteGot>k__BackingField -> B
	System.Byte [Client]System.Byte Game.Logic.Reward::<InstantDays>k__BackingField -> A
	System.UInt16 [Client]System.UInt16 Game.Logic.Reward::<TotalDays>k__BackingField -> A
	System.UInt16 [Client]System.UInt16 Game.Logic.Reward::<OnlineAwardTime>k__BackingField -> a
	System.Byte [Client]System.Byte Game.Logic.Reward::<OnlineAwardLastIndex>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.Logic.Reward::<NoneOnlineAward>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.Logic.Reward::<LoginAwardNum>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.Logic.Reward::<LevelAwardNum>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.Logic.Reward::<OnlineAwardNum>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.Logic.Reward::<RechargeAwardNum>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.Logic.Reward::<VIPAwardNum>k__BackingField -> c
	System.DateTime [Client]System.DateTime Game.Logic.Reward::<VIPBecomeTime>k__BackingField -> A
	System.DateTime [Client]System.DateTime Game.Logic.Reward::<VIPExpireTime>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.Logic.Reward::<VipUnitPrice>k__BackingField -> D
	System.Boolean [Client]System.Boolean Game.Logic.Reward::<HaveRecharge>k__BackingField -> C
	System.Boolean [Client]System.Boolean Game.Logic.Reward::<HaveGotBonus>k__BackingField -> c

	Game.Logic.Reward [Client]Game.Logic.Reward Game.Logic.Reward::Instance -> dropped
	System.String [Client]System.String Game.Logic.Reward::InviteCode -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Reward::InvitedNum -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Reward::InviteGot -> dropped
	System.Byte [Client]System.Byte Game.Logic.Reward::InstantDays -> dropped
	System.UInt16 [Client]System.UInt16 Game.Logic.Reward::TotalDays -> dropped
	System.UInt16 [Client]System.UInt16 Game.Logic.Reward::OnlineAwardTime -> dropped
	System.Byte [Client]System.Byte Game.Logic.Reward::OnlineAwardLastIndex -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Reward::NoneOnlineAward -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Reward::AwardNum -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Reward::LoginAwardNum -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Reward::LevelAwardNum -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Reward::OnlineAwardNum -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Reward::RechargeAwardNum -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Reward::VIPAwardNum -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Reward::IsVIP -> dropped
	System.DateTime [Client]System.DateTime Game.Logic.Reward::VIPBecomeTime -> dropped
	System.DateTime [Client]System.DateTime Game.Logic.Reward::VIPExpireTime -> dropped
	System.Int32 [Client]System.Int32 Game.Logic.Reward::VipUnitPrice -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Reward::HaveRecharge -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Reward::HaveGotBonus -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Reward::HaveAllServerAward -> dropped
	System.Collections.Generic.List`1<Game.Msg.AllServerAwardData> [Client]System.Collections.Generic.List`1<Game.Msg.AllServerAwardData> Game.Logic.Reward::AllServerAwardDataList -> dropped
}

[Client]Game.Logic.Reward/enumAwardState -> [Client]I.I/i
{
	Game.Logic.Reward/enumAwardState [Client]Game.Logic.Reward/enumAwardState Game.Logic.Reward/enumAwardState::Received -> A
	Game.Logic.Reward/enumAwardState [Client]Game.Logic.Reward/enumAwardState Game.Logic.Reward/enumAwardState::CanReceive -> a
	Game.Logic.Reward/enumAwardState [Client]Game.Logic.Reward/enumAwardState Game.Logic.Reward/enumAwardState::ToReceive -> B

	System.Int32 [Client]System.Int32 Game.Logic.Reward/enumAwardState::value__ skipped:  filtered
}

[Client]Game.Logic.Reward/enumAwardType -> [Client]I.I/J
{
	Game.Logic.Reward/enumAwardType [Client]Game.Logic.Reward/enumAwardType Game.Logic.Reward/enumAwardType::Login -> A
	Game.Logic.Reward/enumAwardType [Client]Game.Logic.Reward/enumAwardType Game.Logic.Reward/enumAwardType::SerialLogin -> a
	Game.Logic.Reward/enumAwardType [Client]Game.Logic.Reward/enumAwardType Game.Logic.Reward/enumAwardType::Recharge -> B
	Game.Logic.Reward/enumAwardType [Client]Game.Logic.Reward/enumAwardType Game.Logic.Reward/enumAwardType::Level -> b
	Game.Logic.Reward/enumAwardType [Client]Game.Logic.Reward/enumAwardType Game.Logic.Reward/enumAwardType::Online -> C
	Game.Logic.Reward/enumAwardType [Client]Game.Logic.Reward/enumAwardType Game.Logic.Reward/enumAwardType::Invite -> c
	Game.Logic.Reward/enumAwardType [Client]Game.Logic.Reward/enumAwardType Game.Logic.Reward/enumAwardType::FirstRecharge -> D

	System.Int32 [Client]System.Int32 Game.Logic.Reward/enumAwardType::value__ skipped:  filtered
}

[Client]Game.Logic.Auction -> [Client]I.j
{
	[Client]Game.Logic.Auction::get_Instance[0]( ) -> A
	[Client]Game.Logic.Auction::get_AuctionBuyList[0]( ) -> a
	[Client]Game.Logic.Auction::get_AuctionSellList[0]( ) -> B
	[Client]Game.Logic.Auction::get_CurAuctionDetailSale[0]( ) -> b
	[Client]Game.Logic.Auction::get_BuyGoldInfoList[0]( ) -> C
	[Client]Game.Logic.Auction::get_SellGoldInfoList[0]( ) -> c
	[Client]Game.Logic.Auction::Reset[0]( ) -> D
	[Client]Game.Logic.Auction::SendQuerySaleListReq[1]( Game.Msg.MsgClientQuerySaleList ) -> A
	[Client]Game.Logic.Auction::SendQuerySaleListReqByItemID[1]( System.UInt32 ) -> A
	[Client]Game.Logic.Auction::OnMsgServerAckSaleList[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Auction::SendBuyItemReq[2]( System.UInt32, System.Int32 ) -> A
	[Client]Game.Logic.Auction::OnMsgServerAckBuyItem[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Auction::SendSaleDetailReq[1]( System.UInt32 ) -> a
	[Client]Game.Logic.Auction::OnMsgServerAckSaleDetail[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.Auction::OnMsgServerNotifyMyOnSale[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.Auction::SendSellItemReq[4]( System.Int64, System.Int32, System.UInt32, Game.Msg.EAuctionMoneyType ) -> A
	[Client]Game.Logic.Auction::OnMsgServerAckSellItem[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Logic.Auction::SendCancelSellReq[1]( System.UInt32 ) -> B
	[Client]Game.Logic.Auction::OnMsgServerDelMySell[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.Logic.Auction::OnMsgServerUpdateMySale[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.Logic.Auction::SendGoldGetListReq[0]( ) -> d
	[Client]Game.Logic.Auction::OnMsgServerAckGoldGetList[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.Logic.Auction::SendBuyGoldReq[2]( System.UInt32, System.Int32 ) -> a
	[Client]Game.Logic.Auction::OnMsgServerAckGoldBuy[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.Logic.Auction::SendConsignSellGoldReq[2]( System.UInt32, System.UInt32 ) -> A
	[Client]Game.Logic.Auction::OnMsgServerAckGoldConsignSell[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.Logic.Auction::SendCancelGoldConsign[1]( System.UInt32 ) -> b
	[Client]Game.Logic.Auction::OnMsgServerAckGoldConsignCancel[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.Logic.Auction::SendGetMyGoldRecordReq[0]( ) -> E
	[Client]Game.Logic.Auction::OnMsgServerAckGoldGetMyRecord[1]( Game.Msg.RecvMsgPacket ) -> f
	[Client]Game.Logic.Auction::OnMsgServerNotifyGoldListChange[1]( Game.Msg.RecvMsgPacket ) -> G
	[Client]Game.Logic.Auction::GetGoldConsignInfo[1]( System.UInt32 ) -> C
	[Client]Game.Logic.Auction::AddSellGoldConsignInfo[1]( Game.Msg.ClientGoldConsignInfo ) -> A
	[Client]Game.Logic.Auction::RemoveSellGoldConsignInfo[1]( System.UInt32 ) -> c
	[Client]Game.Logic.Auction::RemoveBuyGoldConsignInfo[1]( System.UInt32 ) -> D
	[Client]Game.Logic.Auction::RemoveBuyItem[1]( System.UInt32 ) -> d
	[Client]Game.Logic.Auction::AddSellItem[1]( Game.Msg.AuctionDetailSale ) -> A
	[Client]Game.Logic.Auction::RemoveSellItem[1]( System.UInt32 ) -> E
	[Client]Game.Logic.Auction::UpdateSellItem[1]( Game.Msg.AuctionDetailSale ) -> a
	[Client]Game.Logic.Auction::GetSoulIdList[3]( System.Int32, System.Int32, System.Int32 ) -> A

	[Client]Game.Logic.Auction::.ctor[0]( ) skipped:  special name
	[Client]Game.Logic.Auction::.cctor[0]( ) skipped:  special name

	Game.Logic.Auction [Client]Game.Logic.Auction Game.Logic.Auction::m_Instance -> A
	System.Collections.Generic.List`1<Game.Msg.AuctionBriefSale> [Client]System.Collections.Generic.List`1<Game.Msg.AuctionBriefSale> Game.Logic.Auction::m_AuctionBuyList -> A
	System.Collections.Generic.List`1<Game.Msg.AuctionDetailSale> [Client]System.Collections.Generic.List`1<Game.Msg.AuctionDetailSale> Game.Logic.Auction::m_AuctionSellList -> A
	Game.Msg.AuctionDetailSale [Client]Game.Msg.AuctionDetailSale Game.Logic.Auction::m_AuctionDetailSale -> A
	System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> [Client]System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> Game.Logic.Auction::m_BuyGoldInfoList -> A
	System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> [Client]System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> Game.Logic.Auction::m_SellGoldInfoList -> a
	System.Boolean [Client]System.Boolean Game.Logic.Auction::ShowNoResult -> A
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction::SortTypeBuy -> A
	System.Boolean [Client]System.Boolean Game.Logic.Auction::SortOrderBuy -> a

	Game.Logic.Auction [Client]Game.Logic.Auction Game.Logic.Auction::Instance -> dropped
	System.Collections.Generic.List`1<Game.Msg.AuctionBriefSale> [Client]System.Collections.Generic.List`1<Game.Msg.AuctionBriefSale> Game.Logic.Auction::AuctionBuyList -> dropped
	System.Collections.Generic.List`1<Game.Msg.AuctionDetailSale> [Client]System.Collections.Generic.List`1<Game.Msg.AuctionDetailSale> Game.Logic.Auction::AuctionSellList -> dropped
	Game.Msg.AuctionDetailSale [Client]Game.Msg.AuctionDetailSale Game.Logic.Auction::CurAuctionDetailSale -> dropped
	System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> [Client]System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> Game.Logic.Auction::BuyGoldInfoList -> dropped
	System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> [Client]System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> Game.Logic.Auction::SellGoldInfoList -> dropped
}

[Client]Game.Logic.Auction/BuyComparer -> [Client]I.j/K
{

	[Client]Game.Logic.Auction/BuyComparer::.ctor[2]( System.Boolean, Game.Logic.Auction/enumSortType ) skipped:  special name
	[Client]Game.Logic.Auction/BuyComparer::Compare[2]( Game.Msg.AuctionBriefSale, Game.Msg.AuctionBriefSale ) skipped:  external base class or interface

	System.Boolean [Client]System.Boolean Game.Logic.Auction/BuyComparer::m_SortFlag -> A
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/BuyComparer::m_SortType -> A
}

[Client]Game.Logic.Auction/SellComparer -> [Client]I.j/k
{

	[Client]Game.Logic.Auction/SellComparer::Compare[2]( Game.Msg.AuctionDetailSale, Game.Msg.AuctionDetailSale ) skipped:  external base class or interface
	[Client]Game.Logic.Auction/SellComparer::.ctor[2]( System.Boolean, Game.Logic.Auction/enumSortType ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.Logic.Auction/SellComparer::m_SortFlag -> A
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/SellComparer::m_SortType -> A
}

[Client]Game.Logic.Auction/MoneyComparer -> [Client]I.j/L
{

	[Client]Game.Logic.Auction/MoneyComparer::Compare[2]( Game.Msg.ClientGoldConsignInfo, Game.Msg.ClientGoldConsignInfo ) skipped:  external base class or interface
	[Client]Game.Logic.Auction/MoneyComparer::.ctor[2]( System.Boolean, Game.Logic.Auction/enumSortType ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.Logic.Auction/MoneyComparer::m_SortFlag -> A
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/MoneyComparer::m_SortType -> A
}

[Client]Game.Logic.Auction/enumSortType -> [Client]I.j/l
{
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::None -> A
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::BuyQuality -> a
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::Level -> B
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::BuyPrice -> b
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::SellQuality -> C
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::Time -> c
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::SellPrice -> D
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::Money_GoldNum -> d
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::Money_UnitPrice -> E
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::Money_Time -> e
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.Logic.Auction/enumSortType::Money_SumPrice -> F

	System.Int32 [Client]System.Int32 Game.Logic.Auction/enumSortType::value__ skipped:  filtered
}

[Client]Game.enumActivityJoinType -> [Client]I.M
{
	Game.enumActivityJoinType [Client]Game.enumActivityJoinType Game.enumActivityJoinType::NPC -> A
	Game.enumActivityJoinType [Client]Game.enumActivityJoinType Game.enumActivityJoinType::Ectype -> a
	Game.enumActivityJoinType [Client]Game.enumActivityJoinType Game.enumActivityJoinType::UI -> B
	Game.enumActivityJoinType [Client]Game.enumActivityJoinType Game.enumActivityJoinType::Script -> b

	System.Int32 [Client]System.Int32 Game.enumActivityJoinType::value__ skipped:  filtered
}

[Client]Game.Activity -> [Client]I.m
{
	[Client]Game.Activity::get_Instance[0]( ) -> A
	[Client]Game.Activity::get_ActivityRecord[0]( ) -> a
	[Client]Game.Activity::get_BossDropCDRecord[0]( ) -> B
	[Client]Game.Activity::get_ActiveList[0]( ) -> b
	[Client]Game.Activity::get_ActivePoint[0]( ) -> C
	[Client]Game.Activity::get_ShowNum[0]( ) -> c
	[Client]Game.Activity::get_ActivityNum[0]( ) -> D
	[Client]Game.Activity::get_EctypeNum[0]( ) -> d
	[Client]Game.Activity::Reset[0]( ) -> E
	[Client]Game.Activity::Init[0]( ) -> e
	[Client]Game.Activity::Update[0]( ) -> F
	[Client]Game.Activity::Refresh[0]( ) -> f
	[Client]Game.Activity::CheckNewActivity[0]( ) -> G
	[Client]Game.Activity::CheckOpenActivity[0]( ) -> g
	[Client]Game.Activity::GetDisplayedActivitiesByType[1]( System.Int32 ) -> A
	[Client]Game.Activity::GetDisplayedActivitiesByActiveness[0]( ) -> H
	[Client]Game.Activity::CanSendReq[2]( System.Single&, System.Single ) -> A
	[Client]Game.Activity::SendActivityReq[0]( ) -> h
	[Client]Game.Activity::ReqActivityRecord[0]( ) -> I
	[Client]Game.Activity::SendActiveReq[0]( ) -> i
	[Client]Game.Activity::SendBossReq[0]( ) -> J
	[Client]Game.Activity::OnMsgServerAckActivityRecord[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Activity::OnMsgServerAckActivePoint[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Activity::OnMsgServerAckBossRefreshTime[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Activity::OnMsgServerAckMoneyDone[1]( Game.Msg.RecvMsgPacket ) -> b

	[Client]Game.Activity::.ctor[0]( ) skipped:  special name
	[Client]Game.Activity::.cctor[0]( ) skipped:  special name

	Game.Activity [Client]Game.Activity Game.Activity::m_Instance -> A
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.Msg.ActivityRecord> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.Msg.ActivityRecord> Game.Activity::m_dicActivityRecord -> A
	System.Collections.Generic.Dictionary`2<System.Int32,System.UInt32> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.UInt32> Game.Activity::m_dicBossDropCD -> A
	System.Collections.Generic.List`1<Game.Msg.ActivePointData> [Client]System.Collections.Generic.List`1<Game.Msg.ActivePointData> Game.Activity::m_listActive -> A
	System.Int32 [Client]System.Int32 Game.Activity::m_ActivePoint -> A
	System.Single [Client]System.Single Game.Activity::m_ActivityUpdateInteval -> A
	System.Single [Client]System.Single Game.Activity::m_LastActivityUpdateTime -> a
	System.Single [Client]System.Single Game.Activity::m_BossUpdateInteval -> B
	System.Single [Client]System.Single Game.Activity::m_LastBossUpdateTime -> b
	System.Collections.Generic.List`1<Game.DataActivity> [Client]System.Collections.Generic.List`1<Game.DataActivity> Game.Activity::CurEctypeList -> A
	System.Collections.Generic.List`1<Game.DataActivity> [Client]System.Collections.Generic.List`1<Game.DataActivity> Game.Activity::CurActivityList -> a
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.Activity::NewEctypeList -> A
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.Activity::NewActivityList -> a
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.Activity::OpenEctypeList -> B
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.Activity::OpenActivityList -> b
	System.Boolean [Client]System.Boolean Game.Activity::m_bInitOnce -> A

	Game.Activity [Client]Game.Activity Game.Activity::Instance -> dropped
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.Msg.ActivityRecord> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.Msg.ActivityRecord> Game.Activity::ActivityRecord -> dropped
	System.Collections.Generic.Dictionary`2<System.Int32,System.UInt32> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.UInt32> Game.Activity::BossDropCDRecord -> dropped
	System.Collections.Generic.List`1<Game.Msg.ActivePointData> [Client]System.Collections.Generic.List`1<Game.Msg.ActivePointData> Game.Activity::ActiveList -> dropped
	System.Int32 [Client]System.Int32 Game.Activity::ActivePoint -> dropped
	System.Int32 [Client]System.Int32 Game.Activity::ShowNum -> dropped
	System.Int32 [Client]System.Int32 Game.Activity::ActivityNum -> dropped
	System.Int32 [Client]System.Int32 Game.Activity::EctypeNum -> dropped
}

[Client]Game.DirectionControlGestureRecognizer -> [Client]I.N
{
	[Client]Game.DirectionControlGestureRecognizer::GetRequiredFingerCount[0]( ) -> A
	[Client]Game.DirectionControlGestureRecognizer::CanBegin[1]( Game.TouchList ) -> A
	[Client]Game.DirectionControlGestureRecognizer::OnBegin[1]( Game.TouchList ) -> a
	[Client]Game.DirectionControlGestureRecognizer::OnProcessing[1]( Game.TouchList ) -> B
	[Client]Game.DirectionControlGestureRecognizer::IsEnd[1]( Game.TouchList ) -> b
	[Client]Game.DirectionControlGestureRecognizer::OnRecognized[1]( Game.TouchList ) -> C
	[Client]Game.DirectionControlGestureRecognizer::add_OnDirection[1]( .EventDelegate`1<Game.DirectionControlGestureRecognizer> ) -> A
	[Client]Game.DirectionControlGestureRecognizer::remove_OnDirection[1]( .EventDelegate`1<Game.DirectionControlGestureRecognizer> ) -> a
	[Client]Game.DirectionControlGestureRecognizer::add_OnDirectionEnd[1]( .EventDelegate`1<Game.DirectionControlGestureRecognizer> ) -> B
	[Client]Game.DirectionControlGestureRecognizer::remove_OnDirectionEnd[1]( .EventDelegate`1<Game.DirectionControlGestureRecognizer> ) -> b
	[Client]Game.DirectionControlGestureRecognizer::add_OnControling[1]( .EventDelegate`1<Game.DirectionControlGestureRecognizer> ) -> C
	[Client]Game.DirectionControlGestureRecognizer::remove_OnControling[1]( .EventDelegate`1<Game.DirectionControlGestureRecognizer> ) -> c
	[Client]Game.DirectionControlGestureRecognizer::get_StartPos[0]( ) -> a
	[Client]Game.DirectionControlGestureRecognizer::set_StartPos[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.DirectionControlGestureRecognizer::get_CurPos[0]( ) -> B
	[Client]Game.DirectionControlGestureRecognizer::set_CurPos[1]( UnityEngine.Vector2 ) -> a
	[Client]Game.DirectionControlGestureRecognizer::get_TouchId[0]( ) -> b
	[Client]Game.DirectionControlGestureRecognizer::set_TouchId[1]( System.Int32 ) -> A
	[Client]Game.DirectionControlGestureRecognizer::InArea[1]( UnityEngine.Vector2 ) -> B

	[Client]Game.DirectionControlGestureRecognizer::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.DirectionControlGestureRecognizer::MinStayDuration -> A
	System.Single [Client]System.Single Game.DirectionControlGestureRecognizer::MaxDistance -> a
	Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> Game.DirectionControlGestureRecognizer::OnDirection -> A
	Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> Game.DirectionControlGestureRecognizer::OnDirectionEnd -> a
	Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> Game.DirectionControlGestureRecognizer::OnControling -> B
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.DirectionControlGestureRecognizer::<StartPos>k__BackingField -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.DirectionControlGestureRecognizer::<CurPos>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DirectionControlGestureRecognizer::<TouchId>k__BackingField -> A

	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.DirectionControlGestureRecognizer::StartPos -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.DirectionControlGestureRecognizer::CurPos -> dropped
	System.Int32 [Client]System.Int32 Game.DirectionControlGestureRecognizer::TouchId -> dropped

	Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> Game.DirectionControlGestureRecognizer::OnDirection -> dropped
	Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> Game.DirectionControlGestureRecognizer::OnDirectionEnd -> dropped
	Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.DirectionControlGestureRecognizer> Game.DirectionControlGestureRecognizer::OnControling -> dropped
}

[Client]Game.DataSceneCarry -> [Client]I.n
{
	[Client]Game.DataSceneCarry::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSceneCarry::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSceneCarry::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSceneCarry::get_SrcMapId[0]( ) -> A
	[Client]Game.DataSceneCarry::set_SrcMapId[1]( System.Int32 ) -> A
	[Client]Game.DataSceneCarry::get_SrcLeftTopX[0]( ) -> a
	[Client]Game.DataSceneCarry::set_SrcLeftTopX[1]( System.Single ) -> A
	[Client]Game.DataSceneCarry::get_SrcLeftTopZ[0]( ) -> B
	[Client]Game.DataSceneCarry::set_SrcLeftTopZ[1]( System.Single ) -> a
	[Client]Game.DataSceneCarry::get_SrcRightBottomX[0]( ) -> b
	[Client]Game.DataSceneCarry::set_SrcRightBottomX[1]( System.Single ) -> B
	[Client]Game.DataSceneCarry::get_SrcRightBottomZ[0]( ) -> C
	[Client]Game.DataSceneCarry::set_SrcRightBottomZ[1]( System.Single ) -> b
	[Client]Game.DataSceneCarry::get_DstMapId[0]( ) -> c
	[Client]Game.DataSceneCarry::set_DstMapId[1]( System.Int32 ) -> a
	[Client]Game.DataSceneCarry::get_BornPointX[0]( ) -> D
	[Client]Game.DataSceneCarry::set_BornPointX[1]( System.Single ) -> C
	[Client]Game.DataSceneCarry::get_BornPointZ[0]( ) -> d
	[Client]Game.DataSceneCarry::set_BornPointZ[1]( System.Single ) -> c

	[Client]Game.DataSceneCarry::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataSceneCarry::<SrcMapId>k__BackingField -> A
	System.Single [Client]System.Single Game.DataSceneCarry::<SrcLeftTopX>k__BackingField -> A
	System.Single [Client]System.Single Game.DataSceneCarry::<SrcLeftTopZ>k__BackingField -> a
	System.Single [Client]System.Single Game.DataSceneCarry::<SrcRightBottomX>k__BackingField -> B
	System.Single [Client]System.Single Game.DataSceneCarry::<SrcRightBottomZ>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataSceneCarry::<DstMapId>k__BackingField -> a
	System.Single [Client]System.Single Game.DataSceneCarry::<BornPointX>k__BackingField -> C
	System.Single [Client]System.Single Game.DataSceneCarry::<BornPointZ>k__BackingField -> c

	System.Int32 [Client]System.Int32 Game.DataSceneCarry::SrcMapId -> dropped
	System.Single [Client]System.Single Game.DataSceneCarry::SrcLeftTopX -> dropped
	System.Single [Client]System.Single Game.DataSceneCarry::SrcLeftTopZ -> dropped
	System.Single [Client]System.Single Game.DataSceneCarry::SrcRightBottomX -> dropped
	System.Single [Client]System.Single Game.DataSceneCarry::SrcRightBottomZ -> dropped
	System.Int32 [Client]System.Int32 Game.DataSceneCarry::DstMapId -> dropped
	System.Single [Client]System.Single Game.DataSceneCarry::BornPointX -> dropped
	System.Single [Client]System.Single Game.DataSceneCarry::BornPointZ -> dropped
}

[Client]Game.DataSceneCarryManager -> [Client]I.O
{
	[Client]Game.DataSceneCarryManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSceneCarryManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSceneCarryManager::Clear[0]( ) -> A
	[Client]Game.DataSceneCarryManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSceneCarryManager::GetDataBySrcMapId[1]( System.Int32 ) -> A
	[Client]Game.DataSceneCarryManager::GetDataListBySrcMapId[1]( System.Int32 ) -> a
	[Client]Game.DataSceneCarryManager::GetDataBySrcLeftTopX[1]( System.Single ) -> A
	[Client]Game.DataSceneCarryManager::GetDataListBySrcLeftTopX[1]( System.Single ) -> a
	[Client]Game.DataSceneCarryManager::GetDataBySrcLeftTopZ[1]( System.Single ) -> B
	[Client]Game.DataSceneCarryManager::GetDataListBySrcLeftTopZ[1]( System.Single ) -> b
	[Client]Game.DataSceneCarryManager::GetDataBySrcRightBottomX[1]( System.Single ) -> C
	[Client]Game.DataSceneCarryManager::GetDataListBySrcRightBottomX[1]( System.Single ) -> c
	[Client]Game.DataSceneCarryManager::GetDataBySrcRightBottomZ[1]( System.Single ) -> D
	[Client]Game.DataSceneCarryManager::GetDataListBySrcRightBottomZ[1]( System.Single ) -> d
	[Client]Game.DataSceneCarryManager::GetDataByDstMapId[1]( System.Int32 ) -> B
	[Client]Game.DataSceneCarryManager::GetDataListByDstMapId[1]( System.Int32 ) -> b
	[Client]Game.DataSceneCarryManager::GetDataByBornPointX[1]( System.Single ) -> E
	[Client]Game.DataSceneCarryManager::GetDataListByBornPointX[1]( System.Single ) -> e
	[Client]Game.DataSceneCarryManager::GetDataByBornPointZ[1]( System.Single ) -> F
	[Client]Game.DataSceneCarryManager::GetDataListByBornPointZ[1]( System.Single ) -> f
	[Client]Game.DataSceneCarryManager::get_Instance[0]( ) -> a
	[Client]Game.DataSceneCarryManager::get_DataList[0]( ) -> B
	[Client]Game.DataSceneCarryManager::get_Count[0]( ) -> b

	[Client]Game.DataSceneCarryManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataSceneCarryManager::.ctor[0]( ) skipped:  special name

	Game.DataSceneCarryManager [Client]Game.DataSceneCarryManager Game.DataSceneCarryManager::instance -> A
	System.Collections.Generic.List`1<Game.DataSceneCarry> [Client]System.Collections.Generic.List`1<Game.DataSceneCarry> Game.DataSceneCarryManager::dataList -> A

	Game.DataSceneCarryManager [Client]Game.DataSceneCarryManager Game.DataSceneCarryManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataSceneCarry> [Client]System.Collections.Generic.List`1<Game.DataSceneCarry> Game.DataSceneCarryManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataSceneCarryManager::Count -> dropped
}

[Client]Game.DataPetaddskillhole -> [Client]I.o
{
	[Client]Game.DataPetaddskillhole::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetaddskillhole::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetaddskillhole::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetaddskillhole::get_HoleIndex[0]( ) -> A
	[Client]Game.DataPetaddskillhole::set_HoleIndex[1]( System.Int32 ) -> A
	[Client]Game.DataPetaddskillhole::get_ItemID[0]( ) -> a
	[Client]Game.DataPetaddskillhole::set_ItemID[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataPetaddskillhole::get_ItemNum[0]( ) -> B
	[Client]Game.DataPetaddskillhole::set_ItemNum[1]( System.Int32 ) -> a
	[Client]Game.DataPetaddskillhole::get_CostMoney[0]( ) -> b
	[Client]Game.DataPetaddskillhole::set_CostMoney[1]( System.Int32 ) -> B

	[Client]Game.DataPetaddskillhole::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPetaddskillhole::<HoleIndex>k__BackingField -> A
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataPetaddskillhole::<ItemID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPetaddskillhole::<ItemNum>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPetaddskillhole::<CostMoney>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataPetaddskillhole::HoleIndex -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataPetaddskillhole::ItemID -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetaddskillhole::ItemNum -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetaddskillhole::CostMoney -> dropped
}

[Client]Game.DataPetaddskillholeManager -> [Client]I.P
{
	[Client]Game.DataPetaddskillholeManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetaddskillholeManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetaddskillholeManager::Clear[0]( ) -> A
	[Client]Game.DataPetaddskillholeManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetaddskillholeManager::GetDataByHoleIndex[1]( System.Int32 ) -> A
	[Client]Game.DataPetaddskillholeManager::GetDataListByHoleIndex[1]( System.Int32 ) -> a
	[Client]Game.DataPetaddskillholeManager::GetDataByItemID[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataPetaddskillholeManager::GetDataListByItemID[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataPetaddskillholeManager::GetDataByItemNum[1]( System.Int32 ) -> B
	[Client]Game.DataPetaddskillholeManager::GetDataListByItemNum[1]( System.Int32 ) -> b
	[Client]Game.DataPetaddskillholeManager::GetDataByCostMoney[1]( System.Int32 ) -> C
	[Client]Game.DataPetaddskillholeManager::GetDataListByCostMoney[1]( System.Int32 ) -> c
	[Client]Game.DataPetaddskillholeManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetaddskillholeManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetaddskillholeManager::get_Count[0]( ) -> b

	[Client]Game.DataPetaddskillholeManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetaddskillholeManager::.ctor[0]( ) skipped:  special name

	Game.DataPetaddskillholeManager [Client]Game.DataPetaddskillholeManager Game.DataPetaddskillholeManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPetaddskillhole> [Client]System.Collections.Generic.List`1<Game.DataPetaddskillhole> Game.DataPetaddskillholeManager::dataList -> A

	Game.DataPetaddskillholeManager [Client]Game.DataPetaddskillholeManager Game.DataPetaddskillholeManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPetaddskillhole> [Client]System.Collections.Generic.List`1<Game.DataPetaddskillhole> Game.DataPetaddskillholeManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetaddskillholeManager::Count -> dropped
}

[Client]Game.DataEquipSetAttr -> [Client]I.p
{
	[Client]Game.DataEquipSetAttr::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEquipSetAttr::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEquipSetAttr::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEquipSetAttr::get_SetID[0]( ) -> A
	[Client]Game.DataEquipSetAttr::set_SetID[1]( System.Int32 ) -> A
	[Client]Game.DataEquipSetAttr::get_Attr[0]( ) -> a
	[Client]Game.DataEquipSetAttr::set_Attr[1]( System.String ) -> A
	[Client]Game.DataEquipSetAttr::get_AttrValue[0]( ) -> B
	[Client]Game.DataEquipSetAttr::set_AttrValue[1]( System.Int32 ) -> a
	[Client]Game.DataEquipSetAttr::get_NeedSetNum[0]( ) -> b
	[Client]Game.DataEquipSetAttr::set_NeedSetNum[1]( System.Int32 ) -> B

	[Client]Game.DataEquipSetAttr::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataEquipSetAttr::<SetID>k__BackingField -> A
	System.String [Client]System.String Game.DataEquipSetAttr::<Attr>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataEquipSetAttr::<AttrValue>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataEquipSetAttr::<NeedSetNum>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataEquipSetAttr::SetID -> dropped
	System.String [Client]System.String Game.DataEquipSetAttr::Attr -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquipSetAttr::AttrValue -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquipSetAttr::NeedSetNum -> dropped
}

[Client]Game.DataEquipSetAttrManager -> [Client]I.Q
{
	[Client]Game.DataEquipSetAttrManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEquipSetAttrManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEquipSetAttrManager::Clear[0]( ) -> A
	[Client]Game.DataEquipSetAttrManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEquipSetAttrManager::GetDataBySetID[1]( System.Int32 ) -> A
	[Client]Game.DataEquipSetAttrManager::GetDataListBySetID[1]( System.Int32 ) -> a
	[Client]Game.DataEquipSetAttrManager::GetDataByAttr[1]( System.String ) -> A
	[Client]Game.DataEquipSetAttrManager::GetDataListByAttr[1]( System.String ) -> a
	[Client]Game.DataEquipSetAttrManager::GetDataByAttrValue[1]( System.Int32 ) -> B
	[Client]Game.DataEquipSetAttrManager::GetDataListByAttrValue[1]( System.Int32 ) -> b
	[Client]Game.DataEquipSetAttrManager::GetDataByNeedSetNum[1]( System.Int32 ) -> C
	[Client]Game.DataEquipSetAttrManager::GetDataListByNeedSetNum[1]( System.Int32 ) -> c
	[Client]Game.DataEquipSetAttrManager::get_Instance[0]( ) -> a
	[Client]Game.DataEquipSetAttrManager::get_DataList[0]( ) -> B
	[Client]Game.DataEquipSetAttrManager::get_Count[0]( ) -> b

	[Client]Game.DataEquipSetAttrManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataEquipSetAttrManager::.ctor[0]( ) skipped:  special name

	Game.DataEquipSetAttrManager [Client]Game.DataEquipSetAttrManager Game.DataEquipSetAttrManager::instance -> A
	System.Collections.Generic.List`1<Game.DataEquipSetAttr> [Client]System.Collections.Generic.List`1<Game.DataEquipSetAttr> Game.DataEquipSetAttrManager::dataList -> A

	Game.DataEquipSetAttrManager [Client]Game.DataEquipSetAttrManager Game.DataEquipSetAttrManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataEquipSetAttr> [Client]System.Collections.Generic.List`1<Game.DataEquipSetAttr> Game.DataEquipSetAttrManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataEquipSetAttrManager::Count -> dropped
}

[Client]Game.DataBoostLevel -> [Client]I.q
{
	[Client]Game.DataBoostLevel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataBoostLevel::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataBoostLevel::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataBoostLevel::get_ImprintLv[0]( ) -> A
	[Client]Game.DataBoostLevel::set_ImprintLv[1]( System.Int32 ) -> A
	[Client]Game.DataBoostLevel::get_ImprintScore[0]( ) -> a
	[Client]Game.DataBoostLevel::set_ImprintScore[1]( System.Int32 ) -> a

	[Client]Game.DataBoostLevel::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataBoostLevel::<ImprintLv>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataBoostLevel::<ImprintScore>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataBoostLevel::ImprintLv -> dropped
	System.Int32 [Client]System.Int32 Game.DataBoostLevel::ImprintScore -> dropped
}

[Client]Game.DataBoostLevelManager -> [Client]I.R
{
	[Client]Game.DataBoostLevelManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataBoostLevelManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataBoostLevelManager::Clear[0]( ) -> A
	[Client]Game.DataBoostLevelManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataBoostLevelManager::GetDataByImprintLv[1]( System.Int32 ) -> A
	[Client]Game.DataBoostLevelManager::GetDataListByImprintLv[1]( System.Int32 ) -> a
	[Client]Game.DataBoostLevelManager::GetDataByImprintScore[1]( System.Int32 ) -> B
	[Client]Game.DataBoostLevelManager::GetDataListByImprintScore[1]( System.Int32 ) -> b
	[Client]Game.DataBoostLevelManager::get_Instance[0]( ) -> a
	[Client]Game.DataBoostLevelManager::get_DataList[0]( ) -> B
	[Client]Game.DataBoostLevelManager::get_Count[0]( ) -> b

	[Client]Game.DataBoostLevelManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataBoostLevelManager::.ctor[0]( ) skipped:  special name

	Game.DataBoostLevelManager [Client]Game.DataBoostLevelManager Game.DataBoostLevelManager::instance -> A
	System.Collections.Generic.List`1<Game.DataBoostLevel> [Client]System.Collections.Generic.List`1<Game.DataBoostLevel> Game.DataBoostLevelManager::dataList -> A

	Game.DataBoostLevelManager [Client]Game.DataBoostLevelManager Game.DataBoostLevelManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataBoostLevel> [Client]System.Collections.Generic.List`1<Game.DataBoostLevel> Game.DataBoostLevelManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataBoostLevelManager::Count -> dropped
}

[Client]Game.CameraShakeManager -> [Client]I.r
{
	[Client]Game.CameraShakeManager::get_Instance[0]( ) -> A
	[Client]Game.CameraShakeManager::StartNewShake[2]( Game.CameraShakeData, UnityEngine.Vector3 ) -> A
	[Client]Game.CameraShakeManager::GetOffset[0]( ) -> a

	[Client]Game.CameraShakeManager::.ctor[0]( ) skipped:  special name
	[Client]Game.CameraShakeManager::.cctor[0]( ) skipped:  special name

	Game.CameraShakeData [Client]Game.CameraShakeData Game.CameraShakeManager::m_Data -> A
	System.Single [Client]System.Single Game.CameraShakeManager::m_StartTime -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.CameraShakeManager::m_StartPos -> A
	Game.CameraShakeManager [Client]Game.CameraShakeManager Game.CameraShakeManager::m_Instance -> A

	Game.CameraShakeManager [Client]Game.CameraShakeManager Game.CameraShakeManager::Instance -> dropped
}

[Client]Game.Msg.MsgMonsterAttackCity -> [Client]I.S
{

	[Client]Game.Msg.MsgMonsterAttackCity::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgMonsterAttackCity::BaseType -> A
}

[Client]Game.Msg.MsgClientReqMonsterAttackCityData -> [Client]I.s
{

	[Client]Game.Msg.MsgClientReqMonsterAttackCityData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqMonsterAttackCityData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqMonsterAttackCityData::Type -> A
}

[Client]Game.Msg.MsgServerAckMonsterAttackCityData -> [Client]I.T
{
	[Client]Game.Msg.MsgServerAckMonsterAttackCityData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckMonsterAttackCityData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckMonsterAttackCityData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMonsterAttackCityData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckMonsterAttackCityData::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckMonsterAttackCityData::m_uiValue -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMonsterAttackCityData::m_btEnterTimes -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMonsterAttackCityData::m_btTotalTimes -> B
}

[Client]Game.Msg.MsgClientReqMonsterAttackCityRankList -> [Client]I.t
{

	[Client]Game.Msg.MsgClientReqMonsterAttackCityRankList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqMonsterAttackCityRankList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqMonsterAttackCityRankList::Type -> A
}

[Client]Game.Msg.MsgServerAckMonsterAttackCityRankList -> [Client]I.U
{
	[Client]Game.Msg.MsgServerAckMonsterAttackCityRankList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckMonsterAttackCityRankList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckMonsterAttackCityRankList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMonsterAttackCityRankList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckMonsterAttackCityRankList::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMonsterAttackCityRankList::m_btRank -> a
	System.Collections.Generic.List`1<Game.Msg.MonsterAttackCityData> [Client]System.Collections.Generic.List`1<Game.Msg.MonsterAttackCityData> Game.Msg.MsgServerAckMonsterAttackCityRankList::m_oVecRankList -> A
}

[Client]Game.Msg.MsgClientReqMonsterAttackCityAward -> [Client]I.u
{

	[Client]Game.Msg.MsgClientReqMonsterAttackCityAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqMonsterAttackCityAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqMonsterAttackCityAward::Type -> A
}

[Client]Game.Msg.MsgServerAckMonsterAttackCityAward -> [Client]I.V
{
	[Client]Game.Msg.MsgServerAckMonsterAttackCityAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckMonsterAttackCityAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckMonsterAttackCityAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMonsterAttackCityAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckMonsterAttackCityAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMonsterAttackCityAward::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientReqBuyMonsterAttackCityTimes -> [Client]I.v
{

	[Client]Game.Msg.MsgClientReqBuyMonsterAttackCityTimes::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBuyMonsterAttackCityTimes::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqBuyMonsterAttackCityTimes::Type -> A
}

[Client]Game.Msg.MsgServerAckBuyMonsterAttackCityTimes -> [Client]I.W
{
	[Client]Game.Msg.MsgServerAckBuyMonsterAttackCityTimes::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckBuyMonsterAttackCityTimes::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckBuyMonsterAttackCityTimes::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBuyMonsterAttackCityTimes::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckBuyMonsterAttackCityTimes::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBuyMonsterAttackCityTimes::m_ebtResult -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBuyMonsterAttackCityTimes::m_btEnterTimes -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBuyMonsterAttackCityTimes::m_btTotalTimes -> b
}

[Client]Game.Msg.MsgClientReqEnterMonsterAttackCity -> [Client]I.w
{

	[Client]Game.Msg.MsgClientReqEnterMonsterAttackCity::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqEnterMonsterAttackCity::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqEnterMonsterAttackCity::Type -> A
}

[Client]Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData -> [Client]I.X
{
	[Client]Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData::m_uiRankFirstValue -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData::m_uiWeekValue -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData::m_uiDayValue -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyMonsterAttackCityEctypeData::m_btRank -> a
}

[Client]Game.Msg.MsgClientReqMonsterAttackCityBuf -> [Client]I.x
{

	[Client]Game.Msg.MsgClientReqMonsterAttackCityBuf::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqMonsterAttackCityBuf::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqMonsterAttackCityBuf::Type -> A
}

[Client]Game.Msg.MsgServerAckMonsterAttackCityBuf -> [Client]I.Y
{
	[Client]Game.Msg.MsgServerAckMonsterAttackCityBuf::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckMonsterAttackCityBuf::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckMonsterAttackCityBuf::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMonsterAttackCityBuf::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckMonsterAttackCityBuf::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMonsterAttackCityBuf::m_ebtResult -> a
}

[Client]Game.DataMonsterDistribution -> [Client]I.y
{
	[Client]Game.DataMonsterDistribution::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMonsterDistribution::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMonsterDistribution::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMonsterDistribution::get_MonsterID[0]( ) -> A
	[Client]Game.DataMonsterDistribution::set_MonsterID[1]( System.Int32 ) -> A
	[Client]Game.DataMonsterDistribution::get_MonsterName[0]( ) -> a
	[Client]Game.DataMonsterDistribution::set_MonsterName[1]( System.String ) -> A
	[Client]Game.DataMonsterDistribution::get_MapId[0]( ) -> B
	[Client]Game.DataMonsterDistribution::set_MapId[1]( System.Int32 ) -> a
	[Client]Game.DataMonsterDistribution::get_MapX[0]( ) -> b
	[Client]Game.DataMonsterDistribution::set_MapX[1]( System.Single ) -> A
	[Client]Game.DataMonsterDistribution::get_MapY[0]( ) -> C
	[Client]Game.DataMonsterDistribution::set_MapY[1]( System.Single ) -> a
	[Client]Game.DataMonsterDistribution::get_ZoneLengthX[0]( ) -> c
	[Client]Game.DataMonsterDistribution::set_ZoneLengthX[1]( System.Single ) -> B
	[Client]Game.DataMonsterDistribution::get_ZoneLengthY[0]( ) -> D
	[Client]Game.DataMonsterDistribution::set_ZoneLengthY[1]( System.Single ) -> b
	[Client]Game.DataMonsterDistribution::get_Amount[0]( ) -> d
	[Client]Game.DataMonsterDistribution::set_Amount[1]( System.Int32 ) -> B
	[Client]Game.DataMonsterDistribution::get_IsBoss[0]( ) -> E
	[Client]Game.DataMonsterDistribution::set_IsBoss[1]( System.Boolean ) -> A
	[Client]Game.DataMonsterDistribution::get_IsTrigger[0]( ) -> e
	[Client]Game.DataMonsterDistribution::set_IsTrigger[1]( System.Boolean ) -> a

	[Client]Game.DataMonsterDistribution::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataMonsterDistribution::<MonsterID>k__BackingField -> A
	System.String [Client]System.String Game.DataMonsterDistribution::<MonsterName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataMonsterDistribution::<MapId>k__BackingField -> a
	System.Single [Client]System.Single Game.DataMonsterDistribution::<MapX>k__BackingField -> A
	System.Single [Client]System.Single Game.DataMonsterDistribution::<MapY>k__BackingField -> a
	System.Single [Client]System.Single Game.DataMonsterDistribution::<ZoneLengthX>k__BackingField -> B
	System.Single [Client]System.Single Game.DataMonsterDistribution::<ZoneLengthY>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataMonsterDistribution::<Amount>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.DataMonsterDistribution::<IsBoss>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DataMonsterDistribution::<IsTrigger>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataMonsterDistribution::MonsterID -> dropped
	System.String [Client]System.String Game.DataMonsterDistribution::MonsterName -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonsterDistribution::MapId -> dropped
	System.Single [Client]System.Single Game.DataMonsterDistribution::MapX -> dropped
	System.Single [Client]System.Single Game.DataMonsterDistribution::MapY -> dropped
	System.Single [Client]System.Single Game.DataMonsterDistribution::ZoneLengthX -> dropped
	System.Single [Client]System.Single Game.DataMonsterDistribution::ZoneLengthY -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonsterDistribution::Amount -> dropped
	System.Boolean [Client]System.Boolean Game.DataMonsterDistribution::IsBoss -> dropped
	System.Boolean [Client]System.Boolean Game.DataMonsterDistribution::IsTrigger -> dropped
}

[Client]Game.DataMonsterDistributionManager -> [Client]I.Z
{
	[Client]Game.DataMonsterDistributionManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataMonsterDistributionManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataMonsterDistributionManager::Clear[0]( ) -> A
	[Client]Game.DataMonsterDistributionManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataMonsterDistributionManager::GetDataByMonsterID[1]( System.Int32 ) -> A
	[Client]Game.DataMonsterDistributionManager::GetDataListByMonsterID[1]( System.Int32 ) -> a
	[Client]Game.DataMonsterDistributionManager::GetDataByMonsterName[1]( System.String ) -> A
	[Client]Game.DataMonsterDistributionManager::GetDataListByMonsterName[1]( System.String ) -> a
	[Client]Game.DataMonsterDistributionManager::GetDataByMapId[1]( System.Int32 ) -> B
	[Client]Game.DataMonsterDistributionManager::GetDataListByMapId[1]( System.Int32 ) -> b
	[Client]Game.DataMonsterDistributionManager::GetDataByMapX[1]( System.Single ) -> A
	[Client]Game.DataMonsterDistributionManager::GetDataListByMapX[1]( System.Single ) -> a
	[Client]Game.DataMonsterDistributionManager::GetDataByMapY[1]( System.Single ) -> B
	[Client]Game.DataMonsterDistributionManager::GetDataListByMapY[1]( System.Single ) -> b
	[Client]Game.DataMonsterDistributionManager::GetDataByZoneLengthX[1]( System.Single ) -> C
	[Client]Game.DataMonsterDistributionManager::GetDataListByZoneLengthX[1]( System.Single ) -> c
	[Client]Game.DataMonsterDistributionManager::GetDataByZoneLengthY[1]( System.Single ) -> D
	[Client]Game.DataMonsterDistributionManager::GetDataListByZoneLengthY[1]( System.Single ) -> d
	[Client]Game.DataMonsterDistributionManager::GetDataByAmount[1]( System.Int32 ) -> C
	[Client]Game.DataMonsterDistributionManager::GetDataListByAmount[1]( System.Int32 ) -> c
	[Client]Game.DataMonsterDistributionManager::GetDataByIsBoss[1]( System.Boolean ) -> A
	[Client]Game.DataMonsterDistributionManager::GetDataListByIsBoss[1]( System.Boolean ) -> a
	[Client]Game.DataMonsterDistributionManager::GetDataByIsTrigger[1]( System.Boolean ) -> B
	[Client]Game.DataMonsterDistributionManager::GetDataListByIsTrigger[1]( System.Boolean ) -> b
	[Client]Game.DataMonsterDistributionManager::get_Instance[0]( ) -> a
	[Client]Game.DataMonsterDistributionManager::get_DataList[0]( ) -> B
	[Client]Game.DataMonsterDistributionManager::get_Count[0]( ) -> b

	[Client]Game.DataMonsterDistributionManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataMonsterDistributionManager::.ctor[0]( ) skipped:  special name

	Game.DataMonsterDistributionManager [Client]Game.DataMonsterDistributionManager Game.DataMonsterDistributionManager::instance -> A
	System.Collections.Generic.List`1<Game.DataMonsterDistribution> [Client]System.Collections.Generic.List`1<Game.DataMonsterDistribution> Game.DataMonsterDistributionManager::dataList -> A

	Game.DataMonsterDistributionManager [Client]Game.DataMonsterDistributionManager Game.DataMonsterDistributionManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataMonsterDistribution> [Client]System.Collections.Generic.List`1<Game.DataMonsterDistribution> Game.DataMonsterDistributionManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataMonsterDistributionManager::Count -> dropped
}

[Client]Game.AnimationManager -> [Client]I.z
{
	[Client]Game.AnimationManager::get_SkillActionTargetPos[0]( ) -> A
	[Client]Game.AnimationManager::set_SkillActionTargetPos[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.AnimationManager::get_SkillActionTargetId[0]( ) -> a
	[Client]Game.AnimationManager::set_SkillActionTargetId[1]( System.UInt32 ) -> A
	[Client]Game.AnimationManager::get_SkillAction[0]( ) -> B
	[Client]Game.AnimationManager::set_SkillAction[1]( System.String ) -> A
	[Client]Game.AnimationManager::Release[0]( ) -> b
	[Client]Game.AnimationManager::Reset[0]( ) -> C
	[Client]Game.AnimationManager::SetAnimation[1]( Game.Character ) -> A
	[Client]Game.AnimationManager::GetAttackAnimationParam[1]( System.String ) -> a
	[Client]Game.AnimationManager::GetHitPoint[1]( System.String ) -> B
	[Client]Game.AnimationManager::GetStartAttackPoint[1]( System.String ) -> b
	[Client]Game.AnimationManager::GetEndAttackPoint[1]( System.String ) -> C
	[Client]Game.AnimationManager::SetAnimationSpeed[2]( Game.AnimationManager/AnimationType, System.Single ) -> A
	[Client]Game.AnimationManager::SetAnimationSpeed[2]( System.String, System.Single ) -> A
	[Client]Game.AnimationManager::IsPlaying[1]( Game.AnimationManager/AnimationType ) -> A
	[Client]Game.AnimationManager::IsPlaying[1]( System.String ) -> c
	[Client]Game.AnimationManager::PlayAnimation[1]( System.String ) -> D
	[Client]Game.AnimationManager::PlayAnimation[3]( Game.AnimationManager/AnimationType, Game.AnimationManager/AnimationPriority, UnityEngine.WrapMode ) -> A
	[Client]Game.AnimationManager::PlayAnimation[4]( Game.AnimationManager/AnimationType, Game.AnimationManager/AnimationPriority, UnityEngine.WrapMode, System.Boolean ) -> A
	[Client]Game.AnimationManager::PlayAnimation[5]( Game.AnimationManager/AnimationType, Game.AnimationManager/AnimationPriority, UnityEngine.WrapMode, System.Boolean, System.Single ) -> A
	[Client]Game.AnimationManager::PlayAnimation[6]( Game.AnimationManager/AnimationType, Game.AnimationManager/AnimationPriority, UnityEngine.WrapMode, System.Boolean, System.Single, System.Single ) -> A
	[Client]Game.AnimationManager::PlayAnimation[4]( System.String, Game.AnimationManager/AnimationPriority, UnityEngine.WrapMode, System.Boolean ) -> A
	[Client]Game.AnimationManager::PlayAnimation[5]( System.String, Game.AnimationManager/AnimationPriority, UnityEngine.WrapMode, System.Boolean, System.Single ) -> A
	[Client]Game.AnimationManager::PlayAnimationWithoutBlend[7]( System.String, Game.AnimationManager/AnimationPriority, UnityEngine.WrapMode, System.Boolean, System.Single, System.Single, System.Single ) -> A
	[Client]Game.AnimationManager::PlayAnimation[6]( System.String, Game.AnimationManager/AnimationPriority, UnityEngine.WrapMode, System.Boolean, System.Single, System.Single ) -> A
	[Client]Game.AnimationManager::NeedUpperAnimation[0]( ) -> c
	[Client]Game.AnimationManager::StopAnimation[0]( ) -> D
	[Client]Game.AnimationManager::StopAnimation[1]( Game.AnimationManager/AnimationType ) -> a
	[Client]Game.AnimationManager::StopTrails[0]( ) -> d
	[Client]Game.AnimationManager::StopAnimation[1]( System.String ) -> d
	[Client]Game.AnimationManager::Update[0]( ) -> E
	[Client]Game.AnimationManager::UpdateTrail[0]( ) -> e
	[Client]Game.AnimationManager::UpdateAnimationEffect[0]( ) -> F
	[Client]Game.AnimationManager::GetAnimation[1]( Game.AnimationManager/AnimationType ) -> B
	[Client]Game.AnimationManager::GetWeaponAnimation[1]( System.String ) -> E
	[Client]Game.AnimationManager::GetAnimationTime[1]( System.String ) -> e
	[Client]Game.AnimationManager::SetWeaponAnimation[1]( UnityEngine.Animation ) -> A

	[Client]Game.AnimationManager::.ctor[0]( ) skipped:  special name
	[Client]Game.AnimationManager::.cctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.AnimationManager::UpperActionName -> A
	System.Single [Client]System.Single Game.AnimationManager::CrossFadeTime -> A
	System.String [Client]System.String Game.AnimationManager::UpperBodyBone -> a
	System.Single [Client]System.Single Game.AnimationManager::FadeTime -> a
	System.Single [Client]System.Single Game.AnimationManager::m_AnimationIncrement -> B
	log4net.ILog [Client]log4net.ILog Game.AnimationManager::m_Log -> A
	System.String[] [Client]System.String[] Game.AnimationManager::WeaponActionNames -> A
	Game.Character [Client]Game.Character Game.AnimationManager::m_Character -> A
	UnityEngine.Animation [Client]UnityEngine.Animation Game.AnimationManager::m_Animation -> A
	UnityEngine.Animation [Client]UnityEngine.Animation Game.AnimationManager::m_WeaponAnimation -> a
	System.String [Client]System.String Game.AnimationManager::m_UpperActionOriginName -> B
	System.Boolean [Client]System.Boolean Game.AnimationManager::m_UpperPlaying -> A
	WeaponTrail[] [Client]WeaponTrail[] Game.AnimationManager::m_Trails -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.AnimationManager::m_LastEulerAngles -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.AnimationManager::m_LastPosition -> a
	System.Single [Client]System.Single Game.AnimationManager::m_ActionWeight -> b
	System.Single [Client]System.Single Game.AnimationManager::m_ActionTime -> C
	System.String [Client]System.String Game.AnimationManager::m_CurTrailActionName -> b
	System.Single [Client]System.Single Game.AnimationManager::m_TempT -> c
	System.Single [Client]System.Single Game.AnimationManager::m_StartTime -> D
	System.Boolean [Client]System.Boolean Game.AnimationManager::m_StartTrail -> a
	System.Boolean [Client]System.Boolean Game.AnimationManager::m_EndTrail -> B
	System.Boolean [Client]System.Boolean Game.AnimationManager::m_FadeTrail -> b
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.AnimationManager::<SkillActionTargetPos>k__BackingField -> B
	System.UInt32 [Client]System.UInt32 Game.AnimationManager::<SkillActionTargetId>k__BackingField -> A
	System.String [Client]System.String Game.AnimationManager::<SkillAction>k__BackingField -> C

	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.AnimationManager::SkillActionTargetPos -> dropped
	System.UInt32 [Client]System.UInt32 Game.AnimationManager::SkillActionTargetId -> dropped
	System.String [Client]System.String Game.AnimationManager::SkillAction -> dropped
}

[Client]Game.AnimationManager/AnimationType -> [Client]I.z/A
{
	Game.AnimationManager/AnimationType [Client]Game.AnimationManager/AnimationType Game.AnimationManager/AnimationType::Idle -> A
	Game.AnimationManager/AnimationType [Client]Game.AnimationManager/AnimationType Game.AnimationManager/AnimationType::SpecialIdle -> a
	Game.AnimationManager/AnimationType [Client]Game.AnimationManager/AnimationType Game.AnimationManager/AnimationType::Run -> B
	Game.AnimationManager/AnimationType [Client]Game.AnimationManager/AnimationType Game.AnimationManager/AnimationType::Jump -> b
	Game.AnimationManager/AnimationType [Client]Game.AnimationManager/AnimationType Game.AnimationManager/AnimationType::Dead -> C
	Game.AnimationManager/AnimationType [Client]Game.AnimationManager/AnimationType Game.AnimationManager/AnimationType::Born -> c
	Game.AnimationManager/AnimationType [Client]Game.AnimationManager/AnimationType Game.AnimationManager/AnimationType::CreateIdle -> D
	Game.AnimationManager/AnimationType [Client]Game.AnimationManager/AnimationType Game.AnimationManager/AnimationType::CreateShow -> d

	System.Int32 [Client]System.Int32 Game.AnimationManager/AnimationType::value__ skipped:  filtered
}

[Client]Game.AnimationManager/AnimationPriority -> [Client]I.z/a
{
	Game.AnimationManager/AnimationPriority [Client]Game.AnimationManager/AnimationPriority Game.AnimationManager/AnimationPriority::Lowest -> A
	Game.AnimationManager/AnimationPriority [Client]Game.AnimationManager/AnimationPriority Game.AnimationManager/AnimationPriority::Low -> a
	Game.AnimationManager/AnimationPriority [Client]Game.AnimationManager/AnimationPriority Game.AnimationManager/AnimationPriority::Normal -> B
	Game.AnimationManager/AnimationPriority [Client]Game.AnimationManager/AnimationPriority Game.AnimationManager/AnimationPriority::High -> b
	Game.AnimationManager/AnimationPriority [Client]Game.AnimationManager/AnimationPriority Game.AnimationManager/AnimationPriority::Higher -> C
	Game.AnimationManager/AnimationPriority [Client]Game.AnimationManager/AnimationPriority Game.AnimationManager/AnimationPriority::Highest -> c

	System.Int32 [Client]System.Int32 Game.AnimationManager/AnimationPriority::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory -> [Client]i.b
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::MakeFileEntry[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::MakeFileEntry[2]( System.String, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::MakeDirectoryEntry[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::MakeDirectoryEntry[2]( System.String, System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::get_NameTransform[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::set_NameTransform[1]( ICSharpCode.SharpZipLib.Core.INameTransform ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::get_Setting[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::set_Setting[1]( ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::get_FixedDateTime[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::set_FixedDateTime[1]( System.DateTime ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::get_GetAttributes[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::set_GetAttributes[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::get_SetAttributes[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::set_SetAttributes[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::get_IsUnicodeText[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::set_IsUnicodeText[1]( System.Boolean ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::.ctor[1]( ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::.ctor[1]( System.DateTime ) skipped:  special name

	ICSharpCode.SharpZipLib.Core.INameTransform [Client]ICSharpCode.SharpZipLib.Core.INameTransform ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::nameTransform_ -> A
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::fixedDateTime_ -> A
	ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting [Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::timeSetting_ -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::isUnicodeText_ -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::getAttributes_ -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::setAttributes_ -> a

	ICSharpCode.SharpZipLib.Core.INameTransform [Client]ICSharpCode.SharpZipLib.Core.INameTransform ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::NameTransform -> dropped
	ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting [Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::Setting -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::FixedDateTime -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::GetAttributes -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::SetAttributes -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.ZipEntryFactory::IsUnicodeText -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting -> [Client]i.b/C
{
	ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting [Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting::LastWriteTime -> A
	ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting [Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting::LastWriteTimeUtc -> a
	ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting [Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting::CreateTime -> B
	ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting [Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting::CreateTimeUtc -> b
	ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting [Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting::LastAccessTime -> C
	ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting [Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting::LastAccessTimeUtc -> c
	ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting [Client]ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting::Fixed -> D

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipEntryFactory/TimeSetting::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer -> [Client]i.c
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::get_RawLength[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::get_RawData[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::get_ClearTextLength[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::get_ClearText[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::get_Available[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::set_Available[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::SetInflaterInput[1]( ICSharpCode.SharpZipLib.Zip.Compression.Inflater ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::Fill[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::ReadRawBuffer[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::ReadRawBuffer[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::ReadClearTextBuffer[3]( System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::ReadLeByte[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::ReadLeShort[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::ReadLeInt[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::ReadLeLong[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::set_CryptoTransform[1]( System.Security.Cryptography.ICryptoTransform ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::.ctor[2]( System.IO.Stream, System.Int32 ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::rawLength -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::rawData -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::clearTextLength -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::clearText -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::internalClearText -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::available -> B
	System.Security.Cryptography.ICryptoTransform [Client]System.Security.Cryptography.ICryptoTransform ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::cryptoTransform -> A
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::inputStream -> A

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::RawLength -> dropped
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::RawData -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::ClearTextLength -> dropped
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::ClearText -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::Available -> dropped
	System.Security.Cryptography.ICryptoTransform [Client]System.Security.Cryptography.ICryptoTransform ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer::CryptoTransform -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader -> [Client]i.D
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::Decode[1]( ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::BuildLitLenTree[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::BuildDistTree[0]( ) -> a

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::LNUM -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::DNUM -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::BLNUM -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::BLLENS -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::LENS -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::REPS -> c
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::repMin -> A
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::repBits -> a
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::BL_ORDER -> B
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::blLens -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::litdistLens -> a
	ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree [Client]ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::blTree -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::mode -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::lnum -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::dnum -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::blnum -> e
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::num -> F
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::repSymbol -> f
	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::lastLen -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.InflaterDynHeader::ptr -> G
}

[Client]Game.Msg.MsgMonsterExpedition -> [Client]i.d
{

	[Client]Game.Msg.MsgMonsterExpedition::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgMonsterExpedition::BaseType -> A
}

[Client]Game.Msg.MsgClientReqExpeditionInfo -> [Client]i.E
{
	[Client]Game.Msg.MsgClientReqExpeditionInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckExpeditionInfo -> [Client]i.e
{
	[Client]Game.Msg.MsgServerAckExpeditionInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionInfo::Type -> A
	Game.Msg.ExpeditionData [Client]Game.Msg.ExpeditionData Game.Msg.MsgServerAckExpeditionInfo::m_stExpeditionData -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckExpeditionInfo::m_uiCurTime -> A
}

[Client]Game.Msg.MsgClientReqExpeditionTaskRefresh -> [Client]i.F
{
	[Client]Game.Msg.MsgClientReqExpeditionTaskRefresh::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionTaskRefresh::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionTaskRefresh::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionTaskRefresh::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionTaskRefresh::Type -> A
}

[Client]Game.Msg.MsgServerAckExpeditionTaskRefresh -> [Client]i.f
{
	[Client]Game.Msg.MsgServerAckExpeditionTaskRefresh::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionTaskRefresh::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionTaskRefresh::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionTaskRefresh::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionTaskRefresh::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionTaskRefresh::m_ebtResult -> a
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.Msg.MsgServerAckExpeditionTaskRefresh::m_oVecTaskList -> A
}

[Client]Game.Msg.MsgClientReqExpeditionMonsterEvolution -> [Client]i.G
{
	[Client]Game.Msg.MsgClientReqExpeditionMonsterEvolution::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionMonsterEvolution::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionMonsterEvolution::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterEvolution::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionMonsterEvolution::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterEvolution::m_ebtEvolutionType -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterEvolution::m_ebtPositionType -> B
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqExpeditionMonsterEvolution::m_ulMasterGUID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqExpeditionMonsterEvolution::m_ulSlaveGUID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterEvolution::m_btShipId -> b
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterEvolution::m_btMasterCabinId -> C
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterEvolution::m_btSkillSlot -> c
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientReqExpeditionMonsterEvolution::m_bSpendMoney -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterEvolution::m_ebtSpendMoneyType -> D
}

[Client]Game.Msg.MsgServerAckExpeditionMonsterEvolution -> [Client]i.g
{
	[Client]Game.Msg.MsgServerAckExpeditionMonsterEvolution::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionMonsterEvolution::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionMonsterEvolution::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionMonsterEvolution::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionMonsterEvolution::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckExpeditionMonsterEvolution::m_bResult -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionMonsterEvolution::m_ebtEvolutionType -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionMonsterEvolution::m_ebtPositionType -> B
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerAckExpeditionMonsterEvolution::m_ulMasterGUID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerAckExpeditionMonsterEvolution::m_ulSlaveGUID -> a
	Game.Msg.ExpeditionMonsterData [Client]Game.Msg.ExpeditionMonsterData Game.Msg.MsgServerAckExpeditionMonsterEvolution::m_stEvoMonster -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionMonsterEvolution::m_btShipId -> b
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionMonsterEvolution::m_btCabinId -> C
}

[Client]Game.Msg.MsgClientReqExpeditionBoarding -> [Client]i.H
{
	[Client]Game.Msg.MsgClientReqExpeditionBoarding::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionBoarding::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionBoarding::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionBoarding::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionBoarding::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionBoarding::m_ebtType -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqExpeditionBoarding::m_ulGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionBoarding::m_btShipId -> B
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionBoarding::m_btCabinId -> b
}

[Client]Game.Msg.MsgServerAckExpeditionBoarding -> [Client]i.h
{
	[Client]Game.Msg.MsgServerAckExpeditionBoarding::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionBoarding::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionBoarding::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionBoarding::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionBoarding::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionBoarding::m_ebtResult -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionBoarding::m_ebtType -> B
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerAckExpeditionBoarding::m_ulGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionBoarding::m_btShipId -> b
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionBoarding::m_btCabinId -> C
}

[Client]Game.Msg.MsgClientReqExpeditionExploreReward -> [Client]i.I
{
	[Client]Game.Msg.MsgClientReqExpeditionExploreReward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionExploreReward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionExploreReward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionExploreReward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionExploreReward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionExploreReward::m_btShipId -> a
}

[Client]Game.Msg.MsgServerNotifyExpeditionRewardInfo -> [Client]i.i
{
	[Client]Game.Msg.MsgServerNotifyExpeditionRewardInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionRewardInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionRewardInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionRewardInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionRewardInfo::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ExpeditionClientRewardData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionClientRewardData> Game.Msg.MsgServerNotifyExpeditionRewardInfo::m_oVecRewardList -> A
}

[Client]Game.Msg.MsgClientReqExpeditionTaskBegin -> [Client]i.J
{
	[Client]Game.Msg.MsgClientReqExpeditionTaskBegin::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionTaskBegin::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionTaskBegin::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionTaskBegin::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionTaskBegin::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionTaskBegin::m_ebtTaskType -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionTaskBegin::m_ebtExploreType -> B
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionTaskBegin::m_btShipId -> b
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionTaskBegin::m_usTaskId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionTaskBegin::m_btAreaId -> C
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionTaskBegin::m_btBlockId -> c
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionTaskBegin::m_btDefiniteTime -> D
}

[Client]Game.Msg.MsgServerAckExpeditionTaskBegin -> [Client]i.j
{
	[Client]Game.Msg.MsgServerAckExpeditionTaskBegin::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionTaskBegin::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionTaskBegin::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionTaskBegin::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionTaskBegin::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionTaskBegin::m_ebtResult -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionTaskBegin::m_btShipId -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionTaskBegin::m_usTaskId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionTaskBegin::m_btAreaId -> b
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionTaskBegin::m_btBlockId -> C
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckExpeditionTaskBegin::m_uiWorkStartTime -> A
}

[Client]Game.Msg.MsgServerNotifyExpeditionRandomEvent -> [Client]i.K
{
	[Client]Game.Msg.MsgServerNotifyExpeditionRandomEvent::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionRandomEvent::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionRandomEvent::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionRandomEvent::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionRandomEvent::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionRandomEvent::m_ebtType -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionRandomEvent::m_usID -> a
}

[Client]Game.Msg.MsgServerNotifyExpeditionLevelUp -> [Client]i.k
{
	[Client]Game.Msg.MsgServerNotifyExpeditionLevelUp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionLevelUp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionLevelUp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionLevelUp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionLevelUp::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionLevelUp::m_btLevel -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyExpeditionLevelUp::m_uiCurExp -> A
}

[Client]Game.Msg.MsgServerNotifyExpeditionMonsterLevelUp -> [Client]i.L
{
	[Client]Game.Msg.MsgServerNotifyExpeditionMonsterLevelUp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionMonsterLevelUp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionMonsterLevelUp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionMonsterLevelUp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionMonsterLevelUp::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerNotifyExpeditionMonsterLevelUp::m_ulGUID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionMonsterLevelUp::m_usLevel -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyExpeditionMonsterLevelUp::m_uiCurExp -> A
}

[Client]Game.Msg.MsgClientReqExpeditionExchangePosition -> [Client]i.l
{
	[Client]Game.Msg.MsgClientReqExpeditionExchangePosition::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionExchangePosition::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionExchangePosition::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionExchangePosition::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionExchangePosition::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionExchangePosition::m_ebtType -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqExpeditionExchangePosition::m_ulGUID1 -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqExpeditionExchangePosition::m_ulGUID2 -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionExchangePosition::m_btShipId -> B
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionExchangePosition::m_btCabinId1 -> b
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionExchangePosition::m_btCabinId2 -> C
}

[Client]Game.Msg.MsgServerAckExpeditionExchangePosition -> [Client]i.M
{
	[Client]Game.Msg.MsgServerAckExpeditionExchangePosition::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionExchangePosition::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionExchangePosition::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionExchangePosition::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionExchangePosition::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionExchangePosition::m_ebtType -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerAckExpeditionExchangePosition::m_ulGUID1 -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerAckExpeditionExchangePosition::m_ulGUID2 -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionExchangePosition::m_btShipId -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionExchangePosition::m_btCabinId1 -> b
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionExchangePosition::m_btCabinId2 -> C
}

[Client]Game.Msg.MsgServerNotifyExpeditionAddMonster -> [Client]i.m
{
	[Client]Game.Msg.MsgServerNotifyExpeditionAddMonster::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionAddMonster::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionAddMonster::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionAddMonster::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionAddMonster::Type -> A
	Game.Msg.ExpeditionMonsterData [Client]Game.Msg.ExpeditionMonsterData Game.Msg.MsgServerNotifyExpeditionAddMonster::m_stMonster -> A
}

[Client]Game.Msg.MsgServerNotifyExpeditionDelMonster -> [Client]i.N
{
	[Client]Game.Msg.MsgServerNotifyExpeditionDelMonster::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionDelMonster::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionDelMonster::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionDelMonster::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionDelMonster::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionDelMonster::m_ebtResult -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerNotifyExpeditionDelMonster::m_ulGUID -> A
}

[Client]Game.Msg.MsgServerNotifyExpeditionTaskComplete -> [Client]i.n
{
	[Client]Game.Msg.MsgServerNotifyExpeditionTaskComplete::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionTaskComplete::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionTaskComplete::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionTaskComplete::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionTaskComplete::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionTaskComplete::m_btShipId -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionTaskComplete::m_usTaskId -> a
}

[Client]Game.Msg.MsgServerNotifyExpeditionAddExp -> [Client]i.O
{
	[Client]Game.Msg.MsgServerNotifyExpeditionAddExp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionAddExp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionAddExp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionAddExp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionAddExp::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyExpeditionAddExp::m_uiAddExp -> A
}

[Client]Game.Msg.MsgServerNotifyExpeditionMonsterAddExp -> [Client]i.o
{
	[Client]Game.Msg.MsgServerNotifyExpeditionMonsterAddExp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionMonsterAddExp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionMonsterAddExp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionMonsterAddExp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionMonsterAddExp::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerNotifyExpeditionMonsterAddExp::m_ulGUID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyExpeditionMonsterAddExp::m_uiAddExp -> A
}

[Client]Game.Msg.MsgServerNotifyExpeditionActionPointChange -> [Client]i.P
{
	[Client]Game.Msg.MsgServerNotifyExpeditionActionPointChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionActionPointChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionActionPointChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionActionPointChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionActionPointChange::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionActionPointChange::m_btCurActionPoint -> a
}

[Client]Game.Msg.MsgServerNotifyExpeditionAddOneShip -> [Client]i.p
{
	[Client]Game.Msg.MsgServerNotifyExpeditionAddOneShip::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionAddOneShip::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionAddOneShip::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionAddOneShip::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionAddOneShip::Type -> A
	Game.Msg.ExpeditionShipData [Client]Game.Msg.ExpeditionShipData Game.Msg.MsgServerNotifyExpeditionAddOneShip::m_stShip -> A
}

[Client]Game.Msg.MsgServerNotifyExpeditionAddOneCabin -> [Client]i.Q
{
	[Client]Game.Msg.MsgServerNotifyExpeditionAddOneCabin::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionAddOneCabin::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionAddOneCabin::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionAddOneCabin::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionAddOneCabin::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionAddOneCabin::m_btShipId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionAddOneCabin::m_btCabinId -> B
}

[Client]Game.Msg.MsgServerNotifyExpeditionShipToArea -> [Client]i.q
{
	[Client]Game.Msg.MsgServerNotifyExpeditionShipToArea::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionShipToArea::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionShipToArea::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionShipToArea::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionShipToArea::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionShipToArea::m_btShipId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionShipToArea::m_btAreaId -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionShipToArea::m_btBlockId -> b
}

[Client]Game.Msg.MsgServerNotifyExpeditionAreaIsExplored -> [Client]i.R
{
	[Client]Game.Msg.MsgServerNotifyExpeditionAreaIsExplored::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionAreaIsExplored::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionAreaIsExplored::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionAreaIsExplored::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionAreaIsExplored::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionAreaIsExplored::m_btAreaId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionAreaIsExplored::m_btAreaData -> B
}

[Client]Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty -> [Client]i.r
{
	[Client]Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty::m_btShipId -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty::m_usCombat -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty::m_usExplore -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionRefreshShipProperty::m_usWisdom -> b
}

[Client]Game.Msg.MsgClientReqExpeditionDeleteMonster -> [Client]i.S
{
	[Client]Game.Msg.MsgClientReqExpeditionDeleteMonster::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionDeleteMonster::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionDeleteMonster::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionDeleteMonster::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionDeleteMonster::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqExpeditionDeleteMonster::m_ulGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionDeleteMonster::m_ebtPosition -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionDeleteMonster::m_btShipId -> B
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionDeleteMonster::m_btCarbinId -> b
}

[Client]Game.Msg.MsgClientReqExpeditionLockMonster -> [Client]i.s
{
	[Client]Game.Msg.MsgClientReqExpeditionLockMonster::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionLockMonster::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionLockMonster::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionLockMonster::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionLockMonster::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqExpeditionLockMonster::m_ulGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionLockMonster::m_ebtPosition -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionLockMonster::m_ebtType -> B
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionLockMonster::m_btShipId -> b
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionLockMonster::m_btCarbinId -> C
}

[Client]Game.Msg.MsgServerAckExpeditionLockMonster -> [Client]i.T
{
	[Client]Game.Msg.MsgServerAckExpeditionLockMonster::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionLockMonster::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionLockMonster::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionLockMonster::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionLockMonster::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionLockMonster::m_ebtResult -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerAckExpeditionLockMonster::m_ulGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionLockMonster::m_ebtType -> B
}

[Client]Game.Msg.MsgServerNotifyExpeditionMonsterSkillList -> [Client]i.t
{
	[Client]Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::m_ulGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::m_ebtPosition -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::m_btShipId -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::m_btCarbinId -> b
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> Game.Msg.MsgServerNotifyExpeditionMonsterSkillList::m_oVecSkillList -> A
}

[Client]Game.Msg.MsgClientReqExpeditionEventAward -> [Client]i.U
{

	[Client]Game.Msg.MsgClientReqExpeditionEventAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionEventAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionEventAward::Type -> A
}

[Client]Game.Msg.MsgServerAckExpeditionEventAward -> [Client]i.u
{
	[Client]Game.Msg.MsgServerAckExpeditionEventAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionEventAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionEventAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionEventAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionEventAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionEventAward::m_ebtResult -> a
}

[Client]Game.Msg.MsgServerNotifyExpeditionShipDefiniteTime -> [Client]i.V
{
	[Client]Game.Msg.MsgServerNotifyExpeditionShipDefiniteTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionShipDefiniteTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionShipDefiniteTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionShipDefiniteTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionShipDefiniteTime::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionShipDefiniteTime::m_btShipId -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyExpeditionShipDefiniteTime::m_uiWorkStartTime -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionShipDefiniteTime::m_btDefiniteTime -> B
}

[Client]Game.Msg.MsgServerNotifyExpeditionButtonFlash -> [Client]i.v
{
	[Client]Game.Msg.MsgServerNotifyExpeditionButtonFlash::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionButtonFlash::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionButtonFlash::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionButtonFlash::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionButtonFlash::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionButtonFlash::m_ebtType -> a
	System.Collections.Generic.List`1<System.Byte> [Client]System.Collections.Generic.List`1<System.Byte> Game.Msg.MsgServerNotifyExpeditionButtonFlash::m_oVecShipList -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionButtonFlash::m_btRecruitNum -> B
}

[Client]Game.Msg.MsgClientReqShipProperty -> [Client]i.W
{
	[Client]Game.Msg.MsgClientReqShipProperty::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqShipProperty::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqShipProperty::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqShipProperty::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqShipProperty::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqShipProperty::m_btShipId -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqShipProperty::m_usTaskId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqShipProperty::m_btAreaId -> B
}

[Client]Game.Msg.MsgServerAckShipProperty -> [Client]i.w
{
	[Client]Game.Msg.MsgServerAckShipProperty::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckShipProperty::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckShipProperty::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckShipProperty::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckShipProperty::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckShipProperty::m_btShipId -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckShipProperty::m_usCombat -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckShipProperty::m_usExplore -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckShipProperty::m_usWisdom -> b
}

[Client]Game.Msg.MsgClientReqExpeditionTaskAward -> [Client]i.X
{

	[Client]Game.Msg.MsgClientReqExpeditionTaskAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionTaskAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionTaskAward::Type -> A
}

[Client]Game.Msg.MsgServerAckExpeditionTaskAward -> [Client]i.x
{
	[Client]Game.Msg.MsgServerAckExpeditionTaskAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionTaskAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionTaskAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionTaskAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionTaskAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionTaskAward::m_btShipId -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionTaskAward::m_usRemainTime -> a
}

[Client]Game.Msg.MsgServerNotifyExpeditionOpen -> [Client]i.Y
{
	[Client]Game.Msg.MsgServerNotifyExpeditionOpen::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyExpeditionOpen::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyExpeditionOpen::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionOpen::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyExpeditionOpen::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyExpeditionOpen::m_ebtOpenType -> a
}

[Client]Game.Msg.MsgClientReqExpeditionAddOneCabin -> [Client]i.y
{
	[Client]Game.Msg.MsgClientReqExpeditionAddOneCabin::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionAddOneCabin::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionAddOneCabin::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionAddOneCabin::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionAddOneCabin::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionAddOneCabin::m_btShipId -> a
}

[Client]Game.Msg.MsgClientReqExpeditionRecruitInfo -> [Client]i.Z
{
	[Client]Game.Msg.MsgClientReqExpeditionRecruitInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionRecruitInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionRecruitInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionRecruitInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionRecruitInfo::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionRecruitInfo::m_ebtType -> a
}

[Client]Game.Msg.MsgServerAckExpeditionRecruitInfo -> [Client]i.z
{
	[Client]Game.Msg.MsgServerAckExpeditionRecruitInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionRecruitInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionRecruitInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionRecruitInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionRecruitInfo::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionRecruitInfo::m_ebtType -> a
	System.Collections.Generic.List`1<Game.Msg.ExpeditionRecruitData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionRecruitData> Game.Msg.MsgServerAckExpeditionRecruitInfo::m_oVecRecuritList -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionRecruitInfo::m_btQuality3DiscountTimes -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionRecruitInfo::m_usQuality3RepeatCost -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionRecruitInfo::m_btQuality4DiscountTimes -> b
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionRecruitInfo::m_usQuality4RepeatCost -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionRecruitInfo::m_btQuality5DiscountTimes -> C
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionRecruitInfo::m_usQuality5RepeatCost -> b
}

[Client]Game.Msg.MsgClientReqExpeditionRecruit -> [Client]J.A
{
	[Client]Game.Msg.MsgClientReqExpeditionRecruit::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionRecruit::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionRecruit::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionRecruit::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionRecruit::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientReqExpeditionRecruit::m_bRepeat -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionRecruit::m_btQuality -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionRecruit::m_ebtType -> B
}

[Client]Game.Msg.MsgServerAckExpeditionRecruit -> [Client]J.a
{
	[Client]Game.Msg.MsgServerAckExpeditionRecruit::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionRecruit::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionRecruit::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionRecruit::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionRecruit::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> Game.Msg.MsgServerAckExpeditionRecruit::m_oVecRecuritList -> A
}

[Client]Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution -> [Client]J.B
{
	[Client]Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::m_ebtPositionType -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::m_ulMasterGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::m_btShipId -> B
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::m_btMasterCabinId -> b
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionMonsterBatchEvolution::m_btSlaveMonsterQuality -> C
}

[Client]Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution -> [Client]J.b
{
	[Client]Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::m_bResult -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::m_ebtPositionType -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::m_ulMasterGUID -> A
	Game.Msg.ExpeditionMonsterData [Client]Game.Msg.ExpeditionMonsterData Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::m_stEvoMonster -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::m_btShipId -> B
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::m_btCabinId -> b
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> Game.Msg.MsgServerAckExpeditionMonsterBatchEvolution::m_oVecMonsterDepositary -> A
}

[Client]Game.Msg.MsgClientNotifyExpeditionEvolutionOver -> [Client]J.C
{
	[Client]Game.Msg.MsgClientNotifyExpeditionEvolutionOver::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientNotifyExpeditionEvolutionOver::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientNotifyExpeditionEvolutionOver::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientNotifyExpeditionEvolutionOver::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientNotifyExpeditionEvolutionOver::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientNotifyExpeditionEvolutionOver::m_btShipId -> a
}

[Client]Game.Msg.MsgClientReqExpeditionShipSkillList -> [Client]J.c
{
	[Client]Game.Msg.MsgClientReqExpeditionShipSkillList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqExpeditionShipSkillList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqExpeditionShipSkillList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionShipSkillList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionShipSkillList::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionShipSkillList::m_btShipId -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionShipSkillList::m_usTaskId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionShipSkillList::m_btAreaId -> B
}

[Client]Game.Msg.MsgServerAckExpeditionShipSkillList -> [Client]J.D
{
	[Client]Game.Msg.MsgServerAckExpeditionShipSkillList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionShipSkillList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionShipSkillList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionShipSkillList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionShipSkillList::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> Game.Msg.MsgServerAckExpeditionShipSkillList::m_oVecSkillList -> A
}

[Client]Game.Msg.MsgClientReqExpeditionShipEquipInfo -> [Client]J.d
{

	[Client]Game.Msg.MsgClientReqExpeditionShipEquipInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqExpeditionShipEquipInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqExpeditionShipEquipInfo::Type -> A
}

[Client]Game.Msg.MsgServerAckExpeditionShipEquipInfo -> [Client]J.E
{
	[Client]Game.Msg.MsgServerAckExpeditionShipEquipInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckExpeditionShipEquipInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckExpeditionShipEquipInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckExpeditionShipEquipInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckExpeditionShipEquipInfo::Type -> A
	Game.Msg.ExpeditionShipEquipInfo [Client]Game.Msg.ExpeditionShipEquipInfo Game.Msg.MsgServerAckExpeditionShipEquipInfo::m_stExpeditionShipData -> A
}

[Client]Game.Msg.MsgChat -> [Client]J.e
{

	[Client]Game.Msg.MsgChat::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgChat::BaseType -> A
}

[Client]Game.Msg.MsgClientUserChat -> [Client]J.F
{
	[Client]Game.Msg.MsgClientUserChat::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientUserChat::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientUserChat::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientUserChat::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientUserChat::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgClientUserChat::ItemListSize -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientUserChat::m_ebtChannel -> a
	System.String [Client]System.String Game.Msg.MsgClientUserChat::m_strTargetName -> A
	System.String [Client]System.String Game.Msg.MsgClientUserChat::m_strContent -> a
	System.UInt64[] [Client]System.UInt64[] Game.Msg.MsgClientUserChat::m_aulItemList -> A
}

[Client]Game.Msg.MsgServerUserChat -> [Client]J.f
{
	[Client]Game.Msg.MsgServerUserChat::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerUserChat::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerUserChat::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerUserChat::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerUserChat::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerUserChat::ItemListSize -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerUserChat::m_ebtChannel -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerUserChat::m_uiCharID -> A
	System.String [Client]System.String Game.Msg.MsgServerUserChat::m_strName -> A
	System.String [Client]System.String Game.Msg.MsgServerUserChat::m_strContent -> a
	System.UInt64[] [Client]System.UInt64[] Game.Msg.MsgServerUserChat::m_aulItemList -> A
}

[Client]Game.Msg.MsgServerShowText -> [Client]J.G
{
	[Client]Game.Msg.MsgServerShowText::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerShowText::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerShowText::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerShowText::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerShowText::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerShowText::m_uiColor -> A
	System.String [Client]System.String Game.Msg.MsgServerShowText::m_strContent -> A
}

[Client]Game.Msg.MsgServerShowMessageBox -> [Client]J.g
{
	[Client]Game.Msg.MsgServerShowMessageBox::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerShowMessageBox::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerShowMessageBox::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerShowMessageBox::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerShowMessageBox::Type -> A
	System.String [Client]System.String Game.Msg.MsgServerShowMessageBox::m_strContent -> A
}

[Client]Game.Msg.MsgServerShowDialogBox -> [Client]J.H
{
	[Client]Game.Msg.MsgServerShowDialogBox::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerShowDialogBox::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerShowDialogBox::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerShowDialogBox::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerShowDialogBox::Type -> A
	System.String [Client]System.String Game.Msg.MsgServerShowDialogBox::m_strContent -> A
}

[Client]Game.Msg.MsgServerScrollBar -> [Client]J.h
{
	[Client]Game.Msg.MsgServerScrollBar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerScrollBar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerScrollBar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerScrollBar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerScrollBar::Type -> A
	System.String [Client]System.String Game.Msg.MsgServerScrollBar::m_strContent -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerScrollBar::m_uiColor -> A
}

[Client]Game.Msg.SEctypeAwardList -> [Client]J.I
{
	[Client]Game.Msg.SEctypeAwardList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SEctypeAwardList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SEctypeAwardList::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.SEctypeAwardList::m_uiCharID -> A
	System.String [Client]System.String Game.Msg.SEctypeAwardList::m_strCharName -> A
	System.Collections.Generic.List`1<Game.Msg.SEctypeAward> [Client]System.Collections.Generic.List`1<Game.Msg.SEctypeAward> Game.Msg.SEctypeAwardList::m_oVecAwardSet -> A
}

[Client]Game.Msg.SCharEquipPart -> [Client]J.i
{
	[Client]Game.Msg.SCharEquipPart::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SCharEquipPart::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SCharEquipPart::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.SCharEquipPart::m_ebtPartID -> A
	System.Byte [Client]System.Byte Game.Msg.SCharEquipPart::m_btBoostLvl -> a
	System.Byte [Client]System.Byte Game.Msg.SCharEquipPart::m_btImprintLvl -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.SCharEquipPart::m_uiImprintScore -> A
	Game.Msg.SEquipSocketData[] [Client]Game.Msg.SEquipSocketData[] Game.Msg.SCharEquipPart::m_astSocketList -> A
}

[Client]Game.Msg.MailDeleteResult -> [Client]J.J
{
	[Client]Game.Msg.MailDeleteResult::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MailDeleteResult::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MailDeleteResult::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.MailDeleteResult::m_uiID -> A
	System.Byte [Client]System.Byte Game.Msg.MailDeleteResult::m_ebtResult -> A
}

[Client]Game.Msg.ExpeditionMonsterSkill -> [Client]J.j
{
	[Client]Game.Msg.ExpeditionMonsterSkill::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ExpeditionMonsterSkill::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ExpeditionMonsterSkill::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionMonsterSkill::m_usSkillId -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionMonsterSkill::m_btSkillLevel -> A
}

[Client]Game.Msg.CSnapShotNpcData -> [Client]J.K
{
	[Client]Game.Msg.CSnapShotNpcData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotNpcData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotNpcData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.CSnapShotNpcData::m_uiNpcID -> A
	System.Byte [Client]System.Byte Game.Msg.CSnapShotNpcData::m_btSubAction -> A
	System.Byte [Client]System.Byte Game.Msg.CSnapShotNpcData::m_btType -> a
}

[Client]Game.Friend -> [Client]J.k
{
	[Client]Game.Friend::get_Instance[0]( ) -> A
	[Client]Game.Friend::Reset[0]( ) -> a
	[Client]Game.Friend::GetFriend[1]( System.UInt32 ) -> A
	[Client]Game.Friend::GetPersons[1]( Game.Msg.eRelationType ) -> A
	[Client]Game.Friend::GetFriends[0]( ) -> B
	[Client]Game.Friend::GetEnemys[0]( ) -> b
	[Client]Game.Friend::RemovePerson[2]( System.UInt32, System.UInt16 ) -> A
	[Client]Game.Friend::UpdatePerson[1]( Game.Msg.ClientRelation ) -> A
	[Client]Game.Friend::ReqAddFirend[1]( System.String ) -> A
	[Client]Game.Friend::OnMsgServerReqAddFirend[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Friend::AckAddFriendHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.Friend::ReqDelRelation[2]( System.UInt32, Game.Msg.eRelationType ) -> A
	[Client]Game.Friend::OnMsgServerDelRelation[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Friend::OnMsgServerRefreshRelation[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Friend::OnMsgServerNotifyRelationList[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Friend::AddBlack[1]( System.String ) -> a
	[Client]Game.Friend::CallFriendHelp[2]( System.Byte, System.UInt32 ) -> A

	[Client]Game.Friend::.ctor[0]( ) skipped:  special name
	[Client]Game.Friend::.cctor[0]( ) skipped:  special name

	Game.Friend [Client]Game.Friend Game.Friend::m_Instance -> A
	System.Collections.Generic.List`1<Game.Msg.ClientRelation> [Client]System.Collections.Generic.List`1<Game.Msg.ClientRelation> Game.Friend::m_Persons -> A

	Game.Friend [Client]Game.Friend Game.Friend::Instance -> dropped
}

[Client]Game.DataUndueword -> [Client]J.L
{
	[Client]Game.DataUndueword::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataUndueword::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataUndueword::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataUndueword::get_Word[0]( ) -> A
	[Client]Game.DataUndueword::set_Word[1]( System.String ) -> A

	[Client]Game.DataUndueword::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.DataUndueword::<Word>k__BackingField -> A

	System.String [Client]System.String Game.DataUndueword::Word -> dropped
}

[Client]Game.DataUnduewordManager -> [Client]J.l
{
	[Client]Game.DataUnduewordManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataUnduewordManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataUnduewordManager::Clear[0]( ) -> A
	[Client]Game.DataUnduewordManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataUnduewordManager::GetDataByWord[1]( System.String ) -> A
	[Client]Game.DataUnduewordManager::GetDataListByWord[1]( System.String ) -> a
	[Client]Game.DataUnduewordManager::get_Instance[0]( ) -> a
	[Client]Game.DataUnduewordManager::get_DataList[0]( ) -> B
	[Client]Game.DataUnduewordManager::get_Count[0]( ) -> b

	[Client]Game.DataUnduewordManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataUnduewordManager::.ctor[0]( ) skipped:  special name

	Game.DataUnduewordManager [Client]Game.DataUnduewordManager Game.DataUnduewordManager::instance -> A
	System.Collections.Generic.List`1<Game.DataUndueword> [Client]System.Collections.Generic.List`1<Game.DataUndueword> Game.DataUnduewordManager::dataList -> A

	Game.DataUnduewordManager [Client]Game.DataUnduewordManager Game.DataUnduewordManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataUndueword> [Client]System.Collections.Generic.List`1<Game.DataUndueword> Game.DataUnduewordManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataUnduewordManager::Count -> dropped
}

[Client]Game.DataTitlename -> [Client]J.M
{
	[Client]Game.DataTitlename::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataTitlename::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataTitlename::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataTitlename::get_Male[0]( ) -> A
	[Client]Game.DataTitlename::set_Male[1]( System.String ) -> A
	[Client]Game.DataTitlename::get_Female[0]( ) -> a
	[Client]Game.DataTitlename::set_Female[1]( System.String ) -> a

	[Client]Game.DataTitlename::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.DataTitlename::<Male>k__BackingField -> A
	System.String [Client]System.String Game.DataTitlename::<Female>k__BackingField -> a

	System.String [Client]System.String Game.DataTitlename::Male -> dropped
	System.String [Client]System.String Game.DataTitlename::Female -> dropped
}

[Client]Game.DataTitlenameManager -> [Client]J.m
{
	[Client]Game.DataTitlenameManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataTitlenameManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataTitlenameManager::Clear[0]( ) -> A
	[Client]Game.DataTitlenameManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataTitlenameManager::GetDataByMale[1]( System.String ) -> A
	[Client]Game.DataTitlenameManager::GetDataListByMale[1]( System.String ) -> a
	[Client]Game.DataTitlenameManager::GetDataByFemale[1]( System.String ) -> B
	[Client]Game.DataTitlenameManager::GetDataListByFemale[1]( System.String ) -> b
	[Client]Game.DataTitlenameManager::get_Instance[0]( ) -> a
	[Client]Game.DataTitlenameManager::get_DataList[0]( ) -> B
	[Client]Game.DataTitlenameManager::get_Count[0]( ) -> b

	[Client]Game.DataTitlenameManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataTitlenameManager::.ctor[0]( ) skipped:  special name

	Game.DataTitlenameManager [Client]Game.DataTitlenameManager Game.DataTitlenameManager::instance -> A
	System.Collections.Generic.List`1<Game.DataTitlename> [Client]System.Collections.Generic.List`1<Game.DataTitlename> Game.DataTitlenameManager::dataList -> A

	Game.DataTitlenameManager [Client]Game.DataTitlenameManager Game.DataTitlenameManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataTitlename> [Client]System.Collections.Generic.List`1<Game.DataTitlename> Game.DataTitlenameManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataTitlenameManager::Count -> dropped
}

[Client]Game.DataNoviceHelp -> [Client]J.N
{
	[Client]Game.DataNoviceHelp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataNoviceHelp::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataNoviceHelp::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataNoviceHelp::get_ID[0]( ) -> A
	[Client]Game.DataNoviceHelp::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataNoviceHelp::get_HelpType[0]( ) -> a
	[Client]Game.DataNoviceHelp::set_HelpType[1]( System.Int32 ) -> a
	[Client]Game.DataNoviceHelp::get_ImagePath[0]( ) -> B
	[Client]Game.DataNoviceHelp::set_ImagePath[1]( System.String ) -> A
	[Client]Game.DataNoviceHelp::get_ControlID[0]( ) -> b
	[Client]Game.DataNoviceHelp::set_ControlID[1]( System.String ) -> a
	[Client]Game.DataNoviceHelp::get_ArrowType[0]( ) -> C
	[Client]Game.DataNoviceHelp::set_ArrowType[1]( System.Int32 ) -> B
	[Client]Game.DataNoviceHelp::get_Text[0]( ) -> c
	[Client]Game.DataNoviceHelp::set_Text[1]( System.String ) -> B
	[Client]Game.DataNoviceHelp::get_NextID[0]( ) -> D
	[Client]Game.DataNoviceHelp::set_NextID[1]( System.Int32 ) -> b
	[Client]Game.DataNoviceHelp::get_OffsetX[0]( ) -> d
	[Client]Game.DataNoviceHelp::set_OffsetX[1]( System.Single ) -> A
	[Client]Game.DataNoviceHelp::get_OffsetY[0]( ) -> E
	[Client]Game.DataNoviceHelp::set_OffsetY[1]( System.Single ) -> a
	[Client]Game.DataNoviceHelp::get_IndexCategory[0]( ) -> e
	[Client]Game.DataNoviceHelp::set_IndexCategory[1]( System.Int32 ) -> C
	[Client]Game.DataNoviceHelp::get_CategoryID[0]( ) -> F
	[Client]Game.DataNoviceHelp::set_CategoryID[1]( System.Int32 ) -> c
	[Client]Game.DataNoviceHelp::get_AppearSound[0]( ) -> f
	[Client]Game.DataNoviceHelp::set_AppearSound[1]( System.String ) -> b
	[Client]Game.DataNoviceHelp::get_DisappearSound[0]( ) -> G
	[Client]Game.DataNoviceHelp::set_DisappearSound[1]( System.String ) -> C
	[Client]Game.DataNoviceHelp::get_NPCId[0]( ) -> g
	[Client]Game.DataNoviceHelp::set_NPCId[1]( System.Int32 ) -> D
	[Client]Game.DataNoviceHelp::get_Effect[0]( ) -> H
	[Client]Game.DataNoviceHelp::set_Effect[1]( System.Int32 ) -> d

	[Client]Game.DataNoviceHelp::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::<ID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::<HelpType>k__BackingField -> a
	System.String [Client]System.String Game.DataNoviceHelp::<ImagePath>k__BackingField -> A
	System.String [Client]System.String Game.DataNoviceHelp::<ControlID>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::<ArrowType>k__BackingField -> B
	System.String [Client]System.String Game.DataNoviceHelp::<Text>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::<NextID>k__BackingField -> b
	System.Single [Client]System.Single Game.DataNoviceHelp::<OffsetX>k__BackingField -> A
	System.Single [Client]System.Single Game.DataNoviceHelp::<OffsetY>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::<IndexCategory>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::<CategoryID>k__BackingField -> c
	System.String [Client]System.String Game.DataNoviceHelp::<AppearSound>k__BackingField -> b
	System.String [Client]System.String Game.DataNoviceHelp::<DisappearSound>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::<NPCId>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::<Effect>k__BackingField -> d

	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::ID -> dropped
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::HelpType -> dropped
	System.String [Client]System.String Game.DataNoviceHelp::ImagePath -> dropped
	System.String [Client]System.String Game.DataNoviceHelp::ControlID -> dropped
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::ArrowType -> dropped
	System.String [Client]System.String Game.DataNoviceHelp::Text -> dropped
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::NextID -> dropped
	System.Single [Client]System.Single Game.DataNoviceHelp::OffsetX -> dropped
	System.Single [Client]System.Single Game.DataNoviceHelp::OffsetY -> dropped
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::IndexCategory -> dropped
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::CategoryID -> dropped
	System.String [Client]System.String Game.DataNoviceHelp::AppearSound -> dropped
	System.String [Client]System.String Game.DataNoviceHelp::DisappearSound -> dropped
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::NPCId -> dropped
	System.Int32 [Client]System.Int32 Game.DataNoviceHelp::Effect -> dropped
}

[Client]Game.DataNoviceHelpManager -> [Client]J.n
{
	[Client]Game.DataNoviceHelpManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataNoviceHelpManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataNoviceHelpManager::Clear[0]( ) -> A
	[Client]Game.DataNoviceHelpManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataNoviceHelpManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataNoviceHelpManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataNoviceHelpManager::GetDataByHelpType[1]( System.Int32 ) -> B
	[Client]Game.DataNoviceHelpManager::GetDataListByHelpType[1]( System.Int32 ) -> b
	[Client]Game.DataNoviceHelpManager::GetDataByImagePath[1]( System.String ) -> A
	[Client]Game.DataNoviceHelpManager::GetDataListByImagePath[1]( System.String ) -> a
	[Client]Game.DataNoviceHelpManager::GetDataByControlID[1]( System.String ) -> B
	[Client]Game.DataNoviceHelpManager::GetDataListByControlID[1]( System.String ) -> b
	[Client]Game.DataNoviceHelpManager::GetDataByArrowType[1]( System.Int32 ) -> C
	[Client]Game.DataNoviceHelpManager::GetDataListByArrowType[1]( System.Int32 ) -> c
	[Client]Game.DataNoviceHelpManager::GetDataByText[1]( System.String ) -> C
	[Client]Game.DataNoviceHelpManager::GetDataListByText[1]( System.String ) -> c
	[Client]Game.DataNoviceHelpManager::GetDataByNextID[1]( System.Int32 ) -> D
	[Client]Game.DataNoviceHelpManager::GetDataListByNextID[1]( System.Int32 ) -> d
	[Client]Game.DataNoviceHelpManager::GetDataByOffsetX[1]( System.Single ) -> A
	[Client]Game.DataNoviceHelpManager::GetDataListByOffsetX[1]( System.Single ) -> a
	[Client]Game.DataNoviceHelpManager::GetDataByOffsetY[1]( System.Single ) -> B
	[Client]Game.DataNoviceHelpManager::GetDataListByOffsetY[1]( System.Single ) -> b
	[Client]Game.DataNoviceHelpManager::GetDataByIndexCategory[1]( System.Int32 ) -> E
	[Client]Game.DataNoviceHelpManager::GetDataListByIndexCategory[1]( System.Int32 ) -> e
	[Client]Game.DataNoviceHelpManager::GetDataByCategoryID[1]( System.Int32 ) -> F
	[Client]Game.DataNoviceHelpManager::GetDataListByCategoryID[1]( System.Int32 ) -> f
	[Client]Game.DataNoviceHelpManager::GetDataByAppearSound[1]( System.String ) -> D
	[Client]Game.DataNoviceHelpManager::GetDataListByAppearSound[1]( System.String ) -> d
	[Client]Game.DataNoviceHelpManager::GetDataByDisappearSound[1]( System.String ) -> E
	[Client]Game.DataNoviceHelpManager::GetDataListByDisappearSound[1]( System.String ) -> e
	[Client]Game.DataNoviceHelpManager::GetDataByNPCId[1]( System.Int32 ) -> G
	[Client]Game.DataNoviceHelpManager::GetDataListByNPCId[1]( System.Int32 ) -> g
	[Client]Game.DataNoviceHelpManager::GetDataByEffect[1]( System.Int32 ) -> H
	[Client]Game.DataNoviceHelpManager::GetDataListByEffect[1]( System.Int32 ) -> h
	[Client]Game.DataNoviceHelpManager::get_Instance[0]( ) -> a
	[Client]Game.DataNoviceHelpManager::get_DataList[0]( ) -> B
	[Client]Game.DataNoviceHelpManager::get_Count[0]( ) -> b

	[Client]Game.DataNoviceHelpManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataNoviceHelpManager::.ctor[0]( ) skipped:  special name

	Game.DataNoviceHelpManager [Client]Game.DataNoviceHelpManager Game.DataNoviceHelpManager::instance -> A
	System.Collections.Generic.List`1<Game.DataNoviceHelp> [Client]System.Collections.Generic.List`1<Game.DataNoviceHelp> Game.DataNoviceHelpManager::dataList -> A

	Game.DataNoviceHelpManager [Client]Game.DataNoviceHelpManager Game.DataNoviceHelpManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataNoviceHelp> [Client]System.Collections.Generic.List`1<Game.DataNoviceHelp> Game.DataNoviceHelpManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataNoviceHelpManager::Count -> dropped
}

[Client]Game.DataBoost -> [Client]J.O
{
	[Client]Game.DataBoost::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataBoost::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataBoost::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataBoost::get_BoostLv[0]( ) -> A
	[Client]Game.DataBoost::set_BoostLv[1]( System.Int32 ) -> A
	[Client]Game.DataBoost::get_BoostPp[0]( ) -> a
	[Client]Game.DataBoost::set_BoostPp[1]( System.Int32 ) -> a
	[Client]Game.DataBoost::get_CrystalNums[0]( ) -> B
	[Client]Game.DataBoost::set_CrystalNums[1]( System.Int32 ) -> B
	[Client]Game.DataBoost::get_BoostMoney[0]( ) -> b
	[Client]Game.DataBoost::set_BoostMoney[1]( System.Int32 ) -> b
	[Client]Game.DataBoost::get_ImprintNums[0]( ) -> C
	[Client]Game.DataBoost::set_ImprintNums[1]( System.Int32 ) -> C
	[Client]Game.DataBoost::get_BoostAttr[0]( ) -> c
	[Client]Game.DataBoost::set_BoostAttr[1]( System.Int32 ) -> c

	[Client]Game.DataBoost::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataBoost::<BoostLv>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataBoost::<BoostPp>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataBoost::<CrystalNums>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataBoost::<BoostMoney>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataBoost::<ImprintNums>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataBoost::<BoostAttr>k__BackingField -> c

	System.Int32 [Client]System.Int32 Game.DataBoost::BoostLv -> dropped
	System.Int32 [Client]System.Int32 Game.DataBoost::BoostPp -> dropped
	System.Int32 [Client]System.Int32 Game.DataBoost::CrystalNums -> dropped
	System.Int32 [Client]System.Int32 Game.DataBoost::BoostMoney -> dropped
	System.Int32 [Client]System.Int32 Game.DataBoost::ImprintNums -> dropped
	System.Int32 [Client]System.Int32 Game.DataBoost::BoostAttr -> dropped
}

[Client]Game.DataBoostManager -> [Client]J.o
{
	[Client]Game.DataBoostManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataBoostManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataBoostManager::Clear[0]( ) -> A
	[Client]Game.DataBoostManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataBoostManager::GetDataByBoostLv[1]( System.Int32 ) -> A
	[Client]Game.DataBoostManager::GetDataListByBoostLv[1]( System.Int32 ) -> a
	[Client]Game.DataBoostManager::GetDataByBoostPp[1]( System.Int32 ) -> B
	[Client]Game.DataBoostManager::GetDataListByBoostPp[1]( System.Int32 ) -> b
	[Client]Game.DataBoostManager::GetDataByCrystalNums[1]( System.Int32 ) -> C
	[Client]Game.DataBoostManager::GetDataListByCrystalNums[1]( System.Int32 ) -> c
	[Client]Game.DataBoostManager::GetDataByBoostMoney[1]( System.Int32 ) -> D
	[Client]Game.DataBoostManager::GetDataListByBoostMoney[1]( System.Int32 ) -> d
	[Client]Game.DataBoostManager::GetDataByImprintNums[1]( System.Int32 ) -> E
	[Client]Game.DataBoostManager::GetDataListByImprintNums[1]( System.Int32 ) -> e
	[Client]Game.DataBoostManager::GetDataByBoostAttr[1]( System.Int32 ) -> F
	[Client]Game.DataBoostManager::GetDataListByBoostAttr[1]( System.Int32 ) -> f
	[Client]Game.DataBoostManager::get_Instance[0]( ) -> a
	[Client]Game.DataBoostManager::get_DataList[0]( ) -> B
	[Client]Game.DataBoostManager::get_Count[0]( ) -> b

	[Client]Game.DataBoostManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataBoostManager::.ctor[0]( ) skipped:  special name

	Game.DataBoostManager [Client]Game.DataBoostManager Game.DataBoostManager::instance -> A
	System.Collections.Generic.List`1<Game.DataBoost> [Client]System.Collections.Generic.List`1<Game.DataBoost> Game.DataBoostManager::dataList -> A

	Game.DataBoostManager [Client]Game.DataBoostManager Game.DataBoostManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataBoost> [Client]System.Collections.Generic.List`1<Game.DataBoost> Game.DataBoostManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataBoostManager::Count -> dropped
}

[Client]Game.DataAFK -> [Client]J.P
{
	[Client]Game.DataAFK::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAFK::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAFK::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAFK::get_Level[0]( ) -> A
	[Client]Game.DataAFK::set_Level[1]( System.Int32 ) -> A
	[Client]Game.DataAFK::get_MaxExp[0]( ) -> a
	[Client]Game.DataAFK::set_MaxExp[1]( System.Int32 ) -> a
	[Client]Game.DataAFK::get_SpeedUpGold[0]( ) -> B
	[Client]Game.DataAFK::set_SpeedUpGold[1]( System.Int32 ) -> B
	[Client]Game.DataAFK::get_AllGold[0]( ) -> b
	[Client]Game.DataAFK::set_AllGold[1]( System.Int32 ) -> b

	[Client]Game.DataAFK::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataAFK::<Level>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataAFK::<MaxExp>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataAFK::<SpeedUpGold>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataAFK::<AllGold>k__BackingField -> b

	System.Int32 [Client]System.Int32 Game.DataAFK::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataAFK::MaxExp -> dropped
	System.Int32 [Client]System.Int32 Game.DataAFK::SpeedUpGold -> dropped
	System.Int32 [Client]System.Int32 Game.DataAFK::AllGold -> dropped
}

[Client]Game.DataAFKManager -> [Client]J.p
{
	[Client]Game.DataAFKManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataAFKManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataAFKManager::Clear[0]( ) -> A
	[Client]Game.DataAFKManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataAFKManager::GetDataByLevel[1]( System.Int32 ) -> A
	[Client]Game.DataAFKManager::GetDataListByLevel[1]( System.Int32 ) -> a
	[Client]Game.DataAFKManager::GetDataByMaxExp[1]( System.Int32 ) -> B
	[Client]Game.DataAFKManager::GetDataListByMaxExp[1]( System.Int32 ) -> b
	[Client]Game.DataAFKManager::GetDataBySpeedUpGold[1]( System.Int32 ) -> C
	[Client]Game.DataAFKManager::GetDataListBySpeedUpGold[1]( System.Int32 ) -> c
	[Client]Game.DataAFKManager::GetDataByAllGold[1]( System.Int32 ) -> D
	[Client]Game.DataAFKManager::GetDataListByAllGold[1]( System.Int32 ) -> d
	[Client]Game.DataAFKManager::get_Instance[0]( ) -> a
	[Client]Game.DataAFKManager::get_DataList[0]( ) -> B
	[Client]Game.DataAFKManager::get_Count[0]( ) -> b

	[Client]Game.DataAFKManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataAFKManager::.ctor[0]( ) skipped:  special name

	Game.DataAFKManager [Client]Game.DataAFKManager Game.DataAFKManager::instance -> A
	System.Collections.Generic.List`1<Game.DataAFK> [Client]System.Collections.Generic.List`1<Game.DataAFK> Game.DataAFKManager::dataList -> A

	Game.DataAFKManager [Client]Game.DataAFKManager Game.DataAFKManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataAFK> [Client]System.Collections.Generic.List`1<Game.DataAFK> Game.DataAFKManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataAFKManager::Count -> dropped
}

[Client]Game.Msg.RankExpeditionMonsterData -> [Client]J.Q
{
	[Client]Game.Msg.RankExpeditionMonsterData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.RankExpeditionMonsterData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.RankExpeditionMonsterData::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Msg.RankExpeditionMonsterData::m_usMonsterId -> A
	System.Byte [Client]System.Byte Game.Msg.RankExpeditionMonsterData::m_btMonsterRank -> A
}

[Client]Game.NodeSearch -> [Client]J.q
{
	[Client]Game.NodeSearch::get_ID[0]( ) -> A
	[Client]Game.NodeSearch::set_ID[1]( System.Int32 ) -> A

	[Client]Game.NodeSearch::.ctor[2]( System.Int32, System.Int32 ) skipped:  special name
	[Client]Game.NodeSearch::.ctor[2]( System.Int32, System.Single ) skipped:  special name
	[Client]Game.NodeSearch::CompareTo[1]( Game.NodeSearch ) skipped:  external base class or interface

	System.Int32 [Client]System.Int32 Game.NodeSearch::id -> A
	System.Int32 [Client]System.Int32 Game.NodeSearch::F -> a
	System.Single [Client]System.Single Game.NodeSearch::Fv -> A

	System.Int32 [Client]System.Int32 Game.NodeSearch::ID -> dropped
}

[Client]Game.BeAttackedCurve -> [Client]J.r
{

	[Client]Game.BeAttackedCurve::.ctor[0]( ) skipped:  special name
	[Client]Game.BeAttackedCurve::.cctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.BeAttackedCurve::FrameNum1 -> A
	System.Single [Client]System.Single Game.BeAttackedCurve::FrameNum2 -> a
	System.Single [Client]System.Single Game.BeAttackedCurve::FrameNum3 -> B
	System.Single[] [Client]System.Single[] Game.BeAttackedCurve::m_BeAttackedBack_1 -> A
	System.Single[] [Client]System.Single[] Game.BeAttackedCurve::m_BeAttackedBack_2 -> a
	System.Single[] [Client]System.Single[] Game.BeAttackedCurve::m_BeAttackedBack_3 -> B
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUp_1BreakFrame -> b
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUp_1Offset -> C
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUp_1RotateTime -> c
	UnityEngine.Vector3[] [Client]UnityEngine.Vector3[] Game.BeAttackedCurve::m_BeAttackedUp_1 -> A
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUp_2BreakFrame -> D
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUp_2Offset -> d
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUp_2RotateTime -> E
	UnityEngine.Vector3[] [Client]UnityEngine.Vector3[] Game.BeAttackedCurve::m_BeAttackedUp_2 -> a
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUp_3BreakFrame -> e
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUp_3Offset -> F
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUp_3RotateTime -> f
	UnityEngine.Vector3[] [Client]UnityEngine.Vector3[] Game.BeAttackedCurve::m_BeAttackedUp_3 -> B
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUpBack_1BreakFrame -> G
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.BeAttackedCurve::BeAttackedUpBack_1Offset -> A
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUpBack_1RotateTime -> g
	UnityEngine.Vector3[] [Client]UnityEngine.Vector3[] Game.BeAttackedCurve::m_BeAttackedUpBack_1 -> b
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUpBack_2BreakFrame -> H
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.BeAttackedCurve::BeAttackedUpBack_2Offset -> a
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUpBack_2RotateTime -> h
	UnityEngine.Vector3[] [Client]UnityEngine.Vector3[] Game.BeAttackedCurve::m_BeAttackedUpBack_2 -> C
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUpBack_3BreakFrame -> I
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.BeAttackedCurve::BeAttackedUpBack_3Offset -> B
	System.Single [Client]System.Single Game.BeAttackedCurve::BeAttackedUpBack_3RotateTime -> i
	UnityEngine.Vector3[] [Client]UnityEngine.Vector3[] Game.BeAttackedCurve::m_BeAttackedUpBack_3 -> c
}

[Client]ICSharpCode.SharpZipLib.Zip.RawTaggedData -> [Client]J.s
{
	[Client]ICSharpCode.SharpZipLib.Zip.RawTaggedData::get_TagID[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.RawTaggedData::SetData[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.RawTaggedData::GetData[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.RawTaggedData::set_TagID[1]( System.Int16 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.RawTaggedData::get_Data[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.RawTaggedData::set_Data[1]( System.Byte[] ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.RawTaggedData::.ctor[1]( System.Int16 ) skipped:  special name

	System.Int16 [Client]System.Int16 ICSharpCode.SharpZipLib.Zip.RawTaggedData::_tag -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.RawTaggedData::_data -> A

	System.Int16 [Client]System.Int16 ICSharpCode.SharpZipLib.Zip.RawTaggedData::TagID -> dropped
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.RawTaggedData::Data -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData -> [Client]J.T
{
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::get_TagID[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::SetData[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::GetData[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::IsValidValue[1]( System.DateTime ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::get_ModificationTime[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::set_ModificationTime[1]( System.DateTime ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::get_AccessTime[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::set_AccessTime[1]( System.DateTime ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::get_CreateTime[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::set_CreateTime[1]( System.DateTime ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::get_Include[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::set_Include[1]( ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::.ctor[0]( ) skipped:  special name

	ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags [Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::_flags -> A
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::_modificationTime -> A
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::_lastAccessTime -> a
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::_createTime -> B

	System.Int16 [Client]System.Int16 ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::TagID -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::ModificationTime -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::AccessTime -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::CreateTime -> dropped
	ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags [Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags ICSharpCode.SharpZipLib.Zip.ExtendedUnixData::Include -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags -> [Client]J.T/t
{
	ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags [Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags::ModificationTime -> A
	ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags [Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags::AccessTime -> a
	ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags [Client]ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags::CreateTime -> B

	System.Byte [Client]System.Byte ICSharpCode.SharpZipLib.Zip.ExtendedUnixData/Flags::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData -> [Client]J.U
{
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::get_TagID[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::SetData[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::GetData[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::IsValidValue[1]( System.DateTime ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::get_LastModificationTime[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::set_LastModificationTime[1]( System.DateTime ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::get_CreateTime[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::set_CreateTime[1]( System.DateTime ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::get_LastAccessTime[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::set_LastAccessTime[1]( System.DateTime ) -> b

	[Client]ICSharpCode.SharpZipLib.Zip.NTTaggedData::.ctor[0]( ) skipped:  special name

	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.NTTaggedData::_lastAccessTime -> A
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.NTTaggedData::_lastModificationTime -> a
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.NTTaggedData::_createTime -> B

	System.Int16 [Client]System.Int16 ICSharpCode.SharpZipLib.Zip.NTTaggedData::TagID -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.NTTaggedData::LastModificationTime -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.NTTaggedData::CreateTime -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Zip.NTTaggedData::LastAccessTime -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData -> [Client]J.V
{
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::GetEntryData[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::Clear[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::get_Length[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::GetStreamForTag[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::GetData[1]( System.Int16 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::Create[4]( System.Int16, System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::get_ValueLength[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::get_CurrentReadIndex[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::get_UnreadCount[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::Find[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::AddEntry[1]( ICSharpCode.SharpZipLib.Zip.ITaggedData ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::AddEntry[2]( System.Int32, System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::StartNewEntry[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::AddNewEntry[1]( System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::AddData[1]( System.Byte ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::AddData[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::AddLeShort[1]( System.Int32 ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::AddLeInt[1]( System.Int32 ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::AddLeLong[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::Delete[1]( System.Int32 ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::ReadLong[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::ReadInt[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::ReadShort[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::ReadByte[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::Skip[1]( System.Int32 ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::ReadCheck[1]( System.Int32 ) -> d
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::ReadShortInternal[0]( ) -> f
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::SetShort[2]( System.Int32&, System.Int32 ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::Dispose[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipExtraData::.ctor[1]( System.Byte[] ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipExtraData::_index -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipExtraData::_readValueStart -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipExtraData::_readValueLength -> B
	System.IO.MemoryStream [Client]System.IO.MemoryStream ICSharpCode.SharpZipLib.Zip.ZipExtraData::_newEntry -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.ZipExtraData::_data -> A

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipExtraData::Length -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipExtraData::ValueLength -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipExtraData::CurrentReadIndex -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.ZipExtraData::UnreadCount -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman -> [Client]J.v
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::Reset[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::SendAllTrees[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::CompressBlock[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::FlushStoredBlock[4]( System.Byte[], System.Int32, System.Int32, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::FlushBlock[4]( System.Byte[], System.Int32, System.Int32, System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::IsFull[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::TallyLit[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::TallyDist[2]( System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::BitReverse[1]( System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::Lcode[1]( System.Int32 ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::Dcode[1]( System.Int32 ) -> C

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::.cctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::.ctor[1]( ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::BUFSIZE -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::LITERAL_NUM -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::DIST_NUM -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::BITLEN_NUM -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::REP_3_6 -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::REP_3_10 -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::REP_11_138 -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::EOF_SYMBOL -> d
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::BL_ORDER -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::bit4Reverse -> A
	System.Int16[] [Client]System.Int16[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::staticLCodes -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::staticLLength -> a
	System.Int16[] [Client]System.Int16[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::staticDCodes -> a
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::staticDLength -> B
	ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::pending -> A
	ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::literalTree -> A
	ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::distTree -> a
	ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::blTree -> B
	System.Int16[] [Client]System.Int16[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::d_buf -> B
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::l_buf -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::last_lit -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman::extra_bits -> e
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree -> [Client]J.v/W
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::Reset[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::WriteSymbol[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::CheckEmpty[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::SetStaticCodes[2]( System.Int16[], System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::BuildCodes[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::BuildTree[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::GetEncodedLength[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::CalcBLFreq[1]( ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::WriteTree[1]( ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::BuildLength[1]( System.Int32[] ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::.ctor[4]( ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman, System.Int32, System.Int32, System.Int32 ) skipped:  special name

	System.Int16[] [Client]System.Int16[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::freqs -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::length -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::minNumCodes -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::numCodes -> a
	System.Int16[] [Client]System.Int16[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::codes -> a
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::bl_counts -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::maxLength -> B
	ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman/Tree::dh -> A
}

[Client]ICSharpCode.SharpZipLib.Tar.TarEntry -> [Client]J.w
{
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::CreateTarEntry[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::CreateEntryFromFile[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::IsDescendent[1]( ICSharpCode.SharpZipLib.Tar.TarEntry ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_TarHeader[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_Name[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::set_Name[1]( System.String ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_UserId[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::set_UserId[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_GroupId[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::set_GroupId[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_UserName[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::set_UserName[1]( System.String ) -> b
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_GroupName[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::set_GroupName[1]( System.String ) -> C
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::SetIds[2]( System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::SetNames[2]( System.String, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_ModTime[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::set_ModTime[1]( System.DateTime ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_File[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_Size[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::set_Size[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::get_IsDirectory[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::GetFileTarHeader[2]( ICSharpCode.SharpZipLib.Tar.TarHeader, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::GetDirectoryEntries[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::WriteEntryHeader[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::AdjustEntryName[2]( System.Byte[], System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::NameTarHeader[2]( ICSharpCode.SharpZipLib.Tar.TarHeader, System.String ) -> a

	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::Clone[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::GetHashCode[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::Equals[1]( System.Object ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::.ctor[1]( System.Byte[] ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarEntry::.ctor[1]( ICSharpCode.SharpZipLib.Tar.TarHeader ) skipped:  special name

	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarEntry::file -> A
	ICSharpCode.SharpZipLib.Tar.TarHeader [Client]ICSharpCode.SharpZipLib.Tar.TarHeader ICSharpCode.SharpZipLib.Tar.TarEntry::header -> A

	ICSharpCode.SharpZipLib.Tar.TarHeader [Client]ICSharpCode.SharpZipLib.Tar.TarHeader ICSharpCode.SharpZipLib.Tar.TarEntry::TarHeader -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarEntry::Name -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarEntry::UserId -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Tar.TarEntry::GroupId -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarEntry::UserName -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarEntry::GroupName -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Tar.TarEntry::ModTime -> dropped
	System.String [Client]System.String ICSharpCode.SharpZipLib.Tar.TarEntry::File -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Tar.TarEntry::Size -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Tar.TarEntry::IsDirectory -> dropped
}

[Client]ICSharpCode.SharpZipLib.Core.PathFilter -> [Client]J.x
{
	[Client]ICSharpCode.SharpZipLib.Core.PathFilter::IsMatch[1]( System.String ) -> A

	[Client]ICSharpCode.SharpZipLib.Core.PathFilter::.ctor[1]( System.String ) skipped:  special name

	ICSharpCode.SharpZipLib.Core.NameFilter [Client]ICSharpCode.SharpZipLib.Core.NameFilter ICSharpCode.SharpZipLib.Core.PathFilter::nameFilter_ -> A
}

[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter -> [Client]J.Y
{
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::IsMatch[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::get_MinSize[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::set_MinSize[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::get_MaxSize[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::set_MaxSize[1]( System.Int64 ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::get_MinDate[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::set_MinDate[1]( System.DateTime ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::get_MaxDate[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::set_MaxDate[1]( System.DateTime ) -> a

	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::.ctor[3]( System.String, System.Int64, System.Int64 ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::.ctor[3]( System.String, System.DateTime, System.DateTime ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::.ctor[5]( System.String, System.Int64, System.Int64, System.DateTime, System.DateTime ) skipped:  special name

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::minSize_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::maxSize_ -> a
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::minDate_ -> A
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::maxDate_ -> a

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::MinSize -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::MaxSize -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::MinDate -> dropped
	System.DateTime [Client]System.DateTime ICSharpCode.SharpZipLib.Core.ExtendedPathFilter::MaxDate -> dropped
}

[Client]ICSharpCode.SharpZipLib.Core.NameAndSizeFilter -> [Client]J.y
{
	[Client]ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::IsMatch[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::get_MinSize[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::set_MinSize[1]( System.Int64 ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::get_MaxSize[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::set_MaxSize[1]( System.Int64 ) -> a

	[Client]ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::.ctor[3]( System.String, System.Int64, System.Int64 ) skipped:  special name

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::minSize_ -> A
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::maxSize_ -> a

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::MinSize -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Core.NameAndSizeFilter::MaxSize -> dropped
}

[Client]Game.Msg.SendMsgPacket -> [Client]j.A
{
	[Client]Game.Msg.SendMsgPacket::GetBuffer[0]( ) -> A
	[Client]Game.Msg.SendMsgPacket::ToArray[0]( ) -> a
	[Client]Game.Msg.SendMsgPacket::get_Instance[0]( ) -> B
	[Client]Game.Msg.SendMsgPacket::Init[1]( System.UInt16 ) -> A
	[Client]Game.Msg.SendMsgPacket::WriteLength[0]( ) -> b

	[Client]Game.Msg.SendMsgPacket::.cctor[0]( ) skipped:  special name
	[Client]Game.Msg.SendMsgPacket::.ctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.Msg.SendMsgPacket::Log -> A
	Game.Msg.SendMsgPacket [Client]Game.Msg.SendMsgPacket Game.Msg.SendMsgPacket::m_Instance -> A

	Game.Msg.SendMsgPacket [Client]Game.Msg.SendMsgPacket Game.Msg.SendMsgPacket::Instance -> dropped
}

[Client]Game.Msg.MsgLogin -> [Client]j.a
{

	[Client]Game.Msg.MsgLogin::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgLogin::BaseType -> A
}

[Client]Game.Msg.MsgClientLogin -> [Client]j.B
{
	[Client]Game.Msg.MsgClientLogin::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientLogin::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientLogin::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientLogin::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientLogin::Type -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientLogin::m_abtAccount -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientLogin::m_eusPlaID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientLogin::m_ebtRuntime -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientLogin::m_ulAccID -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientLogin::m_abtToken -> a
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgClientLogin::m_abtMachineDesc -> B
}

[Client]Game.Msg.MsgClientSwitchLine -> [Client]j.b
{
	[Client]Game.Msg.MsgClientSwitchLine::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientSwitchLine::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientSwitchLine::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientSwitchLine::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSwitchLine::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSwitchLine::m_usLineID -> a
}

[Client]Game.Msg.MsgServerCharList -> [Client]j.C
{
	[Client]Game.Msg.MsgServerCharList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCharList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCharList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCharList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharList::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharList::m_usResultID -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerCharList::m_ulAccountID -> A
	Game.Msg.ClientRoleInfo[] [Client]Game.Msg.ClientRoleInfo[] Game.Msg.MsgServerCharList::m_astRoleInfo -> A
}

[Client]Game.Msg.MsgClientCreateChar -> [Client]j.c
{
	[Client]Game.Msg.MsgClientCreateChar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientCreateChar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientCreateChar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientCreateChar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientCreateChar::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientCreateChar::m_btModelId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientCreateChar::m_btWhichSlot -> B
	Game.Msg.ClientCreateInfo [Client]Game.Msg.ClientCreateInfo Game.Msg.MsgClientCreateChar::m_stCreate -> A
}

[Client]Game.Msg.MsgServerCreateChar -> [Client]j.D
{
	[Client]Game.Msg.MsgServerCreateChar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCreateChar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCreateChar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCreateChar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCreateChar::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCreateChar::m_eusResult -> a
	Game.Msg.ClientRoleInfo [Client]Game.Msg.ClientRoleInfo Game.Msg.MsgServerCreateChar::m_stRoleInfo -> A
}

[Client]Game.Msg.MsgClientExitGame -> [Client]j.d
{

	[Client]Game.Msg.MsgClientExitGame::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientExitGame::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientExitGame::Type -> A
}

[Client]Game.Msg.MsgServerLoginResult -> [Client]j.E
{
	[Client]Game.Msg.MsgServerLoginResult::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerLoginResult::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerLoginResult::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerLoginResult::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLoginResult::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerLoginResult::m_ebtResult -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLoginResult::m_usQueueNum -> a
}

[Client]Game.Msg.MsgClientLoginVerify -> [Client]j.e
{

	[Client]Game.Msg.MsgClientLoginVerify::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientLoginVerify::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientLoginVerify::Type -> A
}

[Client]Game.Msg.MsgServerDisconnect -> [Client]j.F
{
	[Client]Game.Msg.MsgServerDisconnect::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerDisconnect::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerDisconnect::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerDisconnect::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerDisconnect::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerDisconnect::m_btErrCode -> a
	System.String [Client]System.String Game.Msg.MsgServerDisconnect::m_strDesc -> A
}

[Client]Game.Msg.MsgServerSwitchLine -> [Client]j.f
{
	[Client]Game.Msg.MsgServerSwitchLine::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSwitchLine::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSwitchLine::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSwitchLine::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSwitchLine::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSwitchLine::m_usLineID -> a
}

[Client]Game.Msg.MsgClientReqVersion -> [Client]j.G
{

	[Client]Game.Msg.MsgClientReqVersion::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqVersion::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqVersion::Type -> A
}

[Client]Game.Msg.MsgServerAckVersion -> [Client]j.g
{
	[Client]Game.Msg.MsgServerAckVersion::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckVersion::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckVersion::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckVersion::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckVersion::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckVersion::m_uiVersion -> A
}

[Client]Game.Msg.MsgClientReqCharge -> [Client]j.H
{
	[Client]Game.Msg.MsgClientReqCharge::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqCharge::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqCharge::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqCharge::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqCharge::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqCharge::m_uiCash -> A
}

[Client]Game.Msg.MsgServerChargeOrder -> [Client]j.h
{
	[Client]Game.Msg.MsgServerChargeOrder::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerChargeOrder::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerChargeOrder::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerChargeOrder::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerChargeOrder::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerChargeOrder::m_ulOrderID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerChargeOrder::m_uiCash -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerChargeOrder::m_uiGold -> a
}

[Client]Game.Msg.MsgClientDeleteChar -> [Client]j.I
{
	[Client]Game.Msg.MsgClientDeleteChar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientDeleteChar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientDeleteChar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientDeleteChar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientDeleteChar::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientDeleteChar::m_uiRoleID -> A
}

[Client]Game.Msg.MsgServerDeleteChar -> [Client]j.i
{
	[Client]Game.Msg.MsgServerDeleteChar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerDeleteChar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerDeleteChar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerDeleteChar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerDeleteChar::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerDeleteChar::m_ebtResult -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerDeleteChar::m_uiRoleID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerDeleteChar::m_uiLeftTime -> a
}

[Client]Game.Msg.MsgClientReselectChar -> [Client]j.J
{

	[Client]Game.Msg.MsgClientReselectChar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReselectChar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReselectChar::Type -> A
}

[Client]Game.Msg.MsgClientPingMsg -> [Client]j.j
{

	[Client]Game.Msg.MsgClientPingMsg::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientPingMsg::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientPingMsg::Type -> A
}

[Client]Game.Msg.MsgServerPingMsg -> [Client]j.K
{

	[Client]Game.Msg.MsgServerPingMsg::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPingMsg::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPingMsg::Type -> A
}

[Client]Game.Msg.MsgClientReqAcessToken -> [Client]j.k
{

	[Client]Game.Msg.MsgClientReqAcessToken::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqAcessToken::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqAcessToken::Type -> A
}

[Client]Game.Msg.MsgServerAckAcessToken -> [Client]j.L
{
	[Client]Game.Msg.MsgServerAckAcessToken::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckAcessToken::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckAcessToken::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAcessToken::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckAcessToken::Type -> A
	System.String [Client]System.String Game.Msg.MsgServerAckAcessToken::m_strToken -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckAcessToken::m_uiDeadline -> A
}

[Client]Game.Msg.MsgClientCancleDeleteChar -> [Client]j.l
{
	[Client]Game.Msg.MsgClientCancleDeleteChar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientCancleDeleteChar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientCancleDeleteChar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientCancleDeleteChar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientCancleDeleteChar::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientCancleDeleteChar::m_uiRoleID -> A
}

[Client]Game.Msg.MsgServerCancleDeleteChar -> [Client]j.M
{
	[Client]Game.Msg.MsgServerCancleDeleteChar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCancleDeleteChar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCancleDeleteChar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCancleDeleteChar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCancleDeleteChar::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerCancleDeleteChar::m_ebtResult -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCancleDeleteChar::m_uiRoleID -> A
}

[Client]Game.Msg.MsgServer360UserInfo -> [Client]j.m
{
	[Client]Game.Msg.MsgServer360UserInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServer360UserInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServer360UserInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServer360UserInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServer360UserInfo::Type -> A
	System.String [Client]System.String Game.Msg.MsgServer360UserInfo::m_strUserID -> A
	System.String [Client]System.String Game.Msg.MsgServer360UserInfo::m_strName -> a
}

[Client]Game.Msg.MsgClientReqIosRecharge -> [Client]j.N
{
	[Client]Game.Msg.MsgClientReqIosRecharge::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqIosRecharge::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqIosRecharge::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqIosRecharge::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqIosRecharge::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientReqIosRecharge::m_ulAccountID -> A
	System.String [Client]System.String Game.Msg.MsgClientReqIosRecharge::m_strReceiptData -> A
	System.String [Client]System.String Game.Msg.MsgClientReqIosRecharge::m_strTransactionID -> a
}

[Client]Game.Msg.MsgServerAckIosRecharge -> [Client]j.n
{
	[Client]Game.Msg.MsgServerAckIosRecharge::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckIosRecharge::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckIosRecharge::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckIosRecharge::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckIosRecharge::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckIosRecharge::m_btRet -> a
	System.String [Client]System.String Game.Msg.MsgServerAckIosRecharge::m_strTransactionID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerAckIosRecharge::m_ulAccountID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckIosRecharge::m_uiGold -> A
}

[Client]Game.Msg.MsgServerSend360PayIP -> [Client]j.O
{
	[Client]Game.Msg.MsgServerSend360PayIP::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSend360PayIP::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSend360PayIP::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSend360PayIP::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSend360PayIP::Type -> A
	System.String [Client]System.String Game.Msg.MsgServerSend360PayIP::m_strIP -> A
}

[Client]Game.Msg.FamilyBaseData -> [Client]j.o
{
	[Client]Game.Msg.FamilyBaseData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.FamilyBaseData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.FamilyBaseData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyBaseData::m_uiID -> A
	System.String [Client]System.String Game.Msg.FamilyBaseData::m_strName -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyBaseData::m_uiLeader -> a
	System.String [Client]System.String Game.Msg.FamilyBaseData::m_strNotice -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyBaseData::m_uiCreateTime -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.FamilyBaseData::m_uiMemberTotalPower -> b
	System.String [Client]System.String Game.Msg.FamilyBaseData::m_strHireNewMemberNotice -> B
}

[Client]Game.Msg.ClientStatusData -> [Client]j.P
{
	[Client]Game.Msg.ClientStatusData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientStatusData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientStatusData::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Msg.ClientStatusData::m_usStatusID -> A
	System.Byte [Client]System.Byte Game.Msg.ClientStatusData::m_btLevel -> A
	System.Byte [Client]System.Byte Game.Msg.ClientStatusData::m_btCount -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientStatusData::m_uiLastTime -> A
}

[Client]Game.Msg.ClientSkillData -> [Client]j.p
{
	[Client]Game.Msg.ClientSkillData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientSkillData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientSkillData::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Msg.ClientSkillData::m_usSkillID -> A
	System.Byte [Client]System.Byte Game.Msg.ClientSkillData::m_btSkillLevel -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientSkillData::m_uiLeftCD -> A
}

[Client]Game.MsgHandler -> [Client]j.Q
{
	[Client]Game.MsgHandler::get_Instance[0]( ) -> A
	[Client]Game.MsgHandler::Init[0]( ) -> a
	[Client]Game.MsgHandler::Release[0]( ) -> B
	[Client]Game.MsgHandler::Reset[0]( ) -> b
	[Client]Game.MsgHandler::Update[0]( ) -> C
	[Client]Game.MsgHandler::OnMsgServerEnterWorld[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.MsgHandler::OnMsgServerCharMove[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.MsgHandler::OnMsgServerVerifyCharPos[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.MsgHandler::OnMsgServerNpcMove[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.MsgHandler::OnMsgServerVerifyNpcPos[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.MsgHandler::OnMsgServerPlayerEnterSight[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.MsgHandler::OnMsgServerPlayerEnterSightPack[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.MsgHandler::OnProcessCharAll[1]( Game.Msg.CSnapShotCharAll ) -> A
	[Client]Game.MsgHandler::OnPlayerEnterSight[2]( Game.Msg.CSnapShotBaseData, Game.Msg.CSnapShotPlayerAll ) -> A
	[Client]Game.MsgHandler::OnMonsterEnterSight[2]( Game.Msg.CSnapShotBaseData, Game.Msg.CSnapShotMonsterAll ) -> A
	[Client]Game.MsgHandler::OnNpcEnterSight[2]( Game.Msg.CSnapShotBaseData, Game.Msg.CSnapShotNpcAll ) -> A
	[Client]Game.MsgHandler::OnPetEnterSight[2]( Game.Msg.CSnapShotBaseData, Game.Msg.CSnapShotPetAll ) -> A
	[Client]Game.MsgHandler::OnMsgServerExitSightPack[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.MsgHandler::OnMsgServerChangeMap[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.MsgHandler::OnMsgServerCharFlyPos[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.MsgHandler::OnMsgServerChangeMapMask[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.MsgHandler::OnMsgServerMapMask[1]( Game.Msg.RecvMsgPacket ) -> f
	[Client]Game.MsgHandler::OnMsgServerAttrChangedMe[1]( Game.Msg.RecvMsgPacket ) -> G
	[Client]Game.MsgHandler::OnMsgServerAttrChangedOther[1]( Game.Msg.RecvMsgPacket ) -> g
	[Client]Game.MsgHandler::OnRoleAttrChange[1]( Game.Msg.CharAttrChange[] ) -> A
	[Client]Game.MsgHandler::OnCharAttrChange[2]( System.UInt32, Game.Msg.CharAttrChange[] ) -> A
	[Client]Game.MsgHandler::OnMsgServerSetExp[1]( Game.Msg.RecvMsgPacket ) -> H
	[Client]Game.MsgHandler::OnMsgServerAddExp[1]( Game.Msg.RecvMsgPacket ) -> h
	[Client]Game.MsgHandler::OnMsgServerNotifyFighterPower[1]( Game.Msg.RecvMsgPacket ) -> I
	[Client]Game.MsgHandler::OnMsgServerCallNoviceHelp[1]( Game.Msg.RecvMsgPacket ) -> i
	[Client]Game.MsgHandler::OnMsgRefreshCharData[1]( Game.Msg.RecvMsgPacket ) -> J
	[Client]Game.MsgHandler::OnMsgServerSend360PayIP[1]( Game.Msg.RecvMsgPacket ) -> j

	[Client]Game.MsgHandler::.cctor[0]( ) skipped:  special name
	[Client]Game.MsgHandler::.ctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.MsgHandler::m_Log -> A
	Game.MsgHandler [Client]Game.MsgHandler Game.MsgHandler::m_Instance -> A

	Game.MsgHandler [Client]Game.MsgHandler Game.MsgHandler::Instance -> dropped
}

[Client]Game.ArenaOffLine -> [Client]j.q
{
	[Client]Game.ArenaOffLine::get_Instance[0]( ) -> A
	[Client]Game.ArenaOffLine::get_Rank[0]( ) -> a
	[Client]Game.ArenaOffLine::set_Rank[1]( System.UInt32 ) -> A
	[Client]Game.ArenaOffLine::get_BattleValue[0]( ) -> B
	[Client]Game.ArenaOffLine::set_BattleValue[1]( System.UInt32 ) -> a
	[Client]Game.ArenaOffLine::get_AwardBattleValue[0]( ) -> b
	[Client]Game.ArenaOffLine::set_AwardBattleValue[1]( System.UInt32 ) -> B
	[Client]Game.ArenaOffLine::get_AwardBattleValuePerHour[0]( ) -> C
	[Client]Game.ArenaOffLine::set_AwardBattleValuePerHour[1]( System.UInt32 ) -> b
	[Client]Game.ArenaOffLine::get_Challengers[0]( ) -> c
	[Client]Game.ArenaOffLine::set_Challengers[1]( System.Collections.Generic.List`1<Game.Msg.ClientHeroData> ) -> A
	[Client]Game.ArenaOffLine::get_Records[0]( ) -> D
	[Client]Game.ArenaOffLine::set_Records[1]( System.Collections.Generic.List`1<Game.Msg.SHeroBattleRecord> ) -> A
	[Client]Game.ArenaOffLine::get_TargetId[0]( ) -> d
	[Client]Game.ArenaOffLine::set_TargetId[1]( System.UInt32 ) -> C
	[Client]Game.ArenaOffLine::get_StartTime[0]( ) -> E
	[Client]Game.ArenaOffLine::set_StartTime[1]( System.Single ) -> A
	[Client]Game.ArenaOffLine::get_TotalTime[0]( ) -> e
	[Client]Game.ArenaOffLine::set_TotalTime[1]( System.UInt32 ) -> c
	[Client]Game.ArenaOffLine::get_ChanllengeWin[0]( ) -> F
	[Client]Game.ArenaOffLine::set_ChanllengeWin[1]( System.Boolean ) -> A
	[Client]Game.ArenaOffLine::get_ChanllengeAwardExp[0]( ) -> f
	[Client]Game.ArenaOffLine::set_ChanllengeAwardExp[1]( System.UInt32 ) -> D
	[Client]Game.ArenaOffLine::get_CurChallengeNum[0]( ) -> G
	[Client]Game.ArenaOffLine::set_CurChallengeNum[1]( System.UInt32 ) -> d
	[Client]Game.ArenaOffLine::get_TotalChanllengeNum[0]( ) -> g
	[Client]Game.ArenaOffLine::set_TotalChanllengeNum[1]( System.UInt32 ) -> E
	[Client]Game.ArenaOffLine::get_GetAwardTime[0]( ) -> H
	[Client]Game.ArenaOffLine::set_GetAwardTime[1]( System.DateTime ) -> A
	[Client]Game.ArenaOffLine::get_CurPage[0]( ) -> h
	[Client]Game.ArenaOffLine::set_CurPage[1]( System.UInt32 ) -> e
	[Client]Game.ArenaOffLine::get_RankList[0]( ) -> I
	[Client]Game.ArenaOffLine::set_RankList[1]( System.Collections.Generic.List`1<Game.Msg.ClientHeroRankData> ) -> A
	[Client]Game.ArenaOffLine::Reset[0]( ) -> i
	[Client]Game.ArenaOffLine::CanGetAward[0]( ) -> J
	[Client]Game.ArenaOffLine::GetAwardTimeText[0]( ) -> j
	[Client]Game.ArenaOffLine::GetBattleLeftTime[0]( ) -> K
	[Client]Game.ArenaOffLine::GetPrice[1]( System.Int32 ) -> A
	[Client]Game.ArenaOffLine::CompareChanllenger[2]( Game.Msg.ClientHeroData, Game.Msg.ClientHeroData ) -> A
	[Client]Game.ArenaOffLine::ReqChallengers[0]( ) -> k
	[Client]Game.ArenaOffLine::OnMsgServerAckMyHeroRank[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.ArenaOffLine::ReqBattle[2]( System.UInt32, System.UInt32 ) -> A
	[Client]Game.ArenaOffLine::OnMsgServerAckBattle[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.ArenaOffLine::OnMsgServerStartBattle[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.ArenaOffLine::OnMsgServerEndBattle[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.ArenaOffLine::ReqGetAward[0]( ) -> L
	[Client]Game.ArenaOffLine::OnMsgServerAckGetAward[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.ArenaOffLine::ReqBuyChanllengeNum[1]( System.Int32 ) -> a
	[Client]Game.ArenaOffLine::OnMsgServerAckBuyChanllengeTime[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.ArenaOffLine::ReqRankList[1]( System.Int32 ) -> B
	[Client]Game.ArenaOffLine::OnMsgServerAckTotalRank[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.ArenaOffLine::OnMsgServerRefreshChanllengeTime[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.ArenaOffLine::OnMsgServerNotifyHeroRankAwardTime[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.ArenaOffLine::OnMsgServerRefreshBattleValue[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.ArenaOffLine::OnMsgServerRefreshAwardBattleValue[1]( Game.Msg.RecvMsgPacket ) -> F

	[Client]Game.ArenaOffLine::.ctor[0]( ) skipped:  special name
	[Client]Game.ArenaOffLine::.cctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::MaxRank -> A
	Game.ArenaOffLine [Client]Game.ArenaOffLine Game.ArenaOffLine::m_Instance -> A
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<Rank>k__BackingField -> a
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<BattleValue>k__BackingField -> B
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<AwardBattleValue>k__BackingField -> b
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<AwardBattleValuePerHour>k__BackingField -> C
	System.Collections.Generic.List`1<Game.Msg.ClientHeroData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientHeroData> Game.ArenaOffLine::<Challengers>k__BackingField -> A
	System.Collections.Generic.List`1<Game.Msg.SHeroBattleRecord> [Client]System.Collections.Generic.List`1<Game.Msg.SHeroBattleRecord> Game.ArenaOffLine::<Records>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<TargetId>k__BackingField -> c
	System.Single [Client]System.Single Game.ArenaOffLine::<StartTime>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<TotalTime>k__BackingField -> D
	System.Boolean [Client]System.Boolean Game.ArenaOffLine::<ChanllengeWin>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<ChanllengeAwardExp>k__BackingField -> d
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<CurChallengeNum>k__BackingField -> E
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<TotalChanllengeNum>k__BackingField -> e
	System.DateTime [Client]System.DateTime Game.ArenaOffLine::<GetAwardTime>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::<CurPage>k__BackingField -> F
	System.Collections.Generic.List`1<Game.Msg.ClientHeroRankData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientHeroRankData> Game.ArenaOffLine::<RankList>k__BackingField -> A

	Game.ArenaOffLine [Client]Game.ArenaOffLine Game.ArenaOffLine::Instance -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::Rank -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::BattleValue -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::AwardBattleValue -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::AwardBattleValuePerHour -> dropped
	System.Collections.Generic.List`1<Game.Msg.ClientHeroData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientHeroData> Game.ArenaOffLine::Challengers -> dropped
	System.Collections.Generic.List`1<Game.Msg.SHeroBattleRecord> [Client]System.Collections.Generic.List`1<Game.Msg.SHeroBattleRecord> Game.ArenaOffLine::Records -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::TargetId -> dropped
	System.Single [Client]System.Single Game.ArenaOffLine::StartTime -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::TotalTime -> dropped
	System.Boolean [Client]System.Boolean Game.ArenaOffLine::ChanllengeWin -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::ChanllengeAwardExp -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::CurChallengeNum -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::TotalChanllengeNum -> dropped
	System.DateTime [Client]System.DateTime Game.ArenaOffLine::GetAwardTime -> dropped
	System.UInt32 [Client]System.UInt32 Game.ArenaOffLine::CurPage -> dropped
	System.Collections.Generic.List`1<Game.Msg.ClientHeroRankData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientHeroRankData> Game.ArenaOffLine::RankList -> dropped
}

[Client]Game.LocalString -> [Client]j.R
{
	[Client]Game.LocalString::get_Instance[0]( ) -> A
	[Client]Game.LocalString::Init[0]( ) -> a
	[Client]Game.LocalString::Get[1]( System.String ) -> A

	[Client]Game.LocalString::.cctor[0]( ) skipped:  special name
	[Client]Game.LocalString::.ctor[0]( ) skipped:  special name

	Game.StringFileReader [Client]Game.StringFileReader Game.LocalString::m_Strings -> A
	Game.LocalString [Client]Game.LocalString Game.LocalString::m_Instance -> A

	Game.LocalString [Client]Game.LocalString Game.LocalString::Instance -> dropped
}

[Client]Game.Data.Local -> [Client]j.r
{
	[Client]Game.Data.Local::get_IsLocal[0]( ) -> A
	[Client]Game.Data.Local::set_IsLocal[1]( System.Boolean ) -> A
	[Client]Game.Data.Local::get_MapId[0]( ) -> a
	[Client]Game.Data.Local::set_MapId[1]( System.Int32 ) -> A
	[Client]Game.Data.Local::get_MapPosX[0]( ) -> B
	[Client]Game.Data.Local::set_MapPosX[1]( System.Single ) -> A
	[Client]Game.Data.Local::get_MapPosZ[0]( ) -> b
	[Client]Game.Data.Local::set_MapPosZ[1]( System.Single ) -> a
	[Client]Game.Data.Local::get_IsNewPlayer[0]( ) -> C
	[Client]Game.Data.Local::set_IsNewPlayer[1]( System.Boolean ) -> a
	[Client]Game.Data.Local::get_WeaponID[0]( ) -> c
	[Client]Game.Data.Local::set_WeaponID[1]( System.Int32 ) -> a
	[Client]Game.Data.Local::get_ArmourID[0]( ) -> D
	[Client]Game.Data.Local::set_ArmourID[1]( System.Int32 ) -> B
	[Client]Game.Data.Local::get_DressID[0]( ) -> d
	[Client]Game.Data.Local::set_DressID[1]( System.Int32 ) -> b
	[Client]Game.Data.Local::get_HairID[0]( ) -> E
	[Client]Game.Data.Local::set_HairID[1]( System.Int32 ) -> C
	[Client]Game.Data.Local::get_Skill1[0]( ) -> e
	[Client]Game.Data.Local::set_Skill1[1]( System.Int32 ) -> c
	[Client]Game.Data.Local::get_Skill1Lv[0]( ) -> F
	[Client]Game.Data.Local::set_Skill1Lv[1]( System.Int32 ) -> D
	[Client]Game.Data.Local::get_Skill2[0]( ) -> f
	[Client]Game.Data.Local::set_Skill2[1]( System.Int32 ) -> d
	[Client]Game.Data.Local::get_Skill2Lv[0]( ) -> G
	[Client]Game.Data.Local::set_Skill2Lv[1]( System.Int32 ) -> E
	[Client]Game.Data.Local::get_Skill3[0]( ) -> g
	[Client]Game.Data.Local::set_Skill3[1]( System.Int32 ) -> e
	[Client]Game.Data.Local::get_Skill3Lv[0]( ) -> H
	[Client]Game.Data.Local::set_Skill3Lv[1]( System.Int32 ) -> F
	[Client]Game.Data.Local::get_HPValue[0]( ) -> h
	[Client]Game.Data.Local::set_HPValue[1]( System.Int32 ) -> f
	[Client]Game.Data.Local::get_ResistTime[0]( ) -> I
	[Client]Game.Data.Local::set_ResistTime[1]( System.Int32 ) -> G
	[Client]Game.Data.Local::Load[0]( ) -> i

	[Client]Game.Data.Local::.ctor[0]( ) skipped:  special name
	[Client]Game.Data.Local::.cctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.Data.Local::m_FilePath -> A
	log4net.ILog [Client]log4net.ILog Game.Data.Local::m_Log -> A
	System.Boolean [Client]System.Boolean Game.Data.Local::<IsLocal>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.Data.Local::<MapId>k__BackingField -> A
	System.Single [Client]System.Single Game.Data.Local::<MapPosX>k__BackingField -> A
	System.Single [Client]System.Single Game.Data.Local::<MapPosZ>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.Data.Local::<IsNewPlayer>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.Data.Local::<WeaponID>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.Data.Local::<ArmourID>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.Data.Local::<DressID>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.Data.Local::<HairID>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.Data.Local::<Skill1>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.Data.Local::<Skill1Lv>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.Data.Local::<Skill2>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.Data.Local::<Skill2Lv>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.Data.Local::<Skill3>k__BackingField -> e
	System.Int32 [Client]System.Int32 Game.Data.Local::<Skill3Lv>k__BackingField -> F
	System.Int32 [Client]System.Int32 Game.Data.Local::<HPValue>k__BackingField -> f
	System.Int32 [Client]System.Int32 Game.Data.Local::<ResistTime>k__BackingField -> G

	System.Boolean [Client]System.Boolean Game.Data.Local::IsLocal -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::MapId -> dropped
	System.Single [Client]System.Single Game.Data.Local::MapPosX -> dropped
	System.Single [Client]System.Single Game.Data.Local::MapPosZ -> dropped
	System.Boolean [Client]System.Boolean Game.Data.Local::IsNewPlayer -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::WeaponID -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::ArmourID -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::DressID -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::HairID -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::Skill1 -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::Skill1Lv -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::Skill2 -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::Skill2Lv -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::Skill3 -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::Skill3Lv -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::HPValue -> dropped
	System.Int32 [Client]System.Int32 Game.Data.Local::ResistTime -> dropped
}

[Client]Game.DataSoulTrade -> [Client]j.S
{
	[Client]Game.DataSoulTrade::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSoulTrade::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSoulTrade::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSoulTrade::get_Part[0]( ) -> A
	[Client]Game.DataSoulTrade::set_Part[1]( System.Int32 ) -> A
	[Client]Game.DataSoulTrade::get_Level[0]( ) -> a
	[Client]Game.DataSoulTrade::set_Level[1]( System.Int32 ) -> a
	[Client]Game.DataSoulTrade::get_SoulClass[0]( ) -> B
	[Client]Game.DataSoulTrade::set_SoulClass[1]( System.Int32 ) -> B
	[Client]Game.DataSoulTrade::get_SoulName[0]( ) -> b
	[Client]Game.DataSoulTrade::set_SoulName[1]( System.String ) -> A

	[Client]Game.DataSoulTrade::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataSoulTrade::<Part>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataSoulTrade::<Level>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataSoulTrade::<SoulClass>k__BackingField -> B
	System.String [Client]System.String Game.DataSoulTrade::<SoulName>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataSoulTrade::Part -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulTrade::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulTrade::SoulClass -> dropped
	System.String [Client]System.String Game.DataSoulTrade::SoulName -> dropped
}

[Client]Game.DataSoulTradeManager -> [Client]j.s
{
	[Client]Game.DataSoulTradeManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSoulTradeManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSoulTradeManager::Clear[0]( ) -> A
	[Client]Game.DataSoulTradeManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSoulTradeManager::GetDataByPart[1]( System.Int32 ) -> A
	[Client]Game.DataSoulTradeManager::GetDataListByPart[1]( System.Int32 ) -> a
	[Client]Game.DataSoulTradeManager::GetDataByLevel[1]( System.Int32 ) -> B
	[Client]Game.DataSoulTradeManager::GetDataListByLevel[1]( System.Int32 ) -> b
	[Client]Game.DataSoulTradeManager::GetDataBySoulClass[1]( System.Int32 ) -> C
	[Client]Game.DataSoulTradeManager::GetDataListBySoulClass[1]( System.Int32 ) -> c
	[Client]Game.DataSoulTradeManager::GetDataBySoulName[1]( System.String ) -> A
	[Client]Game.DataSoulTradeManager::GetDataListBySoulName[1]( System.String ) -> a
	[Client]Game.DataSoulTradeManager::get_Instance[0]( ) -> a
	[Client]Game.DataSoulTradeManager::get_DataList[0]( ) -> B
	[Client]Game.DataSoulTradeManager::get_Count[0]( ) -> b

	[Client]Game.DataSoulTradeManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataSoulTradeManager::.ctor[0]( ) skipped:  special name

	Game.DataSoulTradeManager [Client]Game.DataSoulTradeManager Game.DataSoulTradeManager::instance -> A
	System.Collections.Generic.List`1<Game.DataSoulTrade> [Client]System.Collections.Generic.List`1<Game.DataSoulTrade> Game.DataSoulTradeManager::dataList -> A

	Game.DataSoulTradeManager [Client]Game.DataSoulTradeManager Game.DataSoulTradeManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataSoulTrade> [Client]System.Collections.Generic.List`1<Game.DataSoulTrade> Game.DataSoulTradeManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulTradeManager::Count -> dropped
}

[Client]Game.DataSoulLevel -> [Client]j.T
{
	[Client]Game.DataSoulLevel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSoulLevel::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSoulLevel::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSoulLevel::get_SoulId[0]( ) -> A
	[Client]Game.DataSoulLevel::set_SoulId[1]( System.Int32 ) -> A
	[Client]Game.DataSoulLevel::get_SoulLevel[0]( ) -> a
	[Client]Game.DataSoulLevel::set_SoulLevel[1]( System.Int32 ) -> a
	[Client]Game.DataSoulLevel::get_SoulClass[0]( ) -> B
	[Client]Game.DataSoulLevel::set_SoulClass[1]( System.Int32 ) -> B
	[Client]Game.DataSoulLevel::get_AttrType[0]( ) -> b
	[Client]Game.DataSoulLevel::set_AttrType[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataSoulLevel::get_AttrValue[0]( ) -> C
	[Client]Game.DataSoulLevel::set_AttrValue[1]( System.Collections.Generic.List`1<System.Single> ) -> A
	[Client]Game.DataSoulLevel::get_SoulName[0]( ) -> c
	[Client]Game.DataSoulLevel::set_SoulName[1]( System.String ) -> A
	[Client]Game.DataSoulLevel::get_SoulTip[0]( ) -> D
	[Client]Game.DataSoulLevel::set_SoulTip[1]( System.String ) -> a

	[Client]Game.DataSoulLevel::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataSoulLevel::<SoulId>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataSoulLevel::<SoulLevel>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataSoulLevel::<SoulClass>k__BackingField -> B
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataSoulLevel::<AttrType>k__BackingField -> A
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataSoulLevel::<AttrValue>k__BackingField -> A
	System.String [Client]System.String Game.DataSoulLevel::<SoulName>k__BackingField -> A
	System.String [Client]System.String Game.DataSoulLevel::<SoulTip>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataSoulLevel::SoulId -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulLevel::SoulLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulLevel::SoulClass -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataSoulLevel::AttrType -> dropped
	System.Collections.Generic.List`1<System.Single> [Client]System.Collections.Generic.List`1<System.Single> Game.DataSoulLevel::AttrValue -> dropped
	System.String [Client]System.String Game.DataSoulLevel::SoulName -> dropped
	System.String [Client]System.String Game.DataSoulLevel::SoulTip -> dropped
}

[Client]Game.DataSoulLevelManager -> [Client]j.t
{
	[Client]Game.DataSoulLevelManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataSoulLevelManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataSoulLevelManager::Clear[0]( ) -> A
	[Client]Game.DataSoulLevelManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataSoulLevelManager::GetDataBySoulId[1]( System.Int32 ) -> A
	[Client]Game.DataSoulLevelManager::GetDataListBySoulId[1]( System.Int32 ) -> a
	[Client]Game.DataSoulLevelManager::GetDataBySoulLevel[1]( System.Int32 ) -> B
	[Client]Game.DataSoulLevelManager::GetDataListBySoulLevel[1]( System.Int32 ) -> b
	[Client]Game.DataSoulLevelManager::GetDataBySoulClass[1]( System.Int32 ) -> C
	[Client]Game.DataSoulLevelManager::GetDataListBySoulClass[1]( System.Int32 ) -> c
	[Client]Game.DataSoulLevelManager::GetDataByAttrType[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataSoulLevelManager::GetDataListByAttrType[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataSoulLevelManager::GetDataByAttrValue[1]( System.Collections.Generic.List`1<System.Single> ) -> A
	[Client]Game.DataSoulLevelManager::GetDataListByAttrValue[1]( System.Collections.Generic.List`1<System.Single> ) -> a
	[Client]Game.DataSoulLevelManager::GetDataBySoulName[1]( System.String ) -> A
	[Client]Game.DataSoulLevelManager::GetDataListBySoulName[1]( System.String ) -> a
	[Client]Game.DataSoulLevelManager::GetDataBySoulTip[1]( System.String ) -> B
	[Client]Game.DataSoulLevelManager::GetDataListBySoulTip[1]( System.String ) -> b
	[Client]Game.DataSoulLevelManager::get_Instance[0]( ) -> a
	[Client]Game.DataSoulLevelManager::get_DataList[0]( ) -> B
	[Client]Game.DataSoulLevelManager::get_Count[0]( ) -> b

	[Client]Game.DataSoulLevelManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataSoulLevelManager::.ctor[0]( ) skipped:  special name

	Game.DataSoulLevelManager [Client]Game.DataSoulLevelManager Game.DataSoulLevelManager::instance -> A
	System.Collections.Generic.List`1<Game.DataSoulLevel> [Client]System.Collections.Generic.List`1<Game.DataSoulLevel> Game.DataSoulLevelManager::dataList -> A

	Game.DataSoulLevelManager [Client]Game.DataSoulLevelManager Game.DataSoulLevelManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataSoulLevel> [Client]System.Collections.Generic.List`1<Game.DataSoulLevel> Game.DataSoulLevelManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataSoulLevelManager::Count -> dropped
}

[Client]Game.DataLastname -> [Client]j.U
{
	[Client]Game.DataLastname::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataLastname::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataLastname::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataLastname::get_Name[0]( ) -> A
	[Client]Game.DataLastname::set_Name[1]( System.String ) -> A

	[Client]Game.DataLastname::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.DataLastname::<Name>k__BackingField -> A

	System.String [Client]System.String Game.DataLastname::Name -> dropped
}

[Client]Game.DataLastnameManager -> [Client]j.u
{
	[Client]Game.DataLastnameManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataLastnameManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataLastnameManager::Clear[0]( ) -> A
	[Client]Game.DataLastnameManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataLastnameManager::GetDataByName[1]( System.String ) -> A
	[Client]Game.DataLastnameManager::GetDataListByName[1]( System.String ) -> a
	[Client]Game.DataLastnameManager::get_Instance[0]( ) -> a
	[Client]Game.DataLastnameManager::get_DataList[0]( ) -> B
	[Client]Game.DataLastnameManager::get_Count[0]( ) -> b

	[Client]Game.DataLastnameManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataLastnameManager::.ctor[0]( ) skipped:  special name

	Game.DataLastnameManager [Client]Game.DataLastnameManager Game.DataLastnameManager::instance -> A
	System.Collections.Generic.List`1<Game.DataLastname> [Client]System.Collections.Generic.List`1<Game.DataLastname> Game.DataLastnameManager::dataList -> A

	Game.DataLastnameManager [Client]Game.DataLastnameManager Game.DataLastnameManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataLastname> [Client]System.Collections.Generic.List`1<Game.DataLastname> Game.DataLastnameManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataLastnameManager::Count -> dropped
}

[Client]Game.DataItem -> [Client]j.V
{
	[Client]Game.DataItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataItem::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataItem::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataItem::get_ID[0]( ) -> A
	[Client]Game.DataItem::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataItem::get_ItemType[0]( ) -> a
	[Client]Game.DataItem::set_ItemType[1]( System.String ) -> A
	[Client]Game.DataItem::get_ItemName[0]( ) -> B
	[Client]Game.DataItem::set_ItemName[1]( System.String ) -> a
	[Client]Game.DataItem::get_Description[0]( ) -> b
	[Client]Game.DataItem::set_Description[1]( System.String ) -> B
	[Client]Game.DataItem::get_ItemLevel[0]( ) -> C
	[Client]Game.DataItem::set_ItemLevel[1]( System.Int32 ) -> a
	[Client]Game.DataItem::get_Value[0]( ) -> c
	[Client]Game.DataItem::set_Value[1]( System.Int32 ) -> B
	[Client]Game.DataItem::get_Quality[0]( ) -> D
	[Client]Game.DataItem::set_Quality[1]( System.Int32 ) -> b
	[Client]Game.DataItem::get_IconFile[0]( ) -> d
	[Client]Game.DataItem::set_IconFile[1]( System.String ) -> b
	[Client]Game.DataItem::get_DropItemModel[0]( ) -> E
	[Client]Game.DataItem::set_DropItemModel[1]( System.Int32 ) -> C
	[Client]Game.DataItem::get_CanDelete[0]( ) -> e
	[Client]Game.DataItem::set_CanDelete[1]( System.Boolean ) -> A
	[Client]Game.DataItem::get_CanTrade[0]( ) -> F
	[Client]Game.DataItem::set_CanTrade[1]( System.Boolean ) -> a
	[Client]Game.DataItem::get_CanSold[0]( ) -> f
	[Client]Game.DataItem::set_CanSold[1]( System.Boolean ) -> B
	[Client]Game.DataItem::get_ColdDownType[0]( ) -> G
	[Client]Game.DataItem::set_ColdDownType[1]( System.Int32 ) -> c
	[Client]Game.DataItem::get_ColdDownTime[0]( ) -> g
	[Client]Game.DataItem::set_ColdDownTime[1]( System.Single ) -> A
	[Client]Game.DataItem::get_SourceType[0]( ) -> H
	[Client]Game.DataItem::set_SourceType[1]( System.Int32 ) -> D
	[Client]Game.DataItem::get_SourceId[0]( ) -> h
	[Client]Game.DataItem::set_SourceId[1]( System.Int32 ) -> d
	[Client]Game.DataItem::get_ItemBox[0]( ) -> I
	[Client]Game.DataItem::set_ItemBox[1]( System.Boolean ) -> b
	[Client]Game.DataItem::get_ComposeMoney[0]( ) -> i
	[Client]Game.DataItem::set_ComposeMoney[1]( System.Int32 ) -> E
	[Client]Game.DataItem::get_Valuable[0]( ) -> J
	[Client]Game.DataItem::set_Valuable[1]( System.Boolean ) -> C
	[Client]Game.DataItem::get_IsExclusive[0]( ) -> j
	[Client]Game.DataItem::set_IsExclusive[1]( System.Boolean ) -> c
	[Client]Game.DataItem::get_QuickUse[0]( ) -> K
	[Client]Game.DataItem::set_QuickUse[1]( System.Boolean ) -> D
	[Client]Game.DataItem::get_ShopDescription[0]( ) -> k
	[Client]Game.DataItem::set_ShopDescription[1]( System.String ) -> C
	[Client]Game.DataItem::get_OpenShopNpcId[0]( ) -> L
	[Client]Game.DataItem::set_OpenShopNpcId[1]( System.Int32 ) -> e

	[Client]Game.DataItem::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataItem::<ID>k__BackingField -> A
	System.String [Client]System.String Game.DataItem::<ItemType>k__BackingField -> A
	System.String [Client]System.String Game.DataItem::<ItemName>k__BackingField -> a
	System.String [Client]System.String Game.DataItem::<Description>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataItem::<ItemLevel>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataItem::<Value>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataItem::<Quality>k__BackingField -> b
	System.String [Client]System.String Game.DataItem::<IconFile>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataItem::<DropItemModel>k__BackingField -> C
	System.Boolean [Client]System.Boolean Game.DataItem::<CanDelete>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DataItem::<CanTrade>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataItem::<CanSold>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataItem::<ColdDownType>k__BackingField -> c
	System.Single [Client]System.Single Game.DataItem::<ColdDownTime>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataItem::<SourceType>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.DataItem::<SourceId>k__BackingField -> d
	System.Boolean [Client]System.Boolean Game.DataItem::<ItemBox>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataItem::<ComposeMoney>k__BackingField -> E
	System.Boolean [Client]System.Boolean Game.DataItem::<Valuable>k__BackingField -> C
	System.Boolean [Client]System.Boolean Game.DataItem::<IsExclusive>k__BackingField -> c
	System.Boolean [Client]System.Boolean Game.DataItem::<QuickUse>k__BackingField -> D
	System.String [Client]System.String Game.DataItem::<ShopDescription>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataItem::<OpenShopNpcId>k__BackingField -> e

	System.Int32 [Client]System.Int32 Game.DataItem::ID -> dropped
	System.String [Client]System.String Game.DataItem::ItemType -> dropped
	System.String [Client]System.String Game.DataItem::ItemName -> dropped
	System.String [Client]System.String Game.DataItem::Description -> dropped
	System.Int32 [Client]System.Int32 Game.DataItem::ItemLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataItem::Value -> dropped
	System.Int32 [Client]System.Int32 Game.DataItem::Quality -> dropped
	System.String [Client]System.String Game.DataItem::IconFile -> dropped
	System.Int32 [Client]System.Int32 Game.DataItem::DropItemModel -> dropped
	System.Boolean [Client]System.Boolean Game.DataItem::CanDelete -> dropped
	System.Boolean [Client]System.Boolean Game.DataItem::CanTrade -> dropped
	System.Boolean [Client]System.Boolean Game.DataItem::CanSold -> dropped
	System.Int32 [Client]System.Int32 Game.DataItem::ColdDownType -> dropped
	System.Single [Client]System.Single Game.DataItem::ColdDownTime -> dropped
	System.Int32 [Client]System.Int32 Game.DataItem::SourceType -> dropped
	System.Int32 [Client]System.Int32 Game.DataItem::SourceId -> dropped
	System.Boolean [Client]System.Boolean Game.DataItem::ItemBox -> dropped
	System.Int32 [Client]System.Int32 Game.DataItem::ComposeMoney -> dropped
	System.Boolean [Client]System.Boolean Game.DataItem::Valuable -> dropped
	System.Boolean [Client]System.Boolean Game.DataItem::IsExclusive -> dropped
	System.Boolean [Client]System.Boolean Game.DataItem::QuickUse -> dropped
	System.String [Client]System.String Game.DataItem::ShopDescription -> dropped
	System.Int32 [Client]System.Int32 Game.DataItem::OpenShopNpcId -> dropped
}

[Client]Game.DataItemManager -> [Client]j.v
{
	[Client]Game.DataItemManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataItemManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataItemManager::Clear[0]( ) -> A
	[Client]Game.DataItemManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataItemManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataItemManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataItemManager::GetDataByItemType[1]( System.String ) -> A
	[Client]Game.DataItemManager::GetDataListByItemType[1]( System.String ) -> a
	[Client]Game.DataItemManager::GetDataByItemName[1]( System.String ) -> B
	[Client]Game.DataItemManager::GetDataListByItemName[1]( System.String ) -> b
	[Client]Game.DataItemManager::GetDataByDescription[1]( System.String ) -> C
	[Client]Game.DataItemManager::GetDataListByDescription[1]( System.String ) -> c
	[Client]Game.DataItemManager::GetDataByItemLevel[1]( System.Int32 ) -> B
	[Client]Game.DataItemManager::GetDataListByItemLevel[1]( System.Int32 ) -> b
	[Client]Game.DataItemManager::GetDataByValue[1]( System.Int32 ) -> C
	[Client]Game.DataItemManager::GetDataListByValue[1]( System.Int32 ) -> c
	[Client]Game.DataItemManager::GetDataByQuality[1]( System.Int32 ) -> D
	[Client]Game.DataItemManager::GetDataListByQuality[1]( System.Int32 ) -> d
	[Client]Game.DataItemManager::GetDataByIconFile[1]( System.String ) -> D
	[Client]Game.DataItemManager::GetDataListByIconFile[1]( System.String ) -> d
	[Client]Game.DataItemManager::GetDataByDropItemModel[1]( System.Int32 ) -> E
	[Client]Game.DataItemManager::GetDataListByDropItemModel[1]( System.Int32 ) -> e
	[Client]Game.DataItemManager::GetDataByCanDelete[1]( System.Boolean ) -> A
	[Client]Game.DataItemManager::GetDataListByCanDelete[1]( System.Boolean ) -> a
	[Client]Game.DataItemManager::GetDataByCanTrade[1]( System.Boolean ) -> B
	[Client]Game.DataItemManager::GetDataListByCanTrade[1]( System.Boolean ) -> b
	[Client]Game.DataItemManager::GetDataByCanSold[1]( System.Boolean ) -> C
	[Client]Game.DataItemManager::GetDataListByCanSold[1]( System.Boolean ) -> c
	[Client]Game.DataItemManager::GetDataByColdDownType[1]( System.Int32 ) -> F
	[Client]Game.DataItemManager::GetDataListByColdDownType[1]( System.Int32 ) -> f
	[Client]Game.DataItemManager::GetDataByColdDownTime[1]( System.Single ) -> A
	[Client]Game.DataItemManager::GetDataListByColdDownTime[1]( System.Single ) -> a
	[Client]Game.DataItemManager::GetDataBySourceType[1]( System.Int32 ) -> G
	[Client]Game.DataItemManager::GetDataListBySourceType[1]( System.Int32 ) -> g
	[Client]Game.DataItemManager::GetDataBySourceId[1]( System.Int32 ) -> H
	[Client]Game.DataItemManager::GetDataListBySourceId[1]( System.Int32 ) -> h
	[Client]Game.DataItemManager::GetDataByItemBox[1]( System.Boolean ) -> D
	[Client]Game.DataItemManager::GetDataListByItemBox[1]( System.Boolean ) -> d
	[Client]Game.DataItemManager::GetDataByComposeMoney[1]( System.Int32 ) -> I
	[Client]Game.DataItemManager::GetDataListByComposeMoney[1]( System.Int32 ) -> i
	[Client]Game.DataItemManager::GetDataByValuable[1]( System.Boolean ) -> E
	[Client]Game.DataItemManager::GetDataListByValuable[1]( System.Boolean ) -> e
	[Client]Game.DataItemManager::GetDataByIsExclusive[1]( System.Boolean ) -> F
	[Client]Game.DataItemManager::GetDataListByIsExclusive[1]( System.Boolean ) -> f
	[Client]Game.DataItemManager::GetDataByQuickUse[1]( System.Boolean ) -> G
	[Client]Game.DataItemManager::GetDataListByQuickUse[1]( System.Boolean ) -> g
	[Client]Game.DataItemManager::GetDataByShopDescription[1]( System.String ) -> E
	[Client]Game.DataItemManager::GetDataListByShopDescription[1]( System.String ) -> e
	[Client]Game.DataItemManager::GetDataByOpenShopNpcId[1]( System.Int32 ) -> J
	[Client]Game.DataItemManager::GetDataListByOpenShopNpcId[1]( System.Int32 ) -> j
	[Client]Game.DataItemManager::get_Instance[0]( ) -> a
	[Client]Game.DataItemManager::get_DataList[0]( ) -> B
	[Client]Game.DataItemManager::get_Count[0]( ) -> b

	[Client]Game.DataItemManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataItemManager::.ctor[0]( ) skipped:  special name

	Game.DataItemManager [Client]Game.DataItemManager Game.DataItemManager::instance -> A
	System.Collections.Generic.List`1<Game.DataItem> [Client]System.Collections.Generic.List`1<Game.DataItem> Game.DataItemManager::dataList -> A

	Game.DataItemManager [Client]Game.DataItemManager Game.DataItemManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataItem> [Client]System.Collections.Generic.List`1<Game.DataItem> Game.DataItemManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataItemManager::Count -> dropped
}

[Client]Game.DataFaq -> [Client]j.W
{
	[Client]Game.DataFaq::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFaq::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFaq::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFaq::get_ID[0]( ) -> A
	[Client]Game.DataFaq::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataFaq::get_SubID[0]( ) -> a
	[Client]Game.DataFaq::set_SubID[1]( System.Int32 ) -> a
	[Client]Game.DataFaq::get_TypeName[0]( ) -> B
	[Client]Game.DataFaq::set_TypeName[1]( System.String ) -> A
	[Client]Game.DataFaq::get_Level[0]( ) -> b
	[Client]Game.DataFaq::set_Level[1]( System.Int32 ) -> B
	[Client]Game.DataFaq::get_LevelLimit[0]( ) -> C
	[Client]Game.DataFaq::set_LevelLimit[1]( System.Int32 ) -> b
	[Client]Game.DataFaq::get_EctypeNumber[0]( ) -> c
	[Client]Game.DataFaq::set_EctypeNumber[1]( System.Int32 ) -> C
	[Client]Game.DataFaq::get_RecommendedStar[0]( ) -> D
	[Client]Game.DataFaq::set_RecommendedStar[1]( System.Int32 ) -> c
	[Client]Game.DataFaq::get_IconFile[0]( ) -> d
	[Client]Game.DataFaq::set_IconFile[1]( System.String ) -> a
	[Client]Game.DataFaq::get_Description[0]( ) -> E
	[Client]Game.DataFaq::set_Description[1]( System.String ) -> B
	[Client]Game.DataFaq::get_ActionType[0]( ) -> e
	[Client]Game.DataFaq::set_ActionType[1]( System.Int32 ) -> D
	[Client]Game.DataFaq::get_NpcID[0]( ) -> F
	[Client]Game.DataFaq::set_NpcID[1]( System.Int32 ) -> d
	[Client]Game.DataFaq::get_DlgID[0]( ) -> f
	[Client]Game.DataFaq::set_DlgID[1]( System.Int32 ) -> E
	[Client]Game.DataFaq::get_ActivityID[0]( ) -> G
	[Client]Game.DataFaq::set_ActivityID[1]( System.Int32 ) -> e
	[Client]Game.DataFaq::get_EctypeID[0]( ) -> g
	[Client]Game.DataFaq::set_EctypeID[1]( System.Int32 ) -> F

	[Client]Game.DataFaq::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataFaq::<ID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataFaq::<SubID>k__BackingField -> a
	System.String [Client]System.String Game.DataFaq::<TypeName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataFaq::<Level>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataFaq::<LevelLimit>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataFaq::<EctypeNumber>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataFaq::<RecommendedStar>k__BackingField -> c
	System.String [Client]System.String Game.DataFaq::<IconFile>k__BackingField -> a
	System.String [Client]System.String Game.DataFaq::<Description>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataFaq::<ActionType>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.DataFaq::<NpcID>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataFaq::<DlgID>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataFaq::<ActivityID>k__BackingField -> e
	System.Int32 [Client]System.Int32 Game.DataFaq::<EctypeID>k__BackingField -> F

	System.Int32 [Client]System.Int32 Game.DataFaq::ID -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::SubID -> dropped
	System.String [Client]System.String Game.DataFaq::TypeName -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::LevelLimit -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::EctypeNumber -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::RecommendedStar -> dropped
	System.String [Client]System.String Game.DataFaq::IconFile -> dropped
	System.String [Client]System.String Game.DataFaq::Description -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::ActionType -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::NpcID -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::DlgID -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::ActivityID -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaq::EctypeID -> dropped
}

[Client]Game.DataFaqManager -> [Client]j.w
{
	[Client]Game.DataFaqManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFaqManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFaqManager::Clear[0]( ) -> A
	[Client]Game.DataFaqManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFaqManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataFaqManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataFaqManager::GetDataBySubID[1]( System.Int32 ) -> B
	[Client]Game.DataFaqManager::GetDataListBySubID[1]( System.Int32 ) -> b
	[Client]Game.DataFaqManager::GetDataByTypeName[1]( System.String ) -> A
	[Client]Game.DataFaqManager::GetDataListByTypeName[1]( System.String ) -> a
	[Client]Game.DataFaqManager::GetDataByLevel[1]( System.Int32 ) -> C
	[Client]Game.DataFaqManager::GetDataListByLevel[1]( System.Int32 ) -> c
	[Client]Game.DataFaqManager::GetDataByLevelLimit[1]( System.Int32 ) -> D
	[Client]Game.DataFaqManager::GetDataListByLevelLimit[1]( System.Int32 ) -> d
	[Client]Game.DataFaqManager::GetDataByEctypeNumber[1]( System.Int32 ) -> E
	[Client]Game.DataFaqManager::GetDataListByEctypeNumber[1]( System.Int32 ) -> e
	[Client]Game.DataFaqManager::GetDataByRecommendedStar[1]( System.Int32 ) -> F
	[Client]Game.DataFaqManager::GetDataListByRecommendedStar[1]( System.Int32 ) -> f
	[Client]Game.DataFaqManager::GetDataByIconFile[1]( System.String ) -> B
	[Client]Game.DataFaqManager::GetDataListByIconFile[1]( System.String ) -> b
	[Client]Game.DataFaqManager::GetDataByDescription[1]( System.String ) -> C
	[Client]Game.DataFaqManager::GetDataListByDescription[1]( System.String ) -> c
	[Client]Game.DataFaqManager::GetDataByActionType[1]( System.Int32 ) -> G
	[Client]Game.DataFaqManager::GetDataListByActionType[1]( System.Int32 ) -> g
	[Client]Game.DataFaqManager::GetDataByNpcID[1]( System.Int32 ) -> H
	[Client]Game.DataFaqManager::GetDataListByNpcID[1]( System.Int32 ) -> h
	[Client]Game.DataFaqManager::GetDataByDlgID[1]( System.Int32 ) -> I
	[Client]Game.DataFaqManager::GetDataListByDlgID[1]( System.Int32 ) -> i
	[Client]Game.DataFaqManager::GetDataByActivityID[1]( System.Int32 ) -> J
	[Client]Game.DataFaqManager::GetDataListByActivityID[1]( System.Int32 ) -> j
	[Client]Game.DataFaqManager::GetDataByEctypeID[1]( System.Int32 ) -> K
	[Client]Game.DataFaqManager::GetDataListByEctypeID[1]( System.Int32 ) -> k
	[Client]Game.DataFaqManager::get_Instance[0]( ) -> a
	[Client]Game.DataFaqManager::get_DataList[0]( ) -> B
	[Client]Game.DataFaqManager::get_Count[0]( ) -> b

	[Client]Game.DataFaqManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataFaqManager::.ctor[0]( ) skipped:  special name

	Game.DataFaqManager [Client]Game.DataFaqManager Game.DataFaqManager::instance -> A
	System.Collections.Generic.List`1<Game.DataFaq> [Client]System.Collections.Generic.List`1<Game.DataFaq> Game.DataFaqManager::dataList -> A

	Game.DataFaqManager [Client]Game.DataFaqManager Game.DataFaqManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataFaq> [Client]System.Collections.Generic.List`1<Game.DataFaq> Game.DataFaqManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataFaqManager::Count -> dropped
}

[Client]Game.DataEgg -> [Client]j.X
{
	[Client]Game.DataEgg::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEgg::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEgg::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEgg::get_ItemId[0]( ) -> A
	[Client]Game.DataEgg::set_ItemId[1]( System.Int32 ) -> A
	[Client]Game.DataEgg::get_CostFatigue[0]( ) -> a
	[Client]Game.DataEgg::set_CostFatigue[1]( System.Int32 ) -> a
	[Client]Game.DataEgg::get_StarAffordExp[0]( ) -> B
	[Client]Game.DataEgg::set_StarAffordExp[1]( System.Int32 ) -> B

	[Client]Game.DataEgg::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataEgg::<ItemId>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataEgg::<CostFatigue>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataEgg::<StarAffordExp>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataEgg::ItemId -> dropped
	System.Int32 [Client]System.Int32 Game.DataEgg::CostFatigue -> dropped
	System.Int32 [Client]System.Int32 Game.DataEgg::StarAffordExp -> dropped
}

[Client]Game.DataEggManager -> [Client]j.x
{
	[Client]Game.DataEggManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataEggManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataEggManager::Clear[0]( ) -> A
	[Client]Game.DataEggManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataEggManager::GetDataByItemId[1]( System.Int32 ) -> A
	[Client]Game.DataEggManager::GetDataListByItemId[1]( System.Int32 ) -> a
	[Client]Game.DataEggManager::GetDataByCostFatigue[1]( System.Int32 ) -> B
	[Client]Game.DataEggManager::GetDataListByCostFatigue[1]( System.Int32 ) -> b
	[Client]Game.DataEggManager::GetDataByStarAffordExp[1]( System.Int32 ) -> C
	[Client]Game.DataEggManager::GetDataListByStarAffordExp[1]( System.Int32 ) -> c
	[Client]Game.DataEggManager::get_Instance[0]( ) -> a
	[Client]Game.DataEggManager::get_DataList[0]( ) -> B
	[Client]Game.DataEggManager::get_Count[0]( ) -> b

	[Client]Game.DataEggManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataEggManager::.ctor[0]( ) skipped:  special name

	Game.DataEggManager [Client]Game.DataEggManager Game.DataEggManager::instance -> A
	System.Collections.Generic.List`1<Game.DataEgg> [Client]System.Collections.Generic.List`1<Game.DataEgg> Game.DataEggManager::dataList -> A

	Game.DataEggManager [Client]Game.DataEggManager Game.DataEggManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataEgg> [Client]System.Collections.Generic.List`1<Game.DataEgg> Game.DataEggManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataEggManager::Count -> dropped
}

[Client]Game.DataDialog -> [Client]j.Y
{
	[Client]Game.DataDialog::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataDialog::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataDialog::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataDialog::get_DialogID[0]( ) -> A
	[Client]Game.DataDialog::set_DialogID[1]( System.Int32 ) -> A
	[Client]Game.DataDialog::get_NextDialog[0]( ) -> a
	[Client]Game.DataDialog::set_NextDialog[1]( System.Int32 ) -> a
	[Client]Game.DataDialog::get_HeadPath[0]( ) -> B
	[Client]Game.DataDialog::set_HeadPath[1]( System.String ) -> A
	[Client]Game.DataDialog::get_HeadPosition[0]( ) -> b
	[Client]Game.DataDialog::set_HeadPosition[1]( System.Int32 ) -> B
	[Client]Game.DataDialog::get_Name[0]( ) -> C
	[Client]Game.DataDialog::set_Name[1]( System.String ) -> a
	[Client]Game.DataDialog::get_IsMe[0]( ) -> c
	[Client]Game.DataDialog::set_IsMe[1]( System.Boolean ) -> A
	[Client]Game.DataDialog::get_Dialog[0]( ) -> D
	[Client]Game.DataDialog::set_Dialog[1]( System.String ) -> B
	[Client]Game.DataDialog::get_Option[0]( ) -> d
	[Client]Game.DataDialog::set_Option[1]( System.Collections.Generic.List`1<System.String> ) -> A

	[Client]Game.DataDialog::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataDialog::<DialogID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataDialog::<NextDialog>k__BackingField -> a
	System.String [Client]System.String Game.DataDialog::<HeadPath>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataDialog::<HeadPosition>k__BackingField -> B
	System.String [Client]System.String Game.DataDialog::<Name>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataDialog::<IsMe>k__BackingField -> A
	System.String [Client]System.String Game.DataDialog::<Dialog>k__BackingField -> B
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataDialog::<Option>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataDialog::DialogID -> dropped
	System.Int32 [Client]System.Int32 Game.DataDialog::NextDialog -> dropped
	System.String [Client]System.String Game.DataDialog::HeadPath -> dropped
	System.Int32 [Client]System.Int32 Game.DataDialog::HeadPosition -> dropped
	System.String [Client]System.String Game.DataDialog::Name -> dropped
	System.Boolean [Client]System.Boolean Game.DataDialog::IsMe -> dropped
	System.String [Client]System.String Game.DataDialog::Dialog -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataDialog::Option -> dropped
}

[Client]Game.DataDialogManager -> [Client]j.y
{
	[Client]Game.DataDialogManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataDialogManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataDialogManager::Clear[0]( ) -> A
	[Client]Game.DataDialogManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataDialogManager::GetDataByDialogID[1]( System.Int32 ) -> A
	[Client]Game.DataDialogManager::GetDataListByDialogID[1]( System.Int32 ) -> a
	[Client]Game.DataDialogManager::GetDataByNextDialog[1]( System.Int32 ) -> B
	[Client]Game.DataDialogManager::GetDataListByNextDialog[1]( System.Int32 ) -> b
	[Client]Game.DataDialogManager::GetDataByHeadPath[1]( System.String ) -> A
	[Client]Game.DataDialogManager::GetDataListByHeadPath[1]( System.String ) -> a
	[Client]Game.DataDialogManager::GetDataByHeadPosition[1]( System.Int32 ) -> C
	[Client]Game.DataDialogManager::GetDataListByHeadPosition[1]( System.Int32 ) -> c
	[Client]Game.DataDialogManager::GetDataByName[1]( System.String ) -> B
	[Client]Game.DataDialogManager::GetDataListByName[1]( System.String ) -> b
	[Client]Game.DataDialogManager::GetDataByIsMe[1]( System.Boolean ) -> A
	[Client]Game.DataDialogManager::GetDataListByIsMe[1]( System.Boolean ) -> a
	[Client]Game.DataDialogManager::GetDataByDialog[1]( System.String ) -> C
	[Client]Game.DataDialogManager::GetDataListByDialog[1]( System.String ) -> c
	[Client]Game.DataDialogManager::GetDataByOption[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataDialogManager::GetDataListByOption[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataDialogManager::get_Instance[0]( ) -> a
	[Client]Game.DataDialogManager::get_DataList[0]( ) -> B
	[Client]Game.DataDialogManager::get_Count[0]( ) -> b

	[Client]Game.DataDialogManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataDialogManager::.ctor[0]( ) skipped:  special name

	Game.DataDialogManager [Client]Game.DataDialogManager Game.DataDialogManager::instance -> A
	System.Collections.Generic.List`1<Game.DataDialog> [Client]System.Collections.Generic.List`1<Game.DataDialog> Game.DataDialogManager::dataList -> A

	Game.DataDialogManager [Client]Game.DataDialogManager Game.DataDialogManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataDialog> [Client]System.Collections.Generic.List`1<Game.DataDialog> Game.DataDialogManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataDialogManager::Count -> dropped
}

[Client]Game.Msg.ExpeditionShipEquipInfo -> [Client]j.Z
{
	[Client]Game.Msg.ExpeditionShipEquipInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ExpeditionShipEquipInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ExpeditionShipEquipInfo::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.Msg.ExpeditionShipEquipInfo::m_bOnLine -> A
	System.Boolean [Client]System.Boolean Game.Msg.ExpeditionShipEquipInfo::m_bOpen -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionShipEquipInfo::m_usCombat -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionShipEquipInfo::m_usExplore -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionShipEquipInfo::m_usWisdom -> B
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> Game.Msg.ExpeditionShipEquipInfo::m_oVecSkillList -> A
}

[Client]Game.Msg.ClientHeroRankData -> [Client]j.z
{
	[Client]Game.Msg.ClientHeroRankData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ClientHeroRankData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ClientHeroRankData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.ClientHeroRankData::m_uiCharID -> A
	System.String [Client]System.String Game.Msg.ClientHeroRankData::m_strCharName -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientHeroRankData::m_usRank -> A
	System.Byte [Client]System.Byte Game.Msg.ClientHeroRankData::m_btSex -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.ClientHeroRankData::m_usLevel -> a
	System.Byte [Client]System.Byte Game.Msg.ClientHeroRankData::m_btProfession -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.ClientHeroRankData::m_uiFighterPower -> a
	System.Byte [Client]System.Byte Game.Msg.ClientHeroRankData::m_btLine -> B
	System.Byte [Client]System.Byte Game.Msg.ClientHeroRankData::m_ebtChange -> b
}

[Client]Game.DataFriendHelpNPCModel -> [Client]K.A
{
	[Client]Game.DataFriendHelpNPCModel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFriendHelpNPCModel::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFriendHelpNPCModel::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFriendHelpNPCModel::get_ModelName[0]( ) -> A
	[Client]Game.DataFriendHelpNPCModel::set_ModelName[1]( System.String ) -> A
	[Client]Game.DataFriendHelpNPCModel::get_ModelTitle[0]( ) -> a
	[Client]Game.DataFriendHelpNPCModel::set_ModelTitle[1]( System.String ) -> a
	[Client]Game.DataFriendHelpNPCModel::get_Profession[0]( ) -> B
	[Client]Game.DataFriendHelpNPCModel::set_Profession[1]( System.Int32 ) -> A
	[Client]Game.DataFriendHelpNPCModel::get_Gender[0]( ) -> b
	[Client]Game.DataFriendHelpNPCModel::set_Gender[1]( System.Int32 ) -> a
	[Client]Game.DataFriendHelpNPCModel::get_LevelMin[0]( ) -> C
	[Client]Game.DataFriendHelpNPCModel::set_LevelMin[1]( System.Int32 ) -> B
	[Client]Game.DataFriendHelpNPCModel::get_LevelMax[0]( ) -> c
	[Client]Game.DataFriendHelpNPCModel::set_LevelMax[1]( System.Int32 ) -> b
	[Client]Game.DataFriendHelpNPCModel::get_PowerMulti[0]( ) -> D
	[Client]Game.DataFriendHelpNPCModel::set_PowerMulti[1]( System.Single ) -> A

	[Client]Game.DataFriendHelpNPCModel::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.DataFriendHelpNPCModel::<ModelName>k__BackingField -> A
	System.String [Client]System.String Game.DataFriendHelpNPCModel::<ModelTitle>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataFriendHelpNPCModel::<Profession>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataFriendHelpNPCModel::<Gender>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataFriendHelpNPCModel::<LevelMin>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataFriendHelpNPCModel::<LevelMax>k__BackingField -> b
	System.Single [Client]System.Single Game.DataFriendHelpNPCModel::<PowerMulti>k__BackingField -> A

	System.String [Client]System.String Game.DataFriendHelpNPCModel::ModelName -> dropped
	System.String [Client]System.String Game.DataFriendHelpNPCModel::ModelTitle -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpNPCModel::Profession -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpNPCModel::Gender -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpNPCModel::LevelMin -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpNPCModel::LevelMax -> dropped
	System.Single [Client]System.Single Game.DataFriendHelpNPCModel::PowerMulti -> dropped
}

[Client]Game.DataFriendHelpNPCModelManager -> [Client]K.a
{
	[Client]Game.DataFriendHelpNPCModelManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFriendHelpNPCModelManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFriendHelpNPCModelManager::Clear[0]( ) -> A
	[Client]Game.DataFriendHelpNPCModelManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFriendHelpNPCModelManager::GetDataByModelName[1]( System.String ) -> A
	[Client]Game.DataFriendHelpNPCModelManager::GetDataListByModelName[1]( System.String ) -> a
	[Client]Game.DataFriendHelpNPCModelManager::GetDataByModelTitle[1]( System.String ) -> B
	[Client]Game.DataFriendHelpNPCModelManager::GetDataListByModelTitle[1]( System.String ) -> b
	[Client]Game.DataFriendHelpNPCModelManager::GetDataByProfession[1]( System.Int32 ) -> A
	[Client]Game.DataFriendHelpNPCModelManager::GetDataListByProfession[1]( System.Int32 ) -> a
	[Client]Game.DataFriendHelpNPCModelManager::GetDataByGender[1]( System.Int32 ) -> B
	[Client]Game.DataFriendHelpNPCModelManager::GetDataListByGender[1]( System.Int32 ) -> b
	[Client]Game.DataFriendHelpNPCModelManager::GetDataByLevelMin[1]( System.Int32 ) -> C
	[Client]Game.DataFriendHelpNPCModelManager::GetDataListByLevelMin[1]( System.Int32 ) -> c
	[Client]Game.DataFriendHelpNPCModelManager::GetDataByLevelMax[1]( System.Int32 ) -> D
	[Client]Game.DataFriendHelpNPCModelManager::GetDataListByLevelMax[1]( System.Int32 ) -> d
	[Client]Game.DataFriendHelpNPCModelManager::GetDataByPowerMulti[1]( System.Single ) -> A
	[Client]Game.DataFriendHelpNPCModelManager::GetDataListByPowerMulti[1]( System.Single ) -> a
	[Client]Game.DataFriendHelpNPCModelManager::get_Instance[0]( ) -> a
	[Client]Game.DataFriendHelpNPCModelManager::get_DataList[0]( ) -> B
	[Client]Game.DataFriendHelpNPCModelManager::get_Count[0]( ) -> b

	[Client]Game.DataFriendHelpNPCModelManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataFriendHelpNPCModelManager::.ctor[0]( ) skipped:  special name

	Game.DataFriendHelpNPCModelManager [Client]Game.DataFriendHelpNPCModelManager Game.DataFriendHelpNPCModelManager::instance -> A
	System.Collections.Generic.List`1<Game.DataFriendHelpNPCModel> [Client]System.Collections.Generic.List`1<Game.DataFriendHelpNPCModel> Game.DataFriendHelpNPCModelManager::dataList -> A

	Game.DataFriendHelpNPCModelManager [Client]Game.DataFriendHelpNPCModelManager Game.DataFriendHelpNPCModelManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataFriendHelpNPCModel> [Client]System.Collections.Generic.List`1<Game.DataFriendHelpNPCModel> Game.DataFriendHelpNPCModelManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpNPCModelManager::Count -> dropped
}

[Client]Game.BossFSM -> [Client]K.B
{
	[Client]Game.BossFSM::Initialize[0]( ) -> A
	[Client]Game.BossFSM::FSMUpdate[0]( ) -> a
	[Client]Game.BossFSM::get_CurrentState[0]( ) -> B
	[Client]Game.BossFSM::set_CurrentState[1]( Game.BossFSM/FSMState ) -> A
	[Client]Game.BossFSM::Reset[0]( ) -> b
	[Client]Game.BossFSM::UpdateBossBornState[0]( ) -> C
	[Client]Game.BossFSM::UpdateBossPatrolState[0]( ) -> c
	[Client]Game.BossFSM::UpdateBossChaseState[0]( ) -> D
	[Client]Game.BossFSM::UpdateBossAttackState[0]( ) -> d
	[Client]Game.BossFSM::UpdateBossPreAttackState[0]( ) -> E
	[Client]Game.BossFSM::UpdateBossAttackingState[0]( ) -> e
	[Client]Game.BossFSM::UpdateBossAfterAttackState[0]( ) -> F
	[Client]Game.BossFSM::UpdateBossDeadState[0]( ) -> f
	[Client]Game.BossFSM::UpdateBossBeAttackedState[0]( ) -> G
	[Client]Game.BossFSM::GetBossTargetPos[0]( ) -> g
	[Client]Game.BossFSM::IsEnterAttackMode[0]( ) -> H
	[Client]Game.BossFSM::RetriveCurrentSkill[0]( ) -> h

	[Client]Game.BossFSM::.ctor[1]( Game.Monster ) skipped:  special name

	Game.BossFSM/FSMState [Client]Game.BossFSM/FSMState Game.BossFSM::m_currentState -> A
	System.Boolean [Client]System.Boolean Game.BossFSM::m_bDead -> A
	Game.Monster [Client]Game.Monster Game.BossFSM::m_Boss -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.BossFSM::m_vOriginalPos -> A
	Game.DataMonster [Client]Game.DataMonster Game.BossFSM::m_BossData -> A
	Game.Character [Client]Game.Character Game.BossFSM::m_Target -> A
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.BossFSM::TagPlayerID -> A
	System.Boolean [Client]System.Boolean Game.BossFSM::m_bSlowMotion -> a
	Game.Skill [Client]Game.Skill Game.BossFSM::m_curSkill -> A
	System.Boolean [Client]System.Boolean Game.BossFSM::m_bSkillCasted -> B
	Game.BossFSM/AttackState [Client]Game.BossFSM/AttackState Game.BossFSM::m_CurrAttackState -> A
	System.Single [Client]System.Single Game.BossFSM::m_CastSkillTime -> A
	System.Single [Client]System.Single Game.BossFSM::m_SkillWaitMaxTime -> a

	Game.BossFSM/FSMState [Client]Game.BossFSM/FSMState Game.BossFSM::CurrentState -> dropped
}

[Client]Game.BossFSM/FSMState -> [Client]K.B/b
{
	Game.BossFSM/FSMState [Client]Game.BossFSM/FSMState Game.BossFSM/FSMState::None -> A
	Game.BossFSM/FSMState [Client]Game.BossFSM/FSMState Game.BossFSM/FSMState::Born -> a
	Game.BossFSM/FSMState [Client]Game.BossFSM/FSMState Game.BossFSM/FSMState::Patrol -> B
	Game.BossFSM/FSMState [Client]Game.BossFSM/FSMState Game.BossFSM/FSMState::Chase -> b
	Game.BossFSM/FSMState [Client]Game.BossFSM/FSMState Game.BossFSM/FSMState::Attack -> C
	Game.BossFSM/FSMState [Client]Game.BossFSM/FSMState Game.BossFSM/FSMState::BeAttacked -> c
	Game.BossFSM/FSMState [Client]Game.BossFSM/FSMState Game.BossFSM/FSMState::Dead -> D

	System.Int32 [Client]System.Int32 Game.BossFSM/FSMState::value__ skipped:  filtered
}

[Client]Game.BossFSM/AttackState -> [Client]K.B/C
{
	Game.BossFSM/AttackState [Client]Game.BossFSM/AttackState Game.BossFSM/AttackState::PreCastSkill -> A
	Game.BossFSM/AttackState [Client]Game.BossFSM/AttackState Game.BossFSM/AttackState::CastingSkill -> a
	Game.BossFSM/AttackState [Client]Game.BossFSM/AttackState Game.BossFSM/AttackState::AfterCastSkill -> B

	System.Int32 [Client]System.Int32 Game.BossFSM/AttackState::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Checksums.Crc32 -> [Client]K.c
{
	[Client]ICSharpCode.SharpZipLib.Checksums.Crc32::get_Value[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.Crc32::Reset[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Checksums.Crc32::Update[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.Crc32::Update[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.Crc32::Update[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.Crc32::ComputeCrc32[2]( System.UInt32, System.Byte ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.Crc32::set_Value[1]( System.Int64 ) -> A

	[Client]ICSharpCode.SharpZipLib.Checksums.Crc32::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Checksums.Crc32::.cctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.Checksums.Crc32::CrcSeed -> A
	System.UInt32[] [Client]System.UInt32[] ICSharpCode.SharpZipLib.Checksums.Crc32::CrcTable -> A
	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.Checksums.Crc32::crc -> a

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Checksums.Crc32::Value -> dropped
}

[Client]Game.ObjectPool`1 -> [Client]K.D`1
{
	[Client]Game.ObjectPool`1::GetObject[0]( ) -> A
	[Client]Game.ObjectPool`1::PutObject[1]( !0 ) -> A

	[Client]Game.ObjectPool`1::.ctor[0]( ) skipped:  special name
	[Client]Game.ObjectPool`1::.ctor[1]( System.Int32 ) skipped:  special name
	[Client]Game.ObjectPool`1::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.ObjectPool`1::m_Log -> A
	System.Collections.Generic.Queue`1<T> [Client]System.Collections.Generic.Queue`1<T> Game.ObjectPool`1::m_Objects -> A
	System.Int32 [Client]System.Int32 Game.ObjectPool`1::m_MaxNum -> A
	System.Int32 [Client]System.Int32 Game.ObjectPool`1::m_AllocNum -> a
}

[Client]Game.Npc -> [Client]K.d
{
	[Client]Game.Npc::get_TitleName[0]( ) -> A
	[Client]Game.Npc::Release[0]( ) -> B
	[Client]Game.Npc::Reset[0]( ) -> b
	[Client]Game.Npc::RefreshProperty[0]( ) -> C
	[Client]Game.Npc::OnObjectLoaded[0]( ) -> d
	[Client]Game.Npc::get_NpcType[0]( ) -> E
	[Client]Game.Npc::set_NpcType[1]( System.Byte ) -> A
	[Client]Game.Npc::get_TaskState[0]( ) -> e
	[Client]Game.Npc::set_TaskState[1]( System.Int32 ) -> A
	[Client]Game.Npc::UpdateHeadEffect[0]( ) -> F

	[Client]Game.Npc::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Npc::m_HeadEffectId -> A
	System.Byte [Client]System.Byte Game.Npc::<NpcType>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.Npc::<TaskState>k__BackingField -> a

	System.Byte [Client]System.Byte Game.Npc::NpcType -> dropped
	System.Int32 [Client]System.Int32 Game.Npc::TaskState -> dropped
	System.String [Client]System.String Game.Npc::TitleName -> dropped
}

[Client]Game.Msg.MsgHeroRank -> [Client]K.E
{

	[Client]Game.Msg.MsgHeroRank::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgHeroRank::BaseType -> A
}

[Client]Game.Msg.MsgClientReqMyHeroRank -> [Client]K.e
{

	[Client]Game.Msg.MsgClientReqMyHeroRank::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqMyHeroRank::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqMyHeroRank::Type -> A
}

[Client]Game.Msg.MsgServerAckMyHeroRank -> [Client]K.F
{
	[Client]Game.Msg.MsgServerAckMyHeroRank::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckMyHeroRank::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckMyHeroRank::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckMyHeroRank::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckMyHeroRank::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckMyHeroRank::m_usRank -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckMyHeroRank::m_uiAwardBattleValue -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckMyHeroRank::m_uiAwardBattleValuePerHour -> a
	System.Collections.Generic.List`1<Game.Msg.ClientHeroData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientHeroData> Game.Msg.MsgServerAckMyHeroRank::m_oVecHeroData -> A
	System.Collections.Generic.List`1<Game.Msg.SHeroBattleRecord> [Client]System.Collections.Generic.List`1<Game.Msg.SHeroBattleRecord> Game.Msg.MsgServerAckMyHeroRank::m_oVecSHeroBattleRecord -> A
}

[Client]Game.Msg.MsgClientReqBattle -> [Client]K.f
{
	[Client]Game.Msg.MsgClientReqBattle::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqBattle::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqBattle::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBattle::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqBattle::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientReqBattle::m_uiCharID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqBattle::m_usRank -> a
}

[Client]Game.Msg.MsgServerAckBattle -> [Client]K.G
{
	[Client]Game.Msg.MsgServerAckBattle::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckBattle::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckBattle::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBattle::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckBattle::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBattle::m_ebtRet -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckBattle::m_usCharID -> a
	System.String [Client]System.String Game.Msg.MsgServerAckBattle::m_strCharName -> A
}

[Client]Game.Msg.MsgServerStartBattle -> [Client]K.g
{
	[Client]Game.Msg.MsgServerStartBattle::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerStartBattle::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerStartBattle::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerStartBattle::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerStartBattle::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerStartBattle::m_uiBotID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerStartBattle::m_usTime -> a
}

[Client]Game.Msg.MsgServerEndBattle -> [Client]K.H
{
	[Client]Game.Msg.MsgServerEndBattle::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerEndBattle::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerEndBattle::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerEndBattle::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEndBattle::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerEndBattle::m_ebtRet -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEndBattle::m_uiAwardExp -> A
}

[Client]Game.Msg.MsgClientReqGetAward -> [Client]K.h
{
	[Client]Game.Msg.MsgClientReqGetAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqGetAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqGetAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqGetAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqGetAward::Type -> A
}

[Client]Game.Msg.MsgServerAckGetAward -> [Client]K.I
{
	[Client]Game.Msg.MsgServerAckGetAward::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckGetAward::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckGetAward::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGetAward::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckGetAward::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckGetAward::m_ebtRet -> a
}

[Client]Game.Msg.MsgClientReqBuyChanllengeTime -> [Client]K.i
{
	[Client]Game.Msg.MsgClientReqBuyChanllengeTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqBuyChanllengeTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqBuyChanllengeTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBuyChanllengeTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqBuyChanllengeTime::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBuyChanllengeTime::m_btBuyNum -> a
}

[Client]Game.Msg.MsgServerAckBuyChanllengeTime -> [Client]K.J
{
	[Client]Game.Msg.MsgServerAckBuyChanllengeTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckBuyChanllengeTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckBuyChanllengeTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBuyChanllengeTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckBuyChanllengeTime::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckBuyChanllengeTime::m_ebtRet -> a
}

[Client]Game.Msg.MsgClientReqTotalRank -> [Client]K.j
{
	[Client]Game.Msg.MsgClientReqTotalRank::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqTotalRank::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqTotalRank::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqTotalRank::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqTotalRank::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqTotalRank::m_usPage -> a
}

[Client]Game.Msg.MsgServerAckTotalRank -> [Client]K.K
{
	[Client]Game.Msg.MsgServerAckTotalRank::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckTotalRank::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckTotalRank::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckTotalRank::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckTotalRank::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckTotalRank::m_usPage -> a
	System.Collections.Generic.List`1<Game.Msg.ClientHeroRankData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientHeroRankData> Game.Msg.MsgServerAckTotalRank::m_oVecHeroRankData -> A
}

[Client]Game.Msg.MsgServerRefreshChanllengeTime -> [Client]K.k
{
	[Client]Game.Msg.MsgServerRefreshChanllengeTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerRefreshChanllengeTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerRefreshChanllengeTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerRefreshChanllengeTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerRefreshChanllengeTime::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerRefreshChanllengeTime::m_btCurChanllengeNum -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerRefreshChanllengeTime::m_btTotalChanllengeNum -> B
}

[Client]Game.Msg.MsgServerNotifyHeroRankAwardTime -> [Client]K.L
{
	[Client]Game.Msg.MsgServerNotifyHeroRankAwardTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyHeroRankAwardTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyHeroRankAwardTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyHeroRankAwardTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyHeroRankAwardTime::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyHeroRankAwardTime::m_uiTime -> A
}

[Client]Game.Msg.MsgServerRefreshBattleValue -> [Client]K.l
{
	[Client]Game.Msg.MsgServerRefreshBattleValue::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerRefreshBattleValue::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerRefreshBattleValue::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerRefreshBattleValue::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerRefreshBattleValue::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerRefreshBattleValue::m_uiBattleValue -> A
}

[Client]Game.Msg.MsgServerRefreshAwardBattleValue -> [Client]K.M
{
	[Client]Game.Msg.MsgServerRefreshAwardBattleValue::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerRefreshAwardBattleValue::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerRefreshAwardBattleValue::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerRefreshAwardBattleValue::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerRefreshAwardBattleValue::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerRefreshAwardBattleValue::m_uiAwardBattleValue -> A
}

[Client]Game.Msg.MsgTaskAckNpc_Function -> [Client]K.m
{
	[Client]Game.Msg.MsgTaskAckNpc_Function::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgTaskAckNpc_Function::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgTaskAckNpc_Function::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgTaskAckNpc_Function::m_btFunction -> A
}

[Client]Game.Msg.CSnapShotEquipData -> [Client]K.N
{
	[Client]Game.Msg.CSnapShotEquipData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotEquipData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotEquipData::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Game.Msg.SEquipVisualData> [Client]System.Collections.Generic.List`1<Game.Msg.SEquipVisualData> Game.Msg.CSnapShotEquipData::m_oVecEquipData -> A
	System.Boolean [Client]System.Boolean Game.Msg.CSnapShotEquipData::m_bShowDress -> A
}

[Client]Game.Msg.CSnapShotCharAll -> [Client]K.n
{
	[Client]Game.Msg.CSnapShotCharAll::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotCharAll::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotCharAll::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.CSnapShotCharAll::m_ebtCharType -> A
	Game.Msg.CSnapShotBaseData [Client]Game.Msg.CSnapShotBaseData Game.Msg.CSnapShotCharAll::m_stBaseData -> A
	System.Object [Client]System.Object Game.Msg.CSnapShotCharAll::m_oDynamicObject -> A
}

[Client]Game.Logic.EctypeRating -> [Client]K.O
{

	[Client]Game.Logic.EctypeRating::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Logic.EctypeRating::m_ebtGrade -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.EctypeRating::m_uiUseTime -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.EctypeRating::m_uiExp -> a
	System.UInt32 [Client]System.UInt32 Game.Logic.EctypeRating::m_uiMoney -> B
	System.UInt32 [Client]System.UInt32 Game.Logic.EctypeRating::m_uiPhyPoint -> b
}

[Client]Game.Logic.Ectype -> [Client]K.o
{
	[Client]Game.Logic.Ectype::get_RemainTime[0]( ) -> A
	[Client]Game.Logic.Ectype::set_RemainTime[1]( System.UInt64 ) -> A
	[Client]Game.Logic.Ectype::get_Rating[0]( ) -> a
	[Client]Game.Logic.Ectype::get_Awards[0]( ) -> B
	[Client]Game.Logic.Ectype::get_RatingStartTime[0]( ) -> b
	[Client]Game.Logic.Ectype::set_RatingStartTime[1]( System.Single ) -> A
	[Client]Game.Logic.Ectype::get_MapID[0]( ) -> C
	[Client]Game.Logic.Ectype::get_CommonAwardPrice[0]( ) -> c
	[Client]Game.Logic.Ectype::get_VIPAwardPrice[0]( ) -> D
	[Client]Game.Logic.Ectype::get_DelayTime[0]( ) -> d
	[Client]Game.Logic.Ectype::get_StandardTime[0]( ) -> E
	[Client]Game.Logic.Ectype::get_ShowTime[0]( ) -> e
	[Client]Game.Logic.Ectype::get_DFHistoryLevel[0]( ) -> F
	[Client]Game.Logic.Ectype::set_DFHistoryLevel[1]( System.UInt32 ) -> A
	[Client]Game.Logic.Ectype::get_DFFirst[0]( ) -> f
	[Client]Game.Logic.Ectype::set_DFFirst[1]( System.Boolean ) -> A
	[Client]Game.Logic.Ectype::get_DFCurLevel[0]( ) -> G
	[Client]Game.Logic.Ectype::set_DFCurLevel[1]( System.UInt32 ) -> a
	[Client]Game.Logic.Ectype::get_Instance[0]( ) -> g
	[Client]Game.Logic.Ectype::Init[0]( ) -> H
	[Client]Game.Logic.Ectype::Release[0]( ) -> h
	[Client]Game.Logic.Ectype::Reset[0]( ) -> I
	[Client]Game.Logic.Ectype::Update[0]( ) -> i
	[Client]Game.Logic.Ectype::SendMsgClientGetAward[0]( ) -> J
	[Client]Game.Logic.Ectype::OnMsgServerEctypeStart[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Ectype::OnMsgServerEctypeEnd[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Ectype::GetFeeEctypeAward[1]( Game.Msg.eEctypeExtraAwardIndex ) -> A
	[Client]Game.Logic.Ectype::OnMsgServerAckEctypeAward[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.Ectype::GetGeneralEctypeAward[1]( System.UInt32 ) -> B
	[Client]Game.Logic.Ectype::ReqDFData[0]( ) -> j
	[Client]Game.Logic.Ectype::OnMsgServerAckHundredTowerData[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Logic.Ectype::ReqDFEnter[0]( ) -> K

	[Client]Game.Logic.Ectype::.cctor[0]( ) skipped:  special name
	[Client]Game.Logic.Ectype::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.Logic.Ectype::MillisecondToSecond -> A
	Game.Logic.EctypeRating [Client]Game.Logic.EctypeRating Game.Logic.Ectype::m_Rating -> A
	System.Collections.Generic.List`1<Game.Msg.SEctypeAwardList> [Client]System.Collections.Generic.List`1<Game.Msg.SEctypeAwardList> Game.Logic.Ectype::m_oVecAwardData -> A
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::m_MapID -> A
	System.UInt16 [Client]System.UInt16 Game.Logic.Ectype::m_usCommonAwardPrice -> A
	System.UInt16 [Client]System.UInt16 Game.Logic.Ectype::m_usVIPAwardPrice -> a
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::m_uiDelayTime -> a
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::m_uiStandardTime -> B
	System.Single [Client]System.Single Game.Logic.Ectype::m_ShowTime -> a
	System.Boolean [Client]System.Boolean Game.Logic.Ectype::m_CanShowDlg -> A
	Game.Logic.Ectype [Client]Game.Logic.Ectype Game.Logic.Ectype::m_Instance -> A
	System.UInt64 [Client]System.UInt64 Game.Logic.Ectype::<RemainTime>k__BackingField -> A
	System.Single [Client]System.Single Game.Logic.Ectype::<RatingStartTime>k__BackingField -> B
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::<DFHistoryLevel>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.Logic.Ectype::<DFFirst>k__BackingField -> a
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::<DFCurLevel>k__BackingField -> C

	System.UInt64 [Client]System.UInt64 Game.Logic.Ectype::RemainTime -> dropped
	Game.Logic.EctypeRating [Client]Game.Logic.EctypeRating Game.Logic.Ectype::Rating -> dropped
	System.Collections.Generic.List`1<Game.Msg.SEctypeAwardList> [Client]System.Collections.Generic.List`1<Game.Msg.SEctypeAwardList> Game.Logic.Ectype::Awards -> dropped
	System.Single [Client]System.Single Game.Logic.Ectype::RatingStartTime -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::MapID -> dropped
	System.UInt16 [Client]System.UInt16 Game.Logic.Ectype::CommonAwardPrice -> dropped
	System.UInt16 [Client]System.UInt16 Game.Logic.Ectype::VIPAwardPrice -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::DelayTime -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::StandardTime -> dropped
	System.Single [Client]System.Single Game.Logic.Ectype::ShowTime -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::DFHistoryLevel -> dropped
	System.Boolean [Client]System.Boolean Game.Logic.Ectype::DFFirst -> dropped
	System.UInt32 [Client]System.UInt32 Game.Logic.Ectype::DFCurLevel -> dropped
	Game.Logic.Ectype [Client]Game.Logic.Ectype Game.Logic.Ectype::Instance -> dropped
}

[Client]Game.Logic.Afk -> [Client]K.P
{
	[Client]Game.Logic.Afk::get_Instance[0]( ) -> A
	[Client]Game.Logic.Afk::Init[0]( ) -> a
	[Client]Game.Logic.Afk::SendMsgClientReqAfkEctypeInfo[0]( ) -> B
	[Client]Game.Logic.Afk::OnMsgServerAckAfkEctypeInfo[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Logic.Afk::SendMsgClientReqAfkEctypeSpeedUp[0]( ) -> b
	[Client]Game.Logic.Afk::OnMsgServerAckAfkEctypeSpeedUp[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Logic.Afk::SendMsgClientReqAfkEctypeDirectFinish[0]( ) -> C
	[Client]Game.Logic.Afk::OnMsgServerAckAfkEctypeDirectFinish[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Logic.Afk::SendMsgClientReqEnterAfkEctype[1]( System.UInt16 ) -> A
	[Client]Game.Logic.Afk::OnMsgServerAckEnterAfkEctype[1]( Game.Msg.RecvMsgPacket ) -> b

	[Client]Game.Logic.Afk::.ctor[0]( ) skipped:  special name
	[Client]Game.Logic.Afk::.cctor[0]( ) skipped:  special name

	Game.Logic.Afk [Client]Game.Logic.Afk Game.Logic.Afk::m_Instance -> A

	Game.Logic.Afk [Client]Game.Logic.Afk Game.Logic.Afk::Instance -> dropped
}

[Client]Game.TapGestureRecognizer -> [Client]K.p
{
	[Client]Game.TapGestureRecognizer::GetRequiredFingerCount[0]( ) -> A
	[Client]Game.TapGestureRecognizer::CanBegin[1]( Game.TouchList ) -> A
	[Client]Game.TapGestureRecognizer::OnBegin[1]( Game.TouchList ) -> a
	[Client]Game.TapGestureRecognizer::OnProcessing[1]( Game.TouchList ) -> B
	[Client]Game.TapGestureRecognizer::IsEnd[1]( Game.TouchList ) -> b
	[Client]Game.TapGestureRecognizer::add_OnTap[1]( .EventDelegate`1<Game.TapGestureRecognizer> ) -> A
	[Client]Game.TapGestureRecognizer::remove_OnTap[1]( .EventDelegate`1<Game.TapGestureRecognizer> ) -> a
	[Client]Game.TapGestureRecognizer::get_StartPos[0]( ) -> a
	[Client]Game.TapGestureRecognizer::set_StartPos[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.TapGestureRecognizer::CallOnTap[0]( ) -> B

	[Client]Game.TapGestureRecognizer::.ctor[0]( ) skipped:  special name
	[Client]Game.TapGestureRecognizer::.cctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.TapGestureRecognizer::MaxDuration -> A
	System.Single [Client]System.Single Game.TapGestureRecognizer::MaxDistance -> a
	log4net.ILog [Client]log4net.ILog Game.TapGestureRecognizer::m_Log -> A
	Game.GestureRecognizer/EventDelegate`1<Game.TapGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.TapGestureRecognizer> Game.TapGestureRecognizer::OnTap -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TapGestureRecognizer::<StartPos>k__BackingField -> A

	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.TapGestureRecognizer::StartPos -> dropped

	Game.GestureRecognizer/EventDelegate`1<Game.TapGestureRecognizer> [Client]Game.GestureRecognizer/EventDelegate`1<Game.TapGestureRecognizer> Game.TapGestureRecognizer::OnTap -> dropped
}

[Client]Game.EffectInstanceType -> [Client]K.Q
{
	Game.EffectInstanceType [Client]Game.EffectInstanceType Game.EffectInstanceType::Stand -> A
	Game.EffectInstanceType [Client]Game.EffectInstanceType Game.EffectInstanceType::Follow -> a
	Game.EffectInstanceType [Client]Game.EffectInstanceType Game.EffectInstanceType::Trace -> B
	Game.EffectInstanceType [Client]Game.EffectInstanceType Game.EffectInstanceType::TracePos -> b
	Game.EffectInstanceType [Client]Game.EffectInstanceType Game.EffectInstanceType::SpaceLink -> C
	Game.EffectInstanceType [Client]Game.EffectInstanceType Game.EffectInstanceType::BindToCamera -> c
	Game.EffectInstanceType [Client]Game.EffectInstanceType Game.EffectInstanceType::UIStand -> D

	System.Int32 [Client]System.Int32 Game.EffectInstanceType::value__ skipped:  filtered
}

[Client]Game.EffectInstanceBindType -> [Client]K.q
{
	Game.EffectInstanceBindType [Client]Game.EffectInstanceBindType Game.EffectInstanceBindType::Body -> A
	Game.EffectInstanceBindType [Client]Game.EffectInstanceBindType Game.EffectInstanceBindType::Head -> a
	Game.EffectInstanceBindType [Client]Game.EffectInstanceBindType Game.EffectInstanceBindType::Foot -> B
	Game.EffectInstanceBindType [Client]Game.EffectInstanceBindType Game.EffectInstanceBindType::LeftHand -> b
	Game.EffectInstanceBindType [Client]Game.EffectInstanceBindType Game.EffectInstanceBindType::RightHand -> C

	System.Int32 [Client]System.Int32 Game.EffectInstanceBindType::value__ skipped:  filtered
}

[Client]Game.TraceType -> [Client]K.R
{
	Game.TraceType [Client]Game.TraceType Game.TraceType::Line -> A
	Game.TraceType [Client]Game.TraceType Game.TraceType::Bezier -> a

	System.Int32 [Client]System.Int32 Game.TraceType::value__ skipped:  filtered
}

[Client]Game.EffectInstanceData -> [Client]K.r
{
	[Client]Game.EffectInstanceData::get_Type[0]( ) -> A
	[Client]Game.EffectInstanceData::set_Type[1]( Game.EffectInstanceType ) -> A
	[Client]Game.EffectInstanceData::get_CasterBindType[0]( ) -> a
	[Client]Game.EffectInstanceData::set_CasterBindType[1]( Game.EffectInstanceBindType ) -> A
	[Client]Game.EffectInstanceData::get_TargetBindType[0]( ) -> B
	[Client]Game.EffectInstanceData::set_TargetBindType[1]( Game.EffectInstanceBindType ) -> a
	[Client]Game.EffectInstanceData::get_Life[0]( ) -> b
	[Client]Game.EffectInstanceData::set_Life[1]( System.Single ) -> A
	[Client]Game.EffectInstanceData::get_Path[0]( ) -> C
	[Client]Game.EffectInstanceData::set_Path[1]( System.String ) -> A
	[Client]Game.EffectInstanceData::get_Sound[0]( ) -> c
	[Client]Game.EffectInstanceData::set_Sound[1]( System.String ) -> a
	[Client]Game.EffectInstanceData::get_Scale[0]( ) -> D
	[Client]Game.EffectInstanceData::set_Scale[1]( System.Single ) -> a
	[Client]Game.EffectInstanceData::get_StartDelay[0]( ) -> d
	[Client]Game.EffectInstanceData::set_StartDelay[1]( System.Single ) -> B
	[Client]Game.EffectInstanceData::get_FadeOutTime[0]( ) -> E
	[Client]Game.EffectInstanceData::set_FadeOutTime[1]( System.Single ) -> b
	[Client]Game.EffectInstanceData::get_FollowDirection[0]( ) -> e
	[Client]Game.EffectInstanceData::set_FollowDirection[1]( System.Boolean ) -> A
	[Client]Game.EffectInstanceData::get_TraceTime[0]( ) -> F
	[Client]Game.EffectInstanceData::set_TraceTime[1]( System.Single ) -> C
	[Client]Game.EffectInstanceData::get_TraceSpeed[0]( ) -> f
	[Client]Game.EffectInstanceData::set_TraceSpeed[1]( System.Single ) -> c
	[Client]Game.EffectInstanceData::get_InstanceTraceType[0]( ) -> G
	[Client]Game.EffectInstanceData::set_InstanceTraceType[1]( Game.TraceType ) -> A
	[Client]Game.EffectInstanceData::Load[1]( System.Xml.XmlReader ) -> A

	[Client]Game.EffectInstanceData::.ctor[0]( ) skipped:  special name

	Game.EffectInstanceType [Client]Game.EffectInstanceType Game.EffectInstanceData::<Type>k__BackingField -> A
	Game.EffectInstanceBindType [Client]Game.EffectInstanceBindType Game.EffectInstanceData::<CasterBindType>k__BackingField -> A
	Game.EffectInstanceBindType [Client]Game.EffectInstanceBindType Game.EffectInstanceData::<TargetBindType>k__BackingField -> a
	System.Single [Client]System.Single Game.EffectInstanceData::<Life>k__BackingField -> A
	System.String [Client]System.String Game.EffectInstanceData::<Path>k__BackingField -> A
	System.String [Client]System.String Game.EffectInstanceData::<Sound>k__BackingField -> a
	System.Single [Client]System.Single Game.EffectInstanceData::<Scale>k__BackingField -> a
	System.Single [Client]System.Single Game.EffectInstanceData::<StartDelay>k__BackingField -> B
	System.Single [Client]System.Single Game.EffectInstanceData::<FadeOutTime>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.EffectInstanceData::<FollowDirection>k__BackingField -> A
	System.Single [Client]System.Single Game.EffectInstanceData::<TraceTime>k__BackingField -> C
	System.Single [Client]System.Single Game.EffectInstanceData::<TraceSpeed>k__BackingField -> c
	Game.TraceType [Client]Game.TraceType Game.EffectInstanceData::<InstanceTraceType>k__BackingField -> A

	Game.EffectInstanceType [Client]Game.EffectInstanceType Game.EffectInstanceData::Type -> dropped
	Game.EffectInstanceBindType [Client]Game.EffectInstanceBindType Game.EffectInstanceData::CasterBindType -> dropped
	Game.EffectInstanceBindType [Client]Game.EffectInstanceBindType Game.EffectInstanceData::TargetBindType -> dropped
	System.Single [Client]System.Single Game.EffectInstanceData::Life -> dropped
	System.String [Client]System.String Game.EffectInstanceData::Path -> dropped
	System.String [Client]System.String Game.EffectInstanceData::Sound -> dropped
	System.Single [Client]System.Single Game.EffectInstanceData::Scale -> dropped
	System.Single [Client]System.Single Game.EffectInstanceData::StartDelay -> dropped
	System.Single [Client]System.Single Game.EffectInstanceData::FadeOutTime -> dropped
	System.Boolean [Client]System.Boolean Game.EffectInstanceData::FollowDirection -> dropped
	System.Single [Client]System.Single Game.EffectInstanceData::TraceTime -> dropped
	System.Single [Client]System.Single Game.EffectInstanceData::TraceSpeed -> dropped
	Game.TraceType [Client]Game.TraceType Game.EffectInstanceData::InstanceTraceType -> dropped
}

[Client]Game.CameraShakeData -> [Client]K.S
{
	[Client]Game.CameraShakeData::get_Type[0]( ) -> A
	[Client]Game.CameraShakeData::set_Type[1]( Game.CameraShakeData/CameraShakeType ) -> A
	[Client]Game.CameraShakeData::get_Life[0]( ) -> a
	[Client]Game.CameraShakeData::set_Life[1]( System.Single ) -> A
	[Client]Game.CameraShakeData::get_StartDelay[0]( ) -> B
	[Client]Game.CameraShakeData::set_StartDelay[1]( System.Single ) -> a
	[Client]Game.CameraShakeData::get_MaxRange[0]( ) -> b
	[Client]Game.CameraShakeData::set_MaxRange[1]( System.Single ) -> B
	[Client]Game.CameraShakeData::get_MinRange[0]( ) -> C
	[Client]Game.CameraShakeData::set_MinRange[1]( System.Single ) -> b
	[Client]Game.CameraShakeData::get_MaxAmplitude[0]( ) -> c
	[Client]Game.CameraShakeData::set_MaxAmplitude[1]( System.Single ) -> C
	[Client]Game.CameraShakeData::get_MinAmplitude[0]( ) -> D
	[Client]Game.CameraShakeData::set_MinAmplitude[1]( System.Single ) -> c
	[Client]Game.CameraShakeData::get_AmplitudeAttenuation[0]( ) -> d
	[Client]Game.CameraShakeData::set_AmplitudeAttenuation[1]( System.Single ) -> D
	[Client]Game.CameraShakeData::get_Frequency[0]( ) -> E
	[Client]Game.CameraShakeData::set_Frequency[1]( System.Single ) -> d
	[Client]Game.CameraShakeData::get_FrequencyKeepDuration[0]( ) -> e
	[Client]Game.CameraShakeData::set_FrequencyKeepDuration[1]( System.Single ) -> E
	[Client]Game.CameraShakeData::get_FrequencyAttenuation[0]( ) -> F
	[Client]Game.CameraShakeData::set_FrequencyAttenuation[1]( System.Single ) -> e
	[Client]Game.CameraShakeData::Load[1]( System.Xml.XmlReader ) -> A

	[Client]Game.CameraShakeData::.ctor[0]( ) skipped:  special name

	Game.CameraShakeData/CameraShakeType [Client]Game.CameraShakeData/CameraShakeType Game.CameraShakeData::<Type>k__BackingField -> A
	System.Single [Client]System.Single Game.CameraShakeData::<Life>k__BackingField -> A
	System.Single [Client]System.Single Game.CameraShakeData::<StartDelay>k__BackingField -> a
	System.Single [Client]System.Single Game.CameraShakeData::<MaxRange>k__BackingField -> B
	System.Single [Client]System.Single Game.CameraShakeData::<MinRange>k__BackingField -> b
	System.Single [Client]System.Single Game.CameraShakeData::<MaxAmplitude>k__BackingField -> C
	System.Single [Client]System.Single Game.CameraShakeData::<MinAmplitude>k__BackingField -> c
	System.Single [Client]System.Single Game.CameraShakeData::<AmplitudeAttenuation>k__BackingField -> D
	System.Single [Client]System.Single Game.CameraShakeData::<Frequency>k__BackingField -> d
	System.Single [Client]System.Single Game.CameraShakeData::<FrequencyKeepDuration>k__BackingField -> E
	System.Single [Client]System.Single Game.CameraShakeData::<FrequencyAttenuation>k__BackingField -> e

	Game.CameraShakeData/CameraShakeType [Client]Game.CameraShakeData/CameraShakeType Game.CameraShakeData::Type -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::Life -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::StartDelay -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::MaxRange -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::MinRange -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::MaxAmplitude -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::MinAmplitude -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::AmplitudeAttenuation -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::Frequency -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::FrequencyKeepDuration -> dropped
	System.Single [Client]System.Single Game.CameraShakeData::FrequencyAttenuation -> dropped
}

[Client]Game.CameraShakeData/CameraShakeType -> [Client]K.S/s
{
	Game.CameraShakeData/CameraShakeType [Client]Game.CameraShakeData/CameraShakeType Game.CameraShakeData/CameraShakeType::NoShake -> A
	Game.CameraShakeData/CameraShakeType [Client]Game.CameraShakeData/CameraShakeType Game.CameraShakeData/CameraShakeType::Normal -> a
	Game.CameraShakeData/CameraShakeType [Client]Game.CameraShakeData/CameraShakeType Game.CameraShakeData/CameraShakeType::Horizontal -> B
	Game.CameraShakeData/CameraShakeType [Client]Game.CameraShakeData/CameraShakeType Game.CameraShakeData/CameraShakeType::Vertical -> b

	System.Int32 [Client]System.Int32 Game.CameraShakeData/CameraShakeType::value__ skipped:  filtered
}

[Client]Game.EffectData -> [Client]K.T
{
	[Client]Game.EffectData::get_InstanceDatas[0]( ) -> A
	[Client]Game.EffectData::get_CameraShake[0]( ) -> a
	[Client]Game.EffectData::get_Id[0]( ) -> B
	[Client]Game.EffectData::set_Id[1]( System.Int32 ) -> A
	[Client]Game.EffectData::get_Life[0]( ) -> b
	[Client]Game.EffectData::set_Life[1]( System.Single ) -> A
	[Client]Game.EffectData::Load[1]( System.Xml.XmlReader ) -> A

	[Client]Game.EffectData::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Game.EffectInstanceData> [Client]System.Collections.Generic.List`1<Game.EffectInstanceData> Game.EffectData::m_InstanceDatas -> A
	Game.CameraShakeData [Client]Game.CameraShakeData Game.EffectData::m_CameraShakeData -> A
	System.Int32 [Client]System.Int32 Game.EffectData::<Id>k__BackingField -> A
	System.Single [Client]System.Single Game.EffectData::<Life>k__BackingField -> A

	System.Collections.Generic.List`1<Game.EffectInstanceData> [Client]System.Collections.Generic.List`1<Game.EffectInstanceData> Game.EffectData::InstanceDatas -> dropped
	Game.CameraShakeData [Client]Game.CameraShakeData Game.EffectData::CameraShake -> dropped
	System.Int32 [Client]System.Int32 Game.EffectData::Id -> dropped
	System.Single [Client]System.Single Game.EffectData::Life -> dropped
}

[Client]Game.EffectInstance -> [Client]K.t
{
	[Client]Game.EffectInstance::get_FatherEffect[0]( ) -> A
	[Client]Game.EffectInstance::set_FatherEffect[1]( Game.Effect ) -> A
	[Client]Game.EffectInstance::get_BornPos[0]( ) -> a
	[Client]Game.EffectInstance::set_BornPos[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.EffectInstance::get_BornTime[0]( ) -> B
	[Client]Game.EffectInstance::set_BornTime[1]( System.Single ) -> A
	[Client]Game.EffectInstance::get_Dead[0]( ) -> b
	[Client]Game.EffectInstance::set_Dead[1]( System.Boolean ) -> A
	[Client]Game.EffectInstance::get_Visible[0]( ) -> C
	[Client]Game.EffectInstance::set_Visible[1]( System.Boolean ) -> a
	[Client]Game.EffectInstance::get_Pos[0]( ) -> c
	[Client]Game.EffectInstance::Load[1]( Game.EffectInstanceData ) -> A
	[Client]Game.EffectInstance::LoadEffectHandler[1]( UnityEngine.Object ) -> A
	[Client]Game.EffectInstance::LoadSoundHandler[1]( UnityEngine.Object ) -> a
	[Client]Game.EffectInstance::InitPosiont[0]( ) -> D
	[Client]Game.EffectInstance::UpdatePosition[0]( ) -> d
	[Client]Game.EffectInstance::Update[0]( ) -> E
	[Client]Game.EffectInstance::GetBindPos[3]( Game.Character, Game.EffectInstanceBindType, UnityEngine.Vector3& ) -> A
	[Client]Game.EffectInstance::Destroy[0]( ) -> e
	[Client]Game.EffectInstance::SetScale[1]( System.Single ) -> a
	[Client]Game.EffectInstance::SetParticleSystemScale[2]( UnityEngine.GameObject, System.Single ) -> A
	[Client]Game.EffectInstance::SetVisible[1]( System.Boolean ) -> B
	[Client]Game.EffectInstance::SetParticleSystemVisible[2]( UnityEngine.GameObject, System.Boolean ) -> A
	[Client]Game.EffectInstance::SetTransparent[1]( System.Single ) -> B

	[Client]Game.EffectInstance::.ctor[0]( ) skipped:  special name
	[Client]Game.EffectInstance::.cctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.EffectInstance::FloatAccuracy -> A
	System.Single [Client]System.Single Game.EffectInstance::HeightCorrect -> a
	System.Single [Client]System.Single Game.EffectInstance::BodyParam -> B
	System.String [Client]System.String Game.EffectInstance::BodyBone -> A
	System.String [Client]System.String Game.EffectInstance::LeftHandBone -> a
	System.String [Client]System.String Game.EffectInstance::RightHandBone -> B
	System.String [Client]System.String Game.EffectInstance::MainColorName -> b
	System.String [Client]System.String Game.EffectInstance::TintColorName -> C
	log4net.ILog [Client]log4net.ILog Game.EffectInstance::m_Log -> A
	System.UInt32 [Client]System.UInt32 Game.EffectInstance::m_EffectLoadTaskId -> A
	System.UInt32 [Client]System.UInt32 Game.EffectInstance::m_SoundLoadTaskId -> a
	Game.EffectInstanceData [Client]Game.EffectInstanceData Game.EffectInstance::m_Data -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.EffectInstance::m_Object -> A
	Game.Effect [Client]Game.Effect Game.EffectInstance::<FatherEffect>k__BackingField -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.EffectInstance::<BornPos>k__BackingField -> A
	System.Single [Client]System.Single Game.EffectInstance::<BornTime>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.EffectInstance::<Dead>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.EffectInstance::<Visible>k__BackingField -> a

	Game.Effect [Client]Game.Effect Game.EffectInstance::FatherEffect -> dropped
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.EffectInstance::BornPos -> dropped
	System.Single [Client]System.Single Game.EffectInstance::BornTime -> dropped
	System.Boolean [Client]System.Boolean Game.EffectInstance::Dead -> dropped
	System.Boolean [Client]System.Boolean Game.EffectInstance::Visible -> dropped
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.EffectInstance::Pos -> dropped
}

[Client]Game.Effect -> [Client]K.U
{
	[Client]Game.Effect::get_ScaleModify[0]( ) -> A
	[Client]Game.Effect::set_ScaleModify[1]( System.Single ) -> A
	[Client]Game.Effect::get_Caster[0]( ) -> a
	[Client]Game.Effect::get_Target[0]( ) -> B
	[Client]Game.Effect::get_CasterId[0]( ) -> b
	[Client]Game.Effect::set_CasterId[1]( System.UInt32 ) -> A
	[Client]Game.Effect::get_TargetId[0]( ) -> C
	[Client]Game.Effect::set_TargetId[1]( System.UInt32 ) -> a
	[Client]Game.Effect::get_TargetPos[0]( ) -> c
	[Client]Game.Effect::set_TargetPos[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.Effect::get_Dead[0]( ) -> D
	[Client]Game.Effect::set_Dead[1]( System.Boolean ) -> A
	[Client]Game.Effect::get_IsRole[0]( ) -> d
	[Client]Game.Effect::get_TargetTransform[0]( ) -> E
	[Client]Game.Effect::set_TargetTransform[1]( UnityEngine.Transform ) -> A
	[Client]Game.Effect::get_Flyweapon[0]( ) -> e
	[Client]Game.Effect::set_Flyweapon[1]( Game.FlyingWeapon ) -> A
	[Client]Game.Effect::Load[1]( Game.EffectData ) -> A
	[Client]Game.Effect::Destroy[0]( ) -> F
	[Client]Game.Effect::Update[0]( ) -> f
	[Client]Game.Effect::SetScale[1]( System.Single ) -> a
	[Client]Game.Effect::SetVisibel[1]( System.Boolean ) -> a

	[Client]Game.Effect::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Game.EffectInstance> [Client]System.Collections.Generic.List`1<Game.EffectInstance> Game.Effect::m_EffectInstances -> A
	Game.EffectData [Client]Game.EffectData Game.Effect::m_Data -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.Effect::m_Object -> A
	System.Boolean [Client]System.Boolean Game.Effect::m_Loaded -> A
	System.Single [Client]System.Single Game.Effect::m_StartTime -> A
	System.Boolean [Client]System.Boolean Game.Effect::m_Shaked -> a
	UnityEngine.Transform [Client]UnityEngine.Transform Game.Effect::m_targetTransform -> A
	System.Single [Client]System.Single Game.Effect::<ScaleModify>k__BackingField -> a
	System.UInt32 [Client]System.UInt32 Game.Effect::<CasterId>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.Effect::<TargetId>k__BackingField -> a
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Effect::<TargetPos>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.Effect::<Dead>k__BackingField -> B
	Game.FlyingWeapon [Client]Game.FlyingWeapon Game.Effect::<Flyweapon>k__BackingField -> A

	System.Single [Client]System.Single Game.Effect::ScaleModify -> dropped
	Game.Character [Client]Game.Character Game.Effect::Caster -> dropped
	Game.Character [Client]Game.Character Game.Effect::Target -> dropped
	System.UInt32 [Client]System.UInt32 Game.Effect::CasterId -> dropped
	System.UInt32 [Client]System.UInt32 Game.Effect::TargetId -> dropped
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.Effect::TargetPos -> dropped
	System.Boolean [Client]System.Boolean Game.Effect::Dead -> dropped
	System.Boolean [Client]System.Boolean Game.Effect::IsRole -> dropped
	UnityEngine.Transform [Client]UnityEngine.Transform Game.Effect::TargetTransform -> dropped
	Game.FlyingWeapon [Client]Game.FlyingWeapon Game.Effect::Flyweapon -> dropped
}

[Client]Game.TaskType -> [Client]K.u
{
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskTypeMain -> A
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskTypeCampaign -> a
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskTypeLateral -> B
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskTypeExplore -> b
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskCopy -> C
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskEveryDay -> c
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskDayCount -> D
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskFun -> d
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskHard -> E
	Game.TaskType [Client]Game.TaskType Game.TaskType::eTaskMax -> e

	System.Int32 [Client]System.Int32 Game.TaskType::value__ skipped:  filtered
}

[Client]Game.BurstModeType -> [Client]K.V
{
	Game.BurstModeType [Client]Game.BurstModeType Game.BurstModeType::eBurstModeNPC -> A
	Game.BurstModeType [Client]Game.BurstModeType Game.BurstModeType::eBurstModeAuto -> a
	Game.BurstModeType [Client]Game.BurstModeType Game.BurstModeType::eBurstModeNone -> B

	System.Int32 [Client]System.Int32 Game.BurstModeType::value__ skipped:  filtered
}

[Client]Game.BroadcastType -> [Client]K.v
{
	Game.BroadcastType [Client]Game.BroadcastType Game.BroadcastType::eBroadcastTypeNormal -> A
	Game.BroadcastType [Client]Game.BroadcastType Game.BroadcastType::eBroadcastTypeView -> a
	Game.BroadcastType [Client]Game.BroadcastType Game.BroadcastType::eBroadcastTypeMap -> B
	Game.BroadcastType [Client]Game.BroadcastType Game.BroadcastType::eBroadcastTypeServer -> b
	Game.BroadcastType [Client]Game.BroadcastType Game.BroadcastType::eBroadcastTypeGroup -> C

	System.Int32 [Client]System.Int32 Game.BroadcastType::value__ skipped:  filtered
}

[Client]Game.BroadcastPosition -> [Client]K.W
{
	Game.BroadcastPosition [Client]Game.BroadcastPosition Game.BroadcastPosition::eBroadcastPositionCenter -> A
	Game.BroadcastPosition [Client]Game.BroadcastPosition Game.BroadcastPosition::eBroadcastPositionLeftDown -> a
	Game.BroadcastPosition [Client]Game.BroadcastPosition Game.BroadcastPosition::eBroadcastPositionCenterAndLeftDown -> B

	System.Int32 [Client]System.Int32 Game.BroadcastPosition::value__ skipped:  filtered
}

[Client]Game.TalkTask -> [Client]K.w
{
	Game.TalkTask [Client]Game.TalkTask Game.TalkTask::MaxTalkTaskDialogCount -> A
	Game.TalkTask [Client]Game.TalkTask Game.TalkTask::AnswerChoiceCount -> a

	System.Int32 [Client]System.Int32 Game.TalkTask::value__ skipped:  filtered
}

[Client]Game.TaskBase -> [Client]K.X
{
	[Client]Game.TaskBase::get_Id[0]( ) -> A
	[Client]Game.TaskBase::set_Id[1]( System.UInt32 ) -> A
	[Client]Game.TaskBase::get_Type[0]( ) -> a
	[Client]Game.TaskBase::set_Type[1]( System.Int32 ) -> A
	[Client]Game.TaskBase::get_Difficulty[0]( ) -> B
	[Client]Game.TaskBase::set_Difficulty[1]( System.Byte ) -> A
	[Client]Game.TaskBase::get_CanBeCancle[0]( ) -> b
	[Client]Game.TaskBase::set_CanBeCancle[1]( System.Boolean ) -> A
	[Client]Game.TaskBase::get_ItemId[0]( ) -> C
	[Client]Game.TaskBase::set_ItemId[1]( System.UInt32[] ) -> A
	[Client]Game.TaskBase::get_ItemCount[0]( ) -> c
	[Client]Game.TaskBase::set_ItemCount[1]( System.Byte[] ) -> A
	[Client]Game.TaskBase::get_AutoDeleteItem[0]( ) -> D
	[Client]Game.TaskBase::set_AutoDeleteItem[1]( System.Boolean ) -> a
	[Client]Game.TaskBase::get_Close[0]( ) -> d
	[Client]Game.TaskBase::set_Close[1]( System.Boolean ) -> B
	[Client]Game.TaskBase::get_TalkTask[0]( ) -> E
	[Client]Game.TaskBase::set_TalkTask[1]( System.Boolean ) -> b
	[Client]Game.TaskBase::get_QuestionCount[0]( ) -> e
	[Client]Game.TaskBase::set_QuestionCount[1]( System.Byte ) -> a
	[Client]Game.TaskBase::get_AutoPathFind[0]( ) -> F
	[Client]Game.TaskBase::set_AutoPathFind[1]( System.Boolean ) -> C
	[Client]Game.TaskBase::Load[1]( System.IO.BinaryReader ) -> A

	[Client]Game.TaskBase::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.TaskBase::MaxItemNum -> A
	System.UInt32 [Client]System.UInt32 Game.TaskBase::<Id>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.TaskBase::<Type>k__BackingField -> a
	System.Byte [Client]System.Byte Game.TaskBase::<Difficulty>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.TaskBase::<CanBeCancle>k__BackingField -> A
	System.UInt32[] [Client]System.UInt32[] Game.TaskBase::<ItemId>k__BackingField -> A
	System.Byte[] [Client]System.Byte[] Game.TaskBase::<ItemCount>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.TaskBase::<AutoDeleteItem>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.TaskBase::<Close>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.TaskBase::<TalkTask>k__BackingField -> b
	System.Byte [Client]System.Byte Game.TaskBase::<QuestionCount>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.TaskBase::<AutoPathFind>k__BackingField -> C

	System.UInt32 [Client]System.UInt32 Game.TaskBase::Id -> dropped
	System.Int32 [Client]System.Int32 Game.TaskBase::Type -> dropped
	System.Byte [Client]System.Byte Game.TaskBase::Difficulty -> dropped
	System.Boolean [Client]System.Boolean Game.TaskBase::CanBeCancle -> dropped
	System.UInt32[] [Client]System.UInt32[] Game.TaskBase::ItemId -> dropped
	System.Byte[] [Client]System.Byte[] Game.TaskBase::ItemCount -> dropped
	System.Boolean [Client]System.Boolean Game.TaskBase::AutoDeleteItem -> dropped
	System.Boolean [Client]System.Boolean Game.TaskBase::Close -> dropped
	System.Boolean [Client]System.Boolean Game.TaskBase::TalkTask -> dropped
	System.Byte [Client]System.Byte Game.TaskBase::QuestionCount -> dropped
	System.Boolean [Client]System.Boolean Game.TaskBase::AutoPathFind -> dropped
}

[Client]Game.TaskAccept -> [Client]K.x
{
	[Client]Game.TaskAccept::get_Mode[0]( ) -> A
	[Client]Game.TaskAccept::set_Mode[1]( System.Int32 ) -> A
	[Client]Game.TaskAccept::get_NpcId[0]( ) -> a
	[Client]Game.TaskAccept::set_NpcId[1]( System.UInt32 ) -> A
	[Client]Game.TaskAccept::get_PreTaskId[0]( ) -> B
	[Client]Game.TaskAccept::set_PreTaskId[1]( System.UInt32 ) -> a
	[Client]Game.TaskAccept::get_TurnOn[0]( ) -> b
	[Client]Game.TaskAccept::set_TurnOn[1]( System.Boolean ) -> A
	[Client]Game.TaskAccept::get_StartTime[0]( ) -> C
	[Client]Game.TaskAccept::set_StartTime[1]( System.UInt32 ) -> B
	[Client]Game.TaskAccept::get_EndTime[0]( ) -> c
	[Client]Game.TaskAccept::set_EndTime[1]( System.UInt32 ) -> b
	[Client]Game.TaskAccept::get_Week[0]( ) -> D
	[Client]Game.TaskAccept::set_Week[1]( System.Byte ) -> A
	[Client]Game.TaskAccept::get_LevelMin[0]( ) -> d
	[Client]Game.TaskAccept::set_LevelMin[1]( System.UInt32 ) -> C
	[Client]Game.TaskAccept::get_LevelMax[0]( ) -> E
	[Client]Game.TaskAccept::set_LevelMax[1]( System.UInt32 ) -> c
	[Client]Game.TaskAccept::get_NeedItemId[0]( ) -> e
	[Client]Game.TaskAccept::set_NeedItemId[1]( System.UInt32[] ) -> A
	[Client]Game.TaskAccept::get_NeedItemCount[0]( ) -> F
	[Client]Game.TaskAccept::set_NeedItemCount[1]( System.Byte[] ) -> A
	[Client]Game.TaskAccept::get_Foregift[0]( ) -> f
	[Client]Game.TaskAccept::set_Foregift[1]( System.UInt32 ) -> D
	[Client]Game.TaskAccept::get_PrestigeType[0]( ) -> G
	[Client]Game.TaskAccept::set_PrestigeType[1]( System.Byte ) -> a
	[Client]Game.TaskAccept::get_Prestige[0]( ) -> g
	[Client]Game.TaskAccept::set_Prestige[1]( System.UInt32 ) -> d
	[Client]Game.TaskAccept::get_Profession[0]( ) -> H
	[Client]Game.TaskAccept::set_Profession[1]( System.Byte ) -> B
	[Client]Game.TaskAccept::get_Sex[0]( ) -> h
	[Client]Game.TaskAccept::set_Sex[1]( System.Byte ) -> b
	[Client]Game.TaskAccept::get_PlayerSkillId[0]( ) -> I
	[Client]Game.TaskAccept::set_PlayerSkillId[1]( System.UInt32 ) -> E
	[Client]Game.TaskAccept::get_PlayerSkillLevel[0]( ) -> i
	[Client]Game.TaskAccept::set_PlayerSkillLevel[1]( System.Byte ) -> C
	[Client]Game.TaskAccept::get_Title[0]( ) -> J
	[Client]Game.TaskAccept::set_Title[1]( System.Byte ) -> c
	[Client]Game.TaskAccept::get_AcceptNum[0]( ) -> j
	[Client]Game.TaskAccept::set_AcceptNum[1]( System.UInt32 ) -> e
	[Client]Game.TaskAccept::get_RandomTasks[0]( ) -> K
	[Client]Game.TaskAccept::set_RandomTasks[1]( System.UInt32[] ) -> a
	[Client]Game.TaskAccept::Load[1]( System.IO.BinaryReader ) -> A

	[Client]Game.TaskAccept::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.TaskAccept::MaxItemNum -> A
	System.Int32 [Client]System.Int32 Game.TaskAccept::MaxRandomTaskNum -> a
	System.Int32 [Client]System.Int32 Game.TaskAccept::<Mode>k__BackingField -> B
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<NpcId>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<PreTaskId>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.TaskAccept::<TurnOn>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<StartTime>k__BackingField -> B
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<EndTime>k__BackingField -> b
	System.Byte [Client]System.Byte Game.TaskAccept::<Week>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<LevelMin>k__BackingField -> C
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<LevelMax>k__BackingField -> c
	System.UInt32[] [Client]System.UInt32[] Game.TaskAccept::<NeedItemId>k__BackingField -> A
	System.Byte[] [Client]System.Byte[] Game.TaskAccept::<NeedItemCount>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<Foregift>k__BackingField -> D
	System.Byte [Client]System.Byte Game.TaskAccept::<PrestigeType>k__BackingField -> a
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<Prestige>k__BackingField -> d
	System.Byte [Client]System.Byte Game.TaskAccept::<Profession>k__BackingField -> B
	System.Byte [Client]System.Byte Game.TaskAccept::<Sex>k__BackingField -> b
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<PlayerSkillId>k__BackingField -> E
	System.Byte [Client]System.Byte Game.TaskAccept::<PlayerSkillLevel>k__BackingField -> C
	System.Byte [Client]System.Byte Game.TaskAccept::<Title>k__BackingField -> c
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::<AcceptNum>k__BackingField -> e
	System.UInt32[] [Client]System.UInt32[] Game.TaskAccept::<RandomTasks>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.TaskAccept::Mode -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::NpcId -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::PreTaskId -> dropped
	System.Boolean [Client]System.Boolean Game.TaskAccept::TurnOn -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::StartTime -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::EndTime -> dropped
	System.Byte [Client]System.Byte Game.TaskAccept::Week -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::LevelMin -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::LevelMax -> dropped
	System.UInt32[] [Client]System.UInt32[] Game.TaskAccept::NeedItemId -> dropped
	System.Byte[] [Client]System.Byte[] Game.TaskAccept::NeedItemCount -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::Foregift -> dropped
	System.Byte [Client]System.Byte Game.TaskAccept::PrestigeType -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::Prestige -> dropped
	System.Byte [Client]System.Byte Game.TaskAccept::Profession -> dropped
	System.Byte [Client]System.Byte Game.TaskAccept::Sex -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::PlayerSkillId -> dropped
	System.Byte [Client]System.Byte Game.TaskAccept::PlayerSkillLevel -> dropped
	System.Byte [Client]System.Byte Game.TaskAccept::Title -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskAccept::AcceptNum -> dropped
	System.UInt32[] [Client]System.UInt32[] Game.TaskAccept::RandomTasks -> dropped
}

[Client]Game.TaskFailed -> [Client]K.Y
{
	[Client]Game.TaskFailed::get_TimeLimit[0]( ) -> A
	[Client]Game.TaskFailed::set_TimeLimit[1]( System.UInt32 ) -> A
	[Client]Game.TaskFailed::get_RoleDead[0]( ) -> a
	[Client]Game.TaskFailed::set_RoleDead[1]( System.Boolean ) -> A
	[Client]Game.TaskFailed::get_PlayerOffline[0]( ) -> B
	[Client]Game.TaskFailed::set_PlayerOffline[1]( System.Boolean ) -> a
	[Client]Game.TaskFailed::Load[1]( System.IO.BinaryReader ) -> A

	[Client]Game.TaskFailed::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.TaskFailed::<TimeLimit>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.TaskFailed::<RoleDead>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.TaskFailed::<PlayerOffline>k__BackingField -> a

	System.UInt32 [Client]System.UInt32 Game.TaskFailed::TimeLimit -> dropped
	System.Boolean [Client]System.Boolean Game.TaskFailed::RoleDead -> dropped
	System.Boolean [Client]System.Boolean Game.TaskFailed::PlayerOffline -> dropped
}

[Client]Game.TaskComplete -> [Client]K.y
{
	[Client]Game.TaskComplete::get_Mode[0]( ) -> A
	[Client]Game.TaskComplete::set_Mode[1]( System.Int32 ) -> A
	[Client]Game.TaskComplete::get_NpcId[0]( ) -> a
	[Client]Game.TaskComplete::set_NpcId[1]( System.UInt32 ) -> A
	[Client]Game.TaskComplete::get_NeedItemId[0]( ) -> B
	[Client]Game.TaskComplete::set_NeedItemId[1]( System.UInt32[] ) -> A
	[Client]Game.TaskComplete::get_NeedItemCount[0]( ) -> b
	[Client]Game.TaskComplete::set_NeedItemCount[1]( System.Byte[] ) -> A
	[Client]Game.TaskComplete::get_MonsterId[0]( ) -> C
	[Client]Game.TaskComplete::set_MonsterId[1]( System.UInt32[] ) -> a
	[Client]Game.TaskComplete::get_MonsterCount[0]( ) -> c
	[Client]Game.TaskComplete::set_MonsterCount[1]( System.UInt32[] ) -> B
	[Client]Game.TaskComplete::get_RoleLevel[0]( ) -> D
	[Client]Game.TaskComplete::set_RoleLevel[1]( System.UInt32 ) -> a
	[Client]Game.TaskComplete::get_RoleMoney[0]( ) -> d
	[Client]Game.TaskComplete::set_RoleMoney[1]( System.UInt32 ) -> B
	[Client]Game.TaskComplete::get_PetId[0]( ) -> E
	[Client]Game.TaskComplete::set_PetId[1]( System.UInt32[] ) -> b
	[Client]Game.TaskComplete::get_PetCount[0]( ) -> e
	[Client]Game.TaskComplete::set_PetCount[1]( System.UInt32[] ) -> C
	[Client]Game.TaskComplete::get_PlayerSkillId[0]( ) -> F
	[Client]Game.TaskComplete::set_PlayerSkillId[1]( System.UInt32 ) -> b
	[Client]Game.TaskComplete::get_PlayerSkillLevel[0]( ) -> f
	[Client]Game.TaskComplete::set_PlayerSkillLevel[1]( System.Byte ) -> A
	[Client]Game.TaskComplete::get_Title[0]( ) -> G
	[Client]Game.TaskComplete::set_Title[1]( System.UInt32 ) -> C
	[Client]Game.TaskComplete::get_PrestigeType[0]( ) -> g
	[Client]Game.TaskComplete::set_PrestigeType[1]( System.Byte ) -> a
	[Client]Game.TaskComplete::get_Prestige[0]( ) -> H
	[Client]Game.TaskComplete::set_Prestige[1]( System.UInt32 ) -> c
	[Client]Game.TaskComplete::get_RightNum[0]( ) -> h
	[Client]Game.TaskComplete::set_RightNum[1]( System.Byte ) -> B
	[Client]Game.TaskComplete::get_RightAnswerIndexs[0]( ) -> I
	[Client]Game.TaskComplete::set_RightAnswerIndexs[1]( System.Byte[] ) -> a
	[Client]Game.TaskComplete::get_Time[0]( ) -> i
	[Client]Game.TaskComplete::set_Time[1]( System.UInt32 ) -> D
	[Client]Game.TaskComplete::get_VarType[0]( ) -> J
	[Client]Game.TaskComplete::set_VarType[1]( System.UInt32 ) -> d
	[Client]Game.TaskComplete::get_VarValue[0]( ) -> j
	[Client]Game.TaskComplete::set_VarValue[1]( System.UInt32 ) -> E
	[Client]Game.TaskComplete::get_Area[0]( ) -> K
	[Client]Game.TaskComplete::set_Area[1]( System.Boolean ) -> A
	[Client]Game.TaskComplete::get_AreaMapId[0]( ) -> k
	[Client]Game.TaskComplete::set_AreaMapId[1]( System.UInt32 ) -> e
	[Client]Game.TaskComplete::get_AreaLeft[0]( ) -> L
	[Client]Game.TaskComplete::set_AreaLeft[1]( System.Int32 ) -> a
	[Client]Game.TaskComplete::get_AreaUp[0]( ) -> l
	[Client]Game.TaskComplete::set_AreaUp[1]( System.Int32 ) -> B
	[Client]Game.TaskComplete::get_AreaRight[0]( ) -> M
	[Client]Game.TaskComplete::set_AreaRight[1]( System.Int32 ) -> b
	[Client]Game.TaskComplete::get_AreaBottom[0]( ) -> m
	[Client]Game.TaskComplete::set_AreaBottom[1]( System.Int32 ) -> C
	[Client]Game.TaskComplete::Load[1]( System.IO.BinaryReader ) -> A

	[Client]Game.TaskComplete::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.TaskComplete::MaxNeedItemNum -> A
	System.Int32 [Client]System.Int32 Game.TaskComplete::MaxNeedMonsterNum -> a
	System.Int32 [Client]System.Int32 Game.TaskComplete::MaxNeedPetNum -> B
	System.Int32 [Client]System.Int32 Game.TaskComplete::<Mode>k__BackingField -> b
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<NpcId>k__BackingField -> A
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::<NeedItemId>k__BackingField -> A
	System.Byte[] [Client]System.Byte[] Game.TaskComplete::<NeedItemCount>k__BackingField -> A
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::<MonsterId>k__BackingField -> a
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::<MonsterCount>k__BackingField -> B
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<RoleLevel>k__BackingField -> a
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<RoleMoney>k__BackingField -> B
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::<PetId>k__BackingField -> b
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::<PetCount>k__BackingField -> C
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<PlayerSkillId>k__BackingField -> b
	System.Byte [Client]System.Byte Game.TaskComplete::<PlayerSkillLevel>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<Title>k__BackingField -> C
	System.Byte [Client]System.Byte Game.TaskComplete::<PrestigeType>k__BackingField -> a
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<Prestige>k__BackingField -> c
	System.Byte [Client]System.Byte Game.TaskComplete::<RightNum>k__BackingField -> B
	System.Byte[] [Client]System.Byte[] Game.TaskComplete::<RightAnswerIndexs>k__BackingField -> a
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<Time>k__BackingField -> D
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<VarType>k__BackingField -> d
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<VarValue>k__BackingField -> E
	System.Boolean [Client]System.Boolean Game.TaskComplete::<Area>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::<AreaMapId>k__BackingField -> e
	System.Int32 [Client]System.Int32 Game.TaskComplete::<AreaLeft>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.TaskComplete::<AreaUp>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.TaskComplete::<AreaRight>k__BackingField -> D
	System.Int32 [Client]System.Int32 Game.TaskComplete::<AreaBottom>k__BackingField -> d

	System.Int32 [Client]System.Int32 Game.TaskComplete::Mode -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::NpcId -> dropped
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::NeedItemId -> dropped
	System.Byte[] [Client]System.Byte[] Game.TaskComplete::NeedItemCount -> dropped
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::MonsterId -> dropped
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::MonsterCount -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::RoleLevel -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::RoleMoney -> dropped
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::PetId -> dropped
	System.UInt32[] [Client]System.UInt32[] Game.TaskComplete::PetCount -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::PlayerSkillId -> dropped
	System.Byte [Client]System.Byte Game.TaskComplete::PlayerSkillLevel -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::Title -> dropped
	System.Byte [Client]System.Byte Game.TaskComplete::PrestigeType -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::Prestige -> dropped
	System.Byte [Client]System.Byte Game.TaskComplete::RightNum -> dropped
	System.Byte[] [Client]System.Byte[] Game.TaskComplete::RightAnswerIndexs -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::Time -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::VarType -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::VarValue -> dropped
	System.Boolean [Client]System.Boolean Game.TaskComplete::Area -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskComplete::AreaMapId -> dropped
	System.Int32 [Client]System.Int32 Game.TaskComplete::AreaLeft -> dropped
	System.Int32 [Client]System.Int32 Game.TaskComplete::AreaUp -> dropped
	System.Int32 [Client]System.Int32 Game.TaskComplete::AreaRight -> dropped
	System.Int32 [Client]System.Int32 Game.TaskComplete::AreaBottom -> dropped
}

[Client]Game.TaskReward -> [Client]K.Z
{
	[Client]Game.TaskReward::get_BoardcastType[0]( ) -> A
	[Client]Game.TaskReward::set_BoardcastType[1]( System.Int32 ) -> A
	[Client]Game.TaskReward::get_BoardcastPosition[0]( ) -> a
	[Client]Game.TaskReward::set_BoardcastPosition[1]( System.Int32 ) -> a
	[Client]Game.TaskReward::get_Script[0]( ) -> B
	[Client]Game.TaskReward::set_Script[1]( System.String ) -> A
	[Client]Game.TaskReward::get_SuccessReward[0]( ) -> b
	[Client]Game.TaskReward::Load[1]( System.IO.BinaryReader ) -> A

	[Client]Game.TaskReward::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.TaskReward::MaxRewardItemNum -> A
	Game.TaskReward/Reward [Client]Game.TaskReward/Reward Game.TaskReward::m_Reward -> A
	System.Int32 [Client]System.Int32 Game.TaskReward::<BoardcastType>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.TaskReward::<BoardcastPosition>k__BackingField -> B
	System.String [Client]System.String Game.TaskReward::<Script>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.TaskReward::BoardcastType -> dropped
	System.Int32 [Client]System.Int32 Game.TaskReward::BoardcastPosition -> dropped
	System.String [Client]System.String Game.TaskReward::Script -> dropped
	Game.TaskReward/Reward [Client]Game.TaskReward/Reward Game.TaskReward::SuccessReward -> dropped
}

[Client]Game.TaskReward/Reward -> [Client]K.Z/z
{
	[Client]Game.TaskReward/Reward::get_Money[0]( ) -> A
	[Client]Game.TaskReward/Reward::set_Money[1]( System.UInt32 ) -> A
	[Client]Game.TaskReward/Reward::get_Exp[0]( ) -> a
	[Client]Game.TaskReward/Reward::set_Exp[1]( System.UInt32 ) -> a
	[Client]Game.TaskReward/Reward::get_ItemId[0]( ) -> B
	[Client]Game.TaskReward/Reward::set_ItemId[1]( System.UInt32[] ) -> A
	[Client]Game.TaskReward/Reward::get_ItemCount[0]( ) -> b
	[Client]Game.TaskReward/Reward::set_ItemCount[1]( System.Byte[] ) -> A
	[Client]Game.TaskReward/Reward::get_TaskId[0]( ) -> C
	[Client]Game.TaskReward/Reward::set_TaskId[1]( System.UInt32 ) -> B
	[Client]Game.TaskReward/Reward::get_PrestigeType[0]( ) -> c
	[Client]Game.TaskReward/Reward::set_PrestigeType[1]( System.Byte ) -> A
	[Client]Game.TaskReward/Reward::get_Prestige[0]( ) -> D
	[Client]Game.TaskReward/Reward::set_Prestige[1]( System.UInt32 ) -> b
	[Client]Game.TaskReward/Reward::get_Title[0]( ) -> d
	[Client]Game.TaskReward/Reward::set_Title[1]( System.UInt32 ) -> C
	[Client]Game.TaskReward/Reward::get_MapId[0]( ) -> E
	[Client]Game.TaskReward/Reward::set_MapId[1]( System.UInt32 ) -> c
	[Client]Game.TaskReward/Reward::get_X[0]( ) -> e
	[Client]Game.TaskReward/Reward::set_X[1]( System.Int32 ) -> A
	[Client]Game.TaskReward/Reward::get_Y[0]( ) -> F
	[Client]Game.TaskReward/Reward::set_Y[1]( System.Int32 ) -> a
	[Client]Game.TaskReward/Reward::get_SkillPoint[0]( ) -> f
	[Client]Game.TaskReward/Reward::set_SkillPoint[1]( System.UInt32 ) -> D
	[Client]Game.TaskReward/Reward::Load[1]( System.IO.BinaryReader ) -> A

	[Client]Game.TaskReward/Reward::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::<Money>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::<Exp>k__BackingField -> a
	System.UInt32[] [Client]System.UInt32[] Game.TaskReward/Reward::<ItemId>k__BackingField -> A
	System.Byte[] [Client]System.Byte[] Game.TaskReward/Reward::<ItemCount>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::<TaskId>k__BackingField -> B
	System.Byte [Client]System.Byte Game.TaskReward/Reward::<PrestigeType>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::<Prestige>k__BackingField -> b
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::<Title>k__BackingField -> C
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::<MapId>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.TaskReward/Reward::<X>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.TaskReward/Reward::<Y>k__BackingField -> a
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::<SkillPoint>k__BackingField -> D

	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::Money -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::Exp -> dropped
	System.UInt32[] [Client]System.UInt32[] Game.TaskReward/Reward::ItemId -> dropped
	System.Byte[] [Client]System.Byte[] Game.TaskReward/Reward::ItemCount -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::TaskId -> dropped
	System.Byte [Client]System.Byte Game.TaskReward/Reward::PrestigeType -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::Prestige -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::Title -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::MapId -> dropped
	System.Int32 [Client]System.Int32 Game.TaskReward/Reward::X -> dropped
	System.Int32 [Client]System.Int32 Game.TaskReward/Reward::Y -> dropped
	System.UInt32 [Client]System.UInt32 Game.TaskReward/Reward::SkillPoint -> dropped
}

[Client]Game.TaskDialog -> [Client]k.A
{
	[Client]Game.TaskDialog::get_Name[0]( ) -> A
	[Client]Game.TaskDialog::set_Name[1]( System.String ) -> A
	[Client]Game.TaskDialog::get_Intro[0]( ) -> a
	[Client]Game.TaskDialog::set_Intro[1]( System.String ) -> a
	[Client]Game.TaskDialog::get_Hint[0]( ) -> B
	[Client]Game.TaskDialog::set_Hint[1]( System.String ) -> B
	[Client]Game.TaskDialog::get_Direct[0]( ) -> b
	[Client]Game.TaskDialog::set_Direct[1]( System.String ) -> b
	[Client]Game.TaskDialog::get_NpcDialog[0]( ) -> C
	[Client]Game.TaskDialog::set_NpcDialog[1]( System.String[] ) -> A
	[Client]Game.TaskDialog::get_Undone[0]( ) -> c
	[Client]Game.TaskDialog::set_Undone[1]( System.String[] ) -> a
	[Client]Game.TaskDialog::get_Success[0]( ) -> D
	[Client]Game.TaskDialog::set_Success[1]( System.String[] ) -> B
	[Client]Game.TaskDialog::get_Failed[0]( ) -> d
	[Client]Game.TaskDialog::set_Failed[1]( System.String[] ) -> b
	[Client]Game.TaskDialog::get_AcceptableHello[0]( ) -> E
	[Client]Game.TaskDialog::set_AcceptableHello[1]( System.String ) -> C
	[Client]Game.TaskDialog::get_AcceptedHello[0]( ) -> e
	[Client]Game.TaskDialog::set_AcceptedHello[1]( System.String ) -> c
	[Client]Game.TaskDialog::get_CompleteHello[0]( ) -> F
	[Client]Game.TaskDialog::set_CompleteHello[1]( System.String ) -> D
	[Client]Game.TaskDialog::get_Bulletin[0]( ) -> f
	[Client]Game.TaskDialog::set_Bulletin[1]( System.String ) -> d
	[Client]Game.TaskDialog::get_TalkFailed[0]( ) -> G
	[Client]Game.TaskDialog::set_TalkFailed[1]( System.String ) -> E
	[Client]Game.TaskDialog::get_Questions[0]( ) -> g
	[Client]Game.TaskDialog::set_Questions[1]( System.String[] ) -> C
	[Client]Game.TaskDialog::get_Answers[0]( ) -> H
	[Client]Game.TaskDialog::set_Answers[1]( System.String[] ) -> c
	[Client]Game.TaskDialog::Load[2]( System.UInt32, System.Int32 ) -> A
	[Client]Game.TaskDialog::ResetDialog[1]( Game.TaskDialog/DialogType ) -> A
	[Client]Game.TaskDialog::ResetAllDialog[0]( ) -> h
	[Client]Game.TaskDialog::GetNextDialogGroup[3]( System.Collections.Generic.List`1<System.String>&, System.Collections.Generic.List`1<System.String>&, Game.TaskDialog/DialogType ) -> A

	[Client]Game.TaskDialog::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.TaskDialog::TaskDialogFileFormat -> A
	System.String [Client]System.String Game.TaskDialog::MeFlag -> a
	System.String [Client]System.String Game.TaskDialog::AcceptFlag -> B
	System.String [Client]System.String Game.TaskDialog::CompleteFlag -> b
	System.String [Client]System.String Game.TaskDialog::SelfName -> C
	System.Int32 [Client]System.Int32 Game.TaskDialog::MaxDialogNum -> A
	System.Int32[] [Client]System.Int32[] Game.TaskDialog::m_Indexs -> A
	System.String [Client]System.String Game.TaskDialog::<Name>k__BackingField -> c
	System.String [Client]System.String Game.TaskDialog::<Intro>k__BackingField -> D
	System.String [Client]System.String Game.TaskDialog::<Hint>k__BackingField -> d
	System.String [Client]System.String Game.TaskDialog::<Direct>k__BackingField -> E
	System.String[] [Client]System.String[] Game.TaskDialog::<NpcDialog>k__BackingField -> A
	System.String[] [Client]System.String[] Game.TaskDialog::<Undone>k__BackingField -> a
	System.String[] [Client]System.String[] Game.TaskDialog::<Success>k__BackingField -> B
	System.String[] [Client]System.String[] Game.TaskDialog::<Failed>k__BackingField -> b
	System.String [Client]System.String Game.TaskDialog::<AcceptableHello>k__BackingField -> e
	System.String [Client]System.String Game.TaskDialog::<AcceptedHello>k__BackingField -> F
	System.String [Client]System.String Game.TaskDialog::<CompleteHello>k__BackingField -> f
	System.String [Client]System.String Game.TaskDialog::<Bulletin>k__BackingField -> G
	System.String [Client]System.String Game.TaskDialog::<TalkFailed>k__BackingField -> g
	System.String[] [Client]System.String[] Game.TaskDialog::<Questions>k__BackingField -> C
	System.String[0...,0...] [Client]System.String[0...,0...] Game.TaskDialog::<Answers>k__BackingField -> A

	System.String [Client]System.String Game.TaskDialog::Name -> dropped
	System.String [Client]System.String Game.TaskDialog::Intro -> dropped
	System.String [Client]System.String Game.TaskDialog::Hint -> dropped
	System.String [Client]System.String Game.TaskDialog::Direct -> dropped
	System.String[] [Client]System.String[] Game.TaskDialog::NpcDialog -> dropped
	System.String[] [Client]System.String[] Game.TaskDialog::Undone -> dropped
	System.String[] [Client]System.String[] Game.TaskDialog::Success -> dropped
	System.String[] [Client]System.String[] Game.TaskDialog::Failed -> dropped
	System.String [Client]System.String Game.TaskDialog::AcceptableHello -> dropped
	System.String [Client]System.String Game.TaskDialog::AcceptedHello -> dropped
	System.String [Client]System.String Game.TaskDialog::CompleteHello -> dropped
	System.String [Client]System.String Game.TaskDialog::Bulletin -> dropped
	System.String [Client]System.String Game.TaskDialog::TalkFailed -> dropped
	System.String[] [Client]System.String[] Game.TaskDialog::Questions -> dropped
	System.String[0...,0...] [Client]System.String[0...,0...] Game.TaskDialog::Answers -> dropped
}

[Client]Game.TaskDialog/DialogType -> [Client]k.A/a
{
	Game.TaskDialog/DialogType [Client]Game.TaskDialog/DialogType Game.TaskDialog/DialogType::NpcDialog -> A
	Game.TaskDialog/DialogType [Client]Game.TaskDialog/DialogType Game.TaskDialog/DialogType::Undone -> a
	Game.TaskDialog/DialogType [Client]Game.TaskDialog/DialogType Game.TaskDialog/DialogType::Success -> B
	Game.TaskDialog/DialogType [Client]Game.TaskDialog/DialogType Game.TaskDialog/DialogType::Failed -> b

	System.Int32 [Client]System.Int32 Game.TaskDialog/DialogType::value__ skipped:  filtered
}

[Client]Game.TaskDialog/DialogState -> [Client]k.A/B
{
	Game.TaskDialog/DialogState [Client]Game.TaskDialog/DialogState Game.TaskDialog/DialogState::Normal -> A
	Game.TaskDialog/DialogState [Client]Game.TaskDialog/DialogState Game.TaskDialog/DialogState::LastOne -> a
	Game.TaskDialog/DialogState [Client]Game.TaskDialog/DialogState Game.TaskDialog/DialogState::End -> B

	System.Int32 [Client]System.Int32 Game.TaskDialog/DialogState::value__ skipped:  filtered
}

[Client]Game.Task -> [Client]k.b
{
	[Client]Game.Task::get_Base[0]( ) -> A
	[Client]Game.Task::get_Accept[0]( ) -> a
	[Client]Game.Task::get_Failed[0]( ) -> B
	[Client]Game.Task::get_Complete[0]( ) -> b
	[Client]Game.Task::get_Reward[0]( ) -> C
	[Client]Game.Task::get_Dialog[0]( ) -> c
	[Client]Game.Task::Load[1]( System.IO.BinaryReader ) -> A

	[Client]Game.Task::.ctor[0]( ) skipped:  special name

	Game.TaskBase [Client]Game.TaskBase Game.Task::m_Base -> A
	Game.TaskAccept [Client]Game.TaskAccept Game.Task::m_Accept -> A
	Game.TaskFailed [Client]Game.TaskFailed Game.Task::m_Failed -> A
	Game.TaskComplete [Client]Game.TaskComplete Game.Task::m_Complete -> A
	Game.TaskReward [Client]Game.TaskReward Game.Task::m_Reward -> A
	Game.TaskDialog [Client]Game.TaskDialog Game.Task::m_Dialog -> A

	Game.TaskBase [Client]Game.TaskBase Game.Task::Base -> dropped
	Game.TaskAccept [Client]Game.TaskAccept Game.Task::Accept -> dropped
	Game.TaskFailed [Client]Game.TaskFailed Game.Task::Failed -> dropped
	Game.TaskComplete [Client]Game.TaskComplete Game.Task::Complete -> dropped
	Game.TaskReward [Client]Game.TaskReward Game.Task::Reward -> dropped
	Game.TaskDialog [Client]Game.TaskDialog Game.Task::Dialog -> dropped
}

[Client]Game.TaskManager -> [Client]k.C
{
	[Client]Game.TaskManager::get_Instance[0]( ) -> A
	[Client]Game.TaskManager::Load[0]( ) -> a
	[Client]Game.TaskManager::GetTask[1]( System.UInt32 ) -> A

	[Client]Game.TaskManager::.ctor[0]( ) skipped:  special name
	[Client]Game.TaskManager::.cctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.TaskManager::TaskDataFile -> A
	System.Int32 [Client]System.Int32 Game.TaskManager::Version -> A
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.Task> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.Task> Game.TaskManager::m_Tasks -> A
	Game.TaskManager [Client]Game.TaskManager Game.TaskManager::m_Instance -> A

	Game.TaskManager [Client]Game.TaskManager Game.TaskManager::Instance -> dropped
}

[Client]Game.Data.ServerInfoData -> [Client]k.c
{

	[Client]Game.Data.ServerInfoData::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.Data.ServerInfoData::m_Name -> A
	System.String [Client]System.String Game.Data.ServerInfoData::m_Host -> a
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.Data.ServerInfoData::m_Ports -> A
	System.String [Client]System.String Game.Data.ServerInfoData::m_Status -> B
	System.String [Client]System.String Game.Data.ServerInfoData::m_Desc -> b
	System.Boolean [Client]System.Boolean Game.Data.ServerInfoData::m_Test -> A
}

[Client]Game.Data.AreaInfoData -> [Client]k.D
{

	[Client]Game.Data.AreaInfoData::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.Data.AreaInfoData::m_Name -> A
	System.Collections.Generic.Dictionary`2<System.String,Game.Data.ServerInfoData> [Client]System.Collections.Generic.Dictionary`2<System.String,Game.Data.ServerInfoData> Game.Data.AreaInfoData::m_ServerLists -> A
}

[Client]Game.Data.AnnouncementInfo -> [Client]k.d
{

	[Client]Game.Data.AnnouncementInfo::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Data.AnnouncementInfo::m_Version -> A
	System.String [Client]System.String Game.Data.AnnouncementInfo::m_Title -> A
	System.String [Client]System.String Game.Data.AnnouncementInfo::m_Content -> a
}

[Client]Game.Data.ServerConfig -> [Client]k.E
{
	[Client]Game.Data.ServerConfig::get_AreaLists[0]( ) -> A
	[Client]Game.Data.ServerConfig::get_RecommendServer[0]( ) -> a
	[Client]Game.Data.ServerConfig::set_RecommendServer[1]( System.String ) -> A
	[Client]Game.Data.ServerConfig::get_Instance[0]( ) -> B
	[Client]Game.Data.ServerConfig::GetAreaData[1]( System.Int32 ) -> A
	[Client]Game.Data.ServerConfig::GetTestAreaData[1]( System.Int32 ) -> a
	[Client]Game.Data.ServerConfig::GetServerData[1]( System.String ) -> a
	[Client]Game.Data.ServerConfig::Init[0]( ) -> b
	[Client]Game.Data.ServerConfig::Load[0]( ) -> C
	[Client]Game.Data.ServerConfig::LoadDefault[0]( ) -> c
	[Client]Game.Data.ServerConfig::LoadTestServer[0]( ) -> D
	[Client]Game.Data.ServerConfig::ParseXml[1]( System.Xml.XmlDocument ) -> A
	[Client]Game.Data.ServerConfig::ParseXmlVersion1[1]( System.Xml.XmlDocument ) -> a
	[Client]Game.Data.ServerConfig::ParseXmlVersion2[1]( System.Xml.XmlDocument ) -> B
	[Client]Game.Data.ServerConfig::ParseXmlVersion3[1]( System.Xml.XmlDocument ) -> b

	[Client]Game.Data.ServerConfig::.cctor[0]( ) skipped:  special name
	[Client]Game.Data.ServerConfig::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.Data.ServerConfig::m_FilePath -> A
	log4net.ILog [Client]log4net.ILog Game.Data.ServerConfig::m_Log -> A
	System.Collections.Generic.List`1<Game.Data.AreaInfoData> [Client]System.Collections.Generic.List`1<Game.Data.AreaInfoData> Game.Data.ServerConfig::m_AreaLists -> A
	System.Collections.Generic.List`1<Game.Data.AreaInfoData> [Client]System.Collections.Generic.List`1<Game.Data.AreaInfoData> Game.Data.ServerConfig::m_TestAreaLists -> a
	System.Int32 [Client]System.Int32 Game.Data.ServerConfig::m_Version -> A
	Game.Data.AnnouncementInfo [Client]Game.Data.AnnouncementInfo Game.Data.ServerConfig::m_Announcement -> A
	Game.Data.ServerConfig [Client]Game.Data.ServerConfig Game.Data.ServerConfig::m_Instance -> A
	System.String [Client]System.String Game.Data.ServerConfig::<RecommendServer>k__BackingField -> a

	System.Collections.Generic.List`1<Game.Data.AreaInfoData> [Client]System.Collections.Generic.List`1<Game.Data.AreaInfoData> Game.Data.ServerConfig::AreaLists -> dropped
	System.String [Client]System.String Game.Data.ServerConfig::RecommendServer -> dropped
	Game.Data.ServerConfig [Client]Game.Data.ServerConfig Game.Data.ServerConfig::Instance -> dropped
}

[Client]Game.DataStatus -> [Client]k.e
{
	[Client]Game.DataStatus::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataStatus::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataStatus::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataStatus::get_StatusID[0]( ) -> A
	[Client]Game.DataStatus::set_StatusID[1]( System.Int32 ) -> A
	[Client]Game.DataStatus::get_StatusName[0]( ) -> a
	[Client]Game.DataStatus::set_StatusName[1]( System.String ) -> A
	[Client]Game.DataStatus::get_Level[0]( ) -> B
	[Client]Game.DataStatus::set_Level[1]( System.Int32 ) -> a
	[Client]Game.DataStatus::get_IconFile[0]( ) -> b
	[Client]Game.DataStatus::set_IconFile[1]( System.String ) -> a
	[Client]Game.DataStatus::get_StatusEffect[0]( ) -> C
	[Client]Game.DataStatus::set_StatusEffect[1]( System.Int32 ) -> B
	[Client]Game.DataStatus::get_KeepTime[0]( ) -> c
	[Client]Game.DataStatus::set_KeepTime[1]( System.Single ) -> A
	[Client]Game.DataStatus::get_StatusColour[0]( ) -> D
	[Client]Game.DataStatus::set_StatusColour[1]( System.Int32 ) -> b
	[Client]Game.DataStatus::get_ShowFlag[0]( ) -> d
	[Client]Game.DataStatus::set_ShowFlag[1]( System.Boolean ) -> A
	[Client]Game.DataStatus::get_MonsterId[0]( ) -> E
	[Client]Game.DataStatus::set_MonsterId[1]( System.Int32 ) -> C
	[Client]Game.DataStatus::get_MorphPriority[0]( ) -> e
	[Client]Game.DataStatus::set_MorphPriority[1]( System.Int32 ) -> c
	[Client]Game.DataStatus::get_StatusDesc[0]( ) -> F
	[Client]Game.DataStatus::set_StatusDesc[1]( System.String ) -> B
	[Client]Game.DataStatus::get_Scale[0]( ) -> f
	[Client]Game.DataStatus::set_Scale[1]( System.Single ) -> a

	[Client]Game.DataStatus::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataStatus::<StatusID>k__BackingField -> A
	System.String [Client]System.String Game.DataStatus::<StatusName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataStatus::<Level>k__BackingField -> a
	System.String [Client]System.String Game.DataStatus::<IconFile>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataStatus::<StatusEffect>k__BackingField -> B
	System.Single [Client]System.Single Game.DataStatus::<KeepTime>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataStatus::<StatusColour>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.DataStatus::<ShowFlag>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataStatus::<MonsterId>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataStatus::<MorphPriority>k__BackingField -> c
	System.String [Client]System.String Game.DataStatus::<StatusDesc>k__BackingField -> B
	System.Single [Client]System.Single Game.DataStatus::<Scale>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataStatus::StatusID -> dropped
	System.String [Client]System.String Game.DataStatus::StatusName -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatus::Level -> dropped
	System.String [Client]System.String Game.DataStatus::IconFile -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatus::StatusEffect -> dropped
	System.Single [Client]System.Single Game.DataStatus::KeepTime -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatus::StatusColour -> dropped
	System.Boolean [Client]System.Boolean Game.DataStatus::ShowFlag -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatus::MonsterId -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatus::MorphPriority -> dropped
	System.String [Client]System.String Game.DataStatus::StatusDesc -> dropped
	System.Single [Client]System.Single Game.DataStatus::Scale -> dropped
}

[Client]Game.DataStatusManager -> [Client]k.F
{
	[Client]Game.DataStatusManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataStatusManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataStatusManager::Clear[0]( ) -> A
	[Client]Game.DataStatusManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataStatusManager::GetDataByStatusID[1]( System.Int32 ) -> A
	[Client]Game.DataStatusManager::GetDataListByStatusID[1]( System.Int32 ) -> a
	[Client]Game.DataStatusManager::GetDataByStatusName[1]( System.String ) -> A
	[Client]Game.DataStatusManager::GetDataListByStatusName[1]( System.String ) -> a
	[Client]Game.DataStatusManager::GetDataByLevel[1]( System.Int32 ) -> B
	[Client]Game.DataStatusManager::GetDataListByLevel[1]( System.Int32 ) -> b
	[Client]Game.DataStatusManager::GetDataByIconFile[1]( System.String ) -> B
	[Client]Game.DataStatusManager::GetDataListByIconFile[1]( System.String ) -> b
	[Client]Game.DataStatusManager::GetDataByStatusEffect[1]( System.Int32 ) -> C
	[Client]Game.DataStatusManager::GetDataListByStatusEffect[1]( System.Int32 ) -> c
	[Client]Game.DataStatusManager::GetDataByKeepTime[1]( System.Single ) -> A
	[Client]Game.DataStatusManager::GetDataListByKeepTime[1]( System.Single ) -> a
	[Client]Game.DataStatusManager::GetDataByStatusColour[1]( System.Int32 ) -> D
	[Client]Game.DataStatusManager::GetDataListByStatusColour[1]( System.Int32 ) -> d
	[Client]Game.DataStatusManager::GetDataByShowFlag[1]( System.Boolean ) -> A
	[Client]Game.DataStatusManager::GetDataListByShowFlag[1]( System.Boolean ) -> a
	[Client]Game.DataStatusManager::GetDataByMonsterId[1]( System.Int32 ) -> E
	[Client]Game.DataStatusManager::GetDataListByMonsterId[1]( System.Int32 ) -> e
	[Client]Game.DataStatusManager::GetDataByMorphPriority[1]( System.Int32 ) -> F
	[Client]Game.DataStatusManager::GetDataListByMorphPriority[1]( System.Int32 ) -> f
	[Client]Game.DataStatusManager::GetDataByStatusDesc[1]( System.String ) -> C
	[Client]Game.DataStatusManager::GetDataListByStatusDesc[1]( System.String ) -> c
	[Client]Game.DataStatusManager::GetDataByScale[1]( System.Single ) -> B
	[Client]Game.DataStatusManager::GetDataListByScale[1]( System.Single ) -> b
	[Client]Game.DataStatusManager::get_Instance[0]( ) -> a
	[Client]Game.DataStatusManager::get_DataList[0]( ) -> B
	[Client]Game.DataStatusManager::get_Count[0]( ) -> b

	[Client]Game.DataStatusManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataStatusManager::.ctor[0]( ) skipped:  special name

	Game.DataStatusManager [Client]Game.DataStatusManager Game.DataStatusManager::instance -> A
	System.Collections.Generic.List`1<Game.DataStatus> [Client]System.Collections.Generic.List`1<Game.DataStatus> Game.DataStatusManager::dataList -> A

	Game.DataStatusManager [Client]Game.DataStatusManager Game.DataStatusManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataStatus> [Client]System.Collections.Generic.List`1<Game.DataStatus> Game.DataStatusManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataStatusManager::Count -> dropped
}

[Client]Game.DataShoplist -> [Client]k.f
{
	[Client]Game.DataShoplist::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataShoplist::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataShoplist::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataShoplist::get_Index[0]( ) -> A
	[Client]Game.DataShoplist::set_Index[1]( System.Int32 ) -> A
	[Client]Game.DataShoplist::get_NpcID[0]( ) -> a
	[Client]Game.DataShoplist::set_NpcID[1]( System.Int32 ) -> a
	[Client]Game.DataShoplist::get_ItemIndex[0]( ) -> B
	[Client]Game.DataShoplist::set_ItemIndex[1]( System.Int32 ) -> B
	[Client]Game.DataShoplist::get_ItemID[0]( ) -> b
	[Client]Game.DataShoplist::set_ItemID[1]( System.Int32 ) -> b
	[Client]Game.DataShoplist::get_CostMoney[0]( ) -> C
	[Client]Game.DataShoplist::set_CostMoney[1]( System.Int32 ) -> C
	[Client]Game.DataShoplist::get_CostItem[0]( ) -> c
	[Client]Game.DataShoplist::set_CostItem[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataShoplist::get_Price[0]( ) -> D
	[Client]Game.DataShoplist::set_Price[1]( System.Int32 ) -> c
	[Client]Game.DataShoplist::get_MaxBuyNum[0]( ) -> d
	[Client]Game.DataShoplist::set_MaxBuyNum[1]( System.Int32 ) -> D
	[Client]Game.DataShoplist::get_DistanceNpc[0]( ) -> E
	[Client]Game.DataShoplist::set_DistanceNpc[1]( System.Boolean ) -> A
	[Client]Game.DataShoplist::get_SpecialType[0]( ) -> e
	[Client]Game.DataShoplist::set_SpecialType[1]( System.Int32 ) -> d
	[Client]Game.DataShoplist::get_PageNpcIds[0]( ) -> F
	[Client]Game.DataShoplist::set_PageNpcIds[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataShoplist::get_PageNames[0]( ) -> f
	[Client]Game.DataShoplist::set_PageNames[1]( System.Collections.Generic.List`1<System.String> ) -> A

	[Client]Game.DataShoplist::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataShoplist::<Index>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataShoplist::<NpcID>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataShoplist::<ItemIndex>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataShoplist::<ItemID>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataShoplist::<CostMoney>k__BackingField -> C
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataShoplist::<CostItem>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataShoplist::<Price>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataShoplist::<MaxBuyNum>k__BackingField -> D
	System.Boolean [Client]System.Boolean Game.DataShoplist::<DistanceNpc>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataShoplist::<SpecialType>k__BackingField -> d
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataShoplist::<PageNpcIds>k__BackingField -> a
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataShoplist::<PageNames>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.DataShoplist::Index -> dropped
	System.Int32 [Client]System.Int32 Game.DataShoplist::NpcID -> dropped
	System.Int32 [Client]System.Int32 Game.DataShoplist::ItemIndex -> dropped
	System.Int32 [Client]System.Int32 Game.DataShoplist::ItemID -> dropped
	System.Int32 [Client]System.Int32 Game.DataShoplist::CostMoney -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataShoplist::CostItem -> dropped
	System.Int32 [Client]System.Int32 Game.DataShoplist::Price -> dropped
	System.Int32 [Client]System.Int32 Game.DataShoplist::MaxBuyNum -> dropped
	System.Boolean [Client]System.Boolean Game.DataShoplist::DistanceNpc -> dropped
	System.Int32 [Client]System.Int32 Game.DataShoplist::SpecialType -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataShoplist::PageNpcIds -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.DataShoplist::PageNames -> dropped
}

[Client]Game.DataShoplistManager -> [Client]k.G
{
	[Client]Game.DataShoplistManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataShoplistManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataShoplistManager::Clear[0]( ) -> A
	[Client]Game.DataShoplistManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataShoplistManager::GetDataByIndex[1]( System.Int32 ) -> A
	[Client]Game.DataShoplistManager::GetDataListByIndex[1]( System.Int32 ) -> a
	[Client]Game.DataShoplistManager::GetDataByNpcID[1]( System.Int32 ) -> B
	[Client]Game.DataShoplistManager::GetDataListByNpcID[1]( System.Int32 ) -> b
	[Client]Game.DataShoplistManager::GetDataByItemIndex[1]( System.Int32 ) -> C
	[Client]Game.DataShoplistManager::GetDataListByItemIndex[1]( System.Int32 ) -> c
	[Client]Game.DataShoplistManager::GetDataByItemID[1]( System.Int32 ) -> D
	[Client]Game.DataShoplistManager::GetDataListByItemID[1]( System.Int32 ) -> d
	[Client]Game.DataShoplistManager::GetDataByCostMoney[1]( System.Int32 ) -> E
	[Client]Game.DataShoplistManager::GetDataListByCostMoney[1]( System.Int32 ) -> e
	[Client]Game.DataShoplistManager::GetDataByCostItem[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataShoplistManager::GetDataListByCostItem[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataShoplistManager::GetDataByPrice[1]( System.Int32 ) -> F
	[Client]Game.DataShoplistManager::GetDataListByPrice[1]( System.Int32 ) -> f
	[Client]Game.DataShoplistManager::GetDataByMaxBuyNum[1]( System.Int32 ) -> G
	[Client]Game.DataShoplistManager::GetDataListByMaxBuyNum[1]( System.Int32 ) -> g
	[Client]Game.DataShoplistManager::GetDataByDistanceNpc[1]( System.Boolean ) -> A
	[Client]Game.DataShoplistManager::GetDataListByDistanceNpc[1]( System.Boolean ) -> a
	[Client]Game.DataShoplistManager::GetDataBySpecialType[1]( System.Int32 ) -> H
	[Client]Game.DataShoplistManager::GetDataListBySpecialType[1]( System.Int32 ) -> h
	[Client]Game.DataShoplistManager::GetDataByPageNpcIds[1]( System.Collections.Generic.List`1<System.Int32> ) -> B
	[Client]Game.DataShoplistManager::GetDataListByPageNpcIds[1]( System.Collections.Generic.List`1<System.Int32> ) -> b
	[Client]Game.DataShoplistManager::GetDataByPageNames[1]( System.Collections.Generic.List`1<System.String> ) -> A
	[Client]Game.DataShoplistManager::GetDataListByPageNames[1]( System.Collections.Generic.List`1<System.String> ) -> a
	[Client]Game.DataShoplistManager::get_Instance[0]( ) -> a
	[Client]Game.DataShoplistManager::get_DataList[0]( ) -> B
	[Client]Game.DataShoplistManager::get_Count[0]( ) -> b

	[Client]Game.DataShoplistManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataShoplistManager::.ctor[0]( ) skipped:  special name

	Game.DataShoplistManager [Client]Game.DataShoplistManager Game.DataShoplistManager::instance -> A
	System.Collections.Generic.List`1<Game.DataShoplist> [Client]System.Collections.Generic.List`1<Game.DataShoplist> Game.DataShoplistManager::dataList -> A

	Game.DataShoplistManager [Client]Game.DataShoplistManager Game.DataShoplistManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataShoplist> [Client]System.Collections.Generic.List`1<Game.DataShoplist> Game.DataShoplistManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataShoplistManager::Count -> dropped
}

[Client]Game.DataPetRebornLucky -> [Client]k.g
{
	[Client]Game.DataPetRebornLucky::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetRebornLucky::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetRebornLucky::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetRebornLucky::get_Index[0]( ) -> A
	[Client]Game.DataPetRebornLucky::set_Index[1]( System.Int32 ) -> A
	[Client]Game.DataPetRebornLucky::get_RebornNum[0]( ) -> a
	[Client]Game.DataPetRebornLucky::set_RebornNum[1]( System.Int32 ) -> a
	[Client]Game.DataPetRebornLucky::get_BonusNature[0]( ) -> B
	[Client]Game.DataPetRebornLucky::set_BonusNature[1]( System.Int32 ) -> B
	[Client]Game.DataPetRebornLucky::get_IsNature[0]( ) -> b
	[Client]Game.DataPetRebornLucky::set_IsNature[1]( System.Boolean ) -> A
	[Client]Game.DataPetRebornLucky::get_BonusQuality[0]( ) -> C
	[Client]Game.DataPetRebornLucky::set_BonusQuality[1]( System.Int32 ) -> b
	[Client]Game.DataPetRebornLucky::get_IsQuality[0]( ) -> c
	[Client]Game.DataPetRebornLucky::set_IsQuality[1]( System.Boolean ) -> a
	[Client]Game.DataPetRebornLucky::get_BonusGrowthRate[0]( ) -> D
	[Client]Game.DataPetRebornLucky::set_BonusGrowthRate[1]( System.Int32 ) -> C
	[Client]Game.DataPetRebornLucky::get_IsGrowthRate[0]( ) -> d
	[Client]Game.DataPetRebornLucky::set_IsGrowthRate[1]( System.Boolean ) -> B

	[Client]Game.DataPetRebornLucky::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::<Index>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::<RebornNum>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::<BonusNature>k__BackingField -> B
	System.Boolean [Client]System.Boolean Game.DataPetRebornLucky::<IsNature>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::<BonusQuality>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.DataPetRebornLucky::<IsQuality>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::<BonusGrowthRate>k__BackingField -> C
	System.Boolean [Client]System.Boolean Game.DataPetRebornLucky::<IsGrowthRate>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::Index -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::RebornNum -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::BonusNature -> dropped
	System.Boolean [Client]System.Boolean Game.DataPetRebornLucky::IsNature -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::BonusQuality -> dropped
	System.Boolean [Client]System.Boolean Game.DataPetRebornLucky::IsQuality -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetRebornLucky::BonusGrowthRate -> dropped
	System.Boolean [Client]System.Boolean Game.DataPetRebornLucky::IsGrowthRate -> dropped
}

[Client]Game.DataPetRebornLuckyManager -> [Client]k.H
{
	[Client]Game.DataPetRebornLuckyManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetRebornLuckyManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetRebornLuckyManager::Clear[0]( ) -> A
	[Client]Game.DataPetRebornLuckyManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetRebornLuckyManager::GetDataByIndex[1]( System.Int32 ) -> A
	[Client]Game.DataPetRebornLuckyManager::GetDataListByIndex[1]( System.Int32 ) -> a
	[Client]Game.DataPetRebornLuckyManager::GetDataByRebornNum[1]( System.Int32 ) -> B
	[Client]Game.DataPetRebornLuckyManager::GetDataListByRebornNum[1]( System.Int32 ) -> b
	[Client]Game.DataPetRebornLuckyManager::GetDataByBonusNature[1]( System.Int32 ) -> C
	[Client]Game.DataPetRebornLuckyManager::GetDataListByBonusNature[1]( System.Int32 ) -> c
	[Client]Game.DataPetRebornLuckyManager::GetDataByIsNature[1]( System.Boolean ) -> A
	[Client]Game.DataPetRebornLuckyManager::GetDataListByIsNature[1]( System.Boolean ) -> a
	[Client]Game.DataPetRebornLuckyManager::GetDataByBonusQuality[1]( System.Int32 ) -> D
	[Client]Game.DataPetRebornLuckyManager::GetDataListByBonusQuality[1]( System.Int32 ) -> d
	[Client]Game.DataPetRebornLuckyManager::GetDataByIsQuality[1]( System.Boolean ) -> B
	[Client]Game.DataPetRebornLuckyManager::GetDataListByIsQuality[1]( System.Boolean ) -> b
	[Client]Game.DataPetRebornLuckyManager::GetDataByBonusGrowthRate[1]( System.Int32 ) -> E
	[Client]Game.DataPetRebornLuckyManager::GetDataListByBonusGrowthRate[1]( System.Int32 ) -> e
	[Client]Game.DataPetRebornLuckyManager::GetDataByIsGrowthRate[1]( System.Boolean ) -> C
	[Client]Game.DataPetRebornLuckyManager::GetDataListByIsGrowthRate[1]( System.Boolean ) -> c
	[Client]Game.DataPetRebornLuckyManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetRebornLuckyManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetRebornLuckyManager::get_Count[0]( ) -> b

	[Client]Game.DataPetRebornLuckyManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetRebornLuckyManager::.ctor[0]( ) skipped:  special name

	Game.DataPetRebornLuckyManager [Client]Game.DataPetRebornLuckyManager Game.DataPetRebornLuckyManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPetRebornLucky> [Client]System.Collections.Generic.List`1<Game.DataPetRebornLucky> Game.DataPetRebornLuckyManager::dataList -> A

	Game.DataPetRebornLuckyManager [Client]Game.DataPetRebornLuckyManager Game.DataPetRebornLuckyManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPetRebornLucky> [Client]System.Collections.Generic.List`1<Game.DataPetRebornLucky> Game.DataPetRebornLuckyManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetRebornLuckyManager::Count -> dropped
}

[Client]Game.DataFriendHelpModel -> [Client]k.h
{
	[Client]Game.DataFriendHelpModel::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFriendHelpModel::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFriendHelpModel::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFriendHelpModel::get_Profession[0]( ) -> A
	[Client]Game.DataFriendHelpModel::set_Profession[1]( System.Int32 ) -> A
	[Client]Game.DataFriendHelpModel::get_Gender[0]( ) -> a
	[Client]Game.DataFriendHelpModel::set_Gender[1]( System.Int32 ) -> a
	[Client]Game.DataFriendHelpModel::get_LevelMin[0]( ) -> B
	[Client]Game.DataFriendHelpModel::set_LevelMin[1]( System.Int32 ) -> B
	[Client]Game.DataFriendHelpModel::get_LevelMax[0]( ) -> b
	[Client]Game.DataFriendHelpModel::set_LevelMax[1]( System.Int32 ) -> b
	[Client]Game.DataFriendHelpModel::get_AmourId[0]( ) -> C
	[Client]Game.DataFriendHelpModel::set_AmourId[1]( System.Int32 ) -> C
	[Client]Game.DataFriendHelpModel::get_WeaponId[0]( ) -> c
	[Client]Game.DataFriendHelpModel::set_WeaponId[1]( System.Int32 ) -> c

	[Client]Game.DataFriendHelpModel::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::<Profession>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::<Gender>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::<LevelMin>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::<LevelMax>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::<AmourId>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::<WeaponId>k__BackingField -> c

	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::Profession -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::Gender -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::LevelMin -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::LevelMax -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::AmourId -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModel::WeaponId -> dropped
}

[Client]Game.DataFriendHelpModelManager -> [Client]k.I
{
	[Client]Game.DataFriendHelpModelManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataFriendHelpModelManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataFriendHelpModelManager::Clear[0]( ) -> A
	[Client]Game.DataFriendHelpModelManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataFriendHelpModelManager::GetDataByProfession[1]( System.Int32 ) -> A
	[Client]Game.DataFriendHelpModelManager::GetDataListByProfession[1]( System.Int32 ) -> a
	[Client]Game.DataFriendHelpModelManager::GetDataByGender[1]( System.Int32 ) -> B
	[Client]Game.DataFriendHelpModelManager::GetDataListByGender[1]( System.Int32 ) -> b
	[Client]Game.DataFriendHelpModelManager::GetDataByLevelMin[1]( System.Int32 ) -> C
	[Client]Game.DataFriendHelpModelManager::GetDataListByLevelMin[1]( System.Int32 ) -> c
	[Client]Game.DataFriendHelpModelManager::GetDataByLevelMax[1]( System.Int32 ) -> D
	[Client]Game.DataFriendHelpModelManager::GetDataListByLevelMax[1]( System.Int32 ) -> d
	[Client]Game.DataFriendHelpModelManager::GetDataByAmourId[1]( System.Int32 ) -> E
	[Client]Game.DataFriendHelpModelManager::GetDataListByAmourId[1]( System.Int32 ) -> e
	[Client]Game.DataFriendHelpModelManager::GetDataByWeaponId[1]( System.Int32 ) -> F
	[Client]Game.DataFriendHelpModelManager::GetDataListByWeaponId[1]( System.Int32 ) -> f
	[Client]Game.DataFriendHelpModelManager::get_Instance[0]( ) -> a
	[Client]Game.DataFriendHelpModelManager::get_DataList[0]( ) -> B
	[Client]Game.DataFriendHelpModelManager::get_Count[0]( ) -> b

	[Client]Game.DataFriendHelpModelManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataFriendHelpModelManager::.ctor[0]( ) skipped:  special name

	Game.DataFriendHelpModelManager [Client]Game.DataFriendHelpModelManager Game.DataFriendHelpModelManager::instance -> A
	System.Collections.Generic.List`1<Game.DataFriendHelpModel> [Client]System.Collections.Generic.List`1<Game.DataFriendHelpModel> Game.DataFriendHelpModelManager::dataList -> A

	Game.DataFriendHelpModelManager [Client]Game.DataFriendHelpModelManager Game.DataFriendHelpModelManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataFriendHelpModel> [Client]System.Collections.Generic.List`1<Game.DataFriendHelpModel> Game.DataFriendHelpModelManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataFriendHelpModelManager::Count -> dropped
}

[Client]Game.Msg.ExpeditionRecruitData -> [Client]k.i
{
	[Client]Game.Msg.ExpeditionRecruitData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ExpeditionRecruitData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ExpeditionRecruitData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.ExpeditionRecruitData::m_btQuality -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionRecruitData::m_btFreeTimes -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionRecruitData::m_usCost -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ExpeditionRecruitData::m_uiLeftTime -> A
}

[Client]Game.FlyingWeapon -> [Client]k.J
{
	[Client]Game.FlyingWeapon::CreateOneWeapon[0]( ) -> A
	[Client]Game.FlyingWeapon::get_Radius[0]( ) -> a
	[Client]Game.FlyingWeapon::set_Radius[1]( System.Single ) -> A
	[Client]Game.FlyingWeapon::IntializeWeapon[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.FlyingWeapon::ResetWeapon[0]( ) -> B
	[Client]Game.FlyingWeapon::UpdateWeaponPos[0]( ) -> b

	[Client]Game.FlyingWeapon::.ctor[0]( ) skipped:  special name

	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.FlyingWeapon::m_Object -> A
	UnityEngine.Ray [Client]UnityEngine.Ray Game.FlyingWeapon::m_FlyingDirection -> A
	System.Single [Client]System.Single Game.FlyingWeapon::m_Radius -> A
	System.Single [Client]System.Single Game.FlyingWeapon::m_Speed -> a
	System.Single [Client]System.Single Game.FlyingWeapon::m_Range -> B
	System.Single [Client]System.Single Game.FlyingWeapon::m_StartTime -> b
	System.Boolean [Client]System.Boolean Game.FlyingWeapon::m_bPassBody -> A
	Game.Character [Client]Game.Character Game.FlyingWeapon::m_Attacker -> A
	Game.Skill [Client]Game.Skill Game.FlyingWeapon::m_AttachedSkill -> A

	System.Single [Client]System.Single Game.FlyingWeapon::Radius -> dropped
}

[Client]Game.FlyingWeaponManager -> [Client]k.j
{
	[Client]Game.FlyingWeaponManager::get_Instance[0]( ) -> A
	[Client]Game.FlyingWeaponManager::Init[0]( ) -> a
	[Client]Game.FlyingWeaponManager::Release[0]( ) -> B
	[Client]Game.FlyingWeaponManager::Update[0]( ) -> b
	[Client]Game.FlyingWeaponManager::GetOneWeaponObject[0]( ) -> C
	[Client]Game.FlyingWeaponManager::FindFlyingWeaponByGameObject[1]( UnityEngine.GameObject ) -> A

	[Client]Game.FlyingWeaponManager::.cctor[0]( ) skipped:  special name
	[Client]Game.FlyingWeaponManager::.ctor[0]( ) skipped:  special name

	Game.FlyingWeaponManager [Client]Game.FlyingWeaponManager Game.FlyingWeaponManager::m_Instance -> A
	System.Collections.Generic.List`1<Game.FlyingWeapon> [Client]System.Collections.Generic.List`1<Game.FlyingWeapon> Game.FlyingWeaponManager::m_WeaponObjects -> A

	Game.FlyingWeaponManager [Client]Game.FlyingWeaponManager Game.FlyingWeaponManager::Instance -> dropped
}

[Client]Game.BeAttackedActionFSM -> [Client]k.K
{
	[Client]Game.BeAttackedActionFSM::Initialize[0]( ) -> A
	[Client]Game.BeAttackedActionFSM::FSMUpdate[0]( ) -> a
	[Client]Game.BeAttackedActionFSM::SetBeAttackedAction[5]( Game.Character, System.String, Game.Skill, System.Single, System.Single ) -> A
	[Client]Game.BeAttackedActionFSM::Reset[0]( ) -> B
	[Client]Game.BeAttackedActionFSM::CanBeAttack[2]( Game.Character, Game.Skill ) -> A
	[Client]Game.BeAttackedActionFSM::UpdateBeAttackedState[0]( ) -> b
	[Client]Game.BeAttackedActionFSM::UpdateDelayedActionState[0]( ) -> C
	[Client]Game.BeAttackedActionFSM::UpdateReturnToReadyState[0]( ) -> c
	[Client]Game.BeAttackedActionFSM::UpdateFlyingInTheGroundState[0]( ) -> D
	[Client]Game.BeAttackedActionFSM::UpdateFlyingInTheAirState[0]( ) -> d
	[Client]Game.BeAttackedActionFSM::UpdateClimbingUpState[0]( ) -> E

	[Client]Game.BeAttackedActionFSM::.ctor[1]( Game.Character ) skipped:  special name

	System.Single [Client]System.Single Game.BeAttackedActionFSM::BeAttackedCurveTime1 -> A
	System.Single [Client]System.Single Game.BeAttackedActionFSM::BeAttackedCurveTime2 -> a
	System.Single [Client]System.Single Game.BeAttackedActionFSM::BeAttackedCurveTime3 -> B
	Game.BeAttackedActionFSM/FSMState [Client]Game.BeAttackedActionFSM/FSMState Game.BeAttackedActionFSM::m_currentState -> A
	Game.DataMonster [Client]Game.DataMonster Game.BeAttackedActionFSM::m_MonsterData -> A
	Game.Skill [Client]Game.Skill Game.BeAttackedActionFSM::m_AttackSkill -> A
	Game.Character [Client]Game.Character Game.BeAttackedActionFSM::m_Attacker -> A
	Game.Character [Client]Game.Character Game.BeAttackedActionFSM::m_BeAttacker -> a
	System.String [Client]System.String Game.BeAttackedActionFSM::m_AttackActionName -> A
	System.String [Client]System.String Game.BeAttackedActionFSM::m_HurtActionName -> a
	System.Single [Client]System.Single Game.BeAttackedActionFSM::m_BeAttackedResistTime -> b
	System.Single [Client]System.Single Game.BeAttackedActionFSM::m_AttackTime -> C
	UnityEngine.Transform [Client]UnityEngine.Transform Game.BeAttackedActionFSM::m_shadowTrans -> A
	System.Single [Client]System.Single Game.BeAttackedActionFSM::StartReturnToReadyTime -> c
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.BeAttackedActionFSM::BackupPos -> A
	UnityEngine.Quaternion [Client]UnityEngine.Quaternion Game.BeAttackedActionFSM::BackupRot -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.BeAttackedActionFSM::BeAttackedDir -> a
	System.Single [Client]System.Single Game.BeAttackedActionFSM::SkillCallInterval -> D
	System.Int32 [Client]System.Int32 Game.BeAttackedActionFSM::CurveType -> A
	System.Single [Client]System.Single Game.BeAttackedActionFSM::GroundHeight -> d
	System.Single [Client]System.Single Game.BeAttackedActionFSM::DriftTime -> E
}

[Client]Game.BeAttackedActionFSM/FSMState -> [Client]k.K/k
{
	Game.BeAttackedActionFSM/FSMState [Client]Game.BeAttackedActionFSM/FSMState Game.BeAttackedActionFSM/FSMState::None -> A
	Game.BeAttackedActionFSM/FSMState [Client]Game.BeAttackedActionFSM/FSMState Game.BeAttackedActionFSM/FSMState::BeAttackedAction -> a
	Game.BeAttackedActionFSM/FSMState [Client]Game.BeAttackedActionFSM/FSMState Game.BeAttackedActionFSM/FSMState::DelayedAction -> B
	Game.BeAttackedActionFSM/FSMState [Client]Game.BeAttackedActionFSM/FSMState Game.BeAttackedActionFSM/FSMState::ReturnToReady -> b
	Game.BeAttackedActionFSM/FSMState [Client]Game.BeAttackedActionFSM/FSMState Game.BeAttackedActionFSM/FSMState::FlyingInTheGround -> C
	Game.BeAttackedActionFSM/FSMState [Client]Game.BeAttackedActionFSM/FSMState Game.BeAttackedActionFSM/FSMState::FlyingInTheAir -> c
	Game.BeAttackedActionFSM/FSMState [Client]Game.BeAttackedActionFSM/FSMState Game.BeAttackedActionFSM/FSMState::ClimbingUp -> D

	System.Int32 [Client]System.Int32 Game.BeAttackedActionFSM/FSMState::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy -> [Client]k.L
{
	ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy::Default -> A
	ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy::Filtered -> a
	ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy::HuffmanOnly -> B

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy::value__ skipped:  filtered
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine -> [Client]k.l
{
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::Deflate[2]( System.Boolean, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::SetInput[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::NeedsInput[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::SetDictionary[3]( System.Byte[], System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::Reset[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::ResetAdler[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::get_Adler[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::get_TotalIn[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::get_Strategy[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::set_Strategy[1]( ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::SetLevel[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::FillWindow[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::UpdateHash[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::InsertString[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::SlideWindow[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::FindLongestMatch[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::DeflateStored[2]( System.Boolean, System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::DeflateFast[2]( System.Boolean, System.Boolean ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::DeflateSlow[2]( System.Boolean, System.Boolean ) -> b

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::.ctor[1]( ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::TooFar -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::ins_h -> a
	System.Int16[] [Client]System.Int16[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::head -> A
	System.Int16[] [Client]System.Int16[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::prev -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::matchStart -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::matchLen -> b
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::prevAvailable -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::blockStart -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::strstart -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::lookahead -> D
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::window -> A
	ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::strategy -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::max_chain -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::max_lazy -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::niceLength -> e
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::goodLength -> F
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::compressionFunction -> f
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::inputBuf -> a
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::totalIn -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::inputOff -> G
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::inputEnd -> g
	ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::pending -> A
	ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::huffman -> A
	ICSharpCode.SharpZipLib.Checksums.Adler32 [Client]ICSharpCode.SharpZipLib.Checksums.Adler32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::adler -> A

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::Adler -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::TotalIn -> dropped
	ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy [Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine::Strategy -> dropped
}

[Client]ICSharpCode.SharpZipLib.GZip.GZipInputStream -> [Client]k.M
{
	[Client]ICSharpCode.SharpZipLib.GZip.GZipInputStream::ReadHeader[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.GZip.GZipInputStream::ReadFooter[0]( ) -> B

	[Client]ICSharpCode.SharpZipLib.GZip.GZipInputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.GZip.GZipInputStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.GZip.GZipInputStream::.ctor[2]( System.IO.Stream, System.Int32 ) skipped:  special name

	ICSharpCode.SharpZipLib.Checksums.Crc32 [Client]ICSharpCode.SharpZipLib.Checksums.Crc32 ICSharpCode.SharpZipLib.GZip.GZipInputStream::crc -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.GZip.GZipInputStream::readGZIPHeader -> A
}

[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESStream -> [Client]k.m
{

	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.ZipAESStream::.ctor[3]( System.IO.Stream, ICSharpCode.SharpZipLib.Encryption.ZipAESTransform, System.Security.Cryptography.CryptoStreamMode ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESStream::AUTH_CODE_LENGTH -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESStream::CRYPTO_BLOCK_SIZE -> a
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.Encryption.ZipAESStream::_stream -> A
	ICSharpCode.SharpZipLib.Encryption.ZipAESTransform [Client]ICSharpCode.SharpZipLib.Encryption.ZipAESTransform ICSharpCode.SharpZipLib.Encryption.ZipAESStream::_transform -> A
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.Encryption.ZipAESStream::_slideBuffer -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESStream::_slideBufStartPos -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESStream::_slideBufFreePos -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.ZipAESStream::_blockAndAuth -> C
}

[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream -> [Client]k.N
{
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::get_IsStreamOwner[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::set_IsStreamOwner[1]( System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::MakeMaps[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::WriteRun[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::get_BytesWritten[0]( ) -> b
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Initialize[0]( ) -> C
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::InitBlock[0]( ) -> c
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::EndBlock[0]( ) -> D
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::EndCompression[0]( ) -> d
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::BsSetStream[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::BsFinishedWithStream[0]( ) -> E
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::BsW[2]( System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::BsPutUChar[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::BsPutint[1]( System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::BsPutIntVS[2]( System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::SendMTFValues[0]( ) -> e
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::MoveToFrontCodeAndSend[0]( ) -> F
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::SimpleSort[3]( System.Int32, System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Vswap[3]( System.Int32, System.Int32, System.Int32 ) -> a
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::QSort3[3]( System.Int32, System.Int32, System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::MainSort[0]( ) -> f
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::RandomiseBlock[0]( ) -> G
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::DoReversibleTransformation[0]( ) -> g
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::FullGtU[2]( System.Int32, System.Int32 ) -> B
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::AllocateCompressStructures[0]( ) -> H
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::GenerateMTFValues[0]( ) -> h
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Panic[0]( ) -> I
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::HbMakeCodeLengths[4]( System.Char[], System.Int32[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::HbAssignCodes[5]( System.Int32[], System.Char[], System.Int32, System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Med3[3]( System.Byte, System.Byte, System.Byte ) -> A

	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Finalize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Close[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::get_CanRead[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Flush[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::get_CanWrite[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::get_CanSeek[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::get_Length[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::get_Position[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::set_Position[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Read[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Seek[2]( System.Int64, System.IO.SeekOrigin ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::SetLength[1]( System.Int64 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Write[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::ReadByte[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::WriteByte[1]( System.Byte ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::.ctor[1]( System.IO.Stream ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::.ctor[2]( System.IO.Stream, System.Int32 ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Dispose[1]( System.Boolean ) skipped:  external base class or interface

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::SETMASK -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::CLEARMASK -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::GREATER_ICOST -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::LESSER_ICOST -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::SMALL_THRESH -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::DEPTH_THRESH -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::QSORT_STACK_SIZE -> D
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::increments -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::isStreamOwner -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::last -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::origPtr -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::blockSize100k -> e
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::blockRandomised -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::bytesOut -> F
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::bsBuff -> f
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::bsLive -> G
	ICSharpCode.SharpZipLib.Checksums.IChecksum [Client]ICSharpCode.SharpZipLib.Checksums.IChecksum ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::mCrc -> A
	System.Boolean[] [Client]System.Boolean[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::inUse -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::nInUse -> g
	System.Char[] [Client]System.Char[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::seqToUnseq -> A
	System.Char[] [Client]System.Char[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::unseqToSeq -> a
	System.Char[] [Client]System.Char[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::selector -> B
	System.Char[] [Client]System.Char[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::selectorMtf -> b
	System.Byte[] [Client]System.Byte[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::block -> A
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::quadrant -> a
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::zptr -> B
	System.Int16[] [Client]System.Int16[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::szptr -> A
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::ftab -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::nMTF -> H
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::mtfFreq -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::workFactor -> h
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::workDone -> I
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::workLimit -> i
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::firstAttempt -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::nBlocksRandomised -> J
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::currentChar -> j
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::runLength -> K
	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::blockCRC -> A
	System.UInt32 [Client]System.UInt32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::combinedCRC -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::allowableBlockSize -> k
	System.IO.Stream [Client]System.IO.Stream ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::baseStream -> A
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::disposed_ -> b

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::IsStreamOwner -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::CanRead -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::CanSeek -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::CanWrite -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Length -> dropped
	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::Position -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream::BytesWritten -> dropped
}

[Client]ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream/StackElement -> [Client]k.N/n
{
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream/StackElement::ll -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream/StackElement::hh -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream/StackElement::dd -> B
}

[Client]ICSharpCode.SharpZipLib.BZip2.BZip2Constants -> [Client]k.O
{

	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2Constants::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2Constants::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::BaseBlockSize -> A
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::MaximumAlphaSize -> a
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::MaximumCodeLength -> B
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::RunA -> b
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::RunB -> C
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::GroupCount -> c
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::GroupSize -> D
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::NumberOfIterations -> d
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::MaximumSelectors -> E
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.BZip2.BZip2Constants::OvershootBytes -> e
	System.Int32[] [Client]System.Int32[] ICSharpCode.SharpZipLib.BZip2.BZip2Constants::RandomNumbers -> A
}

[Client]Game.PlayerRole -> [Client]k.P
{
	[Client]Game.PlayerRole::InitModel[0]( ) -> a
	[Client]Game.PlayerRole::Update[0]( ) -> c
	[Client]Game.PlayerRole::get_FightPower[0]( ) -> E
	[Client]Game.PlayerRole::set_FightPower[1]( System.UInt32 ) -> A
	[Client]Game.PlayerRole::get_Exp[0]( ) -> e
	[Client]Game.PlayerRole::set_Exp[1]( System.UInt64 ) -> A
	[Client]Game.PlayerRole::get_SkillExp[0]( ) -> F
	[Client]Game.PlayerRole::set_SkillExp[1]( System.UInt64 ) -> a
	[Client]Game.PlayerRole::get_KillValue[0]( ) -> f
	[Client]Game.PlayerRole::set_KillValue[1]( System.Int32 ) -> A
	[Client]Game.PlayerRole::get_ResistTime[0]( ) -> G
	[Client]Game.PlayerRole::set_ResistTime[1]( System.Int32 ) -> a
	[Client]Game.PlayerRole::get_PKProtect[0]( ) -> g
	[Client]Game.PlayerRole::set_PKProtect[1]( System.Boolean ) -> A
	[Client]Game.PlayerRole::get_FollowTargetId[0]( ) -> H
	[Client]Game.PlayerRole::set_FollowTargetId[1]( System.UInt32 ) -> a
	[Client]Game.PlayerRole::get_CastSkillId[0]( ) -> h
	[Client]Game.PlayerRole::set_CastSkillId[1]( System.Int32 ) -> B
	[Client]Game.PlayerRole::get_JoyStickMoveFindTarget[0]( ) -> I
	[Client]Game.PlayerRole::set_JoyStickMoveFindTarget[1]( System.Boolean ) -> a
	[Client]Game.PlayerRole::get_Instance[0]( ) -> i
	[Client]Game.PlayerRole::ResetForEnterWorld[0]( ) -> J
	[Client]Game.PlayerRole::GetAttr[1]( System.Int32 ) -> b
	[Client]Game.PlayerRole::SetAttr[2]( System.Int32, System.UInt32 ) -> A
	[Client]Game.PlayerRole::NotifyRoleDead[0]( ) -> j
	[Client]Game.PlayerRole::CheckNeedRelive[0]( ) -> K
	[Client]Game.PlayerRole::JoyStickMove[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.PlayerRole::FindPathForFightAssistant[1]( UnityEngine.Vector3 ) -> a
	[Client]Game.PlayerRole::FindPath[1]( UnityEngine.Vector3 ) -> B
	[Client]Game.PlayerRole::FollowCharacter[2]( System.UInt32, System.Int32 ) -> A
	[Client]Game.PlayerRole::FindPath[2]( System.Int32, Game.PlayerRole/DstCharType ) -> A
	[Client]Game.PlayerRole::FindPath[3]( System.Int32, System.Single, System.Single ) -> A
	[Client]Game.PlayerRole::MapChangedFindPath[0]( ) -> k
	[Client]Game.PlayerRole::FindCurrentMap[1]( UnityEngine.Vector3 ) -> b
	[Client]Game.PlayerRole::FindOtherMap[3]( System.Int32, System.Single, System.Single ) -> a
	[Client]Game.PlayerRole::FindExit[1]( UnityEngine.Vector3& ) -> A
	[Client]Game.PlayerRole::FindNearestExit[1]( UnityEngine.Vector3& ) -> a
	[Client]Game.PlayerRole::SetPathList[1]( System.Collections.Generic.List`1<UnityEngine.Vector3> ) -> A
	[Client]Game.PlayerRole::RoleMoveTo[3]( UnityEngine.Vector3, System.UInt32, System.Int32 ) -> A
	[Client]Game.PlayerRole::GetTargetPos[3]( UnityEngine.Vector3&, Game.Character, System.Single ) -> A
	[Client]Game.PlayerRole::UpdateFollowCharacter[0]( ) -> L
	[Client]Game.PlayerRole::UpdateRoleMove[0]( ) -> l
	[Client]Game.PlayerRole::SendRoleMove[0]( ) -> M
	[Client]Game.PlayerRole::OnMsgServerMapCarry[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.PlayerRole::AutoSendChangeMap[0]( ) -> m
	[Client]Game.PlayerRole::CheckMapTransfer[0]( ) -> N

	[Client]Game.PlayerRole::.cctor[0]( ) skipped:  special name
	[Client]Game.PlayerRole::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<UnityEngine.Vector3> [Client]System.Collections.Generic.List`1<UnityEngine.Vector3> Game.PlayerRole::m_Path -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.PlayerRole::m_CurrentTarget -> A
	System.Boolean [Client]System.Boolean Game.PlayerRole::m_NeedMoveToNext -> A
	System.Boolean [Client]System.Boolean Game.PlayerRole::m_NeedSendMoveMessgae -> a
	System.Int32 [Client]System.Int32 Game.PlayerRole::m_LastTransferAreaId -> A
	System.Single [Client]System.Single Game.PlayerRole::m_LastTimeSendMoveMessage -> A
	System.Single [Client]System.Single Game.PlayerRole::m_LastTimeCheckMapTransfer -> a
	System.Int32 [Client]System.Int32 Game.PlayerRole::m_DstCharCsvId -> a
	Game.PlayerRole/DstCharType [Client]Game.PlayerRole/DstCharType Game.PlayerRole::m_DstCharType -> A
	System.Int32 [Client]System.Int32 Game.PlayerRole::m_DstMapId -> B
	System.Single [Client]System.Single Game.PlayerRole::m_DstMapX -> B
	System.Single [Client]System.Single Game.PlayerRole::m_DstMapZ -> b
	System.UInt32[] [Client]System.UInt32[] Game.PlayerRole::m_Attributes -> A
	System.Boolean [Client]System.Boolean Game.PlayerRole::m_bPKProtect -> B
	System.Single [Client]System.Single Game.PlayerRole::m_fDeathTime -> C
	System.Boolean [Client]System.Boolean Game.PlayerRole::m_DontPauseFightAssistant -> b
	Game.PlayerRole [Client]Game.PlayerRole Game.PlayerRole::m_Instance -> A
	System.UInt32 [Client]System.UInt32 Game.PlayerRole::<FightPower>k__BackingField -> A
	System.UInt64 [Client]System.UInt64 Game.PlayerRole::<Exp>k__BackingField -> A
	System.UInt64 [Client]System.UInt64 Game.PlayerRole::<SkillExp>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.PlayerRole::<KillValue>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.PlayerRole::<ResistTime>k__BackingField -> C
	System.UInt32 [Client]System.UInt32 Game.PlayerRole::<FollowTargetId>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.PlayerRole::<CastSkillId>k__BackingField -> c
	System.Boolean [Client]System.Boolean Game.PlayerRole::<JoyStickMoveFindTarget>k__BackingField -> C

	System.UInt32 [Client]System.UInt32 Game.PlayerRole::FightPower -> dropped
	System.UInt64 [Client]System.UInt64 Game.PlayerRole::Exp -> dropped
	System.UInt64 [Client]System.UInt64 Game.PlayerRole::SkillExp -> dropped
	System.Int32 [Client]System.Int32 Game.PlayerRole::KillValue -> dropped
	System.Int32 [Client]System.Int32 Game.PlayerRole::ResistTime -> dropped
	System.Boolean [Client]System.Boolean Game.PlayerRole::PKProtect -> dropped
	System.UInt32 [Client]System.UInt32 Game.PlayerRole::FollowTargetId -> dropped
	System.Int32 [Client]System.Int32 Game.PlayerRole::CastSkillId -> dropped
	System.Boolean [Client]System.Boolean Game.PlayerRole::JoyStickMoveFindTarget -> dropped
	Game.PlayerRole [Client]Game.PlayerRole Game.PlayerRole::Instance -> dropped
}

[Client]Game.PlayerRole/DstCharType -> [Client]k.P/p
{
	Game.PlayerRole/DstCharType [Client]Game.PlayerRole/DstCharType Game.PlayerRole/DstCharType::None -> A
	Game.PlayerRole/DstCharType [Client]Game.PlayerRole/DstCharType Game.PlayerRole/DstCharType::NPC -> a
	Game.PlayerRole/DstCharType [Client]Game.PlayerRole/DstCharType Game.PlayerRole/DstCharType::Monster -> B
	Game.PlayerRole/DstCharType [Client]Game.PlayerRole/DstCharType Game.PlayerRole/DstCharType::Item -> b

	System.Int32 [Client]System.Int32 Game.PlayerRole/DstCharType::value__ skipped:  filtered
}

[Client]Game.Msg.MsgItem -> [Client]k.Q
{

	[Client]Game.Msg.MsgItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgItem::BaseType -> A
}

[Client]Game.Msg.MsgServerAllBagItem -> [Client]k.q
{
	[Client]Game.Msg.MsgServerAllBagItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAllBagItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAllBagItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAllBagItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAllBagItem::Type -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgServerAllBagItem::m_abtCurrentEnabled -> A
	System.Collections.Generic.List`1<Game.Msg.ClientSItemData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientSItemData> Game.Msg.MsgServerAllBagItem::m_oVecItem -> A
}

[Client]Game.Msg.MsgServerItemCountChange -> [Client]k.R
{
	[Client]Game.Msg.MsgServerItemCountChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerItemCountChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerItemCountChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerItemCountChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerItemCountChange::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerItemCountChange::m_btType -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerItemCountChange::m_btIndex -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerItemCountChange::m_usCount -> a
}

[Client]Game.Msg.MsgServerItemChange -> [Client]k.r
{
	[Client]Game.Msg.MsgServerItemChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerItemChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerItemChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerItemChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerItemChange::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ClientSItemData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientSItemData> Game.Msg.MsgServerItemChange::m_oVecItem -> A
}

[Client]Game.Msg.MsgClientUseItem -> [Client]k.S
{
	[Client]Game.Msg.MsgClientUseItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientUseItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientUseItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientUseItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientUseItem::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientUseItem::m_btType -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientUseItem::m_btIndex -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientUseItem::m_uiDstID -> A
}

[Client]Game.Msg.MsgClientEquip -> [Client]k.s
{
	[Client]Game.Msg.MsgClientEquip::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientEquip::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientEquip::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientEquip::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientEquip::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientEquip::m_btIndex -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientEquip::m_btPart -> B
}

[Client]Game.Msg.MsgServerMonsterShowDropPack -> [Client]k.T
{
	[Client]Game.Msg.MsgServerMonsterShowDropPack::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMonsterShowDropPack::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMonsterShowDropPack::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMonsterShowDropPack::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMonsterShowDropPack::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerMonsterShowDropPack::m_uiPackID -> A
	System.Single [Client]System.Single Game.Msg.MsgServerMonsterShowDropPack::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerMonsterShowDropPack::m_fPosY -> a
}

[Client]Game.Msg.MsgServerMonsterShowDropItems -> [Client]k.t
{
	[Client]Game.Msg.MsgServerMonsterShowDropItems::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMonsterShowDropItems::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMonsterShowDropItems::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMonsterShowDropItems::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMonsterShowDropItems::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerMonsterShowDropItems::m_uiPackID -> A
	System.Collections.Generic.List`1<Game.Msg.ClientSItemData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientSItemData> Game.Msg.MsgServerMonsterShowDropItems::m_oVecItemSet -> A
}

[Client]Game.Msg.MsgServerMonsterDelDropPack -> [Client]k.U
{
	[Client]Game.Msg.MsgServerMonsterDelDropPack::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMonsterDelDropPack::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMonsterDelDropPack::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMonsterDelDropPack::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMonsterDelDropPack::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerMonsterDelDropPack::m_uiPackID -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerMonsterDelDropPack::m_bGetPack -> A
}

[Client]Game.Msg.MsgServerMonsterDelDropItem -> [Client]k.u
{
	[Client]Game.Msg.MsgServerMonsterDelDropItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMonsterDelDropItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMonsterDelDropItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMonsterDelDropItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMonsterDelDropItem::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerMonsterDelDropItem::m_uiPackID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerMonsterDelDropItem::m_ulItemID -> A
}

[Client]Game.Msg.MsgServerMonsterPickDropItem -> [Client]k.V
{
	[Client]Game.Msg.MsgServerMonsterPickDropItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMonsterPickDropItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMonsterPickDropItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMonsterPickDropItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMonsterPickDropItem::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerMonsterPickDropItem::m_uiPackID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerMonsterPickDropItem::m_btSucess -> a
}

[Client]Game.Msg.MsgClientMonsterShowDropItems -> [Client]k.v
{
	[Client]Game.Msg.MsgClientMonsterShowDropItems::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientMonsterShowDropItems::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientMonsterShowDropItems::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientMonsterShowDropItems::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientMonsterShowDropItems::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientMonsterShowDropItems::m_uiPackID -> A
}

[Client]Game.Msg.MsgClientMonsterPickDropItem -> [Client]k.W
{
	[Client]Game.Msg.MsgClientMonsterPickDropItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientMonsterPickDropItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientMonsterPickDropItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientMonsterPickDropItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientMonsterPickDropItem::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientMonsterPickDropItem::m_uiPackID -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientMonsterPickDropItem::m_ulItemID -> A
}

[Client]Game.Msg.MsgClientMonsterPickAllDropItems -> [Client]k.w
{
	[Client]Game.Msg.MsgClientMonsterPickAllDropItems::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientMonsterPickAllDropItems::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientMonsterPickAllDropItems::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientMonsterPickAllDropItems::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientMonsterPickAllDropItems::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientMonsterPickAllDropItems::m_uiPackID -> A
}

[Client]Game.Msg.MsgClientMoveItem -> [Client]k.X
{
	[Client]Game.Msg.MsgClientMoveItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientMoveItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientMoveItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientMoveItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientMoveItem::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientMoveItem::m_btSrcType -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientMoveItem::m_btSrcIndex -> B
	System.Byte [Client]System.Byte Game.Msg.MsgClientMoveItem::m_btDstType -> b
	System.Byte [Client]System.Byte Game.Msg.MsgClientMoveItem::m_btDstIndex -> C
	System.Byte [Client]System.Byte Game.Msg.MsgClientMoveItem::m_btCount -> c
}

[Client]Game.Msg.MsgClientSortOrderBag -> [Client]k.x
{
	[Client]Game.Msg.MsgClientSortOrderBag::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientSortOrderBag::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientSortOrderBag::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientSortOrderBag::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSortOrderBag::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientSortOrderBag::m_btPackType -> a
}

[Client]Game.Msg.MsgClientSellItem -> [Client]k.Y
{
	[Client]Game.Msg.MsgClientSellItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientSellItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientSellItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientSellItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSellItem::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientSellItem::m_btPackType -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientSellItem::m_ulItemGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientSellItem::m_btCount -> B
}

[Client]Game.Msg.MsgServerSellItemRes -> [Client]k.y
{
	[Client]Game.Msg.MsgServerSellItemRes::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSellItemRes::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSellItemRes::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSellItemRes::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSellItemRes::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerSellItemRes::m_ebtResult -> a
}

[Client]Game.Msg.MsgClientBuyBackItem -> [Client]k.Z
{
	[Client]Game.Msg.MsgClientBuyBackItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientBuyBackItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientBuyBackItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientBuyBackItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientBuyBackItem::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientBuyBackItem::m_ulItemGUID -> A
}

[Client]Game.Msg.MsgServerBuyBackItemRes -> [Client]k.z
{
	[Client]Game.Msg.MsgServerBuyBackItemRes::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerBuyBackItemRes::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerBuyBackItemRes::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerBuyBackItemRes::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerBuyBackItemRes::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerBuyBackItemRes::m_ulItemGUID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerBuyBackItemRes::m_ebtResult -> a
}

[Client]Game.Msg.MsgServerNotifyBuyBackList -> [Client]L.A
{
	[Client]Game.Msg.MsgServerNotifyBuyBackList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyBuyBackList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyBuyBackList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyBuyBackList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyBuyBackList::Type -> A
	System.Collections.Generic.List`1<Game.Msg.ClientBuyBackData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientBuyBackData> Game.Msg.MsgServerNotifyBuyBackList::m_oVecItemList -> A
}

[Client]Game.Msg.MsgServerItemChangeInfo -> [Client]L.a
{
	[Client]Game.Msg.MsgServerItemChangeInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerItemChangeInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerItemChangeInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerItemChangeInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerItemChangeInfo::Type -> A
	System.Collections.Generic.List`1<Game.Msg.SItemChangeInfo> [Client]System.Collections.Generic.List`1<Game.Msg.SItemChangeInfo> Game.Msg.MsgServerItemChangeInfo::m_oVecItemList -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerItemChangeInfo::m_usReason -> a
}

[Client]Game.Msg.MsgClientGetCommodityList -> [Client]L.B
{
	[Client]Game.Msg.MsgClientGetCommodityList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientGetCommodityList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientGetCommodityList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientGetCommodityList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientGetCommodityList::Type -> A
}

[Client]Game.Msg.MsgServerCommodityList -> [Client]L.b
{
	[Client]Game.Msg.MsgServerCommodityList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCommodityList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCommodityList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCommodityList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCommodityList::Type -> A
	System.Collections.Generic.List`1<Game.Msg.STCommodity> [Client]System.Collections.Generic.List`1<Game.Msg.STCommodity> Game.Msg.MsgServerCommodityList::m_oVecCommodityData -> A
}

[Client]Game.Msg.MsgClientBuyCommodity -> [Client]L.C
{
	[Client]Game.Msg.MsgClientBuyCommodity::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientBuyCommodity::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientBuyCommodity::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientBuyCommodity::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientBuyCommodity::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientBuyCommodity::m_uiCommodityID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientBuyCommodity::m_usCommodityNum -> a
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientBuyCommodity::m_bBindGold -> A
}

[Client]Game.Msg.MsgServerBuyCommodityRes -> [Client]L.c
{
	[Client]Game.Msg.MsgServerBuyCommodityRes::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerBuyCommodityRes::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerBuyCommodityRes::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerBuyCommodityRes::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerBuyCommodityRes::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerBuyCommodityRes::m_ebtResult -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerBuyCommodityRes::m_uiCommodityID -> A
}

[Client]Game.Msg.MsgClientReqBagSizeUp -> [Client]L.D
{
	[Client]Game.Msg.MsgClientReqBagSizeUp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqBagSizeUp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqBagSizeUp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBagSizeUp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqBagSizeUp::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqBagSizeUp::m_btType -> a
}

[Client]Game.Msg.MsgServerBagSizeChange -> [Client]L.d
{
	[Client]Game.Msg.MsgServerBagSizeChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerBagSizeChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerBagSizeChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerBagSizeChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerBagSizeChange::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerBagSizeChange::m_btType -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerBagSizeChange::m_ebtResult -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerBagSizeChange::m_uiNewSize -> A
}

[Client]Game.Msg.MsgClientBuyNpcShopItem -> [Client]L.E
{
	[Client]Game.Msg.MsgClientBuyNpcShopItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientBuyNpcShopItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientBuyNpcShopItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientBuyNpcShopItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientBuyNpcShopItem::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientBuyNpcShopItem::m_uiCharID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientBuyNpcShopItem::m_uiCfgID -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientBuyNpcShopItem::m_uiItemIndex -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientBuyNpcShopItem::m_uiBuyNum -> b
}

[Client]Game.Msg.MsgServerBuyNpcShopItem -> [Client]L.e
{
	[Client]Game.Msg.MsgServerBuyNpcShopItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerBuyNpcShopItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerBuyNpcShopItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerBuyNpcShopItem::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerBuyNpcShopItem::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerBuyNpcShopItem::m_uiItemID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerBuyNpcShopItem::m_uiBuyNum -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerBuyNpcShopItem::m_ebtResult -> a
}

[Client]Game.Msg.MsgGameWorld -> [Client]L.F
{

	[Client]Game.Msg.MsgGameWorld::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgGameWorld::BaseType -> A
}

[Client]Game.Msg.MsgClientLineInfo -> [Client]L.f
{

	[Client]Game.Msg.MsgClientLineInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientLineInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientLineInfo::Type -> A
}

[Client]Game.Msg.MsgServerLineInfo -> [Client]L.G
{
	[Client]Game.Msg.MsgServerLineInfo::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerLineInfo::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerLineInfo::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerLineInfo::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLineInfo::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerLineInfo::InfoSize -> A
	Game.Msg.ServerData[] [Client]Game.Msg.ServerData[] Game.Msg.MsgServerLineInfo::m_astInfo -> A
}

[Client]Game.Msg.MsgClientEnterWorld -> [Client]L.g
{
	[Client]Game.Msg.MsgClientEnterWorld::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientEnterWorld::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientEnterWorld::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientEnterWorld::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientEnterWorld::Type -> A
	System.SByte [Client]System.SByte Game.Msg.MsgClientEnterWorld::m_sbWhichSlot -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgClientEnterWorld::m_ulMac -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientEnterWorld::m_uiRoleID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientEnterWorld::m_btLineID -> a
}

[Client]Game.Msg.MsgServerEnterWorld -> [Client]L.H
{
	[Client]Game.Msg.MsgServerEnterWorld::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerEnterWorld::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerEnterWorld::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerEnterWorld::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEnterWorld::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerEnterWorld::m_bSuccess -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerEnterWorld::m_ulAccountID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiCharID -> A
	System.Byte[] [Client]System.Byte[] Game.Msg.MsgServerEnterWorld::m_abtPlayerName -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerEnterWorld::m_btProfession -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerEnterWorld::m_btSex -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiHairModelIndex -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiHairColor -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiHeadPic -> b
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiFace -> C
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiBirthday -> c
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiMaxHP -> D
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiHP -> d
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiMoney -> E
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiGold -> e
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEnterWorld::m_usLevel -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerEnterWorld::m_ulExp -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerEnterWorld::m_ulSkillExp -> B
	System.Single [Client]System.Single Game.Msg.MsgServerEnterWorld::m_fMoveSpeed -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerEnterWorld::m_usMapID -> B
	System.Single [Client]System.Single Game.Msg.MsgServerEnterWorld::m_fPosX -> a
	System.Single [Client]System.Single Game.Msg.MsgServerEnterWorld::m_fPosY -> B
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiGive -> F
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerEnterWorld::m_uiStoreMoney -> f
}

[Client]Game.Msg.MsgServerPlayerEnterSight -> [Client]L.h
{
	[Client]Game.Msg.MsgServerPlayerEnterSight::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPlayerEnterSight::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPlayerEnterSight::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPlayerEnterSight::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPlayerEnterSight::Type -> A
	Game.Msg.CSnapShotCharAll [Client]Game.Msg.CSnapShotCharAll Game.Msg.MsgServerPlayerEnterSight::m_stData -> A
}

[Client]Game.Msg.MsgServerPlayerEnterSightPack -> [Client]L.I
{
	[Client]Game.Msg.MsgServerPlayerEnterSightPack::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPlayerEnterSightPack::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPlayerEnterSightPack::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPlayerEnterSightPack::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPlayerEnterSightPack::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerPlayerEnterSightPack::DataSize -> A
	Game.Msg.CSnapShotCharAll[] [Client]Game.Msg.CSnapShotCharAll[] Game.Msg.MsgServerPlayerEnterSightPack::m_astData -> A
}

[Client]Game.Msg.MsgServerNpcEnterSight -> [Client]L.i
{
	[Client]Game.Msg.MsgServerNpcEnterSight::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNpcEnterSight::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNpcEnterSight::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNpcEnterSight::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNpcEnterSight::Type -> A
	Game.Msg.CSnapShotCharAll [Client]Game.Msg.CSnapShotCharAll Game.Msg.MsgServerNpcEnterSight::m_stData -> A
}

[Client]Game.Msg.MsgServerNpcEnterSightPack -> [Client]L.J
{
	[Client]Game.Msg.MsgServerNpcEnterSightPack::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNpcEnterSightPack::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNpcEnterSightPack::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNpcEnterSightPack::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNpcEnterSightPack::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerNpcEnterSightPack::DataSize -> A
	Game.Msg.CSnapShotCharAll[] [Client]Game.Msg.CSnapShotCharAll[] Game.Msg.MsgServerNpcEnterSightPack::m_astData -> A
}

[Client]Game.Msg.MsgServerExitSightPack -> [Client]L.j
{
	[Client]Game.Msg.MsgServerExitSightPack::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerExitSightPack::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerExitSightPack::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerExitSightPack::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerExitSightPack::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerExitSightPack::CharIDSize -> A
	System.UInt32[] [Client]System.UInt32[] Game.Msg.MsgServerExitSightPack::m_auiCharID -> A
}

[Client]Game.Msg.MsgClientCharMove -> [Client]L.K
{
	[Client]Game.Msg.MsgClientCharMove::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientCharMove::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientCharMove::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientCharMove::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientCharMove::Type -> A
	System.Single [Client]System.Single Game.Msg.MsgClientCharMove::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgClientCharMove::m_fPosY -> a
}

[Client]Game.Msg.MsgServerCharMove -> [Client]L.k
{
	[Client]Game.Msg.MsgServerCharMove::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCharMove::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCharMove::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCharMove::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharMove::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharMove::m_uiID -> A
	System.Single [Client]System.Single Game.Msg.MsgServerCharMove::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerCharMove::m_fPosY -> a
}

[Client]Game.Msg.MsgServerVerifyCharPos -> [Client]L.L
{
	[Client]Game.Msg.MsgServerVerifyCharPos::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerVerifyCharPos::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerVerifyCharPos::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerVerifyCharPos::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerVerifyCharPos::Type -> A
	System.Single [Client]System.Single Game.Msg.MsgServerVerifyCharPos::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerVerifyCharPos::m_fPosY -> a
}

[Client]Game.Msg.MsgServerNpcMove -> [Client]L.l
{
	[Client]Game.Msg.MsgServerNpcMove::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNpcMove::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNpcMove::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNpcMove::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNpcMove::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNpcMove::m_uiID -> A
	System.Single [Client]System.Single Game.Msg.MsgServerNpcMove::m_fStartPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerNpcMove::m_fStartPosY -> a
	System.Single [Client]System.Single Game.Msg.MsgServerNpcMove::m_fEndPosX -> B
	System.Single [Client]System.Single Game.Msg.MsgServerNpcMove::m_fEndPosY -> b
}

[Client]Game.Msg.MsgServerVerifyNpcPos -> [Client]L.M
{
	[Client]Game.Msg.MsgServerVerifyNpcPos::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerVerifyNpcPos::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerVerifyNpcPos::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerVerifyNpcPos::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerVerifyNpcPos::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerVerifyNpcPos::m_uiID -> A
	System.Single [Client]System.Single Game.Msg.MsgServerVerifyNpcPos::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerVerifyNpcPos::m_fPosY -> a
}

[Client]Game.Msg.MsgClientSelectChar -> [Client]L.m
{
	[Client]Game.Msg.MsgClientSelectChar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientSelectChar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientSelectChar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientSelectChar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSelectChar::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientSelectChar::m_uiCharID -> A
}

[Client]Game.Msg.MsgServerSelectChar -> [Client]L.N
{
	[Client]Game.Msg.MsgServerSelectChar::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSelectChar::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSelectChar::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSelectChar::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSelectChar::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSelectChar::m_uiCharID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSelectChar::m_uiHP -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerSelectChar::m_ebtState -> a
	System.Collections.Generic.List`1<Game.Msg.ClientStatusData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientStatusData> Game.Msg.MsgServerSelectChar::m_oVecStatusList -> A
}

[Client]Game.Msg.MsgServerChangeMap -> [Client]L.n
{
	[Client]Game.Msg.MsgServerChangeMap::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerChangeMap::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerChangeMap::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerChangeMap::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerChangeMap::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerChangeMap::m_usMapID -> a
	System.Single [Client]System.Single Game.Msg.MsgServerChangeMap::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerChangeMap::m_fPosY -> a
}

[Client]Game.Msg.MsgServerCharFlyPos -> [Client]L.O
{
	[Client]Game.Msg.MsgServerCharFlyPos::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCharFlyPos::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCharFlyPos::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCharFlyPos::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharFlyPos::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharFlyPos::m_uiID -> A
	System.Single [Client]System.Single Game.Msg.MsgServerCharFlyPos::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerCharFlyPos::m_fPosY -> a
}

[Client]Game.Msg.MsgServerCharFastMovePos -> [Client]L.o
{
	[Client]Game.Msg.MsgServerCharFastMovePos::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCharFastMovePos::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCharFastMovePos::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCharFastMovePos::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharFastMovePos::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharFastMovePos::m_uiID -> A
	System.Single [Client]System.Single Game.Msg.MsgServerCharFastMovePos::m_fSpeed -> A
	System.Single [Client]System.Single Game.Msg.MsgServerCharFastMovePos::m_fPosX -> a
	System.Single [Client]System.Single Game.Msg.MsgServerCharFastMovePos::m_fPosY -> B
}

[Client]Game.Msg.MsgClientReqSystemTime -> [Client]L.P
{
	[Client]Game.Msg.MsgClientReqSystemTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqSystemTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqSystemTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSystemTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqSystemTime::Type -> A
}

[Client]Game.Msg.MsgServerAckSystemTime -> [Client]L.p
{
	[Client]Game.Msg.MsgServerAckSystemTime::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckSystemTime::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckSystemTime::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckSystemTime::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckSystemTime::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckSystemTime::m_uiSystemTime -> A
}

[Client]Game.Msg.MsgClientMapCarry -> [Client]L.Q
{
	[Client]Game.Msg.MsgClientMapCarry::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientMapCarry::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientMapCarry::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientMapCarry::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientMapCarry::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientMapCarry::m_usDstMapID -> a
}

[Client]Game.Msg.MsgClientWorldMapTrans -> [Client]L.q
{
	[Client]Game.Msg.MsgClientWorldMapTrans::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientWorldMapTrans::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientWorldMapTrans::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientWorldMapTrans::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientWorldMapTrans::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientWorldMapTrans::m_usMapID -> a
	System.Byte [Client]System.Byte Game.Msg.MsgClientWorldMapTrans::m_btOption -> a
}

[Client]Game.Msg.MsgServerMoveToPos -> [Client]L.R
{
	[Client]Game.Msg.MsgServerMoveToPos::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMoveToPos::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMoveToPos::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMoveToPos::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMoveToPos::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMoveToPos::m_usMapID -> a
	System.Single [Client]System.Single Game.Msg.MsgServerMoveToPos::m_fPosX -> A
	System.Single [Client]System.Single Game.Msg.MsgServerMoveToPos::m_fPosY -> a
}

[Client]Game.Msg.MsgServerMoveToNpc -> [Client]L.r
{
	[Client]Game.Msg.MsgServerMoveToNpc::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMoveToNpc::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMoveToNpc::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMoveToNpc::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMoveToNpc::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMoveToNpc::m_usNpcID -> a
}

[Client]Game.Msg.MsgServerMoveToMonster -> [Client]L.S
{
	[Client]Game.Msg.MsgServerMoveToMonster::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMoveToMonster::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMoveToMonster::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMoveToMonster::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMoveToMonster::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerMoveToMonster::m_uiMonsterID -> A
}

[Client]Game.Msg.MsgServerMapCarry -> [Client]L.s
{
	[Client]Game.Msg.MsgServerMapCarry::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMapCarry::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMapCarry::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMapCarry::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMapCarry::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerMapCarry::m_ebtResult -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMapCarry::m_usDstMapID -> a
}

[Client]Game.Msg.MsgServerPlayerEffect -> [Client]L.T
{
	[Client]Game.Msg.MsgServerPlayerEffect::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPlayerEffect::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPlayerEffect::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPlayerEffect::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPlayerEffect::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPlayerEffect::m_uiEffectId -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPlayerEffect::m_uiCharID -> a
}

[Client]Game.Msg.MsgServerPlayerAction -> [Client]L.t
{
	[Client]Game.Msg.MsgServerPlayerAction::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerPlayerAction::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerPlayerAction::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerPlayerAction::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerPlayerAction::Type -> A
	System.String [Client]System.String Game.Msg.MsgServerPlayerAction::m_strActionName -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerPlayerAction::m_uiCharID -> A
}

[Client]Game.Msg.MsgServerChangeMapMask -> [Client]L.U
{
	[Client]Game.Msg.MsgServerChangeMapMask::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerChangeMapMask::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerChangeMapMask::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerChangeMapMask::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerChangeMapMask::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerChangeMapMask::m_usMapId -> a
	System.Byte [Client]System.Byte Game.Msg.MsgServerChangeMapMask::m_btMaskId -> a
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerChangeMapMask::m_bOpenMask -> A
}

[Client]Game.Msg.MsgServerSceneObjectAction -> [Client]L.u
{
	[Client]Game.Msg.MsgServerSceneObjectAction::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSceneObjectAction::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSceneObjectAction::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSceneObjectAction::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSceneObjectAction::Type -> A
	System.String [Client]System.String Game.Msg.MsgServerSceneObjectAction::m_strActionName -> A
	System.String [Client]System.String Game.Msg.MsgServerSceneObjectAction::m_strObjectName -> a
}

[Client]Game.Msg.MsgServerMapMask -> [Client]L.V
{
	[Client]Game.Msg.MsgServerMapMask::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerMapMask::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerMapMask::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerMapMask::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMapMask::Type -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerMapMask::m_usMapId -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerMapMask::m_uiMaskSwitch -> A
}

[Client]Game.Msg.MsgServerNotifyMonsterBorn -> [Client]L.v
{
	[Client]Game.Msg.MsgServerNotifyMonsterBorn::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyMonsterBorn::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyMonsterBorn::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyMonsterBorn::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyMonsterBorn::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyMonsterBorn::m_uiMonsterId -> A
}

[Client]Game.Msg.MsgServerAckAddTargetList -> [Client]L.W
{
	[Client]Game.Msg.MsgServerAckAddTargetList::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckAddTargetList::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckAddTargetList::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckAddTargetList::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckAddTargetList::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckAddTargetList::m_uiCharId -> A
}

[Client]Game.Msg.MsgClientReqSkipNewerHelp -> [Client]L.w
{

	[Client]Game.Msg.MsgClientReqSkipNewerHelp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqSkipNewerHelp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqSkipNewerHelp::Type -> A
}

[Client]Game.Msg.MsgTaskAckNpc_Script -> [Client]L.X
{
	[Client]Game.Msg.MsgTaskAckNpc_Script::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgTaskAckNpc_Script::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgTaskAckNpc_Script::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgTaskAckNpc_Script::m_btID -> A
}

[Client]Game.Msg.CSnapShotBotAll -> [Client]L.x
{
	[Client]Game.Msg.CSnapShotBotAll::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.CSnapShotBotAll::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.CSnapShotBotAll::.ctor[0]( ) skipped:  special name

	Game.Msg.CSnapShotFighterData [Client]Game.Msg.CSnapShotFighterData Game.Msg.CSnapShotBotAll::m_stFighterData -> A
	Game.Msg.CSnapShotEquipData [Client]Game.Msg.CSnapShotEquipData Game.Msg.CSnapShotBotAll::m_stEquipData -> A
	Game.Msg.CSnapShotBotData [Client]Game.Msg.CSnapShotBotData Game.Msg.CSnapShotBotAll::m_stBotData -> A
}

[Client]Game.Team -> [Client]L.Y
{
	[Client]Game.Team::get_Instnace[0]( ) -> A
	[Client]Game.Team::get_InTeam[0]( ) -> a
	[Client]Game.Team::get_IsRoleLeader[0]( ) -> B
	[Client]Game.Team::get_Count[0]( ) -> b
	[Client]Game.Team::get_LeaderId[0]( ) -> C
	[Client]Game.Team::get_LeaderName[0]( ) -> c
	[Client]Game.Team::get_Full[0]( ) -> D
	[Client]Game.Team::get_Applys[0]( ) -> d
	[Client]Game.Team::get_Invites[0]( ) -> E
	[Client]Game.Team::Update[0]( ) -> e
	[Client]Game.Team::Reset[0]( ) -> F
	[Client]Game.Team::ClearApplysAndInvites[0]( ) -> f
	[Client]Game.Team::Clear[0]( ) -> G
	[Client]Game.Team::RemoveMember[1]( System.UInt32 ) -> A
	[Client]Game.Team::GetRobots[0]( ) -> g
	[Client]Game.Team::HaveNpcRobot[1]( System.Byte ) -> A
	[Client]Game.Team::IsPlayerAsRobotInTeam[1]( System.UInt32 ) -> a
	[Client]Game.Team::IsTeamMember[1]( System.UInt32 ) -> B
	[Client]Game.Team::GetMember[1]( System.UInt32 ) -> b
	[Client]Game.Team::GetMemberByIndex[1]( System.Int32 ) -> A
	[Client]Game.Team::GetApply[1]( System.UInt32 ) -> C
	[Client]Game.Team::GetInvite[1]( System.UInt32 ) -> c
	[Client]Game.Team::CompareMemberInfo[2]( Game.Msg.TeamMemInfo, Game.Msg.TeamMemInfo ) -> A
	[Client]Game.Team::UpdateTeamInfos[0]( ) -> H
	[Client]Game.Team::UpdateTeamUI[0]( ) -> h
	[Client]Game.Team::OnMsgServerNotifyTeamInfo[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.Team::CreateTeam[0]( ) -> I
	[Client]Game.Team::OnMsgServerAckCreateTeam[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.Team::DisbandTeam[0]( ) -> i
	[Client]Game.Team::OnMsgServerAckDisbandTeam[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.Team::ReqJoinTeam[1]( System.UInt32 ) -> D
	[Client]Game.Team::OnMsgServerTellJoinTeam[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.Team::AckJoinTeam[2]( System.UInt32, System.Boolean ) -> A
	[Client]Game.Team::ReqInviteTeam[1]( System.UInt32 ) -> d
	[Client]Game.Team::OnMsgServerTellInviteTeam[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.Team::AckInviteTeam[2]( System.UInt32, System.Boolean ) -> a
	[Client]Game.Team::ReqLevelTeam[0]( ) -> J
	[Client]Game.Team::OnMsgServerMemberLeaveTeam[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.Team::ReqExpelTeam[1]( System.UInt32 ) -> E
	[Client]Game.Team::ChangeTeamLeader[1]( System.UInt32 ) -> e
	[Client]Game.Team::OnMsgServerChangeTeamHeader[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.Team::CanFire[0]( ) -> j
	[Client]Game.Team::FireTarget[0]( ) -> K
	[Client]Game.Team::OnMsgServerAckTeamTarget[1]( Game.Msg.RecvMsgPacket ) -> d

	[Client]Game.Team::.ctor[0]( ) skipped:  special name
	[Client]Game.Team::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Team::MaxTeamMsgNum -> A
	System.Single [Client]System.Single Game.Team::FireCD -> A
	Game.Team [Client]Game.Team Game.Team::m_Instance -> A
	System.UInt32 [Client]System.UInt32 Game.Team::m_LeaderId -> A
	System.String [Client]System.String Game.Team::m_LeaderName -> A
	System.Collections.Generic.List`1<Game.Msg.TeamMemInfo> [Client]System.Collections.Generic.List`1<Game.Msg.TeamMemInfo> Game.Team::m_Members -> A
	System.Collections.Generic.List`1<Game.Msg.MsgServerTellJoinTeam> [Client]System.Collections.Generic.List`1<Game.Msg.MsgServerTellJoinTeam> Game.Team::m_Applys -> A
	System.Collections.Generic.List`1<Game.Msg.MsgServerTellInviteTeam> [Client]System.Collections.Generic.List`1<Game.Msg.MsgServerTellInviteTeam> Game.Team::m_Invites -> A
	System.Single [Client]System.Single Game.Team::m_LastFireTime -> a

	Game.Team [Client]Game.Team Game.Team::Instnace -> dropped
	System.Boolean [Client]System.Boolean Game.Team::InTeam -> dropped
	System.Boolean [Client]System.Boolean Game.Team::IsRoleLeader -> dropped
	System.Int32 [Client]System.Int32 Game.Team::Count -> dropped
	System.UInt32 [Client]System.UInt32 Game.Team::LeaderId -> dropped
	System.String [Client]System.String Game.Team::LeaderName -> dropped
	System.Boolean [Client]System.Boolean Game.Team::Full -> dropped
	System.Collections.Generic.List`1<Game.Msg.MsgServerTellJoinTeam> [Client]System.Collections.Generic.List`1<Game.Msg.MsgServerTellJoinTeam> Game.Team::Applys -> dropped
	System.Collections.Generic.List`1<Game.Msg.MsgServerTellInviteTeam> [Client]System.Collections.Generic.List`1<Game.Msg.MsgServerTellInviteTeam> Game.Team::Invites -> dropped
}

[Client]Game.RoleSkillData -> [Client]L.y
{
	[Client]Game.RoleSkillData::get_Id[0]( ) -> A
	[Client]Game.RoleSkillData::set_Id[1]( System.Int32 ) -> A
	[Client]Game.RoleSkillData::get_Level[0]( ) -> a
	[Client]Game.RoleSkillData::set_Level[1]( System.Int32 ) -> a
	[Client]Game.RoleSkillData::get_RealCD[0]( ) -> B
	[Client]Game.RoleSkillData::set_RealCD[1]( System.Single ) -> A
	[Client]Game.RoleSkillData::get_RealRange[0]( ) -> b
	[Client]Game.RoleSkillData::set_RealRange[1]( System.Single ) -> a
	[Client]Game.RoleSkillData::get_RealIntonateDuration[0]( ) -> C
	[Client]Game.RoleSkillData::set_RealIntonateDuration[1]( System.Single ) -> B
	[Client]Game.RoleSkillData::get_LeftCD[0]( ) -> c
	[Client]Game.RoleSkillData::set_LeftCD[1]( System.Single ) -> b
	[Client]Game.RoleSkillData::get_Base[0]( ) -> D
	[Client]Game.RoleSkillData::Update[0]( ) -> d

	[Client]Game.RoleSkillData::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.RoleSkillData::<Id>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.RoleSkillData::<Level>k__BackingField -> a
	System.Single [Client]System.Single Game.RoleSkillData::<RealCD>k__BackingField -> A
	System.Single [Client]System.Single Game.RoleSkillData::<RealRange>k__BackingField -> a
	System.Single [Client]System.Single Game.RoleSkillData::<RealIntonateDuration>k__BackingField -> B
	System.Single [Client]System.Single Game.RoleSkillData::<LeftCD>k__BackingField -> b

	System.Int32 [Client]System.Int32 Game.RoleSkillData::Id -> dropped
	System.Int32 [Client]System.Int32 Game.RoleSkillData::Level -> dropped
	System.Single [Client]System.Single Game.RoleSkillData::RealCD -> dropped
	System.Single [Client]System.Single Game.RoleSkillData::RealRange -> dropped
	System.Single [Client]System.Single Game.RoleSkillData::RealIntonateDuration -> dropped
	System.Single [Client]System.Single Game.RoleSkillData::LeftCD -> dropped
	Game.Skill [Client]Game.Skill Game.RoleSkillData::Base -> dropped
}

[Client]Game.RoleSkill -> [Client]L.Z
{
	[Client]Game.RoleSkill::get_LastCastSkillTime[0]( ) -> A
	[Client]Game.RoleSkill::set_LastCastSkillTime[1]( System.Single ) -> A
	[Client]Game.RoleSkill::get_ComboCount[0]( ) -> a
	[Client]Game.RoleSkill::get_RemainComboTime[0]( ) -> B
	[Client]Game.RoleSkill::get_Instance[0]( ) -> b
	[Client]Game.RoleSkill::Reset[0]( ) -> C
	[Client]Game.RoleSkill::Update[0]( ) -> c
	[Client]Game.RoleSkill::GetRoleSkill[1]( System.Int32 ) -> A
	[Client]Game.RoleSkill::GetRoleSkillByIndex[1]( System.Int32 ) -> a
	[Client]Game.RoleSkill::HighPriorityAffect[2]( Game.DataStatusaffect, Game.DataStatusaffect ) -> A
	[Client]Game.RoleSkill::UpdateSkillRealData[1]( System.Int32 ) -> B
	[Client]Game.RoleSkill::UpdateAll[0]( ) -> D
	[Client]Game.RoleSkill::UpdateSkillIndex[0]( ) -> d
	[Client]Game.RoleSkill::OnMsgUpdateSkillCD[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.RoleSkill::CheckCD[1]( System.Int32 ) -> b
	[Client]Game.RoleSkill::TryCastSkill[2]( System.UInt32, System.Int32 ) -> A
	[Client]Game.RoleSkill::TrySkill[2]( System.UInt32, System.Int32 ) -> a
	[Client]Game.RoleSkill::TrySkill[2]( UnityEngine.Vector3, System.Int32 ) -> A
	[Client]Game.RoleSkill::TrySkill[1]( System.Int32 ) -> C
	[Client]Game.RoleSkill::TrySkillByIndex[1]( System.Int32 ) -> c
	[Client]Game.RoleSkill::TrySkillByIndex[2]( System.UInt32, System.Int32 ) -> B
	[Client]Game.RoleSkill::TrySkillByIndex[2]( UnityEngine.Vector3, System.Int32 ) -> a
	[Client]Game.RoleSkill::AddAttackCount[0]( ) -> E
	[Client]Game.RoleSkill::OnSkillReplyLocal[9]( System.Int32, System.Int32, System.Single, System.Single, System.UInt32, System.Collections.Generic.List`1<System.UInt32>, System.Int32, System.Int32, System.Byte ) -> A
	[Client]Game.RoleSkill::OnSkillReply[1]( Game.Msg.RecvMsgPacket ) -> a
	[Client]Game.RoleSkill::OnSkillCallActionLocal[6]( System.Int32, System.Int32, System.Single, System.Single, System.UInt32, System.UInt32 ) -> A
	[Client]Game.RoleSkill::SetRoleSkillLeftCD[1]( System.Int32 ) -> D
	[Client]Game.RoleSkill::OnSkillCallAction[1]( Game.Msg.RecvMsgPacket ) -> B
	[Client]Game.RoleSkill::OnMsgServerStartCollect[1]( Game.Msg.RecvMsgPacket ) -> b
	[Client]Game.RoleSkill::OnMsgServerFinishCollect[1]( Game.Msg.RecvMsgPacket ) -> C
	[Client]Game.RoleSkill::OnSkillCallCutLocal[3]( System.Int32, System.Int32, System.UInt32 ) -> A
	[Client]Game.RoleSkill::OnSkillCallCut[1]( Game.Msg.RecvMsgPacket ) -> c
	[Client]Game.RoleSkill::OnSkillErrorInfo[1]( Game.Msg.RecvMsgPacket ) -> D
	[Client]Game.RoleSkill::LearnSkill[1]( System.UInt16 ) -> A
	[Client]Game.RoleSkill::LearnSkillLocal[2]( System.UInt16, System.Int32 ) -> A
	[Client]Game.RoleSkill::OnMsgServerLearnSkillReply[1]( Game.Msg.RecvMsgPacket ) -> d
	[Client]Game.RoleSkill::OnMsgServerForgetSkillReply[1]( Game.Msg.RecvMsgPacket ) -> E
	[Client]Game.RoleSkill::OnMsgServerNotifySkillData[1]( Game.Msg.RecvMsgPacket ) -> e
	[Client]Game.RoleSkill::OnMsgServerNotifyStatusData[1]( Game.Msg.RecvMsgPacket ) -> F
	[Client]Game.RoleSkill::OnMsgServerAddStatus[1]( Game.Msg.RecvMsgPacket ) -> f
	[Client]Game.RoleSkill::OnMsgServerRemoveStatus[1]( Game.Msg.RecvMsgPacket ) -> G
	[Client]Game.RoleSkill::OnMsgServerCharEffectFlag[1]( Game.Msg.RecvMsgPacket ) -> g

	[Client]Game.RoleSkill::.ctor[0]( ) skipped:  special name
	[Client]Game.RoleSkill::.cctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.RoleSkill::MaxTabFindRange -> A
	System.Int32 [Client]System.Int32 Game.RoleSkill::MaxActiveSkill -> A
	System.Single [Client]System.Single Game.RoleSkill::MaxComboTime -> a
	System.Single [Client]System.Single Game.RoleSkill::SkillRangeCorrect -> B
	System.Int32 [Client]System.Int32 Game.RoleSkill::MinComboShowNum -> a
	System.Int32 [Client]System.Int32 Game.RoleSkill::BackToHome -> B
	System.Int32 [Client]System.Int32 Game.RoleSkill::MaxTryTimes -> b
	System.Single [Client]System.Single Game.RoleSkill::MinAutoSelectTime -> b
	log4net.ILog [Client]log4net.ILog Game.RoleSkill::m_Log -> A
	System.Int32 [Client]System.Int32 Game.RoleSkill::m_TryTimes -> C
	System.Collections.Generic.Dictionary`2<System.Int32,Game.RoleSkillData> [Client]System.Collections.Generic.Dictionary`2<System.Int32,Game.RoleSkillData> Game.RoleSkill::m_Skills -> A
	System.Int32[] [Client]System.Int32[] Game.RoleSkill::m_indexToSkillIds -> A
	System.Int32 [Client]System.Int32 Game.RoleSkill::m_ComboCount -> c
	System.Single [Client]System.Single Game.RoleSkill::m_LastAttackTime -> C
	System.Single [Client]System.Single Game.RoleSkill::m_LastAutoSelectTime -> c
	Game.RoleSkill [Client]Game.RoleSkill Game.RoleSkill::m_Instance -> A
	System.Single [Client]System.Single Game.RoleSkill::<LastCastSkillTime>k__BackingField -> D

	System.Single [Client]System.Single Game.RoleSkill::LastCastSkillTime -> dropped
	System.Int32 [Client]System.Int32 Game.RoleSkill::ComboCount -> dropped
	System.Single [Client]System.Single Game.RoleSkill::RemainComboTime -> dropped
	Game.RoleSkill [Client]Game.RoleSkill Game.RoleSkill::Instance -> dropped
}

[Client]Game.FightAssistant -> [Client]L.z
{
	[Client]Game.FightAssistant::get_Range[0]( ) -> A
	[Client]Game.FightAssistant::set_Range[1]( System.Single ) -> A
	[Client]Game.FightAssistant::get_Instance[0]( ) -> a
	[Client]Game.FightAssistant::get_Running[0]( ) -> B
	[Client]Game.FightAssistant::get_m_Target[0]( ) -> b
	[Client]Game.FightAssistant::get_m_CureTarget[0]( ) -> C
	[Client]Game.FightAssistant::get_Config[0]( ) -> c
	[Client]Game.FightAssistant::Reset[0]( ) -> D
	[Client]Game.FightAssistant::Start[0]( ) -> d
	[Client]Game.FightAssistant::Stop[0]( ) -> E
	[Client]Game.FightAssistant::Pause[0]( ) -> e
	[Client]Game.FightAssistant::Resume[0]( ) -> F
	[Client]Game.FightAssistant::ResetStartPos[0]( ) -> f
	[Client]Game.FightAssistant::Update[0]( ) -> G
	[Client]Game.FightAssistant::Ready[0]( ) -> g
	[Client]Game.FightAssistant::DistanceToRole[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.FightAssistant::UpdateUseMedicine[0]( ) -> H
	[Client]Game.FightAssistant::UpdateFight[0]( ) -> h
	[Client]Game.FightAssistant::UpdatePick[0]( ) -> I
	[Client]Game.FightAssistant::UpdateCure[0]( ) -> i
	[Client]Game.FightAssistant::UpdateGoBack[0]( ) -> J
	[Client]Game.FightAssistant::ClientFightAssistantConfig[0]( ) -> j
	[Client]Game.FightAssistant::OnMsgServerFightAssistantConfig[1]( Game.Msg.RecvMsgPacket ) -> A

	[Client]Game.FightAssistant::.ctor[0]( ) skipped:  special name
	[Client]Game.FightAssistant::.cctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.FightAssistant::TickTime -> A
	System.Single [Client]System.Single Game.FightAssistant::WaitTime -> a
	System.Single [Client]System.Single Game.FightAssistant::TargetErrorTime -> B
	System.Int32[] [Client]System.Int32[] Game.FightAssistant::CureSkillIds -> A
	System.Single [Client]System.Single Game.FightAssistant::m_Range -> b
	Game.FightAssistant [Client]Game.FightAssistant Game.FightAssistant::m_Instance -> A
	System.Boolean [Client]System.Boolean Game.FightAssistant::m_Running -> A
	Game.FightAssistant/RunningState [Client]Game.FightAssistant/RunningState Game.FightAssistant::m_State -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.FightAssistant::m_StartPos -> A
	System.Single [Client]System.Single Game.FightAssistant::m_LastUpdateTime -> C
	System.Single [Client]System.Single Game.FightAssistant::m_LastReadyTime -> c
	System.Single [Client]System.Single Game.FightAssistant::m_GetTargetTime -> D
	System.UInt32 [Client]System.UInt32 Game.FightAssistant::m_TargetId -> A
	System.UInt32 [Client]System.UInt32 Game.FightAssistant::m_TargetPackId -> a
	System.UInt32 [Client]System.UInt32 Game.FightAssistant::m_CureTargetId -> B
	Game.Msg.FightAssistantConfig [Client]Game.Msg.FightAssistantConfig Game.FightAssistant::m_Config -> A
	System.Boolean [Client]System.Boolean Game.FightAssistant::m_Pause -> a

	System.Single [Client]System.Single Game.FightAssistant::Range -> dropped
	Game.FightAssistant [Client]Game.FightAssistant Game.FightAssistant::Instance -> dropped
	System.Boolean [Client]System.Boolean Game.FightAssistant::Running -> dropped
	Game.Character [Client]Game.Character Game.FightAssistant::m_Target -> dropped
	Game.Character [Client]Game.Character Game.FightAssistant::m_CureTarget -> dropped
	Game.Msg.FightAssistantConfig [Client]Game.Msg.FightAssistantConfig Game.FightAssistant::Config -> dropped
}

[Client]Game.FightAssistant/RunningState -> [Client]L.z/A
{
	Game.FightAssistant/RunningState [Client]Game.FightAssistant/RunningState Game.FightAssistant/RunningState::Ready -> A
	Game.FightAssistant/RunningState [Client]Game.FightAssistant/RunningState Game.FightAssistant/RunningState::Fight -> a
	Game.FightAssistant/RunningState [Client]Game.FightAssistant/RunningState Game.FightAssistant/RunningState::Pick -> B
	Game.FightAssistant/RunningState [Client]Game.FightAssistant/RunningState Game.FightAssistant/RunningState::Cure -> b
	Game.FightAssistant/RunningState [Client]Game.FightAssistant/RunningState Game.FightAssistant/RunningState::GoBack -> C

	System.Int32 [Client]System.Int32 Game.FightAssistant/RunningState::value__ skipped:  filtered
}

[Client]Game.Data.Define -> [Client]l.a
{
	[Client]Game.Data.Define::GetModelFile[2]( System.UInt16, System.Byte ) -> A
	[Client]Game.Data.Define::GetAvatarFile[4]( System.UInt16, System.Byte, System.Byte, System.Int32 ) -> A
	[Client]Game.Data.Define::GetPartIconFile[2]( System.Byte, System.Byte ) -> A
	[Client]Game.Data.Define::GetPartLocalName[1]( System.Byte ) -> A
	[Client]Game.Data.Define::GetProfessionLocalName[1]( System.UInt16 ) -> A
	[Client]Game.Data.Define::GetAttrRealValue[2]( System.String, System.Single& ) -> A
	[Client]Game.Data.Define::NeedShowPercentValue[1]( System.String ) -> A
	[Client]Game.Data.Define::GetAttrLocalName[1]( Game.Msg.eAttrType ) -> A
	[Client]Game.Data.Define::GetAttrLocalName[1]( System.String ) -> a
	[Client]Game.Data.Define::GetGemTipName[1]( System.String ) -> B
	[Client]Game.Data.Define::ItemType2PackType[1]( System.Byte ) -> a
	[Client]Game.Data.Define::ValidateName[3]( System.String, System.Int32, System.Int32 ) -> A
	[Client]Game.Data.Define::ValidateName[4]( System.String, System.Int32, System.Int32, System.Boolean ) -> A
	[Client]Game.Data.Define::ValidateName[1]( System.String ) -> b
	[Client]Game.Data.Define::ValidateName[2]( System.String, System.Boolean ) -> A
	[Client]Game.Data.Define::PointInPolygon[5]( System.Int32, System.Single[], System.Single[], System.Single, System.Single ) -> A
	[Client]Game.Data.Define::GetColorByQuality[1]( Game.Item ) -> A

	[Client]Game.Data.Define::.ctor[0]( ) skipped:  special name
	[Client]Game.Data.Define::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.Data.Define::MinFightAssistantShowLevel -> A
	System.Int32 [Client]System.Int32 Game.Data.Define::MinAfkShowLevel -> a
	System.Int32 [Client]System.Int32 Game.Data.Define::LayerPlayer -> B
	System.Int32 [Client]System.Int32 Game.Data.Define::LayerMonster -> b
	System.Int32 [Client]System.Int32 Game.Data.Define::LayerHideObj -> C
	System.Int32 [Client]System.Int32 Game.Data.Define::LayerUI -> c
	System.Int32 [Client]System.Int32 Game.Data.Define::LayerUICharacter -> D
	System.UInt32 [Client]System.UInt32 Game.Data.Define::MaxCreateId -> A
	System.String [Client]System.String Game.Data.Define::ColorWhite -> A
	System.String [Client]System.String Game.Data.Define::ColorYellow -> a
	System.String [Client]System.String Game.Data.Define::ColorBlue -> B
	System.String [Client]System.String Game.Data.Define::ColorGreen -> b
	System.String [Client]System.String Game.Data.Define::ColorPurple -> C
	System.String [Client]System.String Game.Data.Define::ColorOrange -> c
	System.String [Client]System.String Game.Data.Define::ColorRed -> D
	System.String [Client]System.String Game.Data.Define::ColorGray -> d
	System.String [Client]System.String Game.Data.Define::ColorGold -> E
	System.String [Client]System.String Game.Data.Define::LockIconFile -> e
	System.String [Client]System.String Game.Data.Define::TransmitIcon -> F
	System.String [Client]System.String Game.Data.Define::SplashFilePlayjoy -> f
	System.String [Client]System.String Game.Data.Define::SplashFileDownjoy -> G
	System.String [Client]System.String Game.Data.Define::SplashFileUc -> g
	System.UInt32 [Client]System.UInt32 Game.Data.Define::MoneyItemId -> a
	System.UInt32 [Client]System.UInt32 Game.Data.Define::GiveItemId -> B
	System.UInt32 [Client]System.UInt32 Game.Data.Define::GoldItemId -> b
	System.Int32 [Client]System.Int32 Game.Data.Define::MaxNameLength -> d
	System.Int32 [Client]System.Int32 Game.Data.Define::MedicineId -> E
	System.Int32 [Client]System.Int32 Game.Data.Define::ShopMedicineId -> e
	System.Int32 [Client]System.Int32 Game.Data.Define::HitLayerMask -> F
	System.Int32 [Client]System.Int32 Game.Data.Define::ScreenHitLayerMask -> f
	System.UInt32[] [Client]System.UInt32[] Game.Data.Define::PlayerNormalSkillId -> A
	System.String[] [Client]System.String[] Game.Data.Define::MoneyIconFile -> A
	System.String[] [Client]System.String[] Game.Data.Define::MoneyName -> a
	System.String[] [Client]System.String[] Game.Data.Define::QualityColorString -> B
	UnityEngine.Color[] [Client]UnityEngine.Color[] Game.Data.Define::QualityColor -> A
	System.String[] [Client]System.String[] Game.Data.Define::PetSkillHoleTypeIcon -> b
	System.String[] [Client]System.String[] Game.Data.Define::PlayerProfessionIcon -> C
	System.String[0...,0...] [Client]System.String[0...,0...] Game.Data.Define::PlayerBigHead -> A
	System.String[0...,0...] [Client]System.String[0...,0...] Game.Data.Define::PlayerHead -> a
	System.String[0...,0...] [Client]System.String[0...,0...] Game.Data.Define::PlayerDeadSound -> B
	System.String[] [Client]System.String[] Game.Data.Define::RobotHead -> c
	System.String[0...,0...] [Client]System.String[0...,0...] Game.Data.Define::FriendHelpHead -> b
	System.String[] [Client]System.String[] Game.Data.Define::FriendHelpRobotHead -> D
	System.String[] [Client]System.String[] Game.Data.Define::ProfessionName -> d
	System.String[] [Client]System.String[] Game.Data.Define::SexName -> E
	System.String[] [Client]System.String[] Game.Data.Define::WeaponMaleBoneName -> e
	System.String[] [Client]System.String[] Game.Data.Define::WeaponFemaleBoneName -> F
	System.String [Client]System.String Game.Data.Define::ShieldBoneName -> H
	System.String [Client]System.String Game.Data.Define::NewPlayerModelFile -> h
	System.Int32[] [Client]System.Int32[] Game.Data.Define::CrystalId -> A
	System.Int32[] [Client]System.Int32[] Game.Data.Define::ImprintId -> a
}

[Client]Game.DataPetskillbook -> [Client]l.B
{
	[Client]Game.DataPetskillbook::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetskillbook::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetskillbook::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetskillbook::get_ItemID[0]( ) -> A
	[Client]Game.DataPetskillbook::set_ItemID[1]( System.Int32 ) -> A
	[Client]Game.DataPetskillbook::get_SkillID[0]( ) -> a
	[Client]Game.DataPetskillbook::set_SkillID[1]( System.Int32 ) -> a
	[Client]Game.DataPetskillbook::get_BookName[0]( ) -> B
	[Client]Game.DataPetskillbook::set_BookName[1]( System.String ) -> A
	[Client]Game.DataPetskillbook::get_BookDes[0]( ) -> b
	[Client]Game.DataPetskillbook::set_BookDes[1]( System.String ) -> a

	[Client]Game.DataPetskillbook::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataPetskillbook::<ItemID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataPetskillbook::<SkillID>k__BackingField -> a
	System.String [Client]System.String Game.DataPetskillbook::<BookName>k__BackingField -> A
	System.String [Client]System.String Game.DataPetskillbook::<BookDes>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataPetskillbook::ItemID -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetskillbook::SkillID -> dropped
	System.String [Client]System.String Game.DataPetskillbook::BookName -> dropped
	System.String [Client]System.String Game.DataPetskillbook::BookDes -> dropped
}

[Client]Game.DataPetskillbookManager -> [Client]l.b
{
	[Client]Game.DataPetskillbookManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataPetskillbookManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataPetskillbookManager::Clear[0]( ) -> A
	[Client]Game.DataPetskillbookManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataPetskillbookManager::GetDataByItemID[1]( System.Int32 ) -> A
	[Client]Game.DataPetskillbookManager::GetDataListByItemID[1]( System.Int32 ) -> a
	[Client]Game.DataPetskillbookManager::GetDataBySkillID[1]( System.Int32 ) -> B
	[Client]Game.DataPetskillbookManager::GetDataListBySkillID[1]( System.Int32 ) -> b
	[Client]Game.DataPetskillbookManager::GetDataByBookName[1]( System.String ) -> A
	[Client]Game.DataPetskillbookManager::GetDataListByBookName[1]( System.String ) -> a
	[Client]Game.DataPetskillbookManager::GetDataByBookDes[1]( System.String ) -> B
	[Client]Game.DataPetskillbookManager::GetDataListByBookDes[1]( System.String ) -> b
	[Client]Game.DataPetskillbookManager::get_Instance[0]( ) -> a
	[Client]Game.DataPetskillbookManager::get_DataList[0]( ) -> B
	[Client]Game.DataPetskillbookManager::get_Count[0]( ) -> b

	[Client]Game.DataPetskillbookManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataPetskillbookManager::.ctor[0]( ) skipped:  special name

	Game.DataPetskillbookManager [Client]Game.DataPetskillbookManager Game.DataPetskillbookManager::instance -> A
	System.Collections.Generic.List`1<Game.DataPetskillbook> [Client]System.Collections.Generic.List`1<Game.DataPetskillbook> Game.DataPetskillbookManager::dataList -> A

	Game.DataPetskillbookManager [Client]Game.DataPetskillbookManager Game.DataPetskillbookManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataPetskillbook> [Client]System.Collections.Generic.List`1<Game.DataPetskillbook> Game.DataPetskillbookManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataPetskillbookManager::Count -> dropped
}

[Client]Game.DataGemMoney -> [Client]l.C
{
	[Client]Game.DataGemMoney::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataGemMoney::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataGemMoney::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataGemMoney::get_GemLevel[0]( ) -> A
	[Client]Game.DataGemMoney::set_GemLevel[1]( System.Int32 ) -> A
	[Client]Game.DataGemMoney::get_InsertMoney[0]( ) -> a
	[Client]Game.DataGemMoney::set_InsertMoney[1]( System.Int32 ) -> a
	[Client]Game.DataGemMoney::get_PickMoney[0]( ) -> B
	[Client]Game.DataGemMoney::set_PickMoney[1]( System.Int32 ) -> B

	[Client]Game.DataGemMoney::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataGemMoney::<GemLevel>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataGemMoney::<InsertMoney>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataGemMoney::<PickMoney>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataGemMoney::GemLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataGemMoney::InsertMoney -> dropped
	System.Int32 [Client]System.Int32 Game.DataGemMoney::PickMoney -> dropped
}

[Client]Game.DataGemMoneyManager -> [Client]l.c
{
	[Client]Game.DataGemMoneyManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataGemMoneyManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataGemMoneyManager::Clear[0]( ) -> A
	[Client]Game.DataGemMoneyManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataGemMoneyManager::GetDataByGemLevel[1]( System.Int32 ) -> A
	[Client]Game.DataGemMoneyManager::GetDataListByGemLevel[1]( System.Int32 ) -> a
	[Client]Game.DataGemMoneyManager::GetDataByInsertMoney[1]( System.Int32 ) -> B
	[Client]Game.DataGemMoneyManager::GetDataListByInsertMoney[1]( System.Int32 ) -> b
	[Client]Game.DataGemMoneyManager::GetDataByPickMoney[1]( System.Int32 ) -> C
	[Client]Game.DataGemMoneyManager::GetDataListByPickMoney[1]( System.Int32 ) -> c
	[Client]Game.DataGemMoneyManager::get_Instance[0]( ) -> a
	[Client]Game.DataGemMoneyManager::get_DataList[0]( ) -> B
	[Client]Game.DataGemMoneyManager::get_Count[0]( ) -> b

	[Client]Game.DataGemMoneyManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataGemMoneyManager::.ctor[0]( ) skipped:  special name

	Game.DataGemMoneyManager [Client]Game.DataGemMoneyManager Game.DataGemMoneyManager::instance -> A
	System.Collections.Generic.List`1<Game.DataGemMoney> [Client]System.Collections.Generic.List`1<Game.DataGemMoney> Game.DataGemMoneyManager::dataList -> A

	Game.DataGemMoneyManager [Client]Game.DataGemMoneyManager Game.DataGemMoneyManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataGemMoney> [Client]System.Collections.Generic.List`1<Game.DataGemMoney> Game.DataGemMoneyManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataGemMoneyManager::Count -> dropped
}

[Client]Game.DataExpeditionTasks -> [Client]l.D
{
	[Client]Game.DataExpeditionTasks::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionTasks::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionTasks::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionTasks::get_TaskID[0]( ) -> A
	[Client]Game.DataExpeditionTasks::set_TaskID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionTasks::get_TaskName[0]( ) -> a
	[Client]Game.DataExpeditionTasks::set_TaskName[1]( System.String ) -> A
	[Client]Game.DataExpeditionTasks::get_TaskLevel[0]( ) -> B
	[Client]Game.DataExpeditionTasks::set_TaskLevel[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionTasks::get_TaskExpend[0]( ) -> b
	[Client]Game.DataExpeditionTasks::set_TaskExpend[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionTasks::get_TaskType[0]( ) -> C
	[Client]Game.DataExpeditionTasks::set_TaskType[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionTasks::get_RequirementType1[0]( ) -> c
	[Client]Game.DataExpeditionTasks::set_RequirementType1[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionTasks::get_RequirementParameter1[0]( ) -> D
	[Client]Game.DataExpeditionTasks::set_RequirementParameter1[1]( System.String ) -> a
	[Client]Game.DataExpeditionTasks::get_RequirementType2[0]( ) -> d
	[Client]Game.DataExpeditionTasks::set_RequirementType2[1]( System.Int32 ) -> c
	[Client]Game.DataExpeditionTasks::get_RequirementParameter2[0]( ) -> E
	[Client]Game.DataExpeditionTasks::set_RequirementParameter2[1]( System.String ) -> B
	[Client]Game.DataExpeditionTasks::get_RequirementType3[0]( ) -> e
	[Client]Game.DataExpeditionTasks::set_RequirementType3[1]( System.Int32 ) -> D
	[Client]Game.DataExpeditionTasks::get_RequirementParameter3[0]( ) -> F
	[Client]Game.DataExpeditionTasks::set_RequirementParameter3[1]( System.String ) -> b
	[Client]Game.DataExpeditionTasks::get_RequirementType4[0]( ) -> f
	[Client]Game.DataExpeditionTasks::set_RequirementType4[1]( System.Int32 ) -> d
	[Client]Game.DataExpeditionTasks::get_RequirementParameter4[0]( ) -> G
	[Client]Game.DataExpeditionTasks::set_RequirementParameter4[1]( System.String ) -> C
	[Client]Game.DataExpeditionTasks::get_RequirementType5[0]( ) -> g
	[Client]Game.DataExpeditionTasks::set_RequirementType5[1]( System.Int32 ) -> E
	[Client]Game.DataExpeditionTasks::get_RequirementParameter5[0]( ) -> H
	[Client]Game.DataExpeditionTasks::set_RequirementParameter5[1]( System.String ) -> c
	[Client]Game.DataExpeditionTasks::get_AwardType1[0]( ) -> h
	[Client]Game.DataExpeditionTasks::set_AwardType1[1]( System.Int32 ) -> e
	[Client]Game.DataExpeditionTasks::get_AwardParameter1[0]( ) -> I
	[Client]Game.DataExpeditionTasks::set_AwardParameter1[1]( System.String ) -> D
	[Client]Game.DataExpeditionTasks::get_AwardChance1[0]( ) -> i
	[Client]Game.DataExpeditionTasks::set_AwardChance1[1]( System.Single ) -> A
	[Client]Game.DataExpeditionTasks::get_AwardType2[0]( ) -> J
	[Client]Game.DataExpeditionTasks::set_AwardType2[1]( System.Int32 ) -> F
	[Client]Game.DataExpeditionTasks::get_AwardParameter2[0]( ) -> j
	[Client]Game.DataExpeditionTasks::set_AwardParameter2[1]( System.String ) -> d
	[Client]Game.DataExpeditionTasks::get_AwardChance2[0]( ) -> K
	[Client]Game.DataExpeditionTasks::set_AwardChance2[1]( System.Single ) -> a
	[Client]Game.DataExpeditionTasks::get_AwardType3[0]( ) -> k
	[Client]Game.DataExpeditionTasks::set_AwardType3[1]( System.Int32 ) -> f
	[Client]Game.DataExpeditionTasks::get_AwardParameter3[0]( ) -> L
	[Client]Game.DataExpeditionTasks::set_AwardParameter3[1]( System.String ) -> E
	[Client]Game.DataExpeditionTasks::get_AwardChance3[0]( ) -> l
	[Client]Game.DataExpeditionTasks::set_AwardChance3[1]( System.Single ) -> B
	[Client]Game.DataExpeditionTasks::get_AwardType4[0]( ) -> M
	[Client]Game.DataExpeditionTasks::set_AwardType4[1]( System.Int32 ) -> G
	[Client]Game.DataExpeditionTasks::get_AwardParameter4[0]( ) -> m
	[Client]Game.DataExpeditionTasks::set_AwardParameter4[1]( System.String ) -> e
	[Client]Game.DataExpeditionTasks::get_AwardChance4[0]( ) -> N
	[Client]Game.DataExpeditionTasks::set_AwardChance4[1]( System.Single ) -> b
	[Client]Game.DataExpeditionTasks::get_AwardType5[0]( ) -> n
	[Client]Game.DataExpeditionTasks::set_AwardType5[1]( System.Int32 ) -> g
	[Client]Game.DataExpeditionTasks::get_AwardParameter5[0]( ) -> O
	[Client]Game.DataExpeditionTasks::set_AwardParameter5[1]( System.String ) -> F
	[Client]Game.DataExpeditionTasks::get_AwardChance5[0]( ) -> o
	[Client]Game.DataExpeditionTasks::set_AwardChance5[1]( System.Single ) -> C
	[Client]Game.DataExpeditionTasks::get_TaskDescribe[0]( ) -> P
	[Client]Game.DataExpeditionTasks::set_TaskDescribe[1]( System.String ) -> f

	[Client]Game.DataExpeditionTasks::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<TaskID>k__BackingField -> A
	System.String [Client]System.String Game.DataExpeditionTasks::<TaskName>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<TaskLevel>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<TaskExpend>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<TaskType>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<RequirementType1>k__BackingField -> C
	System.String [Client]System.String Game.DataExpeditionTasks::<RequirementParameter1>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<RequirementType2>k__BackingField -> c
	System.String [Client]System.String Game.DataExpeditionTasks::<RequirementParameter2>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<RequirementType3>k__BackingField -> D
	System.String [Client]System.String Game.DataExpeditionTasks::<RequirementParameter3>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<RequirementType4>k__BackingField -> d
	System.String [Client]System.String Game.DataExpeditionTasks::<RequirementParameter4>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<RequirementType5>k__BackingField -> E
	System.String [Client]System.String Game.DataExpeditionTasks::<RequirementParameter5>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<AwardType1>k__BackingField -> e
	System.String [Client]System.String Game.DataExpeditionTasks::<AwardParameter1>k__BackingField -> D
	System.Single [Client]System.Single Game.DataExpeditionTasks::<AwardChance1>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<AwardType2>k__BackingField -> F
	System.String [Client]System.String Game.DataExpeditionTasks::<AwardParameter2>k__BackingField -> d
	System.Single [Client]System.Single Game.DataExpeditionTasks::<AwardChance2>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<AwardType3>k__BackingField -> f
	System.String [Client]System.String Game.DataExpeditionTasks::<AwardParameter3>k__BackingField -> E
	System.Single [Client]System.Single Game.DataExpeditionTasks::<AwardChance3>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<AwardType4>k__BackingField -> G
	System.String [Client]System.String Game.DataExpeditionTasks::<AwardParameter4>k__BackingField -> e
	System.Single [Client]System.Single Game.DataExpeditionTasks::<AwardChance4>k__BackingField -> b
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::<AwardType5>k__BackingField -> g
	System.String [Client]System.String Game.DataExpeditionTasks::<AwardParameter5>k__BackingField -> F
	System.Single [Client]System.Single Game.DataExpeditionTasks::<AwardChance5>k__BackingField -> C
	System.String [Client]System.String Game.DataExpeditionTasks::<TaskDescribe>k__BackingField -> f

	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::TaskID -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::TaskName -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::TaskLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::TaskExpend -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::TaskType -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::RequirementType1 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::RequirementParameter1 -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::RequirementType2 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::RequirementParameter2 -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::RequirementType3 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::RequirementParameter3 -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::RequirementType4 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::RequirementParameter4 -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::RequirementType5 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::RequirementParameter5 -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::AwardType1 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::AwardParameter1 -> dropped
	System.Single [Client]System.Single Game.DataExpeditionTasks::AwardChance1 -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::AwardType2 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::AwardParameter2 -> dropped
	System.Single [Client]System.Single Game.DataExpeditionTasks::AwardChance2 -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::AwardType3 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::AwardParameter3 -> dropped
	System.Single [Client]System.Single Game.DataExpeditionTasks::AwardChance3 -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::AwardType4 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::AwardParameter4 -> dropped
	System.Single [Client]System.Single Game.DataExpeditionTasks::AwardChance4 -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasks::AwardType5 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::AwardParameter5 -> dropped
	System.Single [Client]System.Single Game.DataExpeditionTasks::AwardChance5 -> dropped
	System.String [Client]System.String Game.DataExpeditionTasks::TaskDescribe -> dropped
}

[Client]Game.DataExpeditionTasksManager -> [Client]l.d
{
	[Client]Game.DataExpeditionTasksManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataExpeditionTasksManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataExpeditionTasksManager::Clear[0]( ) -> A
	[Client]Game.DataExpeditionTasksManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataExpeditionTasksManager::GetDataByTaskID[1]( System.Int32 ) -> A
	[Client]Game.DataExpeditionTasksManager::GetDataListByTaskID[1]( System.Int32 ) -> a
	[Client]Game.DataExpeditionTasksManager::GetDataByTaskName[1]( System.String ) -> A
	[Client]Game.DataExpeditionTasksManager::GetDataListByTaskName[1]( System.String ) -> a
	[Client]Game.DataExpeditionTasksManager::GetDataByTaskLevel[1]( System.Int32 ) -> B
	[Client]Game.DataExpeditionTasksManager::GetDataListByTaskLevel[1]( System.Int32 ) -> b
	[Client]Game.DataExpeditionTasksManager::GetDataByTaskExpend[1]( System.Int32 ) -> C
	[Client]Game.DataExpeditionTasksManager::GetDataListByTaskExpend[1]( System.Int32 ) -> c
	[Client]Game.DataExpeditionTasksManager::GetDataByTaskType[1]( System.Int32 ) -> D
	[Client]Game.DataExpeditionTasksManager::GetDataListByTaskType[1]( System.Int32 ) -> d
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementType1[1]( System.Int32 ) -> E
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementType1[1]( System.Int32 ) -> e
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementParameter1[1]( System.String ) -> B
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementParameter1[1]( System.String ) -> b
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementType2[1]( System.Int32 ) -> F
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementType2[1]( System.Int32 ) -> f
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementParameter2[1]( System.String ) -> C
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementParameter2[1]( System.String ) -> c
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementType3[1]( System.Int32 ) -> G
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementType3[1]( System.Int32 ) -> g
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementParameter3[1]( System.String ) -> D
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementParameter3[1]( System.String ) -> d
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementType4[1]( System.Int32 ) -> H
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementType4[1]( System.Int32 ) -> h
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementParameter4[1]( System.String ) -> E
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementParameter4[1]( System.String ) -> e
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementType5[1]( System.Int32 ) -> I
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementType5[1]( System.Int32 ) -> i
	[Client]Game.DataExpeditionTasksManager::GetDataByRequirementParameter5[1]( System.String ) -> F
	[Client]Game.DataExpeditionTasksManager::GetDataListByRequirementParameter5[1]( System.String ) -> f
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardType1[1]( System.Int32 ) -> J
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardType1[1]( System.Int32 ) -> j
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardParameter1[1]( System.String ) -> G
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardParameter1[1]( System.String ) -> g
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardChance1[1]( System.Single ) -> A
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardChance1[1]( System.Single ) -> a
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardType2[1]( System.Int32 ) -> K
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardType2[1]( System.Int32 ) -> k
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardParameter2[1]( System.String ) -> H
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardParameter2[1]( System.String ) -> h
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardChance2[1]( System.Single ) -> B
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardChance2[1]( System.Single ) -> b
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardType3[1]( System.Int32 ) -> L
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardType3[1]( System.Int32 ) -> l
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardParameter3[1]( System.String ) -> I
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardParameter3[1]( System.String ) -> i
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardChance3[1]( System.Single ) -> C
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardChance3[1]( System.Single ) -> c
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardType4[1]( System.Int32 ) -> M
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardType4[1]( System.Int32 ) -> m
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardParameter4[1]( System.String ) -> J
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardParameter4[1]( System.String ) -> j
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardChance4[1]( System.Single ) -> D
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardChance4[1]( System.Single ) -> d
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardType5[1]( System.Int32 ) -> N
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardType5[1]( System.Int32 ) -> n
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardParameter5[1]( System.String ) -> K
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardParameter5[1]( System.String ) -> k
	[Client]Game.DataExpeditionTasksManager::GetDataByAwardChance5[1]( System.Single ) -> E
	[Client]Game.DataExpeditionTasksManager::GetDataListByAwardChance5[1]( System.Single ) -> e
	[Client]Game.DataExpeditionTasksManager::GetDataByTaskDescribe[1]( System.String ) -> L
	[Client]Game.DataExpeditionTasksManager::GetDataListByTaskDescribe[1]( System.String ) -> l
	[Client]Game.DataExpeditionTasksManager::get_Instance[0]( ) -> a
	[Client]Game.DataExpeditionTasksManager::get_DataList[0]( ) -> B
	[Client]Game.DataExpeditionTasksManager::get_Count[0]( ) -> b

	[Client]Game.DataExpeditionTasksManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataExpeditionTasksManager::.ctor[0]( ) skipped:  special name

	Game.DataExpeditionTasksManager [Client]Game.DataExpeditionTasksManager Game.DataExpeditionTasksManager::instance -> A
	System.Collections.Generic.List`1<Game.DataExpeditionTasks> [Client]System.Collections.Generic.List`1<Game.DataExpeditionTasks> Game.DataExpeditionTasksManager::dataList -> A

	Game.DataExpeditionTasksManager [Client]Game.DataExpeditionTasksManager Game.DataExpeditionTasksManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataExpeditionTasks> [Client]System.Collections.Generic.List`1<Game.DataExpeditionTasks> Game.DataExpeditionTasksManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataExpeditionTasksManager::Count -> dropped
}

[Client]Game.DataActivity -> [Client]l.E
{
	[Client]Game.DataActivity::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataActivity::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataActivity::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataActivity::get_ID[0]( ) -> A
	[Client]Game.DataActivity::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataActivity::get_Name[0]( ) -> a
	[Client]Game.DataActivity::set_Name[1]( System.String ) -> A
	[Client]Game.DataActivity::get_Type[0]( ) -> B
	[Client]Game.DataActivity::set_Type[1]( System.Int32 ) -> a
	[Client]Game.DataActivity::get_JoinType[0]( ) -> b
	[Client]Game.DataActivity::set_JoinType[1]( System.Int32 ) -> B
	[Client]Game.DataActivity::get_RecLevel[0]( ) -> C
	[Client]Game.DataActivity::set_RecLevel[1]( System.Int32 ) -> b
	[Client]Game.DataActivity::get_Line[0]( ) -> c
	[Client]Game.DataActivity::set_Line[1]( System.String ) -> a
	[Client]Game.DataActivity::get_Level[0]( ) -> D
	[Client]Game.DataActivity::set_Level[1]( System.Int32 ) -> C
	[Client]Game.DataActivity::get_LevelMax[0]( ) -> d
	[Client]Game.DataActivity::set_LevelMax[1]( System.Int32 ) -> c
	[Client]Game.DataActivity::get_HotDay[0]( ) -> E
	[Client]Game.DataActivity::set_HotDay[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataActivity::get_STime[0]( ) -> e
	[Client]Game.DataActivity::set_STime[1]( System.Single ) -> A
	[Client]Game.DataActivity::get_Duration[0]( ) -> F
	[Client]Game.DataActivity::set_Duration[1]( System.Int32 ) -> D
	[Client]Game.DataActivity::get_Icon[0]( ) -> f
	[Client]Game.DataActivity::set_Icon[1]( System.String ) -> B
	[Client]Game.DataActivity::get_ActionForJoin[0]( ) -> G
	[Client]Game.DataActivity::set_ActionForJoin[1]( System.String ) -> b
	[Client]Game.DataActivity::get_ShowFlag[0]( ) -> g
	[Client]Game.DataActivity::set_ShowFlag[1]( System.Boolean ) -> A
	[Client]Game.DataActivity::get_IsTeam[0]( ) -> H
	[Client]Game.DataActivity::set_IsTeam[1]( System.Boolean ) -> a
	[Client]Game.DataActivity::get_LevelUpShow[0]( ) -> h
	[Client]Game.DataActivity::set_LevelUpShow[1]( System.Boolean ) -> B
	[Client]Game.DataActivity::get_ExpLevel[0]( ) -> I
	[Client]Game.DataActivity::set_ExpLevel[1]( System.Int32 ) -> d
	[Client]Game.DataActivity::get_MoneyLevel[0]( ) -> i
	[Client]Game.DataActivity::set_MoneyLevel[1]( System.Int32 ) -> E
	[Client]Game.DataActivity::get_TreasureLevel[0]( ) -> J
	[Client]Game.DataActivity::set_TreasureLevel[1]( System.Int32 ) -> e
	[Client]Game.DataActivity::get_Award[0]( ) -> j
	[Client]Game.DataActivity::set_Award[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataActivity::get_RandAward[0]( ) -> K
	[Client]Game.DataActivity::set_RandAward[1]( System.Collections.Generic.List`1<System.Int32> ) -> B
	[Client]Game.DataActivity::get_Description[0]( ) -> k
	[Client]Game.DataActivity::set_Description[1]( System.String ) -> C
	[Client]Game.DataActivity::get_Max[0]( ) -> L
	[Client]Game.DataActivity::set_Max[1]( System.Int32 ) -> F
	[Client]Game.DataActivity::get_IsActive[0]( ) -> l
	[Client]Game.DataActivity::set_IsActive[1]( System.Boolean ) -> b
	[Client]Game.DataActivity::get_Active[0]( ) -> M
	[Client]Game.DataActivity::set_Active[1]( System.Int32[] ) -> A
	[Client]Game.DataActivity::get_Mode[0]( ) -> m
	[Client]Game.DataActivity::set_Mode[1]( System.Int32 ) -> f
	[Client]Game.DataActivity::get_MoneyDone[0]( ) -> N
	[Client]Game.DataActivity::set_MoneyDone[1]( System.Boolean ) -> C
	[Client]Game.DataActivity::get_MoneyCost[0]( ) -> n
	[Client]Game.DataActivity::set_MoneyCost[1]( System.Int32 ) -> G
	[Client]Game.DataActivity::get_MoneyScript[0]( ) -> O
	[Client]Game.DataActivity::set_MoneyScript[1]( System.Int32 ) -> g
	[Client]Game.DataActivity::get_EctypeId[0]( ) -> o
	[Client]Game.DataActivity::set_EctypeId[1]( System.Int32 ) -> H

	[Client]Game.DataActivity::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataActivity::<ID>k__BackingField -> A
	System.String [Client]System.String Game.DataActivity::<Name>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataActivity::<Type>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataActivity::<JoinType>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataActivity::<RecLevel>k__BackingField -> b
	System.String [Client]System.String Game.DataActivity::<Line>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataActivity::<Level>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataActivity::<LevelMax>k__BackingField -> c
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataActivity::<HotDay>k__BackingField -> A
	System.Single [Client]System.Single Game.DataActivity::<STime>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataActivity::<Duration>k__BackingField -> D
	System.String [Client]System.String Game.DataActivity::<Icon>k__BackingField -> B
	System.String [Client]System.String Game.DataActivity::<ActionForJoin>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.DataActivity::<ShowFlag>k__BackingField -> A
	System.Boolean [Client]System.Boolean Game.DataActivity::<IsTeam>k__BackingField -> a
	System.Boolean [Client]System.Boolean Game.DataActivity::<LevelUpShow>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.DataActivity::<ExpLevel>k__BackingField -> d
	System.Int32 [Client]System.Int32 Game.DataActivity::<MoneyLevel>k__BackingField -> E
	System.Int32 [Client]System.Int32 Game.DataActivity::<TreasureLevel>k__BackingField -> e
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataActivity::<Award>k__BackingField -> a
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataActivity::<RandAward>k__BackingField -> B
	System.String [Client]System.String Game.DataActivity::<Description>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataActivity::<Max>k__BackingField -> F
	System.Boolean [Client]System.Boolean Game.DataActivity::<IsActive>k__BackingField -> b
	System.Int32[] [Client]System.Int32[] Game.DataActivity::<Active>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataActivity::<Mode>k__BackingField -> f
	System.Boolean [Client]System.Boolean Game.DataActivity::<MoneyDone>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.DataActivity::<MoneyCost>k__BackingField -> G
	System.Int32 [Client]System.Int32 Game.DataActivity::<MoneyScript>k__BackingField -> g
	System.Int32 [Client]System.Int32 Game.DataActivity::<EctypeId>k__BackingField -> H

	System.Int32 [Client]System.Int32 Game.DataActivity::ID -> dropped
	System.String [Client]System.String Game.DataActivity::Name -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::Type -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::JoinType -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::RecLevel -> dropped
	System.String [Client]System.String Game.DataActivity::Line -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::Level -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::LevelMax -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataActivity::HotDay -> dropped
	System.Single [Client]System.Single Game.DataActivity::STime -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::Duration -> dropped
	System.String [Client]System.String Game.DataActivity::Icon -> dropped
	System.String [Client]System.String Game.DataActivity::ActionForJoin -> dropped
	System.Boolean [Client]System.Boolean Game.DataActivity::ShowFlag -> dropped
	System.Boolean [Client]System.Boolean Game.DataActivity::IsTeam -> dropped
	System.Boolean [Client]System.Boolean Game.DataActivity::LevelUpShow -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::ExpLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::MoneyLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::TreasureLevel -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataActivity::Award -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataActivity::RandAward -> dropped
	System.String [Client]System.String Game.DataActivity::Description -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::Max -> dropped
	System.Boolean [Client]System.Boolean Game.DataActivity::IsActive -> dropped
	System.Int32[] [Client]System.Int32[] Game.DataActivity::Active -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::Mode -> dropped
	System.Boolean [Client]System.Boolean Game.DataActivity::MoneyDone -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::MoneyCost -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::MoneyScript -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivity::EctypeId -> dropped
}

[Client]Game.DataActivityManager -> [Client]l.e
{
	[Client]Game.DataActivityManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataActivityManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataActivityManager::Clear[0]( ) -> A
	[Client]Game.DataActivityManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataActivityManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataActivityManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataActivityManager::GetDataByName[1]( System.String ) -> A
	[Client]Game.DataActivityManager::GetDataListByName[1]( System.String ) -> a
	[Client]Game.DataActivityManager::GetDataByType[1]( System.Int32 ) -> B
	[Client]Game.DataActivityManager::GetDataListByType[1]( System.Int32 ) -> b
	[Client]Game.DataActivityManager::GetDataByJoinType[1]( System.Int32 ) -> C
	[Client]Game.DataActivityManager::GetDataListByJoinType[1]( System.Int32 ) -> c
	[Client]Game.DataActivityManager::GetDataByRecLevel[1]( System.Int32 ) -> D
	[Client]Game.DataActivityManager::GetDataListByRecLevel[1]( System.Int32 ) -> d
	[Client]Game.DataActivityManager::GetDataByLine[1]( System.String ) -> B
	[Client]Game.DataActivityManager::GetDataListByLine[1]( System.String ) -> b
	[Client]Game.DataActivityManager::GetDataByLevel[1]( System.Int32 ) -> E
	[Client]Game.DataActivityManager::GetDataListByLevel[1]( System.Int32 ) -> e
	[Client]Game.DataActivityManager::GetDataByLevelMax[1]( System.Int32 ) -> F
	[Client]Game.DataActivityManager::GetDataListByLevelMax[1]( System.Int32 ) -> f
	[Client]Game.DataActivityManager::GetDataByHotDay[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataActivityManager::GetDataListByHotDay[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataActivityManager::GetDataBySTime[1]( System.Single ) -> A
	[Client]Game.DataActivityManager::GetDataListBySTime[1]( System.Single ) -> a
	[Client]Game.DataActivityManager::GetDataByDuration[1]( System.Int32 ) -> G
	[Client]Game.DataActivityManager::GetDataListByDuration[1]( System.Int32 ) -> g
	[Client]Game.DataActivityManager::GetDataByIcon[1]( System.String ) -> C
	[Client]Game.DataActivityManager::GetDataListByIcon[1]( System.String ) -> c
	[Client]Game.DataActivityManager::GetDataByActionForJoin[1]( System.String ) -> D
	[Client]Game.DataActivityManager::GetDataListByActionForJoin[1]( System.String ) -> d
	[Client]Game.DataActivityManager::GetDataByShowFlag[1]( System.Boolean ) -> A
	[Client]Game.DataActivityManager::GetDataListByShowFlag[1]( System.Boolean ) -> a
	[Client]Game.DataActivityManager::GetDataByIsTeam[1]( System.Boolean ) -> B
	[Client]Game.DataActivityManager::GetDataListByIsTeam[1]( System.Boolean ) -> b
	[Client]Game.DataActivityManager::GetDataByLevelUpShow[1]( System.Boolean ) -> C
	[Client]Game.DataActivityManager::GetDataListByLevelUpShow[1]( System.Boolean ) -> c
	[Client]Game.DataActivityManager::GetDataByExpLevel[1]( System.Int32 ) -> H
	[Client]Game.DataActivityManager::GetDataListByExpLevel[1]( System.Int32 ) -> h
	[Client]Game.DataActivityManager::GetDataByMoneyLevel[1]( System.Int32 ) -> I
	[Client]Game.DataActivityManager::GetDataListByMoneyLevel[1]( System.Int32 ) -> i
	[Client]Game.DataActivityManager::GetDataByTreasureLevel[1]( System.Int32 ) -> J
	[Client]Game.DataActivityManager::GetDataListByTreasureLevel[1]( System.Int32 ) -> j
	[Client]Game.DataActivityManager::GetDataByAward[1]( System.Collections.Generic.List`1<System.Int32> ) -> B
	[Client]Game.DataActivityManager::GetDataListByAward[1]( System.Collections.Generic.List`1<System.Int32> ) -> b
	[Client]Game.DataActivityManager::GetDataByRandAward[1]( System.Collections.Generic.List`1<System.Int32> ) -> C
	[Client]Game.DataActivityManager::GetDataListByRandAward[1]( System.Collections.Generic.List`1<System.Int32> ) -> c
	[Client]Game.DataActivityManager::GetDataByDescription[1]( System.String ) -> E
	[Client]Game.DataActivityManager::GetDataListByDescription[1]( System.String ) -> e
	[Client]Game.DataActivityManager::GetDataByMax[1]( System.Int32 ) -> K
	[Client]Game.DataActivityManager::GetDataListByMax[1]( System.Int32 ) -> k
	[Client]Game.DataActivityManager::GetDataByIsActive[1]( System.Boolean ) -> D
	[Client]Game.DataActivityManager::GetDataListByIsActive[1]( System.Boolean ) -> d
	[Client]Game.DataActivityManager::GetDataByActive[1]( System.Int32[] ) -> A
	[Client]Game.DataActivityManager::GetDataListByActive[1]( System.Int32[] ) -> a
	[Client]Game.DataActivityManager::GetDataByMode[1]( System.Int32 ) -> L
	[Client]Game.DataActivityManager::GetDataListByMode[1]( System.Int32 ) -> l
	[Client]Game.DataActivityManager::GetDataByMoneyDone[1]( System.Boolean ) -> E
	[Client]Game.DataActivityManager::GetDataListByMoneyDone[1]( System.Boolean ) -> e
	[Client]Game.DataActivityManager::GetDataByMoneyCost[1]( System.Int32 ) -> M
	[Client]Game.DataActivityManager::GetDataListByMoneyCost[1]( System.Int32 ) -> m
	[Client]Game.DataActivityManager::GetDataByMoneyScript[1]( System.Int32 ) -> N
	[Client]Game.DataActivityManager::GetDataListByMoneyScript[1]( System.Int32 ) -> n
	[Client]Game.DataActivityManager::GetDataByEctypeId[1]( System.Int32 ) -> O
	[Client]Game.DataActivityManager::GetDataListByEctypeId[1]( System.Int32 ) -> o
	[Client]Game.DataActivityManager::get_Instance[0]( ) -> a
	[Client]Game.DataActivityManager::get_DataList[0]( ) -> B
	[Client]Game.DataActivityManager::get_Count[0]( ) -> b

	[Client]Game.DataActivityManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataActivityManager::.ctor[0]( ) skipped:  special name

	Game.DataActivityManager [Client]Game.DataActivityManager Game.DataActivityManager::instance -> A
	System.Collections.Generic.List`1<Game.DataActivity> [Client]System.Collections.Generic.List`1<Game.DataActivity> Game.DataActivityManager::dataList -> A

	Game.DataActivityManager [Client]Game.DataActivityManager Game.DataActivityManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataActivity> [Client]System.Collections.Generic.List`1<Game.DataActivity> Game.DataActivityManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataActivityManager::Count -> dropped
}

[Client]Game.EAvatarComponent -> [Client]l.F
{
	Game.EAvatarComponent [Client]Game.EAvatarComponent Game.EAvatarComponent::Invalid -> A
	Game.EAvatarComponent [Client]Game.EAvatarComponent Game.EAvatarComponent::AvatarHair -> a
	Game.EAvatarComponent [Client]Game.EAvatarComponent Game.EAvatarComponent::AvatarEquip -> B
	Game.EAvatarComponent [Client]Game.EAvatarComponent Game.EAvatarComponent::MaxCount -> b

	System.Int32 [Client]System.Int32 Game.EAvatarComponent::value__ skipped:  filtered
}

[Client]Game.EAvatarAttachment -> [Client]l.f
{
	Game.EAvatarAttachment [Client]Game.EAvatarAttachment Game.EAvatarAttachment::Invalid -> A
	Game.EAvatarAttachment [Client]Game.EAvatarAttachment Game.EAvatarAttachment::AvatarWeapon -> a
	Game.EAvatarAttachment [Client]Game.EAvatarAttachment Game.EAvatarAttachment::MaxCount -> B

	System.Int32 [Client]System.Int32 Game.EAvatarAttachment::value__ skipped:  filtered
}

[Client]Game.HumanoidAvatar -> [Client]l.G
{
	[Client]Game.HumanoidAvatar::get_IsLoading[0]( ) -> A
	[Client]Game.HumanoidAvatar::SetPlayer[1]( Game.Character ) -> A
	[Client]Game.HumanoidAvatar::Init[0]( ) -> a
	[Client]Game.HumanoidAvatar::Release[0]( ) -> B
	[Client]Game.HumanoidAvatar::Reset[0]( ) -> b
	[Client]Game.HumanoidAvatar::ResetModel[0]( ) -> C
	[Client]Game.HumanoidAvatar::Update[0]( ) -> c
	[Client]Game.HumanoidAvatar::ChangeAvatar[2]( System.Byte, System.Int32 ) -> A
	[Client]Game.HumanoidAvatar::RefreshDress[1]( System.Boolean ) -> A
	[Client]Game.HumanoidAvatar::RefreshDressEffect[1]( System.Boolean ) -> a
	[Client]Game.HumanoidAvatar::NeedForceShowArmour[0]( ) -> D
	[Client]Game.HumanoidAvatar::ChangeArmourImpl[2]( System.Int32, System.Boolean ) -> A
	[Client]Game.HumanoidAvatar::ChangeDressImpl[2]( System.Int32, System.Boolean ) -> a
	[Client]Game.HumanoidAvatar::ChangeHairImpl[1]( System.Int32 ) -> A
	[Client]Game.HumanoidAvatar::ChangeWeaponImpl[1]( System.Int32 ) -> a
	[Client]Game.HumanoidAvatar::ChangeBackImpl[1]( System.Int32 ) -> B
	[Client]Game.HumanoidAvatar::IsItemChanged[2]( System.Byte, System.Int32 ) -> a
	[Client]Game.HumanoidAvatar::GetModelFile[3]( System.Byte, System.Int32, System.Int32 ) -> A
	[Client]Game.HumanoidAvatar::IsLoadingComponent[0]( ) -> d
	[Client]Game.HumanoidAvatar::IsLoadingAttachment[0]( ) -> E
	[Client]Game.HumanoidAvatar::Generate[0]( ) -> e
	[Client]Game.HumanoidAvatar::Attach[0]( ) -> F
	[Client]Game.HumanoidAvatar::GetAttachBone[3]( System.UInt16, System.Byte, System.Int16 ) -> A

	[Client]Game.HumanoidAvatar::.ctor[0]( ) skipped:  special name
	[Client]Game.HumanoidAvatar::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.HumanoidAvatar::m_NotInitItemId -> A
	System.Int32 [Client]System.Int32 Game.HumanoidAvatar::m_DefaultHairId -> a
	System.Int32 [Client]System.Int32 Game.HumanoidAvatar::m_DefaultAmourId -> B
	System.Int32 [Client]System.Int32 Game.HumanoidAvatar::m_DefaultDressId -> b
	System.Int32 [Client]System.Int32 Game.HumanoidAvatar::m_DefaultWeaponId -> C
	System.Int32 [Client]System.Int32 Game.HumanoidAvatar::m_DefaultBackId -> c
	log4net.ILog [Client]log4net.ILog Game.HumanoidAvatar::m_Log -> A
	System.Collections.Generic.List`1<Game.Element> [Client]System.Collections.Generic.List`1<Game.Element> Game.HumanoidAvatar::m_Components -> A
	System.Collections.Generic.List`1<Game.Element> [Client]System.Collections.Generic.List`1<Game.Element> Game.HumanoidAvatar::m_Attachments -> a
	System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> Game.HumanoidAvatar::m_AvatarItemIds -> A
	System.Boolean [Client]System.Boolean Game.HumanoidAvatar::m_ShowDress -> A
	System.Int32 [Client]System.Int32 Game.HumanoidAvatar::m_DressEffectId -> D
	Game.Character [Client]Game.Character Game.HumanoidAvatar::m_Character -> A
	System.Boolean [Client]System.Boolean Game.HumanoidAvatar::m_NeedGenerateModel -> a
	System.Boolean [Client]System.Boolean Game.HumanoidAvatar::m_NeedAttachModel -> B

	System.Boolean [Client]System.Boolean Game.HumanoidAvatar::IsLoading -> dropped
}

[Client]TronTrailSection -> [Client]l.g
{

	[Client]TronTrailSection::.ctor[0]( ) skipped:  special name
	[Client]TronTrailSection::.ctor[2]( UnityEngine.Vector3, System.Single ) skipped:  special name

	UnityEngine.Vector3 [Client]UnityEngine.Vector3 TronTrailSection::point -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 TronTrailSection::upDir -> a
	System.Single [Client]System.Single TronTrailSection::time -> A
}

[Client]Game.ECharType -> [Client]l.h
{
	Game.ECharType [Client]Game.ECharType Game.ECharType::ePlayerRole -> A
	Game.ECharType [Client]Game.ECharType Game.ECharType::ePlayer -> a
	Game.ECharType [Client]Game.ECharType Game.ECharType::eMonster -> B
	Game.ECharType [Client]Game.ECharType Game.ECharType::eNpc -> b
	Game.ECharType [Client]Game.ECharType Game.ECharType::ePet -> C

	System.Int32 [Client]System.Int32 Game.ECharType::value__ skipped:  filtered
}

[Client]Game.Msg.MsgCharAttr -> [Client]l.J
{

	[Client]Game.Msg.MsgCharAttr::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgCharAttr::BaseType -> A
}

[Client]Game.Msg.MsgServerAttrChangedMe -> [Client]l.j
{
	[Client]Game.Msg.MsgServerAttrChangedMe::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAttrChangedMe::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAttrChangedMe::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAttrChangedMe::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAttrChangedMe::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerAttrChangedMe::AttrChangedSize -> A
	Game.Msg.CharAttrChange[] [Client]Game.Msg.CharAttrChange[] Game.Msg.MsgServerAttrChangedMe::m_astAttrChanged -> A
}

[Client]Game.Msg.MsgServerAttrChangedOther -> [Client]l.K
{
	[Client]Game.Msg.MsgServerAttrChangedOther::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAttrChangedOther::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAttrChangedOther::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAttrChangedOther::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAttrChangedOther::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerAttrChangedOther::AttrChangedSize -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAttrChangedOther::m_uiCharID -> A
	Game.Msg.CharAttrChange[] [Client]Game.Msg.CharAttrChange[] Game.Msg.MsgServerAttrChangedOther::m_astAttrChanged -> A
}

[Client]Game.Msg.MsgServerCharDead -> [Client]l.k
{
	[Client]Game.Msg.MsgServerCharDead::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCharDead::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCharDead::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCharDead::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharDead::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharDead::m_uiCharID -> A
}

[Client]Game.Msg.MsgServerCharRelive -> [Client]l.L
{
	[Client]Game.Msg.MsgServerCharRelive::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCharRelive::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCharRelive::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCharRelive::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharRelive::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharRelive::m_uiCharID -> A
}

[Client]Game.Msg.MsgServerCharEffectFlag -> [Client]l.l
{
	[Client]Game.Msg.MsgServerCharEffectFlag::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerCharEffectFlag::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerCharEffectFlag::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerCharEffectFlag::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerCharEffectFlag::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharEffectFlag::m_uiCharID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerCharEffectFlag::m_uiEffectMask -> a
}

[Client]Game.Msg.MsgServerSetMoney -> [Client]l.M
{
	[Client]Game.Msg.MsgServerSetMoney::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSetMoney::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSetMoney::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSetMoney::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSetMoney::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSetMoney::m_uiValue -> A
}

[Client]Game.Msg.MsgServerSetStorageMoney -> [Client]l.m
{
	[Client]Game.Msg.MsgServerSetStorageMoney::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSetStorageMoney::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSetStorageMoney::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSetStorageMoney::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSetStorageMoney::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSetStorageMoney::m_uiValue -> A
}

[Client]Game.Msg.MsgServerSetGold -> [Client]l.N
{
	[Client]Game.Msg.MsgServerSetGold::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSetGold::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSetGold::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSetGold::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSetGold::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSetGold::m_uiValue -> A
}

[Client]Game.Msg.MsgServerSetGive -> [Client]l.n
{
	[Client]Game.Msg.MsgServerSetGive::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSetGive::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSetGive::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSetGive::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSetGive::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerSetGive::m_uiValue -> A
}

[Client]Game.Msg.MsgServerSetExp -> [Client]l.O
{
	[Client]Game.Msg.MsgServerSetExp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSetExp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSetExp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSetExp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSetExp::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerSetExp::m_ulValue -> A
}

[Client]Game.Msg.MsgServerAddExp -> [Client]l.o
{
	[Client]Game.Msg.MsgServerAddExp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAddExp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAddExp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAddExp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAddExp::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAddExp::m_uiAddValue -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerAddExp::m_ulCurValue -> A
}

[Client]Game.Msg.MsgServerLevelUp -> [Client]l.P
{
	[Client]Game.Msg.MsgServerLevelUp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerLevelUp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerLevelUp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerLevelUp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLevelUp::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerLevelUp::m_uiCharID -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerLevelUp::m_usLevel -> a
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerLevelUp::m_ulCostExp -> A
}

[Client]Game.Msg.MsgServerSetSkillExp -> [Client]l.p
{
	[Client]Game.Msg.MsgServerSetSkillExp::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSetSkillExp::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSetSkillExp::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSetSkillExp::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSetSkillExp::Type -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerSetSkillExp::m_ulValue -> A
}

[Client]Game.Msg.MsgClientFightAssistantConfig -> [Client]l.Q
{
	[Client]Game.Msg.MsgClientFightAssistantConfig::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientFightAssistantConfig::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientFightAssistantConfig::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientFightAssistantConfig::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientFightAssistantConfig::Type -> A
	Game.Msg.FightAssistantConfig [Client]Game.Msg.FightAssistantConfig Game.Msg.MsgClientFightAssistantConfig::m_stConfig -> A
}

[Client]Game.Msg.MsgServerFightAssistantConfig -> [Client]l.q
{
	[Client]Game.Msg.MsgServerFightAssistantConfig::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerFightAssistantConfig::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerFightAssistantConfig::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerFightAssistantConfig::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerFightAssistantConfig::Type -> A
	Game.Msg.FightAssistantConfig [Client]Game.Msg.FightAssistantConfig Game.Msg.MsgServerFightAssistantConfig::m_stConfig -> A
}

[Client]Game.Msg.MsgClientUserConfig -> [Client]l.R
{
	[Client]Game.Msg.MsgClientUserConfig::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientUserConfig::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientUserConfig::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientUserConfig::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientUserConfig::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgClientUserConfig::m_uiQuickMedicineId -> A
}

[Client]Game.Msg.MsgServerUserConfig -> [Client]l.r
{
	[Client]Game.Msg.MsgServerUserConfig::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerUserConfig::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerUserConfig::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerUserConfig::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerUserConfig::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerUserConfig::m_uiQuickMedicineId -> A
}

[Client]Game.Msg.MsgServerAckUserDeath -> [Client]l.S
{
	[Client]Game.Msg.MsgServerAckUserDeath::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAckUserDeath::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAckUserDeath::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAckUserDeath::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckUserDeath::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckUserDeath::m_uiKillerID -> A
	System.String [Client]System.String Game.Msg.MsgServerAckUserDeath::m_strKillerName -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerAckUserDeath::m_ebtDeathType -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckUserDeath::m_uiLostMoney -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAckUserDeath::m_uiReliveGold -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAckUserDeath::m_usReliveTime -> a
}

[Client]Game.Msg.MsgClientReqUserRelive -> [Client]l.s
{
	[Client]Game.Msg.MsgClientReqUserRelive::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientReqUserRelive::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientReqUserRelive::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientReqUserRelive::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientReqUserRelive::Type -> A
	System.Byte [Client]System.Byte Game.Msg.MsgClientReqUserRelive::m_ebtReliveType -> a
}

[Client]Game.Msg.MsgServerChangeKillState -> [Client]l.T
{
	[Client]Game.Msg.MsgServerChangeKillState::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerChangeKillState::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerChangeKillState::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerChangeKillState::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerChangeKillState::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerChangeKillState::m_uiCharID -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerChangeKillState::m_ebtKillState -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerChangeKillState::m_usKillValue -> a
}

[Client]Game.Msg.MsgClientSetPkProtect -> [Client]l.t
{
	[Client]Game.Msg.MsgClientSetPkProtect::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientSetPkProtect::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientSetPkProtect::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientSetPkProtect::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientSetPkProtect::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgClientSetPkProtect::m_bPkProtect -> A
}

[Client]Game.Msg.MsgServerSetPkProtect -> [Client]l.U
{
	[Client]Game.Msg.MsgServerSetPkProtect::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerSetPkProtect::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerSetPkProtect::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerSetPkProtect::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerSetPkProtect::Type -> A
	System.Boolean [Client]System.Boolean Game.Msg.MsgServerSetPkProtect::m_bPkProtect -> A
}

[Client]Game.Msg.MsgServerNotifyFighterPower -> [Client]l.u
{
	[Client]Game.Msg.MsgServerNotifyFighterPower::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyFighterPower::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyFighterPower::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyFighterPower::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyFighterPower::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyFighterPower::m_uiPowerValue -> A
}

[Client]Game.Msg.MsgServerNotifyHpChange -> [Client]l.V
{
	[Client]Game.Msg.MsgServerNotifyHpChange::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyHpChange::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyHpChange::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyHpChange::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyHpChange::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyHpChange::m_uiCharID -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyHpChange::m_uiCurHp -> a
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerNotifyHpChange::m_iHurt -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyHpChange::m_btReason -> a
}

[Client]Game.Msg.MsgServerNotifyFighterChangeFaction -> [Client]l.v
{
	[Client]Game.Msg.MsgServerNotifyFighterChangeFaction::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerNotifyFighterChangeFaction::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerNotifyFighterChangeFaction::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyFighterChangeFaction::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerNotifyFighterChangeFaction::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerNotifyFighterChangeFaction::m_uiFighterId -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerNotifyFighterChangeFaction::m_btFactionId -> a
}

[Client]Game.Msg.MsgClientRefreshCharData -> [Client]l.W
{
	[Client]Game.Msg.MsgClientRefreshCharData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgClientRefreshCharData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgClientRefreshCharData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgClientRefreshCharData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgClientRefreshCharData::Type -> A
}

[Client]Game.Msg.MsgServerRefreshCharData -> [Client]l.w
{
	[Client]Game.Msg.MsgServerRefreshCharData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerRefreshCharData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerRefreshCharData::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerRefreshCharData::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerRefreshCharData::Type -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iHP -> A
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iMP -> a
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iMaxHP -> B
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iMaxMP -> b
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iHitOdds -> C
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iDodge -> c
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iStrength -> D
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iConstitution -> d
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iAgility -> E
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iIntelligence -> e
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iEnergy -> F
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iCriticalOdds -> f
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iCriticalOddsSub -> G
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iPhysicsAttack -> g
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iMagicAttack -> H
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iFireAttack -> h
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iFrostAttack -> I
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iDarkAttack -> i
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iPhysicsDef -> J
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iMagicDef -> j
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iElemDef -> K
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iResistancePhysics -> k
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iResistanceMagic -> L
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iRaceHurt -> l
	System.Int32 [Client]System.Int32 Game.Msg.MsgServerRefreshCharData::m_iRaceDef -> M
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerRefreshCharData::m_uiPowerValue -> A
	System.UInt64 [Client]System.UInt64 Game.Msg.MsgServerRefreshCharData::m_ulSkillExp -> A
	System.Byte [Client]System.Byte Game.Msg.MsgServerRefreshCharData::m_btPhysicalPoint -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerRefreshCharData::m_uiPersonKillCount -> a
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerRefreshCharData::m_uiFriendHelpPoint -> B
}

[Client]Game.Msg.MsgServerAddPkTarget -> [Client]l.X
{
	[Client]Game.Msg.MsgServerAddPkTarget::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.MsgServerAddPkTarget::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.MsgServerAddPkTarget::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.MsgServerAddPkTarget::SubType -> A
	System.UInt16 [Client]System.UInt16 Game.Msg.MsgServerAddPkTarget::Type -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.MsgServerAddPkTarget::m_uiMonsterID -> A
}

[Client]Game.Msg.SCharEquipItem -> [Client]l.x
{
	[Client]Game.Msg.SCharEquipItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.SCharEquipItem::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.SCharEquipItem::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.Msg.SCharEquipItem::m_ebtPartID -> A
	Game.Msg.ClientSItemData [Client]Game.Msg.ClientSItemData Game.Msg.SCharEquipItem::m_stEquipData -> A
}

[Client]Game.Msg.ExpeditionShipData -> [Client]l.Y
{
	[Client]Game.Msg.ExpeditionShipData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.ExpeditionShipData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.ExpeditionShipData::.ctor[0]( ) skipped:  special name

	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionShipData::m_usID -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionShipData::m_btCurCabinNum -> A
	System.Collections.Generic.List`1<Game.Msg.ExpeditionShipMonsterData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionShipMonsterData> Game.Msg.ExpeditionShipData::m_oVecShipMonster -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionShipData::m_btAreaId -> a
	System.Byte [Client]System.Byte Game.Msg.ExpeditionShipData::m_btBlockId -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionShipData::m_usCombat -> a
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionShipData::m_usExplore -> B
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionShipData::m_usWisdom -> b
	System.UInt16 [Client]System.UInt16 Game.Msg.ExpeditionShipData::m_usTaskId -> C
	System.Boolean [Client]System.Boolean Game.Msg.ExpeditionShipData::m_bIsTaskDoing -> A
	System.UInt32 [Client]System.UInt32 Game.Msg.ExpeditionShipData::m_uiWorkStartTime -> A
	System.Byte [Client]System.Byte Game.Msg.ExpeditionShipData::m_btDefiniteTime -> b
}

[Client]Game.Msg.AwardItemData -> [Client]l.y
{
	[Client]Game.Msg.AwardItemData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.AwardItemData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.AwardItemData::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.Msg.AwardItemData::m_uiItemId -> A
	System.Byte [Client]System.Byte Game.Msg.AwardItemData::m_btNum -> A
}

[Client]Game.UserConfig -> [Client]l.Z
{
	[Client]Game.UserConfig::get_CustomStrings[0]( ) -> A
	[Client]Game.UserConfig::get_NoEffect[0]( ) -> a
	[Client]Game.UserConfig::set_NoEffect[1]( System.Boolean ) -> A
	[Client]Game.UserConfig::get_MuteMusic[0]( ) -> B
	[Client]Game.UserConfig::set_MuteMusic[1]( System.Boolean ) -> a
	[Client]Game.UserConfig::get_MuteSound[0]( ) -> b
	[Client]Game.UserConfig::set_MuteSound[1]( System.Boolean ) -> B
	[Client]Game.UserConfig::get_VisiblePlayerCount[0]( ) -> C
	[Client]Game.UserConfig::set_VisiblePlayerCount[1]( System.Int32 ) -> A
	[Client]Game.UserConfig::get_UnvisiblePlayer[0]( ) -> c
	[Client]Game.UserConfig::set_UnvisiblePlayer[1]( System.Boolean ) -> b
	[Client]Game.UserConfig::get_HideHeadInfo[0]( ) -> D
	[Client]Game.UserConfig::set_HideHeadInfo[1]( System.Boolean ) -> C
	[Client]Game.UserConfig::get_TypeMask[0]( ) -> d
	[Client]Game.UserConfig::set_TypeMask[1]( System.Int32 ) -> a
	[Client]Game.UserConfig::get_MaxEffectNum[0]( ) -> E
	[Client]Game.UserConfig::set_MaxEffectNum[1]( System.Int32 ) -> B
	[Client]Game.UserConfig::get_UIType[0]( ) -> e
	[Client]Game.UserConfig::set_UIType[1]( Game.UserConfig/UIShowType ) -> A
	[Client]Game.UserConfig::get_RestoreItemId[0]( ) -> F
	[Client]Game.UserConfig::set_RestoreItemId[1]( System.UInt32 ) -> A
	[Client]Game.UserConfig::get_IsSetChatBubble[0]( ) -> f
	[Client]Game.UserConfig::set_IsSetChatBubble[1]( System.Boolean ) -> c
	[Client]Game.UserConfig::get_UDID[0]( ) -> G
	[Client]Game.UserConfig::get_GotFare[0]( ) -> g
	[Client]Game.UserConfig::set_GotFare[1]( System.Boolean ) -> D
	[Client]Game.UserConfig::get_Instance[0]( ) -> H
	[Client]Game.UserConfig::SaveUserConfig[0]( ) -> h
	[Client]Game.UserConfig::LoadUserConfig[0]( ) -> I
	[Client]Game.UserConfig::SaveUserConfigToServer[0]( ) -> i
	[Client]Game.UserConfig::OnMsgServerUserConfig[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.UserConfig::SetCustomString[2]( System.Int32, System.String ) -> A
	[Client]Game.UserConfig::SetBestVisual[0]( ) -> J
	[Client]Game.UserConfig::IsBestVisual[0]( ) -> j
	[Client]Game.UserConfig::SetBestPerform[0]( ) -> K
	[Client]Game.UserConfig::IsBestPerform[0]( ) -> k

	[Client]Game.UserConfig::.ctor[0]( ) skipped:  special name
	[Client]Game.UserConfig::.cctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UserConfig::UserConfigFile -> A
	System.Int32 [Client]System.Int32 Game.UserConfig::MaxCustomString -> A
	System.Int32 [Client]System.Int32 Game.UserConfig::MaxVisiblePlayer -> a
	System.Int32 [Client]System.Int32 Game.UserConfig::MinVisiblePlayer -> B
	System.Int32 [Client]System.Int32 Game.UserConfig::BestVisualPlayerNum -> b
	log4net.ILog [Client]log4net.ILog Game.UserConfig::m_Log -> A
	System.String[] [Client]System.String[] Game.UserConfig::m_CustomStrings -> A
	System.Boolean [Client]System.Boolean Game.UserConfig::m_NoEffect -> A
	System.Boolean [Client]System.Boolean Game.UserConfig::m_HideHeadInfo -> a
	Game.UserConfig/UIShowType [Client]Game.UserConfig/UIShowType Game.UserConfig::m_UIType -> A
	System.UInt32 [Client]System.UInt32 Game.UserConfig::m_RestoreItemId -> A
	System.String [Client]System.String Game.UserConfig::m_UDID -> a
	System.Boolean [Client]System.Boolean Game.UserConfig::m_GotFare -> B
	Game.UserConfig [Client]Game.UserConfig Game.UserConfig::m_Instance -> A
	System.Boolean [Client]System.Boolean Game.UserConfig::<MuteMusic>k__BackingField -> b
	System.Boolean [Client]System.Boolean Game.UserConfig::<MuteSound>k__BackingField -> C
	System.Int32 [Client]System.Int32 Game.UserConfig::<VisiblePlayerCount>k__BackingField -> C
	System.Boolean [Client]System.Boolean Game.UserConfig::<UnvisiblePlayer>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.UserConfig::<TypeMask>k__BackingField -> c
	System.Int32 [Client]System.Int32 Game.UserConfig::<MaxEffectNum>k__BackingField -> D
	System.Boolean [Client]System.Boolean Game.UserConfig::<IsSetChatBubble>k__BackingField -> D

	System.String[] [Client]System.String[] Game.UserConfig::CustomStrings -> dropped
	System.Boolean [Client]System.Boolean Game.UserConfig::NoEffect -> dropped
	System.Boolean [Client]System.Boolean Game.UserConfig::MuteMusic -> dropped
	System.Boolean [Client]System.Boolean Game.UserConfig::MuteSound -> dropped
	System.Int32 [Client]System.Int32 Game.UserConfig::VisiblePlayerCount -> dropped
	System.Boolean [Client]System.Boolean Game.UserConfig::UnvisiblePlayer -> dropped
	System.Boolean [Client]System.Boolean Game.UserConfig::HideHeadInfo -> dropped
	System.Int32 [Client]System.Int32 Game.UserConfig::TypeMask -> dropped
	System.Int32 [Client]System.Int32 Game.UserConfig::MaxEffectNum -> dropped
	Game.UserConfig/UIShowType [Client]Game.UserConfig/UIShowType Game.UserConfig::UIType -> dropped
	System.UInt32 [Client]System.UInt32 Game.UserConfig::RestoreItemId -> dropped
	System.Boolean [Client]System.Boolean Game.UserConfig::IsSetChatBubble -> dropped
	System.String [Client]System.String Game.UserConfig::UDID -> dropped
	System.Boolean [Client]System.Boolean Game.UserConfig::GotFare -> dropped
	Game.UserConfig [Client]Game.UserConfig Game.UserConfig::Instance -> dropped
}

[Client]Game.UserConfig/OperationType -> [Client]l.Z/z
{
	Game.UserConfig/OperationType [Client]Game.UserConfig/OperationType Game.UserConfig/OperationType::Bar -> A
	Game.UserConfig/OperationType [Client]Game.UserConfig/OperationType Game.UserConfig/OperationType::Click -> a

	System.Int32 [Client]System.Int32 Game.UserConfig/OperationType::value__ skipped:  filtered
}

[Client]Game.UserConfig/UIShowType -> [Client]l.Z/A
{
	Game.UserConfig/UIShowType [Client]Game.UserConfig/UIShowType Game.UserConfig/UIShowType::Default -> A
	Game.UserConfig/UIShowType [Client]Game.UserConfig/UIShowType Game.UserConfig/UIShowType::Pad -> a
	Game.UserConfig/UIShowType [Client]Game.UserConfig/UIShowType Game.UserConfig/UIShowType::Phone -> B

	System.Int32 [Client]System.Int32 Game.UserConfig/UIShowType::value__ skipped:  filtered
}

[Client]Game.Data.UserHistory -> [Client]M.a
{
	[Client]Game.Data.UserHistory::get_UserName[0]( ) -> A
	[Client]Game.Data.UserHistory::set_UserName[1]( System.String ) -> A
	[Client]Game.Data.UserHistory::get_ServerName[0]( ) -> a
	[Client]Game.Data.UserHistory::set_ServerName[1]( System.String ) -> a
	[Client]Game.Data.UserHistory::get_AnnouncementVersion[0]( ) -> B
	[Client]Game.Data.UserHistory::set_AnnouncementVersion[1]( System.Int32 ) -> A
	[Client]Game.Data.UserHistory::get_HasPlayedCutScene[0]( ) -> b
	[Client]Game.Data.UserHistory::set_HasPlayedCutScene[1]( System.Int32 ) -> a
	[Client]Game.Data.UserHistory::get_Instance[0]( ) -> C
	[Client]Game.Data.UserHistory::Read[0]( ) -> c
	[Client]Game.Data.UserHistory::Write[0]( ) -> D

	[Client]Game.Data.UserHistory::.cctor[0]( ) skipped:  special name
	[Client]Game.Data.UserHistory::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.Data.UserHistory::m_FilePath -> A
	log4net.ILog [Client]log4net.ILog Game.Data.UserHistory::m_Log -> A
	Game.Data.UserHistory [Client]Game.Data.UserHistory Game.Data.UserHistory::m_Instance -> A
	System.String [Client]System.String Game.Data.UserHistory::<UserName>k__BackingField -> a
	System.String [Client]System.String Game.Data.UserHistory::<ServerName>k__BackingField -> B
	System.Int32 [Client]System.Int32 Game.Data.UserHistory::<AnnouncementVersion>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.Data.UserHistory::<HasPlayedCutScene>k__BackingField -> a

	System.String [Client]System.String Game.Data.UserHistory::UserName -> dropped
	System.String [Client]System.String Game.Data.UserHistory::ServerName -> dropped
	System.Int32 [Client]System.Int32 Game.Data.UserHistory::AnnouncementVersion -> dropped
	System.Int32 [Client]System.Int32 Game.Data.UserHistory::HasPlayedCutScene -> dropped
	Game.Data.UserHistory [Client]Game.Data.UserHistory Game.Data.UserHistory::Instance -> dropped
}

[Client]Game.DataRich -> [Client]M.B
{
	[Client]Game.DataRich::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataRich::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataRich::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataRich::get_ID[0]( ) -> A
	[Client]Game.DataRich::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataRich::get_Special[0]( ) -> a
	[Client]Game.DataRich::set_Special[1]( System.Int32 ) -> a
	[Client]Game.DataRich::get_ItemShow[0]( ) -> B
	[Client]Game.DataRich::set_ItemShow[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataRich::get_BossHp[0]( ) -> b
	[Client]Game.DataRich::set_BossHp[1]( System.Int32 ) -> B
	[Client]Game.DataRich::get_AwardDescription[0]( ) -> C
	[Client]Game.DataRich::set_AwardDescription[1]( System.String ) -> A
	[Client]Game.DataRich::get_EventDescription1[0]( ) -> c
	[Client]Game.DataRich::set_EventDescription1[1]( System.String ) -> a
	[Client]Game.DataRich::get_EventDescription2[0]( ) -> D
	[Client]Game.DataRich::set_EventDescription2[1]( System.String ) -> B
	[Client]Game.DataRich::get_EventDescription3[0]( ) -> d
	[Client]Game.DataRich::set_EventDescription3[1]( System.String ) -> b

	[Client]Game.DataRich::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataRich::<ID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataRich::<Special>k__BackingField -> a
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataRich::<ItemShow>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataRich::<BossHp>k__BackingField -> B
	System.String [Client]System.String Game.DataRich::<AwardDescription>k__BackingField -> A
	System.String [Client]System.String Game.DataRich::<EventDescription1>k__BackingField -> a
	System.String [Client]System.String Game.DataRich::<EventDescription2>k__BackingField -> B
	System.String [Client]System.String Game.DataRich::<EventDescription3>k__BackingField -> b

	System.Int32 [Client]System.Int32 Game.DataRich::ID -> dropped
	System.Int32 [Client]System.Int32 Game.DataRich::Special -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.DataRich::ItemShow -> dropped
	System.Int32 [Client]System.Int32 Game.DataRich::BossHp -> dropped
	System.String [Client]System.String Game.DataRich::AwardDescription -> dropped
	System.String [Client]System.String Game.DataRich::EventDescription1 -> dropped
	System.String [Client]System.String Game.DataRich::EventDescription2 -> dropped
	System.String [Client]System.String Game.DataRich::EventDescription3 -> dropped
}

[Client]Game.DataRichManager -> [Client]M.b
{
	[Client]Game.DataRichManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataRichManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataRichManager::Clear[0]( ) -> A
	[Client]Game.DataRichManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataRichManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataRichManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataRichManager::GetDataBySpecial[1]( System.Int32 ) -> B
	[Client]Game.DataRichManager::GetDataListBySpecial[1]( System.Int32 ) -> b
	[Client]Game.DataRichManager::GetDataByItemShow[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.DataRichManager::GetDataListByItemShow[1]( System.Collections.Generic.List`1<System.Int32> ) -> a
	[Client]Game.DataRichManager::GetDataByBossHp[1]( System.Int32 ) -> C
	[Client]Game.DataRichManager::GetDataListByBossHp[1]( System.Int32 ) -> c
	[Client]Game.DataRichManager::GetDataByAwardDescription[1]( System.String ) -> A
	[Client]Game.DataRichManager::GetDataListByAwardDescription[1]( System.String ) -> a
	[Client]Game.DataRichManager::GetDataByEventDescription1[1]( System.String ) -> B
	[Client]Game.DataRichManager::GetDataListByEventDescription1[1]( System.String ) -> b
	[Client]Game.DataRichManager::GetDataByEventDescription2[1]( System.String ) -> C
	[Client]Game.DataRichManager::GetDataListByEventDescription2[1]( System.String ) -> c
	[Client]Game.DataRichManager::GetDataByEventDescription3[1]( System.String ) -> D
	[Client]Game.DataRichManager::GetDataListByEventDescription3[1]( System.String ) -> d
	[Client]Game.DataRichManager::get_Instance[0]( ) -> a
	[Client]Game.DataRichManager::get_DataList[0]( ) -> B
	[Client]Game.DataRichManager::get_Count[0]( ) -> b

	[Client]Game.DataRichManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataRichManager::.ctor[0]( ) skipped:  special name

	Game.DataRichManager [Client]Game.DataRichManager Game.DataRichManager::instance -> A
	System.Collections.Generic.List`1<Game.DataRich> [Client]System.Collections.Generic.List`1<Game.DataRich> Game.DataRichManager::dataList -> A

	Game.DataRichManager [Client]Game.DataRichManager Game.DataRichManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataRich> [Client]System.Collections.Generic.List`1<Game.DataRich> Game.DataRichManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataRichManager::Count -> dropped
}

[Client]Game.DataGoldItem -> [Client]M.C
{
	[Client]Game.DataGoldItem::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataGoldItem::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataGoldItem::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataGoldItem::get_ID[0]( ) -> A
	[Client]Game.DataGoldItem::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataGoldItem::get_Index[0]( ) -> a
	[Client]Game.DataGoldItem::set_Index[1]( System.String ) -> A
	[Client]Game.DataGoldItem::get_Price[0]( ) -> B
	[Client]Game.DataGoldItem::set_Price[1]( System.Int32 ) -> a

	[Client]Game.DataGoldItem::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataGoldItem::<ID>k__BackingField -> A
	System.String [Client]System.String Game.DataGoldItem::<Index>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataGoldItem::<Price>k__BackingField -> a

	System.Int32 [Client]System.Int32 Game.DataGoldItem::ID -> dropped
	System.String [Client]System.String Game.DataGoldItem::Index -> dropped
	System.Int32 [Client]System.Int32 Game.DataGoldItem::Price -> dropped
}

[Client]Game.DataGoldItemManager -> [Client]M.c
{
	[Client]Game.DataGoldItemManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataGoldItemManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataGoldItemManager::Clear[0]( ) -> A
	[Client]Game.DataGoldItemManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataGoldItemManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataGoldItemManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataGoldItemManager::GetDataByIndex[1]( System.String ) -> A
	[Client]Game.DataGoldItemManager::GetDataListByIndex[1]( System.String ) -> a
	[Client]Game.DataGoldItemManager::GetDataByPrice[1]( System.Int32 ) -> B
	[Client]Game.DataGoldItemManager::GetDataListByPrice[1]( System.Int32 ) -> b
	[Client]Game.DataGoldItemManager::get_Instance[0]( ) -> a
	[Client]Game.DataGoldItemManager::get_DataList[0]( ) -> B
	[Client]Game.DataGoldItemManager::get_Count[0]( ) -> b

	[Client]Game.DataGoldItemManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataGoldItemManager::.ctor[0]( ) skipped:  special name

	Game.DataGoldItemManager [Client]Game.DataGoldItemManager Game.DataGoldItemManager::instance -> A
	System.Collections.Generic.List`1<Game.DataGoldItem> [Client]System.Collections.Generic.List`1<Game.DataGoldItem> Game.DataGoldItemManager::dataList -> A

	Game.DataGoldItemManager [Client]Game.DataGoldItemManager Game.DataGoldItemManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataGoldItem> [Client]System.Collections.Generic.List`1<Game.DataGoldItem> Game.DataGoldItemManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataGoldItemManager::Count -> dropped
}

[Client]Game.DataCharm -> [Client]M.D
{
	[Client]Game.DataCharm::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataCharm::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataCharm::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataCharm::get_ID[0]( ) -> A
	[Client]Game.DataCharm::set_ID[1]( System.Int32 ) -> A
	[Client]Game.DataCharm::get_CharmLevel[0]( ) -> a
	[Client]Game.DataCharm::set_CharmLevel[1]( System.Int32 ) -> a
	[Client]Game.DataCharm::get_CharmType[0]( ) -> B
	[Client]Game.DataCharm::set_CharmType[1]( System.Int32 ) -> B

	[Client]Game.DataCharm::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.DataCharm::<ID>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.DataCharm::<CharmLevel>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.DataCharm::<CharmType>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.DataCharm::ID -> dropped
	System.Int32 [Client]System.Int32 Game.DataCharm::CharmLevel -> dropped
	System.Int32 [Client]System.Int32 Game.DataCharm::CharmType -> dropped
}

[Client]Game.DataCharmManager -> [Client]M.d
{
	[Client]Game.DataCharmManager::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.DataCharmManager::Deserialize[1]( Game.DynamicPacket ) -> a
	[Client]Game.DataCharmManager::Clear[0]( ) -> A
	[Client]Game.DataCharmManager::CorrectString[1]( Game.StringFileReader ) -> A
	[Client]Game.DataCharmManager::GetDataByID[1]( System.Int32 ) -> A
	[Client]Game.DataCharmManager::GetDataListByID[1]( System.Int32 ) -> a
	[Client]Game.DataCharmManager::GetDataByCharmLevel[1]( System.Int32 ) -> B
	[Client]Game.DataCharmManager::GetDataListByCharmLevel[1]( System.Int32 ) -> b
	[Client]Game.DataCharmManager::GetDataByCharmType[1]( System.Int32 ) -> C
	[Client]Game.DataCharmManager::GetDataListByCharmType[1]( System.Int32 ) -> c
	[Client]Game.DataCharmManager::get_Instance[0]( ) -> a
	[Client]Game.DataCharmManager::get_DataList[0]( ) -> B
	[Client]Game.DataCharmManager::get_Count[0]( ) -> b

	[Client]Game.DataCharmManager::.cctor[0]( ) skipped:  special name
	[Client]Game.DataCharmManager::.ctor[0]( ) skipped:  special name

	Game.DataCharmManager [Client]Game.DataCharmManager Game.DataCharmManager::instance -> A
	System.Collections.Generic.List`1<Game.DataCharm> [Client]System.Collections.Generic.List`1<Game.DataCharm> Game.DataCharmManager::dataList -> A

	Game.DataCharmManager [Client]Game.DataCharmManager Game.DataCharmManager::Instance -> dropped
	System.Collections.Generic.List`1<Game.DataCharm> [Client]System.Collections.Generic.List`1<Game.DataCharm> Game.DataCharmManager::DataList -> dropped
	System.Int32 [Client]System.Int32 Game.DataCharmManager::Count -> dropped
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6} -> [Client]M.E
{
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=1024 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=1024 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003844-1 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=116 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=116 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600384b-1 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=116 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=116 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600384b-2 -> a
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=120 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=120 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600384b-3 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=120 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=120 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600384b-4 -> a
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600384c-1 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600384c-2 -> a
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600384c-3 -> B
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600384c-4 -> b
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600384c-5 -> C
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6000b9d-1 -> A
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6000d98-1 -> a
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6000fef-1 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6001385-1 -> a
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003867-1 -> B
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600163e-1 -> B
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6001936-1 -> b
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=10 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=10 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6001997-1 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=32 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=32 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6001a69-1 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=6 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=6 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003896-1 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=6 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=6 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003896-2 -> a
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60023ee-1 -> b
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600389f-1 -> C
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600389f-2 -> c
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=76 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=76 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600389f-3 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=84 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=84 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60038a1-1 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=84 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=84 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60038a1-2 -> a
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=84 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=84 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60038a1-3 -> B
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=76 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=76 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6002b7d-1 -> a
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=16 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6002b7d-2 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=1024 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=1024 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60038a5-1 -> a
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003035-1 -> C
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003035-2 -> c
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003035-3 -> D
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003035-4 -> d
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600304d-1 -> E
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x600304d-2 -> e
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=56 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=56 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003358-1 -> A
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=2048 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=2048 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60038ab-1 -> A
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003504-1 -> F
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x6003505-1 -> f
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=16 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=16 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60038af-1 -> a
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60038af-2 -> D
	<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 [Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60038af-3 -> d
	System.Collections.Generic.Dictionary`2<System.String,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Int32> <PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}::$$method0x60037cd-1 -> G
}

[Client]ICSharpCode.SharpZipLib.Checksums.IChecksum -> [Client]A.E
{
	[Client]ICSharpCode.SharpZipLib.Checksums.IChecksum::get_Value[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.IChecksum::Reset[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Checksums.IChecksum::Update[1]( System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.IChecksum::Update[1]( System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Checksums.IChecksum::Update[3]( System.Byte[], System.Int32, System.Int32 ) -> A

	System.Int64 [Client]System.Int64 ICSharpCode.SharpZipLib.Checksums.IChecksum::Value -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.IArchiveStorage -> [Client]a.Z
{
	[Client]ICSharpCode.SharpZipLib.Zip.IArchiveStorage::get_UpdateMode[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.IArchiveStorage::GetTemporaryOutput[0]( ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.IArchiveStorage::ConvertTemporaryToFinal[0]( ) -> B
	[Client]ICSharpCode.SharpZipLib.Zip.IArchiveStorage::MakeTemporaryCopy[1]( System.IO.Stream ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.IArchiveStorage::OpenForDirectUpdate[1]( System.IO.Stream ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.IArchiveStorage::Dispose[0]( ) -> b

	ICSharpCode.SharpZipLib.Zip.FileUpdateMode [Client]ICSharpCode.SharpZipLib.Zip.FileUpdateMode ICSharpCode.SharpZipLib.Zip.IArchiveStorage::UpdateMode -> dropped
}

[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform -> [Client]c.f
{

	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::Dispose[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::TransformBlock[5]( System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::TransformFinalBlock[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::get_InputBlockSize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::get_OutputBlockSize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::get_CanTransformMultipleBlocks[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::get_CanReuseTransform[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::.ctor[1]( System.Byte[] ) skipped:  special name

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::CanReuseTransform -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::InputBlockSize -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::OutputBlockSize -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform::CanTransformMultipleBlocks -> dropped
}

[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform -> [Client]c.G
{

	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::Dispose[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::TransformBlock[5]( System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::TransformFinalBlock[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::get_InputBlockSize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::get_OutputBlockSize[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::get_CanTransformMultipleBlocks[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::get_CanReuseTransform[0]( ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::.ctor[1]( System.Byte[] ) skipped:  special name

	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::CanReuseTransform -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::InputBlockSize -> dropped
	System.Int32 [Client]System.Int32 ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::OutputBlockSize -> dropped
	System.Boolean [Client]System.Boolean ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform::CanTransformMultipleBlocks -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory -> [Client]i.B
{
	[Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory::MakeFileEntry[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory::MakeFileEntry[2]( System.String, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory::MakeDirectoryEntry[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory::MakeDirectoryEntry[2]( System.String, System.Boolean ) -> a
	[Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory::get_NameTransform[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.IEntryFactory::set_NameTransform[1]( ICSharpCode.SharpZipLib.Core.INameTransform ) -> A

	ICSharpCode.SharpZipLib.Core.INameTransform [Client]ICSharpCode.SharpZipLib.Core.INameTransform ICSharpCode.SharpZipLib.Zip.IEntryFactory::NameTransform -> dropped
}

[Client]ICSharpCode.SharpZipLib.Zip.ITaggedData -> [Client]J.S
{
	[Client]ICSharpCode.SharpZipLib.Zip.ITaggedData::get_TagID[0]( ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ITaggedData::SetData[3]( System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Zip.ITaggedData::GetData[0]( ) -> a

	System.Int16 [Client]System.Int16 ICSharpCode.SharpZipLib.Zip.ITaggedData::TagID -> dropped
}

[Client]ICSharpCode.SharpZipLib.SharpZipBaseException -> [Client]A.D
{

	[Client]ICSharpCode.SharpZipLib.SharpZipBaseException::.ctor[2]( System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.SharpZipBaseException::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.SharpZipBaseException::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.SharpZipBaseException::.ctor[2]( System.String, System.Exception ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.GZip.GZipException -> [Client]A.d
{

	[Client]ICSharpCode.SharpZipLib.GZip.GZipException::.ctor[2]( System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.GZip.GZipException::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.GZip.GZipException::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.GZip.GZipException::.ctor[2]( System.String, System.Exception ) skipped:  special name
}

[Client]Game.Platform.Win.CustomInterface -> [Client]l.I
{
	[Client]Game.Platform.Win.CustomInterface::Init[0]( ) -> A
	[Client]Game.Platform.Win.CustomInterface::Release[0]( ) -> a
	[Client]Game.Platform.Win.CustomInterface::GetPath[1]( System.String ) -> A
	[Client]Game.Platform.Win.CustomInterface::GetBundlePath[1]( System.String ) -> a
	[Client]Game.Platform.Win.CustomInterface::GetWritePath[1]( System.String ) -> B
	[Client]Game.Platform.Win.CustomInterface::OpenUrl[1]( System.String ) -> C

	[Client]Game.Platform.Win.CustomInterface::.ctor[0]( ) skipped:  special name
}

[Client]Game.IDynamicData -> [Client]A.i
{
	[Client]Game.IDynamicData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.IDynamicData::Deserialize[1]( Game.DynamicPacket ) -> a
}

[Client]Game.Msg.NullData -> [Client]I.G
{
	[Client]Game.Msg.NullData::Serialize[1]( Game.DynamicPacket ) -> A
	[Client]Game.Msg.NullData::Deserialize[1]( Game.DynamicPacket ) -> a

	[Client]Game.Msg.NullData::.ctor[0]( ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.Core.INameTransform -> [Client]a.O
{
	[Client]ICSharpCode.SharpZipLib.Core.INameTransform::TransformFile[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.INameTransform::TransformDirectory[1]( System.String ) -> a
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler -> [Client]a.R
{

	[Client]ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler::Invoke[2]( ICSharpCode.SharpZipLib.Zip.TestStatus, System.String ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler::BeginInvoke[4]( ICSharpCode.SharpZipLib.Zip.TestStatus, System.String, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.ZipTestResultHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/KeysRequiredEventHandler -> [Client]a.S/s
{

	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/KeysRequiredEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/KeysRequiredEventHandler::Invoke[2]( System.Object, ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/KeysRequiredEventHandler::BeginInvoke[4]( System.Object, ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/KeysRequiredEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateComparer -> [Client]a.S/U
{

	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateComparer::Compare[2]( System.Object, System.Object ) skipped:  external base class or interface
	[Client]ICSharpCode.SharpZipLib.Zip.ZipFile/UpdateComparer::.ctor[0]( ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.Zip.IStaticDataSource -> [Client]a.X
{
	[Client]ICSharpCode.SharpZipLib.Zip.IStaticDataSource::GetSource[0]( ) -> A
}

[Client]ICSharpCode.SharpZipLib.Zip.IDynamicDataSource -> [Client]a.x
{
	[Client]ICSharpCode.SharpZipLib.Zip.IDynamicDataSource::GetSource[2]( ICSharpCode.SharpZipLib.Zip.ZipEntry, System.String ) -> A
}

[Client]ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource -> [Client]a.y
{
	[Client]ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource::GetSource[2]( ICSharpCode.SharpZipLib.Zip.ZipEntry, System.String ) -> A

	[Client]ICSharpCode.SharpZipLib.Zip.DynamicDiskDataSource::.ctor[0]( ) skipped:  special name
}

[Client]Game.Character/OnObjectLoadedEventHandler -> [Client]B.F/f
{

	[Client]Game.Character/OnObjectLoadedEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]Game.Character/OnObjectLoadedEventHandler::Invoke[1]( Game.Character ) skipped:  runtime method
	[Client]Game.Character/OnObjectLoadedEventHandler::BeginInvoke[3]( Game.Character, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]Game.Character/OnObjectLoadedEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]Game.GestureRecognizer/EventDelegate`1 -> [Client]B.X/x`1
{

	[Client]Game.GestureRecognizer/EventDelegate`1::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]Game.GestureRecognizer/EventDelegate`1::Invoke[1]( !0 ) skipped:  runtime method
	[Client]Game.GestureRecognizer/EventDelegate`1::BeginInvoke[3]( !0, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]Game.GestureRecognizer/EventDelegate`1::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream/ReadDataHandler -> [Client]b.f/G
{

	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream/ReadDataHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream/ReadDataHandler::Invoke[3]( System.Byte[], System.Int32, System.Int32 ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream/ReadDataHandler::BeginInvoke[5]( System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.ZipInputStream/ReadDataHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Core.IScanFilter -> [Client]C.b
{
	[Client]ICSharpCode.SharpZipLib.Core.IScanFilter::IsMatch[1]( System.String ) -> A
}

[Client]ZipFile -> [Client]c.C
{
	[Client]ZipFile::Zip[1]( System.String[] ) -> A
	[Client]ZipFile::Zip[2]( System.Int32, System.String[] ) -> A
	[Client]ZipFile::Zip[3]( System.String, System.Int32, System.String[] ) -> A
	[Client]ZipFile::Zip[4]( System.String, System.String, System.Int32, System.String[] ) -> A
	[Client]ZipFile::ZipDirectory[1]( System.String ) -> A
	[Client]ZipFile::ZipDirectory[2]( System.String, System.Int32 ) -> A
	[Client]ZipFile::GetDirectoryFile[2]( System.String, System.Collections.ArrayList ) -> A
	[Client]ZipFile::UnZipFile[2]( ZipFile/UnzipType, System.String ) -> A
	[Client]ZipFile::UnZip[2]( ZipFile/UnzipType, System.String[] ) -> A
	[Client]ZipFile::UnZip[1]( System.String[] ) -> a

	[Client]ZipFile::.ctor[0]( ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler -> [Client]c.D
{

	[Client]ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler::Invoke[3]( ICSharpCode.SharpZipLib.Tar.TarArchive, ICSharpCode.SharpZipLib.Tar.TarEntry, System.String ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler::BeginInvoke[5]( ICSharpCode.SharpZipLib.Tar.TarArchive, ICSharpCode.SharpZipLib.Tar.TarEntry, System.String, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassic -> [Client]c.e
{
	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassic::GenerateKeys[1]( System.Byte[] ) -> A

	[Client]ICSharpCode.SharpZipLib.Encryption.PkzipClassic::.ctor[0]( ) skipped:  special name
}

[Client]Game.ItemManager/SetProperty -> [Client]c.s/T
{

	[Client]Game.ItemManager/SetProperty::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]Game.ItemManager/SetProperty::Invoke[2]( System.String, System.Single ) skipped:  runtime method
	[Client]Game.ItemManager/SetProperty::BeginInvoke[4]( System.String, System.Single, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]Game.ItemManager/SetProperty::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]Game.TimerEventHandler -> [Client]D.A
{

	[Client]Game.TimerEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]Game.TimerEventHandler::Invoke[1]( System.UInt32 ) skipped:  runtime method
	[Client]Game.TimerEventHandler::BeginInvoke[3]( System.UInt32, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]Game.TimerEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Core.StreamUtils -> [Client]D.c
{
	[Client]ICSharpCode.SharpZipLib.Core.StreamUtils::ReadFully[2]( System.IO.Stream, System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.StreamUtils::ReadFully[4]( System.IO.Stream, System.Byte[], System.Int32, System.Int32 ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.StreamUtils::Copy[3]( System.IO.Stream, System.IO.Stream, System.Byte[] ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.StreamUtils::Copy[7]( System.IO.Stream, System.IO.Stream, System.Byte[], ICSharpCode.SharpZipLib.Core.ProgressHandler, System.TimeSpan, System.Object, System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Core.StreamUtils::Copy[8]( System.IO.Stream, System.IO.Stream, System.Byte[], ICSharpCode.SharpZipLib.Core.ProgressHandler, System.TimeSpan, System.Object, System.String, System.Int64 ) -> A

	[Client]ICSharpCode.SharpZipLib.Core.StreamUtils::.ctor[0]( ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler -> [Client]D.F
{

	[Client]ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler::Invoke[2]( System.Object, ICSharpCode.SharpZipLib.Core.DirectoryEventArgs ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler::BeginInvoke[4]( System.Object, ICSharpCode.SharpZipLib.Core.DirectoryEventArgs, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.ProcessDirectoryHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Core.ProcessFileHandler -> [Client]D.f
{

	[Client]ICSharpCode.SharpZipLib.Core.ProcessFileHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.ProcessFileHandler::Invoke[2]( System.Object, ICSharpCode.SharpZipLib.Core.ScanEventArgs ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.ProcessFileHandler::BeginInvoke[4]( System.Object, ICSharpCode.SharpZipLib.Core.ScanEventArgs, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.ProcessFileHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Core.ProgressHandler -> [Client]D.G
{

	[Client]ICSharpCode.SharpZipLib.Core.ProgressHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.ProgressHandler::Invoke[2]( System.Object, ICSharpCode.SharpZipLib.Core.ProgressEventArgs ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.ProgressHandler::BeginInvoke[4]( System.Object, ICSharpCode.SharpZipLib.Core.ProgressEventArgs, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.ProgressHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Core.CompletedFileHandler -> [Client]D.g
{

	[Client]ICSharpCode.SharpZipLib.Core.CompletedFileHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.CompletedFileHandler::Invoke[2]( System.Object, ICSharpCode.SharpZipLib.Core.ScanEventArgs ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.CompletedFileHandler::BeginInvoke[4]( System.Object, ICSharpCode.SharpZipLib.Core.ScanEventArgs, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.CompletedFileHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler -> [Client]D.H
{

	[Client]ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler::Invoke[2]( System.Object, ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler::BeginInvoke[4]( System.Object, ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Core.FileFailureHandler -> [Client]D.h
{

	[Client]ICSharpCode.SharpZipLib.Core.FileFailureHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.FileFailureHandler::Invoke[2]( System.Object, ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.FileFailureHandler::BeginInvoke[4]( System.Object, ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Core.FileFailureHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/IEntryFactory -> [Client]E.h/I
{
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/IEntryFactory::CreateEntry[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/IEntryFactory::CreateEntryFromFile[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/IEntryFactory::CreateEntry[1]( System.Byte[] ) -> A
}

[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/EntryFactoryAdapter -> [Client]E.h/i
{
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/EntryFactoryAdapter::CreateEntry[1]( System.String ) -> A
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/EntryFactoryAdapter::CreateEntryFromFile[1]( System.String ) -> a
	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/EntryFactoryAdapter::CreateEntry[1]( System.Byte[] ) -> A

	[Client]ICSharpCode.SharpZipLib.Tar.TarInputStream/EntryFactoryAdapter::.ctor[0]( ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.Tar.TarException -> [Client]E.J
{

	[Client]ICSharpCode.SharpZipLib.Tar.TarException::.ctor[2]( System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarException::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarException::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.TarException::.ctor[2]( System.String, System.Exception ) skipped:  special name
}

[Client]Game.ResourceLoader -> [Client]E.l
{

	[Client]Game.ResourceLoader::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]Game.ResourceLoader::Invoke[0]( ) skipped:  runtime method
	[Client]Game.ResourceLoader::BeginInvoke[2]( System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]Game.ResourceLoader::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]Game.JumpWork -> [Client]e.k
{
	[Client]Game.JumpWork::GetWorkType[0]( ) -> A
	[Client]Game.JumpWork::OnStart[0]( ) -> B
	[Client]Game.JumpWork::OnEnd[0]( ) -> b
	[Client]Game.JumpWork::OnUpdate[0]( ) -> C

	[Client]Game.JumpWork::.ctor[0]( ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.LZW.LzwException -> [Client]e.o
{

	[Client]ICSharpCode.SharpZipLib.LZW.LzwException::.ctor[2]( System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.LZW.LzwException::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.LZW.LzwException::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.LZW.LzwException::.ctor[2]( System.String, System.Exception ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.Core.WindowsPathUtils -> [Client]e.P
{
	[Client]ICSharpCode.SharpZipLib.Core.WindowsPathUtils::DropPathRoot[1]( System.String ) -> A

	[Client]ICSharpCode.SharpZipLib.Core.WindowsPathUtils::.ctor[0]( ) skipped:  special name
}

[Client]Game.Msg.MsgCommon -> [Client]F.g
{
	[Client]Game.Msg.MsgCommon::GetLength[0]( ) -> A
	[Client]Game.Msg.MsgCommon::SetLength[1]( System.UInt32 ) -> A
	[Client]Game.Msg.MsgCommon::GetHeaderLength[0]( ) -> a
	[Client]Game.Msg.MsgCommon::GetDataLength[0]( ) -> B
	[Client]Game.Msg.MsgCommon::GetMsgType[0]( ) -> b
	[Client]Game.Msg.MsgCommon::SetMsgType[1]( System.UInt16 ) -> A
}

[Client]Game.Common.XMath -> [Client]F.s
{
	[Client]Game.Common.XMath::ColorToInt[1]( UnityEngine.Color ) -> A
	[Client]Game.Common.XMath::IntToColor[1]( System.Int32 ) -> A
	[Client]Game.Common.XMath::DecimalToHex[1]( System.Int32 ) -> a

	[Client]Game.Common.XMath::.ctor[0]( ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending -> [Client]F.X
{

	[Client]ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending::.ctor[0]( ) skipped:  special name
}

[Client]Game.ReliveEvent -> [Client]H.R
{
	[Client]Game.ReliveEvent::OnEvent[0]( ) -> A

	[Client]Game.ReliveEvent::.ctor[0]( ) skipped:  special name
}

[Client]Game.JumpEvent -> [Client]H.Q
{
	[Client]Game.JumpEvent::OnEvent[0]( ) -> A

	[Client]Game.JumpEvent::.ctor[0]( ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.Zip.FastZip/ConfirmOverwriteDelegate -> [Client]H.x/y
{

	[Client]ICSharpCode.SharpZipLib.Zip.FastZip/ConfirmOverwriteDelegate::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip/ConfirmOverwriteDelegate::Invoke[1]( System.String ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip/ConfirmOverwriteDelegate::BeginInvoke[3]( System.String, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]ICSharpCode.SharpZipLib.Zip.FastZip/ConfirmOverwriteDelegate::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]Game.SortOnFvalue -> [Client]J.R
{

	[Client]Game.SortOnFvalue::Compare[2]( Game.NodeSearch, Game.NodeSearch ) skipped:  external base class or interface
	[Client]Game.SortOnFvalue::.ctor[0]( ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.Zip.ITaggedDataFactory -> [Client]J.u
{
	[Client]ICSharpCode.SharpZipLib.Zip.ITaggedDataFactory::Create[4]( System.Int16, System.Byte[], System.Int32, System.Int32 ) -> A
}

[Client]ICSharpCode.SharpZipLib.Tar.InvalidHeaderException -> [Client]J.X
{

	[Client]ICSharpCode.SharpZipLib.Tar.InvalidHeaderException::.ctor[2]( System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.InvalidHeaderException::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.InvalidHeaderException::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Tar.InvalidHeaderException::.ctor[2]( System.String, System.Exception ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.BZip2.BZip2Exception -> [Client]J.Z
{

	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2Exception::.ctor[2]( System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2Exception::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2Exception::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2Exception::.ctor[2]( System.String, System.Exception ) skipped:  special name
}

[Client]ICSharpCode.SharpZipLib.BZip2.BZip2 -> [Client]J.z
{
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2::Decompress[3]( System.IO.Stream, System.IO.Stream, System.Boolean ) -> A
	[Client]ICSharpCode.SharpZipLib.BZip2.BZip2::Compress[4]( System.IO.Stream, System.IO.Stream, System.Boolean, System.Int32 ) -> A
}

[Client]Game.FixedTimer -> [Client]k.o
{

	[Client]Game.FixedTimer::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]Game.FixedTimer::Invoke[0]( ) skipped:  runtime method
	[Client]Game.FixedTimer::BeginInvoke[2]( System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]Game.FixedTimer::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]ICSharpCode.SharpZipLib.Zip.ZipException -> [Client]l.H
{

	[Client]ICSharpCode.SharpZipLib.Zip.ZipException::.ctor[2]( System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipException::.ctor[0]( ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipException::.ctor[1]( System.String ) skipped:  special name
	[Client]ICSharpCode.SharpZipLib.Zip.ZipException::.ctor[2]( System.String, System.Exception ) skipped:  special name
}

[Client]Game.Platform.Android.CustomInterface -> [Client]l.i
{

	[Client]Game.Platform.Android.CustomInterface::.ctor[0]( ) skipped:  special name
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=1024 -> [Client]M.E/e
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=116 -> [Client]M.E/F
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=120 -> [Client]M.E/f
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=40 -> [Client]M.E/G
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=12 -> [Client]M.E/g
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=10 -> [Client]M.E/H
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=32 -> [Client]M.E/h
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=6 -> [Client]M.E/I
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=76 -> [Client]M.E/i
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=84 -> [Client]M.E/J
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=16 -> [Client]M.E/j
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=56 -> [Client]M.E/K
{
}

[Client]<PrivateImplementationDetails>{A1DD5E2C-945F-4899-A417-9EB1E89184A6}/__StaticArrayInitTypeSize=2048 -> [Client]M.E/k
{
}

Skipped Types:

[Client]Game.UI.DlgBase`2 skipped:  filtered
{
	[Client]Game.UI.DlgBase`2::get_uiBehaviour[0]( ) -> e
	[Client]Game.UI.DlgBase`2::set_layer[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgBase`2::get_IsBundle[0]( ) -> A
	[Client]Game.UI.DlgBase`2::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgBase`2::Refresh[0]( ) -> B
	[Client]Game.UI.DlgBase`2::OnShow[0]( ) -> b
	[Client]Game.UI.DlgBase`2::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgBase`2::Init[0]( ) -> c
	[Client]Game.UI.DlgBase`2::InnerInit[0]( ) -> F
	[Client]Game.UI.DlgBase`2::LoadResource[1]( System.String ) -> A
	[Client]Game.UI.DlgBase`2::OnLoadUIFinishedEventHandler[1]( UnityEngine.Object ) -> A
	[Client]Game.UI.DlgBase`2::InstantiateUI[1]( UnityEngine.Object ) -> a
	[Client]Game.UI.DlgBase`2::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgBase`2::OnLateUpdate[0]( ) -> d
	[Client]Game.UI.DlgBase`2::Update[0]( ) -> E

	[Client]Game.UI.DlgBase`2::get_uiBehaviourInterface[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::get_LayerNew[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::get_Prepared[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::Load[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::UnLoad[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::IsVisible[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::SetDepthZ[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::BindReverse[1]( Game.UI.UICommon.IXUIPanel ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::_Update[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::LateUpdate[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::IsMouseIn[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::_Init[1]( Game.UI.UICommon.XUIPanel ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::get_singleton[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBase`2::.ctor[0]( ) skipped:  special name
	[Client]Game.UI.DlgBase`2::.cctor[0]( ) skipped:  special name

	log4net.ILog [Client]log4net.ILog Game.UI.DlgBase`2::m_Log -> A
	TUIBehaviour [Client]TUIBehaviour Game.UI.DlgBase`2::m_uiBehaviour -> A
	TDlgClass [Client]TDlgClass Game.UI.DlgBase`2::s_instance -> A
	System.Object [Client]System.Object Game.UI.DlgBase`2::s_objLock -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgBase`2::m_bVisible -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgBase`2::m_bLoaded -> a
	System.Single [Client]System.Single Game.UI.DlgBase`2::m_fDepthZ -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgBase`2::m_bNeedRefresh -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgBase`2::m_nLayer -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgBase`2::m_unLoadTaskId -> A

	Game.UI.UICommon.IXUIPanel [Client]Game.UI.UICommon.IXUIPanel Game.UI.DlgBase`2::uiBehaviourInterface -> dropped
	TUIBehaviour [Client]TUIBehaviour Game.UI.DlgBase`2::uiBehaviour -> dropped
	System.String [Client]System.String Game.UI.DlgBase`2::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgBase`2::layer -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgBase`2::LayerNew -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgBase`2::IsBundle -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgBase`2::Persist -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgBase`2::Cleanup -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgBase`2::Prepared -> dropped

	TDlgClass [Client]TDlgClass Game.UI.DlgBase`2::singleton skipped:  filtered
}

[Client]Game.UI.DlgShortcutButtonPhone skipped:  filtered
{
	[Client]Game.UI.DlgShortcutButtonPhone::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShortcutButtonPhone::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShortcutButtonPhone::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShortcutButtonPhone::AddItem[1]( System.UInt64 ) -> A
	[Client]Game.UI.DlgShortcutButtonPhone::SetSkill[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgShortcutButtonPhone::OnEquipButtonClickHandler[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgShortcutButtonPhone::OnImageButton_EquipClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShortcutButtonPhone::OnImageButton_SkillClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgShortcutButtonPhone::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShortcutButtonPhone::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgShortcutButtonPhone::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShortcutButtonPhone::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgShortcutButtonPhone::SkillNoviceId -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgShortcutButtonPhone::m_SkillId -> A
	System.Collections.Generic.Stack`1<System.UInt64> [Client]System.Collections.Generic.Stack`1<System.UInt64> Game.UI.DlgShortcutButtonPhone::m_ItemIds -> A

	System.String [Client]System.String Game.UI.DlgShortcutButtonPhone::fileName -> dropped
}

[Client]Game.UI.DlgShopNPC skipped:  filtered
{
	[Client]Game.UI.DlgShopNPC::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShopNPC::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShopNPC::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShopNPC::Show[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgShopNPC::OnGroup_KindSelected[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgShopNPC::OnItemListClick[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgShopNPC::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShopNPC::OnButton_OKClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShopNPC::OnButton_PreClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgShopNPC::OnButton_NextClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgShopNPC::OnTexture_MoneyClick[1]( Game.UI.UICommon.IXUIPicture ) -> A
	[Client]Game.UI.DlgShopNPC::GetMaxIndex[0]( ) -> e

	[Client]Game.UI.DlgShopNPC::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShopNPC::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgShopNPC::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShopNPC::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgShopNPC::MaxShowItemNumPerPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShopNPC::BattleValueItemId -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgShopNPC::m_CurPage -> B
	System.UInt32 [Client]System.UInt32 Game.UI.DlgShopNPC::m_NpcId -> A

	System.String [Client]System.String Game.UI.DlgShopNPC::fileName -> dropped
}

[Client]Game.UI.DlgShopNPC/SpecialType skipped:  filtered
{
	Game.UI.DlgShopNPC/SpecialType [Client]Game.UI.DlgShopNPC/SpecialType Game.UI.DlgShopNPC/SpecialType::None -> A
	Game.UI.DlgShopNPC/SpecialType [Client]Game.UI.DlgShopNPC/SpecialType Game.UI.DlgShopNPC/SpecialType::Gem -> a

	System.Int32 [Client]System.Int32 Game.UI.DlgShopNPC/SpecialType::value__ skipped:  filtered
}

[Client]Game.UI.DlgRecharge skipped:  filtered
{
	[Client]Game.UI.DlgRecharge::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRecharge::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgRecharge::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRecharge::GetNextRechargeNum[0]( ) -> e
	[Client]Game.UI.DlgRecharge::SetProgressBar[0]( ) -> F
	[Client]Game.UI.DlgRecharge::OnListRechargeClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgRecharge::OnFirstRecharge[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgRecharge::GetMaxRecharge[0]( ) -> f
	[Client]Game.UI.DlgRecharge::SortByRechargeMoney[2]( Game.DataRecharge, Game.DataRecharge ) -> A
	[Client]Game.UI.DlgRecharge::OnButtonLinkFirstClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgRecharge::OnButtonLinkPrizeClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgRecharge::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgRecharge::get_RechargeAwardList[0]( ) -> G
	[Client]Game.UI.DlgRecharge::SortByRechargeNum[2]( Game.DataAward, Game.DataAward ) -> A

	[Client]Game.UI.DlgRecharge::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRecharge::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRecharge::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgRecharge::CONST_MAX_RECHARGENUM -> A

	System.String [Client]System.String Game.UI.DlgRecharge::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgRecharge::layer -> dropped
	System.Collections.Generic.List`1<Game.DataAward> [Client]System.Collections.Generic.List`1<Game.DataAward> Game.UI.DlgRecharge::RechargeAwardList -> dropped
}

[Client]Game.UI.DlgPetSelect skipped:  filtered
{
	[Client]Game.UI.DlgPetSelect::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetSelect::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetSelect::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetSelect::Show[1]( Game.UI.DlgPetSelect/OpenType ) -> A
	[Client]Game.UI.DlgPetSelect::OnItemList_MainPetClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgPetSelect::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetSelect::OnButton_LeftClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPetSelect::OnButton_RightClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgPetSelect::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetSelect::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgPetSelect::MaxPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSelect::PetNumPerPage -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSelect::GiveBagLevel -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSelect::m_CurPage -> b
	Game.UI.DlgPetSelect/OpenType [Client]Game.UI.DlgPetSelect/OpenType Game.UI.DlgPetSelect::m_Type -> A

	System.String [Client]System.String Game.UI.DlgPetSelect::fileName -> dropped
}

[Client]Game.UI.DlgPetSelect/OpenType skipped:  filtered
{
	Game.UI.DlgPetSelect/OpenType [Client]Game.UI.DlgPetSelect/OpenType Game.UI.DlgPetSelect/OpenType::ToSelect -> A
	Game.UI.DlgPetSelect/OpenType [Client]Game.UI.DlgPetSelect/OpenType Game.UI.DlgPetSelect/OpenType::ToShow -> a

	System.Int32 [Client]System.Int32 Game.UI.DlgPetSelect/OpenType::value__ skipped:  filtered
}

[Client]Game.UI.DlgPetIntensify skipped:  filtered
{
	[Client]Game.UI.DlgPetIntensify::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetIntensify::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetIntensify::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetIntensify::get_MaxPetStrengthenData[0]( ) -> e
	[Client]Game.UI.DlgPetIntensify::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetIntensify::OnButton_FloorOkClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgPetIntensify::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetIntensify::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetIntensify::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetIntensify::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgPetIntensify::LowRateLimit -> A

	System.String [Client]System.String Game.UI.DlgPetIntensify::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgPetIntensify::layer -> dropped
	Game.DataPetstrengthen [Client]Game.DataPetstrengthen Game.UI.DlgPetIntensify::MaxPetStrengthenData -> dropped
}

[Client]Game.UI.DlgDynamicBase`2 skipped:  filtered
{
	[Client]Game.UI.DlgDynamicBase`2::Refresh[0]( ) -> B
	[Client]Game.UI.DlgDynamicBase`2::get_singleton[0]( ) -> A
	[Client]Game.UI.DlgDynamicBase`2::get_DlgDynamicInterface[0]( ) -> a
	[Client]Game.UI.DlgDynamicBase`2::GetDlgDynamicInterface[1]( System.Boolean ) -> A

	[Client]Game.UI.DlgDynamicBase`2::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgDynamicBase`2::IsVisible[0]( ) skipped:  filtered
	[Client]Game.UI.DlgDynamicBase`2::.ctor[0]( ) skipped:  special name
	[Client]Game.UI.DlgDynamicBase`2::.cctor[0]( ) skipped:  special name

	TDlgDynamicClass [Client]TDlgDynamicClass Game.UI.DlgDynamicBase`2::s_instance -> A
	System.Object [Client]System.Object Game.UI.DlgDynamicBase`2::s_objLock -> A

	TDlgDynamicClass [Client]TDlgDynamicClass Game.UI.DlgDynamicBase`2::singleton -> dropped
	TDlgDynamicInterface [Client]TDlgDynamicInterface Game.UI.DlgDynamicBase`2::DlgDynamicInterface -> dropped
}

[Client]Game.UI.DlgMeDynamic skipped:  filtered
{
	[Client]Game.UI.DlgMeDynamic::GetDlgDynamicInterface[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgMeDynamic::get_Status[0]( ) -> A
	[Client]Game.UI.DlgMeDynamic::RefreshMailCount[0]( ) -> a
	[Client]Game.UI.DlgMeDynamic::ShowFireId[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgMeDynamic::RefreshFirstBloodButtonState[0]( ) -> b
	[Client]Game.UI.DlgMeDynamic::RefreshCompensateButtonState[0]( ) -> C
	[Client]Game.UI.DlgMeDynamic::UpdateBuffList[0]( ) -> c
	[Client]Game.UI.DlgMeDynamic::RefreshFPS[1]( System.String ) -> A
	[Client]Game.UI.DlgMeDynamic::Refresh[0]( ) -> D
	[Client]Game.UI.DlgMeDynamic::SetStatus[1]( System.Int32 ) -> A

	[Client]Game.UI.DlgMeDynamic::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgMeDynamic::m_nStatus -> A

	System.Int32 [Client]System.Int32 Game.UI.DlgMeDynamic::Status -> dropped
}

[Client]Game.UI.DlgLoginNew skipped:  filtered
{
	[Client]Game.UI.DlgLoginNew::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgLoginNew::OnShow[0]( ) -> b
	[Client]Game.UI.DlgLoginNew::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgLoginNew::Init[0]( ) -> c
	[Client]Game.UI.DlgLoginNew::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgLoginNew::ButtonClickLogin[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgLoginNew::ButtonClickMore[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgLoginNew::ButtonClickUpdateInfo[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgLoginNew::ButtonClickChangeID[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgLoginNew::SpriteClickServer_Recently[1]( Game.UI.UICommon.IXUISprite ) -> A
	[Client]Game.UI.DlgLoginNew::SpriteClickServer_Recommend[1]( Game.UI.UICommon.IXUISprite ) -> a
	[Client]Game.UI.DlgLoginNew::SpriteClickServer_Select_Recently[1]( Game.UI.UICommon.IXUISprite ) -> B
	[Client]Game.UI.DlgLoginNew::SpriteClickServer_Select_Recommend[1]( Game.UI.UICommon.IXUISprite ) -> b
	[Client]Game.UI.DlgLoginNew::ListOnSelectArea[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgLoginNew::ListOnClickServer[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgLoginNew::ButtonClickBack[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgLoginNew::ShowServerList[0]( ) -> e
	[Client]Game.UI.DlgLoginNew::OnAnimPlayFinishEventHandler[2]( System.Object, System.EventArgs ) -> A

	[Client]Game.UI.DlgLoginNew::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgLoginNew::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgLoginNew::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgLoginNew::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgLoginNew::m_ServerCurrent -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgLoginNew::m_IsLogin -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgLoginNew::m_AreaIndex -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgLoginNew::m_TestCount -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgLoginNew::m_ShowTestServer -> a

	System.String [Client]System.String Game.UI.DlgLoginNew::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgLoginNew::Cleanup -> dropped
}

[Client]Game.UI.DlgJoyStick2 skipped:  filtered
{
	[Client]Game.UI.DlgJoyStick2::OnShow[0]( ) -> b
	[Client]Game.UI.DlgJoyStick2::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgJoyStick2::Init[0]( ) -> c
	[Client]Game.UI.DlgJoyStick2::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgJoyStick2::Update[0]( ) -> E
	[Client]Game.UI.DlgJoyStick2::OpenExpedition[0]( ) -> A
	[Client]Game.UI.DlgJoyStick2::InformExpedition[0]( ) -> a
	[Client]Game.UI.DlgJoyStick2::InformNewMail[0]( ) -> B
	[Client]Game.UI.DlgJoyStick2::RefreshOnlineAwardTime[1]( System.TimeSpan ) -> A
	[Client]Game.UI.DlgJoyStick2::RefreshAwardNum[0]( ) -> d
	[Client]Game.UI.DlgJoyStick2::RefreshActivityNum[0]( ) -> e
	[Client]Game.UI.DlgJoyStick2::UpdateSkillSprite[0]( ) -> F
	[Client]Game.UI.DlgJoyStick2::UpdateItemIcon[0]( ) -> f
	[Client]Game.UI.DlgJoyStick2::SetMode[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgJoyStick2::JoyButtonA[0]( ) -> G
	[Client]Game.UI.DlgJoyStick2::JoyButtonB[0]( ) -> g
	[Client]Game.UI.DlgJoyStick2::JoyButtonX[0]( ) -> H
	[Client]Game.UI.DlgJoyStick2::JoyButtonY[0]( ) -> h
	[Client]Game.UI.DlgJoyStick2::JoyButtonAX[0]( ) -> I
	[Client]Game.UI.DlgJoyStick2::JoyButtonR1[0]( ) -> i
	[Client]Game.UI.DlgJoyStick2::SetStatus[1]( System.Int32 ) -> a
	[Client]Game.UI.DlgJoyStick2::OnSpriteAttackPress[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgJoyStick2::OnSpriteSkill1Press[1]( System.Boolean ) -> a
	[Client]Game.UI.DlgJoyStick2::OnSpriteSkill2Press[1]( System.Boolean ) -> B
	[Client]Game.UI.DlgJoyStick2::OnSpriteSkill3Press[1]( System.Boolean ) -> b
	[Client]Game.UI.DlgJoyStick2::OnSpriteSkill4Press[1]( System.Boolean ) -> C
	[Client]Game.UI.DlgJoyStick2::OnSprite_itemPress[1]( System.Boolean ) -> c
	[Client]Game.UI.DlgJoyStick2::OnButton_TabClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgJoyStick2::OnCheckbox_AutoCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgJoyStick2::OnButtonTeamClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgJoyStick2::OnButtonNpcClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgJoyStick2::OnButtonTaskClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgJoyStick2::OnButtonOkClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgJoyStick2::OnButtonAwardClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgJoyStick2::OnButtonActivityClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgJoyStick2::OnButtonShipClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgJoyStick2::OnButtonMailClick[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgJoyStick2::OnButtonAuctionClick[1]( Game.UI.UICommon.IXUIButton ) -> e
	[Client]Game.UI.DlgJoyStick2::OnButtonFAQClick[1]( Game.UI.UICommon.IXUIButton ) -> F
	[Client]Game.UI.DlgJoyStick2::OnCheckbox_PKModeCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgJoyStick2::OnCheckbox_PKMapClick[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgJoyStick2::OnButton_ArenaClick[1]( Game.UI.UICommon.IXUIButton ) -> f
	[Client]Game.UI.DlgJoyStick2::OnButton_RanklistClick[1]( Game.UI.UICommon.IXUIButton ) -> G
	[Client]Game.UI.DlgJoyStick2::OnButtonAFKClick[1]( Game.UI.UICommon.IXUIButton ) -> g
	[Client]Game.UI.DlgJoyStick2::OnButton_StrengthClick[1]( Game.UI.UICommon.IXUIButton ) -> H
	[Client]Game.UI.DlgJoyStick2::OnTimeCountDown[0]( ) -> J
	[Client]Game.UI.DlgJoyStick2::OnButtonAFKExit[1]( Game.UI.UICommon.IXUIButton ) -> h

	[Client]Game.UI.DlgJoyStick2::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick2::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick2::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick2::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgJoyStick2::MaxTabFindRange -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick2::MaxArenaOffLineLevel -> A
	Game.UI.UICommon.IXUISprite[] [Client]Game.UI.UICommon.IXUISprite[] Game.UI.DlgJoyStick2::m_SpriteSkills -> A
	Game.UI.UICommon.IXUIProgress[] [Client]Game.UI.UICommon.IXUIProgress[] Game.UI.DlgJoyStick2::m_ProgressBars -> A
	Game.UI.UICommon.IXUIPicture[] [Client]Game.UI.UICommon.IXUIPicture[] Game.UI.DlgJoyStick2::m_PictureSkills -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick2::m_nJoyStick2Mode -> a

	System.String [Client]System.String Game.UI.DlgJoyStick2::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick2::layer -> dropped
}

[Client]Game.UI.DlgAttribute skipped:  filtered
{
	[Client]Game.UI.DlgAttribute::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAttribute::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgAttribute::Init[0]( ) -> c
	[Client]Game.UI.DlgAttribute::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAttribute::OnButton_LeftClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAttribute::OnButton_RightClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgAttribute::SendRefreshMsg[0]( ) -> e
	[Client]Game.UI.DlgAttribute::RefreshCharData[1]( Game.Msg.MsgServerRefreshCharData ) -> A

	[Client]Game.UI.DlgAttribute::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAttribute::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAttribute::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAttribute::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgAttribute::MaxPage -> A
	Game.Msg.MsgServerRefreshCharData [Client]Game.Msg.MsgServerRefreshCharData Game.UI.DlgAttribute::m_CharData -> A

	System.String [Client]System.String Game.UI.DlgAttribute::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAttribute::layer -> dropped
}

[Client]Game.UI.DlgWorldMap skipped:  filtered
{
	[Client]Game.UI.DlgWorldMap::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgWorldMap::OnShow[0]( ) -> b
	[Client]Game.UI.DlgWorldMap::Init[0]( ) -> c
	[Client]Game.UI.DlgWorldMap::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgWorldMap::Update[0]( ) -> E
	[Client]Game.UI.DlgWorldMap::RefreshActivityRecord[0]( ) -> e
	[Client]Game.UI.DlgWorldMap::Show[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgWorldMap::Show[0]( ) -> F
	[Client]Game.UI.DlgWorldMap::ShowManual[0]( ) -> f
	[Client]Game.UI.DlgWorldMap::Transfer[3]( System.UInt32, System.UInt32, Game.UI.DlgWorldMap/TransferFinishEventHandler ) -> A
	[Client]Game.UI.DlgWorldMap::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.DlgWorldMap::ShowBubble[1]( System.String ) -> A
	[Client]Game.UI.DlgWorldMap::CloseBubble[0]( ) -> G
	[Client]Game.UI.DlgWorldMap::OnListMapSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgWorldMap::OnListEctypeSelect[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgWorldMap::SelectMode[2]( System.Int32, System.Boolean ) -> A
	[Client]Game.UI.DlgWorldMap::OnList_PageRecenterFinished[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgWorldMap::OnButtonExitClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgWorldMap::OnListPageSelect[1]( Game.UI.UICommon.IXUIListItem ) -> b
	[Client]Game.UI.DlgWorldMap::OnList_MapModeSelect[1]( Game.UI.UICommon.IXUIListItem ) -> C
	[Client]Game.UI.DlgWorldMap::OnButtonEnterClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgWorldMap::OnButtonTeamClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgWorldMap::OnButtonCallClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgWorldMap::OnArriveNode[1]( System.UInt32 ) -> a
	[Client]Game.UI.DlgWorldMap::OnGroup_TitleClick[1]( Game.UI.UICommon.IXUIListItem ) -> c
	[Client]Game.UI.DlgWorldMap::ShowMenu[1]( System.UInt32 ) -> B
	[Client]Game.UI.DlgWorldMap::InitTransfer[0]( ) -> g
	[Client]Game.UI.DlgWorldMap::ComparisonDataWorldScript[2]( Game.DataWorldMapScript, Game.DataWorldMapScript ) -> A

	[Client]Game.UI.DlgWorldMap::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgWorldMap::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgWorldMap::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgWorldMap::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgWorldMap::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgWorldMap::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap::MaxEctypeModeNum -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap::MaxNormalModeNum -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap::MaxShowTipLevel -> B
	System.Collections.Generic.Dictionary`2<System.UInt32,System.Int32> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,System.Int32> Game.UI.DlgWorldMap::m_LastSelectScriptIndex -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgWorldMap::m_Manual -> A
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.UI.DlgWorldMap::m_vec3PosLocal -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgWorldMap::m_bNeedMove -> a
	System.Single [Client]System.Single Game.UI.DlgWorldMap::m_fSpeed -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap::m_nNodeIndex -> b
	System.UInt32 [Client]System.UInt32 Game.UI.DlgWorldMap::m_unWorldMapScriptId -> A
	Game.UI.DlgWorldMap/TransferFinishEventHandler [Client]Game.UI.DlgWorldMap/TransferFinishEventHandler Game.UI.DlgWorldMap::m_eventHandlerOnTransferFinish -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgWorldMap::m_unSrcMapId -> a
	System.UInt32 [Client]System.UInt32 Game.UI.DlgWorldMap::m_unDesMapId -> B
	System.Collections.Generic.List`1<Game.UI.DlgWorldMap/ItemOption> [Client]System.Collections.Generic.List`1<Game.UI.DlgWorldMap/ItemOption> Game.UI.DlgWorldMap::m_listModeEnabled -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap::m_nModeSelected -> C
	System.Boolean [Client]System.Boolean Game.UI.DlgWorldMap::m_bUseForFindPath -> B
	System.Single [Client]System.Single Game.UI.DlgWorldMap::m_fTimeStart -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgWorldMap::m_bBubbleClosed -> b
	System.Single [Client]System.Single Game.UI.DlgWorldMap::m_LastSendMsgTime -> B

	System.String [Client]System.String Game.UI.DlgWorldMap::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgWorldMap::Persist -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgWorldMap::Cleanup -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap::layer -> dropped
}

[Client]Game.UI.DlgWorldMap/ItemOption skipped:  filtered
{
	[Client]Game.UI.DlgWorldMap/ItemOption::get_Index[0]( ) -> A
	[Client]Game.UI.DlgWorldMap/ItemOption::get_Text[0]( ) -> a
	[Client]Game.UI.DlgWorldMap/ItemOption::get_ColorType[0]( ) -> B
	[Client]Game.UI.DlgWorldMap/ItemOption::get_Level[0]( ) -> b

	[Client]Game.UI.DlgWorldMap/ItemOption::.ctor[4]( System.Int32, System.String, System.Int32, System.Int32 ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap/ItemOption::m_nIndex -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap/ItemOption::m_nColorType -> a
	System.String [Client]System.String Game.UI.DlgWorldMap/ItemOption::m_strText -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap/ItemOption::m_nLevel -> B

	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap/ItemOption::Index -> dropped
	System.String [Client]System.String Game.UI.DlgWorldMap/ItemOption::Text -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap/ItemOption::ColorType -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap/ItemOption::Level -> dropped
}

[Client]Game.UI.DlgWorldMap/MapType skipped:  filtered
{
	Game.UI.DlgWorldMap/MapType [Client]Game.UI.DlgWorldMap/MapType Game.UI.DlgWorldMap/MapType::Normal -> A
	Game.UI.DlgWorldMap/MapType [Client]Game.UI.DlgWorldMap/MapType Game.UI.DlgWorldMap/MapType::Ectype -> a

	System.Int32 [Client]System.Int32 Game.UI.DlgWorldMap/MapType::value__ skipped:  filtered
}

[Client]Game.UI.DlgTargetPet skipped:  filtered
{
	[Client]Game.UI.DlgTargetPet::Init[0]( ) -> c
	[Client]Game.UI.DlgTargetPet::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTargetPet::get_TargetPetID[0]( ) -> e
	[Client]Game.UI.DlgTargetPet::set_TargetPetID[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgTargetPet::OnButtonSeePetClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgTargetPet::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTargetPet::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTargetPet::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgTargetPet::<TargetPetID>k__BackingField -> A

	System.UInt32 [Client]System.UInt32 Game.UI.DlgTargetPet::TargetPetID -> dropped
	System.String [Client]System.String Game.UI.DlgTargetPet::fileName -> dropped
}

[Client]Game.UI.DlgMe skipped:  filtered
{
	[Client]Game.UI.DlgMe::OnShow[0]( ) -> b
	[Client]Game.UI.DlgMe::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgMe::Init[0]( ) -> c
	[Client]Game.UI.DlgMe::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMe::Update[0]( ) -> E
	[Client]Game.UI.DlgMe::RefreshMailCount[0]( ) -> A
	[Client]Game.UI.DlgMe::ShowFireId[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgMe::RefreshCompensateButtonState[0]( ) -> a
	[Client]Game.UI.DlgMe::RefreshFirstBloodButtonState[0]( ) -> B
	[Client]Game.UI.DlgMe::RefreshBuffList[0]( ) -> d
	[Client]Game.UI.DlgMe::RefreshFPS[1]( System.String ) -> A
	[Client]Game.UI.DlgMe::SetStatus[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgMe::RefreshTeamInfo[0]( ) -> e
	[Client]Game.UI.DlgMe::RegisterCheckBox[2]( System.String, Game.UI.UICommon.CheckBoxOnClickEventHandler ) -> A
	[Client]Game.UI.DlgMe::UpdatePetInfo[0]( ) -> F
	[Client]Game.UI.DlgMe::OnFunctionButtonClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMe::OnButton_BackClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgMe::OnVIPButtonClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgMe::OnShopButtonClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgMe::OnSprite_AcceptbuttonClick[1]( Game.UI.UICommon.IXUISprite ) -> A
	[Client]Game.UI.DlgMe::OnButton_FireClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgMe::OnButtonFirstBloodClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgMe::OnButtonCompensateClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgMe::OnTexture_PetProClick[1]( Game.UI.UICommon.IXUIPicture ) -> A
	[Client]Game.UI.DlgMe::OnTexture_ProClick[1]( Game.UI.UICommon.IXUIPicture ) -> a
	[Client]Game.UI.DlgMe::OnSprite_headerClick[1]( Game.UI.UICommon.IXUISprite ) -> a
	[Client]Game.UI.DlgMe::OnList_PetReadyClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgMe::OnCheckbox_FriendClick[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgMe::OnCheckbox_PetClick[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgMe::OnCheckbox_RoleClick[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgMe::OnCheckbox_StrengthClick[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgMe::OnCheckbox_ShipClick[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgMe::OnCheckbox_GuildClick[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.DlgMe::OnCheckbox_MailClick[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.DlgMe::OnCheckbox_SystemClick[1]( Game.UI.UICommon.IXUICheckBox ) -> d
	[Client]Game.UI.DlgMe::OnCheckbox_TaskClick[1]( Game.UI.UICommon.IXUICheckBox ) -> E
	[Client]Game.UI.DlgMe::OnCheckbox_TeamClick[1]( Game.UI.UICommon.IXUICheckBox ) -> e

	[Client]Game.UI.DlgMe::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMe::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMe::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgMe::MaxShowNum -> A
	System.Single [Client]System.Single Game.UI.DlgMe::FireIdShowTime -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgMe::MaxBuffNum -> a
	Game.UI.UICommon.IXUIPicture[] [Client]Game.UI.UICommon.IXUIPicture[] Game.UI.DlgMe::m_HeadTexture -> A
	Game.UI.UICommon.IXUIProgress[] [Client]Game.UI.UICommon.IXUIProgress[] Game.UI.DlgMe::m_HpProgresses -> A
	Game.UI.UICommon.IXUILabel[] [Client]Game.UI.UICommon.IXUILabel[] Game.UI.DlgMe::m_NameLabels -> A
	Game.UI.UICommon.IXUISprite[] [Client]Game.UI.UICommon.IXUISprite[] Game.UI.DlgMe::m_TeamLeaderSprite -> A
	Game.UI.UICommon.IXUILabel[] [Client]Game.UI.UICommon.IXUILabel[] Game.UI.DlgMe::m_StateLabels -> a
	System.UInt32[] [Client]System.UInt32[] Game.UI.DlgMe::m_IDs -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgMe::m_FireId -> A
	System.Single [Client]System.Single Game.UI.DlgMe::m_FireBeginTime -> a

	System.String [Client]System.String Game.UI.DlgMe::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMe::layer -> dropped
}

[Client]Game.UI.DlgJoyStick2Phone skipped:  filtered
{
	[Client]Game.UI.DlgJoyStick2Phone::OnShow[0]( ) -> b
	[Client]Game.UI.DlgJoyStick2Phone::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgJoyStick2Phone::Init[0]( ) -> c
	[Client]Game.UI.DlgJoyStick2Phone::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgJoyStick2Phone::Update[0]( ) -> E
	[Client]Game.UI.DlgJoyStick2Phone::OpenExpedition[0]( ) -> A
	[Client]Game.UI.DlgJoyStick2Phone::InformExpedition[0]( ) -> a
	[Client]Game.UI.DlgJoyStick2Phone::InformNewMail[0]( ) -> B
	[Client]Game.UI.DlgJoyStick2Phone::RefreshOnlineAwardTime[1]( System.TimeSpan ) -> A
	[Client]Game.UI.DlgJoyStick2Phone::RefreshAwardNum[0]( ) -> d
	[Client]Game.UI.DlgJoyStick2Phone::RefreshActivityNum[0]( ) -> e
	[Client]Game.UI.DlgJoyStick2Phone::UpdateSkillSprite[0]( ) -> F
	[Client]Game.UI.DlgJoyStick2Phone::UpdateItemIcon[0]( ) -> f
	[Client]Game.UI.DlgJoyStick2Phone::SetMode[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgJoyStick2Phone::JoyButtonA[0]( ) -> G
	[Client]Game.UI.DlgJoyStick2Phone::JoyButtonB[0]( ) -> g
	[Client]Game.UI.DlgJoyStick2Phone::JoyButtonX[0]( ) -> H
	[Client]Game.UI.DlgJoyStick2Phone::JoyButtonY[0]( ) -> h
	[Client]Game.UI.DlgJoyStick2Phone::JoyButtonAX[0]( ) -> I
	[Client]Game.UI.DlgJoyStick2Phone::JoyButtonR1[0]( ) -> i
	[Client]Game.UI.DlgJoyStick2Phone::SetStatus[1]( System.Int32 ) -> a
	[Client]Game.UI.DlgJoyStick2Phone::OnSpriteAttackPress[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgJoyStick2Phone::OnSpriteSkill1Press[1]( System.Boolean ) -> a
	[Client]Game.UI.DlgJoyStick2Phone::OnSpriteSkill2Press[1]( System.Boolean ) -> B
	[Client]Game.UI.DlgJoyStick2Phone::OnSpriteSkill3Press[1]( System.Boolean ) -> b
	[Client]Game.UI.DlgJoyStick2Phone::OnSpriteSkill4Press[1]( System.Boolean ) -> C
	[Client]Game.UI.DlgJoyStick2Phone::OnSprite_itemPress[1]( System.Boolean ) -> c
	[Client]Game.UI.DlgJoyStick2Phone::OnButton_TabClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgJoyStick2Phone::OnCheckbox_AutoCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonTeamClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonNpcClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonTaskClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonOkClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonAwardClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonActivityClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonShipClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonMailClick[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonAuctionClick[1]( Game.UI.UICommon.IXUIButton ) -> e
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonFAQClick[1]( Game.UI.UICommon.IXUIButton ) -> F
	[Client]Game.UI.DlgJoyStick2Phone::OnCheckbox_PKModeCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgJoyStick2Phone::OnCheckbox_PKMapClick[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgJoyStick2Phone::OnButton_ArenaClick[1]( Game.UI.UICommon.IXUIButton ) -> f
	[Client]Game.UI.DlgJoyStick2Phone::OnButton_RanklistClick[1]( Game.UI.UICommon.IXUIButton ) -> G
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonAFKClick[1]( Game.UI.UICommon.IXUIButton ) -> g
	[Client]Game.UI.DlgJoyStick2Phone::OnButton_StrengthClick[1]( Game.UI.UICommon.IXUIButton ) -> H
	[Client]Game.UI.DlgJoyStick2Phone::OnTimeCountDown[0]( ) -> J
	[Client]Game.UI.DlgJoyStick2Phone::OnButtonAFKExit[1]( Game.UI.UICommon.IXUIButton ) -> h

	[Client]Game.UI.DlgJoyStick2Phone::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick2Phone::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick2Phone::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick2Phone::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgJoyStick2Phone::MaxTabFindRange -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick2Phone::MaxArenaOffLineLevel -> A
	Game.UI.UICommon.IXUISprite[] [Client]Game.UI.UICommon.IXUISprite[] Game.UI.DlgJoyStick2Phone::m_SpriteSkills -> A
	Game.UI.UICommon.IXUIProgress[] [Client]Game.UI.UICommon.IXUIProgress[] Game.UI.DlgJoyStick2Phone::m_ProgressBars -> A
	Game.UI.UICommon.IXUIPicture[] [Client]Game.UI.UICommon.IXUIPicture[] Game.UI.DlgJoyStick2Phone::m_PictureSkills -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick2Phone::m_nJoyStick2Mode -> a

	System.String [Client]System.String Game.UI.DlgJoyStick2Phone::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick2Phone::layer -> dropped
}

[Client]Game.UI.DlgGuildApplyList skipped:  filtered
{
	[Client]Game.UI.DlgGuildApplyList::OnShow[0]( ) -> b
	[Client]Game.UI.DlgGuildApplyList::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgGuildApplyList::Init[0]( ) -> c
	[Client]Game.UI.DlgGuildApplyList::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuildApplyList::OnButtonAgreeClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGuildApplyList::OnButtonChatClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgGuildApplyList::OnButtonRefuseClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgGuildApplyList::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgGuildApplyList::OnListSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgGuildApplyList::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgGuildApplyList::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgGuildApplyList::RefreshPage[0]( ) -> e

	[Client]Game.UI.DlgGuildApplyList::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildApplyList::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildApplyList::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildApplyList::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgGuildApplyList::m_unSelectPlayerID -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgGuildApplyList::m_nMaxPageCount -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgGuildApplyList::m_nCurPage -> a

	System.String [Client]System.String Game.UI.DlgGuildApplyList::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgGuildApplyList::layer -> dropped
}

[Client]Game.UI.DlgFunctionRole skipped:  filtered
{
	[Client]Game.UI.DlgFunctionRole::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFunctionRole::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgFunctionRole::Init[0]( ) -> c
	[Client]Game.UI.DlgFunctionRole::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFunctionRole::RefreshPage[0]( ) -> e
	[Client]Game.UI.DlgFunctionRole::RefreshSkillNum[0]( ) -> F
	[Client]Game.UI.DlgFunctionRole::SetDefaultDlgType[1]( Game.UI.DlgFunctionRole/enumDlgType ) -> A
	[Client]Game.UI.DlgFunctionRole::Show[0]( ) -> f
	[Client]Game.UI.DlgFunctionRole::Show[1]( Game.UI.DlgFunctionRole/enumDlgType ) -> a
	[Client]Game.UI.DlgFunctionRole::GetCheckBox[1]( Game.UI.DlgFunctionRole/enumDlgType ) -> B
	[Client]Game.UI.DlgFunctionRole::OnCheckBoxAttributeCheckboxCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgFunctionRole::OnCheckBoxBagCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgFunctionRole::OnCheckBoxSkillStudyCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgFunctionRole::OnCheckBoxFashionCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b

	[Client]Game.UI.DlgFunctionRole::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFunctionRole::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFunctionRole::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgFunctionRole::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFunctionRole::.ctor[0]( ) skipped:  special name

	Game.UI.DlgFunctionRole/enumDlgType [Client]Game.UI.DlgFunctionRole/enumDlgType Game.UI.DlgFunctionRole::m_eDlgType -> A

	System.String [Client]System.String Game.UI.DlgFunctionRole::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgFunctionRole::layer -> dropped
}

[Client]Game.UI.DlgFunctionRole/enumDlgType skipped:  filtered
{
	Game.UI.DlgFunctionRole/enumDlgType [Client]Game.UI.DlgFunctionRole/enumDlgType Game.UI.DlgFunctionRole/enumDlgType::eDlgType_Attribute -> A
	Game.UI.DlgFunctionRole/enumDlgType [Client]Game.UI.DlgFunctionRole/enumDlgType Game.UI.DlgFunctionRole/enumDlgType::eDlgType_Bag -> a
	Game.UI.DlgFunctionRole/enumDlgType [Client]Game.UI.DlgFunctionRole/enumDlgType Game.UI.DlgFunctionRole/enumDlgType::eDlgType_SkillStudy -> B
	Game.UI.DlgFunctionRole/enumDlgType [Client]Game.UI.DlgFunctionRole/enumDlgType Game.UI.DlgFunctionRole/enumDlgType::eDlgType_Fashion -> b

	System.Int32 [Client]System.Int32 Game.UI.DlgFunctionRole/enumDlgType::value__ skipped:  filtered
}

[Client]Game.UI.DlgActivityMonster skipped:  filtered
{
	[Client]Game.UI.DlgActivityMonster::OnShow[0]( ) -> b
	[Client]Game.UI.DlgActivityMonster::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgActivityMonster::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgActivityMonster::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgActivityMonster::OnButton_RanklistClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgActivityMonster::OnButton_MoreAwardClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgActivityMonster::OnButton_GetAwardClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgActivityMonster::OnButton_OKFreeClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgActivityMonster::OnButton_OKMoneyClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgActivityMonster::OnButton_AddClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgActivityMonster::OnAwardListClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgActivityMonster::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgActivityMonster::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgActivityMonster::ShowNumPerPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgActivityMonster::m_CurAwardPage -> a

	System.String [Client]System.String Game.UI.DlgActivityMonster::fileName -> dropped
}

[Client]Game.UI.DlgShipExplorationMemberInfo skipped:  filtered
{
	[Client]Game.UI.DlgShipExplorationMemberInfo::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShipExplorationMemberInfo::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShipExplorationMemberInfo::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShipExplorationMemberInfo::Show[1]( Game.Msg.ExpeditionMonsterData ) -> A
	[Client]Game.UI.DlgShipExplorationMemberInfo::RefreshMonster[2]( Game.Msg.ExpeditionMonsterData, Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgShipExplorationMemberInfo::OnListMonsterSkillClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgShipExplorationMemberInfo::OnButtonBaseSkillClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShipExplorationMemberInfo::OnButtonOKClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShipExplorationMemberInfo::get_BaseSkillData[0]( ) -> e
	[Client]Game.UI.DlgShipExplorationMemberInfo::get_BaseSkillCsv[0]( ) -> F

	[Client]Game.UI.DlgShipExplorationMemberInfo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationMemberInfo::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationMemberInfo::.ctor[0]( ) skipped:  special name

	Game.Msg.ExpeditionMonsterData [Client]Game.Msg.ExpeditionMonsterData Game.UI.DlgShipExplorationMemberInfo::m_MonsterData -> A
	Game.DataExpeditionMonster [Client]Game.DataExpeditionMonster Game.UI.DlgShipExplorationMemberInfo::m_MonsterCsv -> A

	System.String [Client]System.String Game.UI.DlgShipExplorationMemberInfo::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationMemberInfo::layer -> dropped
	Game.Msg.ExpeditionMonsterSkill [Client]Game.Msg.ExpeditionMonsterSkill Game.UI.DlgShipExplorationMemberInfo::BaseSkillData -> dropped
	Game.DataExpeditionMonsterSkill [Client]Game.DataExpeditionMonsterSkill Game.UI.DlgShipExplorationMemberInfo::BaseSkillCsv -> dropped
}

[Client]Game.UI.DlgShipExplorationAward skipped:  filtered
{
	[Client]Game.UI.DlgShipExplorationAward::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShipExplorationAward::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShipExplorationAward::Show[1]( Game.Msg.MsgServerNotifyExpeditionRewardInfo ) -> A
	[Client]Game.UI.DlgShipExplorationAward::HandleRewardList[1]( System.Collections.Generic.List`1<Game.Msg.ExpeditionClientRewardData> ) -> A
	[Client]Game.UI.DlgShipExplorationAward::GenerateTitle[1]( Game.Msg.ExpeditionClientRewardData ) -> A
	[Client]Game.UI.DlgShipExplorationAward::GenerateContent[1]( Game.Msg.ExpeditionClientRewardData ) -> a
	[Client]Game.UI.DlgShipExplorationAward::GenerateContent[3]( Game.Msg.ExpeditionClientRewardData, Game.Msg.ExpeditionClientRewardData, Game.Msg.ExpeditionClientRewardData ) -> A
	[Client]Game.UI.DlgShipExplorationAward::GenerateAward[1]( Game.Msg.ExpeditionClientRewardData ) -> B
	[Client]Game.UI.DlgShipExplorationAward::GenerateAward[3]( Game.Msg.ExpeditionClientRewardData, Game.Msg.ExpeditionClientRewardData, Game.Msg.ExpeditionClientRewardData ) -> a
	[Client]Game.UI.DlgShipExplorationAward::GenerateGrade[1]( Game.Msg.ExpeditionClientRewardData ) -> b
	[Client]Game.UI.DlgShipExplorationAward::GenerateGrade[3]( Game.Msg.ExpeditionClientRewardData, Game.Msg.ExpeditionClientRewardData, Game.Msg.ExpeditionClientRewardData ) -> B
	[Client]Game.UI.DlgShipExplorationAward::GenerateAdditionalContent[1]( Game.Msg.ExpeditionClientRewardData ) -> C
	[Client]Game.UI.DlgShipExplorationAward::GenerateAdditionalContent[3]( Game.Msg.ExpeditionClientRewardData, Game.Msg.ExpeditionClientRewardData, Game.Msg.ExpeditionClientRewardData ) -> b
	[Client]Game.UI.DlgShipExplorationAward::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShipExplorationAward::IsEmptyAward[1]( Game.Msg.ExpeditionClientRewardData ) -> c
	[Client]Game.UI.DlgShipExplorationAward::IsDefaultExploration[1]( Game.Msg.ExpeditionClientRewardData ) -> D

	[Client]Game.UI.DlgShipExplorationAward::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationAward::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationAward::.ctor[0]( ) skipped:  special name

	Game.Msg.MsgServerNotifyExpeditionRewardInfo [Client]Game.Msg.MsgServerNotifyExpeditionRewardInfo Game.UI.DlgShipExplorationAward::m_AwardInfo -> A

	System.String [Client]System.String Game.UI.DlgShipExplorationAward::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationAward::layer -> dropped
}

[Client]Game.UI.DlgSeePlayer skipped:  filtered
{
	[Client]Game.UI.DlgSeePlayer::OnShow[0]( ) -> b
	[Client]Game.UI.DlgSeePlayer::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgSeePlayer::Init[0]( ) -> c
	[Client]Game.UI.DlgSeePlayer::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgSeePlayer::Show[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgSeePlayer::OnListClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgSeePlayer::OnMsgServerLookCharInfo[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.UI.DlgSeePlayer::GetPartDataByPartID[1]( System.Byte ) -> A
	[Client]Game.UI.DlgSeePlayer::OnPlayerModelLoaded[1]( Game.Character ) -> A
	[Client]Game.UI.DlgSeePlayer::RefreshModel[0]( ) -> e
	[Client]Game.UI.DlgSeePlayer::RefreshEquipIcon[2]( Game.UI.UICommon.IXUIList, System.Byte[] ) -> A
	[Client]Game.UI.DlgSeePlayer::GetSCharEquipData[1]( System.Byte ) -> a
	[Client]Game.UI.DlgSeePlayer::GetEquipSetNum[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgSeePlayer::SendRequest[1]( System.UInt32 ) -> a
	[Client]Game.UI.DlgSeePlayer::OnButtonClose[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgSeePlayer::OnButtonClickStrengthInfo[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgSeePlayer::OnButtonShipInfoClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgSeePlayer::GetPartGrade[0]( ) -> F

	[Client]Game.UI.DlgSeePlayer::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSeePlayer::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSeePlayer::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgSeePlayer::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Game.UI.SCharEquipData> [Client]System.Collections.Generic.List`1<Game.UI.SCharEquipData> Game.UI.DlgSeePlayer::m_listSCharEquipData -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgSeePlayer::m_unPlayerID -> A
	Game.Character [Client]Game.Character Game.UI.DlgSeePlayer::m_character -> A
	Game.Msg.MsgServerLookCharInfo [Client]Game.Msg.MsgServerLookCharInfo Game.UI.DlgSeePlayer::m_msg -> A

	System.String [Client]System.String Game.UI.DlgSeePlayer::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgSeePlayer::layer -> dropped
}

[Client]Game.UI.DlgNoviceHelp skipped:  filtered
{
	[Client]Game.UI.DlgNoviceHelp::OnShow[0]( ) -> b
	[Client]Game.UI.DlgNoviceHelp::Init[0]( ) -> c
	[Client]Game.UI.DlgNoviceHelp::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgNoviceHelp::Show[3]( System.Int32, UnityEngine.Vector3, Game.UI.UICommon.IXUIObject ) -> A
	[Client]Game.UI.DlgNoviceHelp::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgNoviceHelp::OnButtonOk5Click[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgNoviceHelp::Close[0]( ) -> e

	[Client]Game.UI.DlgNoviceHelp::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgNoviceHelp::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgNoviceHelp::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgNoviceHelp::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgNoviceHelp::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgNoviceHelp::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgNoviceHelp::EdgeWidth -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgNoviceHelp::m_nHelpID -> a
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.UI.DlgNoviceHelp::m_vec3Pos -> A

	System.String [Client]System.String Game.UI.DlgNoviceHelp::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgNoviceHelp::Persist -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgNoviceHelp::layer -> dropped
}

[Client]Game.UI.DlgHeadInfo skipped:  filtered
{
	[Client]Game.UI.DlgHeadInfo::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgHeadInfo::Init[0]( ) -> c
	[Client]Game.UI.DlgHeadInfo::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgHeadInfo::OnLateUpdate[0]( ) -> d
	[Client]Game.UI.DlgHeadInfo::Update[0]( ) -> E
	[Client]Game.UI.DlgHeadInfo::AddPlayer[1]( Game.Character ) -> A
	[Client]Game.UI.DlgHeadInfo::AddPlayer[2]( Game.Character, System.Boolean ) -> A
	[Client]Game.UI.DlgHeadInfo::AddHeadInfoEntity[0]( ) -> e
	[Client]Game.UI.DlgHeadInfo::DeleteHeadInfoEntity[1]( Game.UI.HeadInfoEntity ) -> A
	[Client]Game.UI.DlgHeadInfo::DelPlayer[1]( Game.Character ) -> a
	[Client]Game.UI.DlgHeadInfo::Refresh[1]( Game.Character ) -> B
	[Client]Game.UI.DlgHeadInfo::CleanMemory[0]( ) -> F
	[Client]Game.UI.DlgHeadInfo::Translate[3]( Game.Character, Game.UI.UICommon.IXUIListItem, System.Boolean ) -> A

	[Client]Game.UI.DlgHeadInfo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgHeadInfo::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgHeadInfo::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgHeadInfo::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgHeadInfo::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgHeadInfo::m_PoolSizeMin -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgHeadInfo::m_PoolSizeMax -> a
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.UI.HeadInfoEntity> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.UI.HeadInfoEntity> Game.UI.DlgHeadInfo::m_dicPlayerInfo -> A
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.UI.DlgHeadInfo::m_listPlayerIDCached -> A
	System.Collections.Generic.LinkedList`1<Game.UI.HeadInfoEntity> [Client]System.Collections.Generic.LinkedList`1<Game.UI.HeadInfoEntity> Game.UI.DlgHeadInfo::m_listHeadInfo -> A

	System.String [Client]System.String Game.UI.DlgHeadInfo::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgHeadInfo::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgHeadInfo::Persist -> dropped
}

[Client]Game.UI.HeadInfoEntity skipped:  filtered
{
	[Client]Game.UI.HeadInfoEntity::get_HeadInfoItem[0]( ) -> A
	[Client]Game.UI.HeadInfoEntity::get_PlayerId[0]( ) -> a
	[Client]Game.UI.HeadInfoEntity::set_PlayerId[1]( System.UInt32 ) -> A
	[Client]Game.UI.HeadInfoEntity::get_TargetPlayer[0]( ) -> B
	[Client]Game.UI.HeadInfoEntity::set_TargetPlayer[1]( Game.Character ) -> A
	[Client]Game.UI.HeadInfoEntity::get_Active[0]( ) -> b
	[Client]Game.UI.HeadInfoEntity::set_Active[1]( System.Boolean ) -> A

	[Client]Game.UI.HeadInfoEntity::.ctor[1]( Game.UI.UICommon.IXUIListItemHeadInfo ) skipped:  special name

	Game.UI.UICommon.IXUIListItemHeadInfo [Client]Game.UI.UICommon.IXUIListItemHeadInfo Game.UI.HeadInfoEntity::m_uiListItemHeadInfo -> A
	System.UInt32 [Client]System.UInt32 Game.UI.HeadInfoEntity::m_unPlayerId -> A
	System.Boolean [Client]System.Boolean Game.UI.HeadInfoEntity::m_bActive -> A

	Game.UI.UICommon.IXUIListItemHeadInfo [Client]Game.UI.UICommon.IXUIListItemHeadInfo Game.UI.HeadInfoEntity::HeadInfoItem -> dropped
	System.UInt32 [Client]System.UInt32 Game.UI.HeadInfoEntity::PlayerId -> dropped
	Game.Character [Client]Game.Character Game.UI.HeadInfoEntity::TargetPlayer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.HeadInfoEntity::Active -> dropped
}

[Client]Game.UI.DlgFriendInformation skipped:  filtered
{
	[Client]Game.UI.DlgFriendInformation::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFriendInformation::Init[0]( ) -> c
	[Client]Game.UI.DlgFriendInformation::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFriendInformation::get_Person[0]( ) -> e
	[Client]Game.UI.DlgFriendInformation::set_Person[1]( Game.Msg.ClientRelation ) -> A
	[Client]Game.UI.DlgFriendInformation::get_CurShowType[0]( ) -> F
	[Client]Game.UI.DlgFriendInformation::set_CurShowType[1]( Game.Msg.eRelationType ) -> A
	[Client]Game.UI.DlgFriendInformation::UpdateInfo[0]( ) -> f
	[Client]Game.UI.DlgFriendInformation::OnButton_AddFriendClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgFriendInformation::OnButton_BlackpullClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgFriendInformation::OnButton_ChatClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgFriendInformation::OnButton_DelClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgFriendInformation::OnButton_TeamClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgFriendInformation::OnButton_TeamApplyClick[1]( Game.UI.UICommon.IXUIButton ) -> c

	[Client]Game.UI.DlgFriendInformation::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFriendInformation::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFriendInformation::.ctor[0]( ) skipped:  special name

	Game.Msg.ClientRelation [Client]Game.Msg.ClientRelation Game.UI.DlgFriendInformation::<Person>k__BackingField -> A
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.UI.DlgFriendInformation::<CurShowType>k__BackingField -> A

	Game.Msg.ClientRelation [Client]Game.Msg.ClientRelation Game.UI.DlgFriendInformation::Person -> dropped
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.UI.DlgFriendInformation::CurShowType -> dropped
	System.String [Client]System.String Game.UI.DlgFriendInformation::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgFriendInformation::layer -> dropped
}

[Client]Game.UI.Hide.DlgChat skipped:  filtered
{
	[Client]Game.UI.Hide.DlgChat::OnShow[0]( ) -> b
	[Client]Game.UI.Hide.DlgChat::RefreshImplement[0]( ) -> C
	[Client]Game.UI.Hide.DlgChat::Init[0]( ) -> c
	[Client]Game.UI.Hide.DlgChat::RegisterEvent[0]( ) -> D
	[Client]Game.UI.Hide.DlgChat::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.Hide.DlgChat::IsChanelEnable[1]( Game.Msg.EChatType ) -> A
	[Client]Game.UI.Hide.DlgChat::AddInput[1]( System.String ) -> A
	[Client]Game.UI.Hide.DlgChat::SendChat[2]( System.String, Game.Msg.EChatType ) -> A
	[Client]Game.UI.Hide.DlgChat::ChangePrivateChat[1]( System.String ) -> a
	[Client]Game.UI.Hide.DlgChat::ParseChatData[1]( Game.Logic.ChatData ) -> a
	[Client]Game.UI.Hide.DlgChat::ChangeChatType[1]( Game.Msg.EChatType ) -> a
	[Client]Game.UI.Hide.DlgChat::RefreshChatContent[0]( ) -> e
	[Client]Game.UI.Hide.DlgChat::RefreshChannel[0]( ) -> F
	[Client]Game.UI.Hide.DlgChat::OnPopupListSelectEventHanler[1]( System.Int16 ) -> A
	[Client]Game.UI.Hide.DlgChat::OnCheckBoxWorldCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.Hide.DlgChat::OnCheckBoxMapCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.Hide.DlgChat::OnCheckBoxTeamCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.Hide.DlgChat::OnCheckBoxPrivateCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.Hide.DlgChat::OnCheckBoxSystemCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.Hide.DlgChat::OnCheckBoxNewsCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.Hide.DlgChat::OnCheckBoxGuildCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.Hide.DlgChat::OnButtonBackClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.Hide.DlgChat::CheckOperation[1]( Game.Msg.EChatType ) -> B
	[Client]Game.UI.Hide.DlgChat::OnButtonSendClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.Hide.DlgChat::OnButtonExpressClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.Hide.DlgChat::OnButtonEquipClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.Hide.DlgChat::OnButtonTeamClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.Hide.DlgChat::OnListEmotionClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.Hide.DlgChat::OnButtonCoordinateClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.Hide.DlgChat::OnInputChange[1]( Game.UI.UICommon.IXUIInput ) -> A
	[Client]Game.UI.Hide.DlgChat::OnButton_QuickClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.Hide.DlgChat::OnButton_PetClick[1]( Game.UI.UICommon.IXUIButton ) -> d

	[Client]Game.UI.Hide.DlgChat::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.Hide.DlgChat::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.Hide.DlgChat::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.Hide.DlgChat::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.Hide.DlgChat::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.HashSet`1<Game.Msg.EChatType> [Client]System.Collections.Generic.HashSet`1<Game.Msg.EChatType> Game.UI.Hide.DlgChat::m_setChatType -> A
	Game.Msg.EChatType [Client]Game.Msg.EChatType Game.UI.Hide.DlgChat::m_eChatTypeSelected -> A
	System.String [Client]System.String Game.UI.Hide.DlgChat::m_strTargetName -> A
	System.Single [Client]System.Single Game.UI.Hide.DlgChat::m_fTimeLastSendMsg -> A
	System.String [Client]System.String Game.UI.Hide.DlgChat::m_strInputText -> a

	System.String [Client]System.String Game.UI.Hide.DlgChat::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.Hide.DlgChat::Persist -> dropped
	System.Int32 [Client]System.Int32 Game.UI.Hide.DlgChat::layer -> dropped
}

[Client]Game.UI.DlgBattleHelper skipped:  filtered
{
	[Client]Game.UI.DlgBattleHelper::OnShow[0]( ) -> b
	[Client]Game.UI.DlgBattleHelper::Init[0]( ) -> c
	[Client]Game.UI.DlgBattleHelper::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgBattleHelper::OnCheckbox_BattleCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgBattleHelper::OnCheckbox_CureCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgBattleHelper::OnImageButton_StartClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgBattleHelper::OnImageButton_StopClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgBattleHelper::OnSlider_MedicineHpChanged[1]( Game.UI.UICommon.IXUISlider ) -> A
	[Client]Game.UI.DlgBattleHelper::OnCheckbox_MedicineCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgBattleHelper::OnCheckbox_ShopMedicineCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgBattleHelper::OnCheckbox_SkillCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgBattleHelper::OnCheckbox_AutomaticPickupCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.DlgBattleHelper::OnCheckbox_AutoCureCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.DlgBattleHelper::OnSlider_CureHpChanged[1]( Game.UI.UICommon.IXUISlider ) -> a
	[Client]Game.UI.DlgBattleHelper::OnCheckbox_OnlyTeamCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> d
	[Client]Game.UI.DlgBattleHelper::OnCheckbox_SelfCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> E
	[Client]Game.UI.DlgBattleHelper::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgBattleHelper::OnSlider_HangRadiusChange[1]( Game.UI.UICommon.IXUISlider ) -> B

	[Client]Game.UI.DlgBattleHelper::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBattleHelper::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBattleHelper::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgBattleHelper::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgBattleHelper::OneHundred -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgBattleHelper::BasePassiveSkillIndex -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgBattleHelper::MinRange -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgBattleHelper::MaxRange -> b
	Game.UI.UICommon.IXUICheckBox[] [Client]Game.UI.UICommon.IXUICheckBox[] Game.UI.DlgBattleHelper::m_SkillCheckBoxs -> A
	Game.UI.UICommon.IXUILabel[] [Client]Game.UI.UICommon.IXUILabel[] Game.UI.DlgBattleHelper::m_SkillLabels -> A
	Game.UI.UICommon.IXUIPicture[] [Client]Game.UI.UICommon.IXUIPicture[] Game.UI.DlgBattleHelper::m_SkillTextures -> A

	System.String [Client]System.String Game.UI.DlgBattleHelper::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgBattleHelper::layer -> dropped
}

[Client]Game.UI.DlgActivityMonsterBuy skipped:  filtered
{
	[Client]Game.UI.DlgActivityMonsterBuy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgActivityMonsterBuy::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgActivityMonsterBuy::OnButton_OKClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgActivityMonsterBuy::OnTexture_ItemClick[1]( Game.UI.UICommon.IXUIPicture ) -> A

	[Client]Game.UI.DlgActivityMonsterBuy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgActivityMonsterBuy::.ctor[0]( ) skipped:  special name
	[Client]Game.UI.DlgActivityMonsterBuy::.cctor[0]( ) skipped:  special name

	System.Int32[] [Client]System.Int32[] Game.UI.DlgActivityMonsterBuy::NeedItemIds -> A

	System.String [Client]System.String Game.UI.DlgActivityMonsterBuy::fileName -> dropped
}

[Client]Game.UI.DlgVip1Buy skipped:  filtered
{
	[Client]Game.UI.DlgVip1Buy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgVip1Buy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgVip1Buy::OnCheckbox1Check[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgVip1Buy::OnCheckbox2Check[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgVip1Buy::OnCheckbox3Check[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgVip1Buy::OnButtonBuyClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgVip1Buy::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgVip1Buy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgVip1Buy::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgVip1Buy::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgVip1Buy::m_MonthNum -> A

	System.String [Client]System.String Game.UI.DlgVip1Buy::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgVip1Buy::layer -> dropped
}

[Client]Game.UI.DlgTargetPhone skipped:  filtered
{
	[Client]Game.UI.DlgTargetPhone::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgTargetPhone::Init[0]( ) -> c
	[Client]Game.UI.DlgTargetPhone::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTargetPhone::OnImageButton_TargetClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgTargetPhone::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTargetPhone::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTargetPhone::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgTargetPhone::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgTargetPhone::m_bVisible -> A

	System.String [Client]System.String Game.UI.DlgTargetPhone::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgTargetPhone::Persist -> dropped
}

[Client]Game.UI.DlgPetSkillHole skipped:  filtered
{
	[Client]Game.UI.DlgPetSkillHole::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetSkillHole::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetSkillHole::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetSkillHole::Show[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgPetSkillHole::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetSkillHole::OnButton_SkillHoleOkClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPetSkillHole::OnImageButton_SkillHole_BuyClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgPetSkillHole::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetSkillHole::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkillHole::OpenSkillHoleShopId -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkillHole::MaxPetSkillHoleNum -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkillHole::m_Index -> B

	System.String [Client]System.String Game.UI.DlgPetSkillHole::fileName -> dropped
}

[Client]Game.UI.DlgMinimapRadarPhone skipped:  filtered
{
	[Client]Game.UI.DlgMinimapRadarPhone::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgMinimapRadarPhone::Init[0]( ) -> c
	[Client]Game.UI.DlgMinimapRadarPhone::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMinimapRadarPhone::Update[0]( ) -> E
	[Client]Game.UI.DlgMinimapRadarPhone::ChangeMap[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgMinimapRadarPhone::SetAngleY[1]( System.Single ) -> A
	[Client]Game.UI.DlgMinimapRadarPhone::OnSpriteRadarClick[1]( Game.UI.UICommon.IXUISprite ) -> A
	[Client]Game.UI.DlgMinimapRadarPhone::OnButton_ChangeLineClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMinimapRadarPhone::UpdateCharacters[0]( ) -> e
	[Client]Game.UI.DlgMinimapRadarPhone::Translate[2]( Game.UI.UICommon.IXUIListItem, System.Boolean ) -> A

	[Client]Game.UI.DlgMinimapRadarPhone::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadarPhone::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadarPhone::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadarPhone::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadarPhone::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadarPhone::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgMinimapRadarPhone::MinShowWorldMapLevel -> A
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.UI.UICommon.IXUIListItem> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.UI.UICommon.IXUIListItem> Game.UI.DlgMinimapRadarPhone::m_Items -> A
	System.Single [Client]System.Single Game.UI.DlgMinimapRadarPhone::m_fTimeOld -> A

	System.String [Client]System.String Game.UI.DlgMinimapRadarPhone::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMinimapRadarPhone::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgMinimapRadarPhone::Persist -> dropped
}

[Client]Game.UI.DlgMagicRecipe skipped:  filtered
{
	[Client]Game.UI.DlgMagicRecipe::OnShow[0]( ) -> b
	[Client]Game.UI.DlgMagicRecipe::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgMagicRecipe::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMagicRecipe::ShowRecipe[1]( System.Collections.Generic.List`1<System.Int32> ) -> A
	[Client]Game.UI.DlgMagicRecipe::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMagicRecipe::OnList_Button_OptionClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgMagicRecipe::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMagicRecipe::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMagicRecipe::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.UI.DlgMagicRecipe::m_Recipes -> A

	System.String [Client]System.String Game.UI.DlgMagicRecipe::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMagicRecipe::layer -> dropped
}

[Client]Game.UI.DlgHelpInfo skipped:  filtered
{
	[Client]Game.UI.DlgHelpInfo::OnShow[0]( ) -> b
	[Client]Game.UI.DlgHelpInfo::Init[0]( ) -> c
	[Client]Game.UI.DlgHelpInfo::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgHelpInfo::ShowUI[1]( System.String ) -> A
	[Client]Game.UI.DlgHelpInfo::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgHelpInfo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgHelpInfo::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgHelpInfo::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgHelpInfo::m_Title -> A
	System.String [Client]System.String Game.UI.DlgHelpInfo::m_Description -> a

	System.String [Client]System.String Game.UI.DlgHelpInfo::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgHelpInfo::layer -> dropped
}

[Client]Game.UI.DlgHelpInfo/enumHelpInfo skipped:  filtered
{
	Game.UI.DlgHelpInfo/enumHelpInfo [Client]Game.UI.DlgHelpInfo/enumHelpInfo Game.UI.DlgHelpInfo/enumHelpInfo::DlgEquipSoul -> A

	System.Int32 [Client]System.Int32 Game.UI.DlgHelpInfo/enumHelpInfo::value__ skipped:  filtered
}

[Client]Game.UI.DlgFlyText skipped:  filtered
{
	[Client]Game.UI.DlgFlyText::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFlyText::Init[0]( ) -> c
	[Client]Game.UI.DlgFlyText::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFlyText::Update[0]( ) -> E
	[Client]Game.UI.DlgFlyText::SetStatus[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgFlyText::AddFlyText[2]( System.String, Game.Character ) -> A
	[Client]Game.UI.DlgFlyText::AddSystemInfo[1]( System.String ) -> A
	[Client]Game.UI.DlgFlyText::AddBulletin[1]( System.String ) -> a
	[Client]Game.UI.DlgFlyText::AddBC[1]( System.String ) -> B
	[Client]Game.UI.DlgFlyText::AddFlyText[3]( System.String, Game.Character, Game.UI.DlgFlyText/enumFlyTextType ) -> A

	[Client]Game.UI.DlgFlyText::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFlyText::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFlyText::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFlyText::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFlyText::.ctor[0]( ) skipped:  special name

	Game.UI.IFlyTextManager[] [Client]Game.UI.IFlyTextManager[] Game.UI.DlgFlyText::m_flyTextManagers -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgFlyText::m_nStatus -> A

	System.String [Client]System.String Game.UI.DlgFlyText::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgFlyText::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgFlyText::Persist -> dropped
}

[Client]Game.UI.DlgFlyText/enumFlyTextType skipped:  filtered
{
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_Exp -> A
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_Damage -> a
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_Dodge -> B
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_Cure -> b
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_WardOff -> C
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_Hot -> c
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_DotDamage -> D
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_Crit -> d
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_Combo -> E
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_Bulletin -> e
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_SystemInfo -> F
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_BC -> f
	Game.UI.DlgFlyText/enumFlyTextType [Client]Game.UI.DlgFlyText/enumFlyTextType Game.UI.DlgFlyText/enumFlyTextType::eFlyTextType_Max -> G

	System.Int32 [Client]System.Int32 Game.UI.DlgFlyText/enumFlyTextType::value__ skipped:  filtered
}

[Client]Game.UI.FlyTextEntity skipped:  filtered
{
	[Client]Game.UI.FlyTextEntity::get_FlyTextItem[0]( ) -> A
	[Client]Game.UI.FlyTextEntity::get_Target[0]( ) -> a
	[Client]Game.UI.FlyTextEntity::set_Target[1]( Game.Character ) -> A
	[Client]Game.UI.FlyTextEntity::get_Active[0]( ) -> B
	[Client]Game.UI.FlyTextEntity::set_Active[1]( System.Boolean ) -> A
	[Client]Game.UI.FlyTextEntity::get_Alpha[0]( ) -> b
	[Client]Game.UI.FlyTextEntity::set_Alpha[1]( System.Single ) -> A
	[Client]Game.UI.FlyTextEntity::get_PosStart[0]( ) -> C
	[Client]Game.UI.FlyTextEntity::set_PosStart[1]( UnityEngine.Vector3 ) -> A
	[Client]Game.UI.FlyTextEntity::get_TimeStart[0]( ) -> c
	[Client]Game.UI.FlyTextEntity::set_TimeStart[1]( System.Single ) -> a
	[Client]Game.UI.FlyTextEntity::get_Transform[0]( ) -> D
	[Client]Game.UI.FlyTextEntity::get_Label[0]( ) -> d
	[Client]Game.UI.FlyTextEntity::set_Label[1]( Game.UI.UICommon.IXUILabel ) -> A
	[Client]Game.UI.FlyTextEntity::get_DirectionRandom[0]( ) -> E
	[Client]Game.UI.FlyTextEntity::set_DirectionRandom[1]( UnityEngine.Vector2 ) -> A

	[Client]Game.UI.FlyTextEntity::.ctor[2]( Game.UI.UICommon.IXUIListItem, Game.Character ) skipped:  special name

	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.UI.FlyTextEntity::m_posStart -> A
	System.Single [Client]System.Single Game.UI.FlyTextEntity::m_fTimeStart -> A
	Game.UI.UICommon.IXUIListItem [Client]Game.UI.UICommon.IXUIListItem Game.UI.FlyTextEntity::m_uiListItem -> A
	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.FlyTextEntity::m_uiLabel -> A
	Game.Character [Client]Game.Character Game.UI.FlyTextEntity::m_target -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.FlyTextEntity::m_directionRandom -> A

	Game.UI.UICommon.IXUIListItem [Client]Game.UI.UICommon.IXUIListItem Game.UI.FlyTextEntity::FlyTextItem -> dropped
	Game.Character [Client]Game.Character Game.UI.FlyTextEntity::Target -> dropped
	System.Boolean [Client]System.Boolean Game.UI.FlyTextEntity::Active -> dropped
	System.Single [Client]System.Single Game.UI.FlyTextEntity::Alpha -> dropped
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.UI.FlyTextEntity::PosStart -> dropped
	System.Single [Client]System.Single Game.UI.FlyTextEntity::TimeStart -> dropped
	UnityEngine.Transform [Client]UnityEngine.Transform Game.UI.FlyTextEntity::Transform -> dropped
	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.FlyTextEntity::Label -> dropped
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.FlyTextEntity::DirectionRandom -> dropped
}

[Client]Game.UI.FlyTextManagerBase skipped:  filtered
{
	[Client]Game.UI.FlyTextManagerBase::Add[1]( System.String ) -> A
	[Client]Game.UI.FlyTextManagerBase::Add[2]( System.String, Game.Character ) -> A
	[Client]Game.UI.FlyTextManagerBase::Update[0]( ) -> A
	[Client]Game.UI.FlyTextManagerBase::get_FlyTexts[0]( ) -> a
	[Client]Game.UI.FlyTextManagerBase::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A
	[Client]Game.UI.FlyTextManagerBase::Translate[2]( Game.UI.FlyTextEntity&, System.Single ) -> A

	[Client]Game.UI.FlyTextManagerBase::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name

	Game.UI.UICommon.IXUIList [Client]Game.UI.UICommon.IXUIList Game.UI.FlyTextManagerBase::m_uiList -> A
	System.Single [Client]System.Single Game.UI.FlyTextManagerBase::m_fTotalTime -> A
	System.Collections.Generic.LinkedList`1<Game.UI.FlyTextEntity> [Client]System.Collections.Generic.LinkedList`1<Game.UI.FlyTextEntity> Game.UI.FlyTextManagerBase::m_listFlyText -> A

	System.Collections.Generic.LinkedList`1<Game.UI.FlyTextEntity> [Client]System.Collections.Generic.LinkedList`1<Game.UI.FlyTextEntity> Game.UI.FlyTextManagerBase::FlyTexts -> dropped
}

[Client]Game.UI.ExpFlyTextManager skipped:  filtered
{
	[Client]Game.UI.ExpFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A
	[Client]Game.UI.ExpFlyTextManager::Translate[2]( Game.UI.FlyTextEntity&, System.Single ) -> A

	[Client]Game.UI.ExpFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name

	System.Single [Client]System.Single Game.UI.ExpFlyTextManager::m_fTotalDistance -> A
}

[Client]Game.UI.DamageFlyTextManager skipped:  filtered
{
	[Client]Game.UI.DamageFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A
	[Client]Game.UI.DamageFlyTextManager::Translate[2]( Game.UI.FlyTextEntity&, System.Single ) -> A

	[Client]Game.UI.DamageFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DamageFlyTextManager::m_fFirstStageTime -> A
	System.Single [Client]System.Single Game.UI.DamageFlyTextManager::m_fTotalDistance -> a
}

[Client]Game.UI.DotDamageFlyTextManager skipped:  filtered
{
	[Client]Game.UI.DotDamageFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A
	[Client]Game.UI.DotDamageFlyTextManager::Translate[2]( Game.UI.FlyTextEntity&, System.Single ) -> A

	[Client]Game.UI.DotDamageFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DotDamageFlyTextManager::m_fTotalDistance -> A
}

[Client]Game.UI.CritFlyTextManager skipped:  filtered
{
	[Client]Game.UI.CritFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A
	[Client]Game.UI.CritFlyTextManager::Translate[2]( Game.UI.FlyTextEntity&, System.Single ) -> A

	[Client]Game.UI.CritFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name

	System.Single [Client]System.Single Game.UI.CritFlyTextManager::m_fTotalDistance -> A
}

[Client]Game.UI.ComboFlyTextManager skipped:  filtered
{
	[Client]Game.UI.ComboFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A
	[Client]Game.UI.ComboFlyTextManager::Translate[2]( Game.UI.FlyTextEntity&, System.Single ) -> A

	[Client]Game.UI.ComboFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name

	System.Single [Client]System.Single Game.UI.ComboFlyTextManager::m_fTotalDistance -> A
}

[Client]Game.UI.BulletinFlyTextManager skipped:  filtered
{
	[Client]Game.UI.BulletinFlyTextManager::Update[0]( ) -> A
	[Client]Game.UI.BulletinFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A
	[Client]Game.UI.BulletinFlyTextManager::Translate[2]( Game.UI.FlyTextEntity&, System.Single ) -> A

	[Client]Game.UI.BulletinFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name

	System.Single [Client]System.Single Game.UI.BulletinFlyTextManager::m_fSpeed -> A
}

[Client]Game.UI.DlgChatBubbleDynamic skipped:  filtered
{
	[Client]Game.UI.DlgChatBubbleDynamic::GetDlgDynamicInterface[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgChatBubbleDynamic::get_Status[0]( ) -> A
	[Client]Game.UI.DlgChatBubbleDynamic::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.DlgChatBubbleDynamic::Refresh[0]( ) -> a
	[Client]Game.UI.DlgChatBubbleDynamic::SetStatus[1]( System.Int32 ) -> A

	[Client]Game.UI.DlgChatBubbleDynamic::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgChatBubbleDynamic::m_nStatus -> A

	System.Int32 [Client]System.Int32 Game.UI.DlgChatBubbleDynamic::Status -> dropped
}

[Client]Game.UI.DlgAFKBuy skipped:  filtered
{
	[Client]Game.UI.DlgAFKBuy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAFKBuy::Init[0]( ) -> c
	[Client]Game.UI.DlgAFKBuy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAFKBuy::Show[1]( Game.UI.DlgAFKBuy/enumAfkBuyType ) -> A
	[Client]Game.UI.DlgAFKBuy::OnButtonBuy[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAFKBuy::OnButtonCancel[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgAFKBuy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAFKBuy::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAFKBuy::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAFKBuy::.ctor[0]( ) skipped:  special name

	Game.UI.DlgAFKBuy/enumAfkBuyType [Client]Game.UI.DlgAFKBuy/enumAfkBuyType Game.UI.DlgAFKBuy::m_eAfkBuyType -> A

	System.String [Client]System.String Game.UI.DlgAFKBuy::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAFKBuy::layer -> dropped
}

[Client]Game.UI.DlgAFKBuy/enumAfkBuyType skipped:  filtered
{
	Game.UI.DlgAFKBuy/enumAfkBuyType [Client]Game.UI.DlgAFKBuy/enumAfkBuyType Game.UI.DlgAFKBuy/enumAfkBuyType::eAfkBuyType_SpeedUp -> A
	Game.UI.DlgAFKBuy/enumAfkBuyType [Client]Game.UI.DlgAFKBuy/enumAfkBuyType Game.UI.DlgAFKBuy/enumAfkBuyType::eAfkBuyType_Finish -> a

	System.Int32 [Client]System.Int32 Game.UI.DlgAFKBuy/enumAfkBuyType::value__ skipped:  filtered
}

[Client]Game.UI.DlgSing skipped:  filtered
{
	[Client]Game.UI.DlgSing::OnShow[0]( ) -> b
	[Client]Game.UI.DlgSing::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgSing::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgSing::Update[0]( ) -> E
	[Client]Game.UI.DlgSing::get_Name[0]( ) -> e
	[Client]Game.UI.DlgSing::Show[2]( System.String, System.Single ) -> A

	[Client]Game.UI.DlgSing::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSing::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgSing::m_Name -> A
	System.Single [Client]System.Single Game.UI.DlgSing::m_Total -> A
	System.Single [Client]System.Single Game.UI.DlgSing::m_Start -> a

	System.String [Client]System.String Game.UI.DlgSing::Name -> dropped
	System.String [Client]System.String Game.UI.DlgSing::fileName -> dropped
}

[Client]Game.UI.DlgShipExplorationUpgrade skipped:  filtered
{
	[Client]Game.UI.DlgShipExplorationUpgrade::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShipExplorationUpgrade::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShipExplorationUpgrade::Show[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgShipExplorationUpgrade::RefreshLevelName[0]( ) -> e
	[Client]Game.UI.DlgShipExplorationUpgrade::RefreshUnlockCabin[0]( ) -> F
	[Client]Game.UI.DlgShipExplorationUpgrade::RefreshUnLockArea[0]( ) -> f
	[Client]Game.UI.DlgShipExplorationUpgrade::RefreshBadge[0]( ) -> G
	[Client]Game.UI.DlgShipExplorationUpgrade::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgShipExplorationUpgrade::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationUpgrade::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationUpgrade::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationUpgrade::m_Level -> A

	System.String [Client]System.String Game.UI.DlgShipExplorationUpgrade::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationUpgrade::layer -> dropped
}

[Client]Game.UI.DlgListSfx skipped:  filtered
{
	[Client]Game.UI.DlgListSfx::OnShow[0]( ) -> b
	[Client]Game.UI.DlgListSfx::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgListSfx::UpdateList[0]( ) -> e
	[Client]Game.UI.DlgListSfx::OnButton_ReloadClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgListSfx::OnList_SfxDoubleClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgListSfx::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgListSfx::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgListSfx::m_TestEffectId -> A

	System.String [Client]System.String Game.UI.DlgListSfx::fileName -> dropped
}

[Client]Game.UI.DlgGuildAppoint skipped:  filtered
{
	[Client]Game.UI.DlgGuildAppoint::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgGuildAppoint::Init[0]( ) -> c
	[Client]Game.UI.DlgGuildAppoint::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuildAppoint::Show[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgGuildAppoint::OnButtonOkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGuildAppoint::OnButtonCancel[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgGuildAppoint::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildAppoint::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildAppoint::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildAppoint::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgGuildAppoint::m_unMemberID -> A
	System.Byte [Client]System.Byte Game.UI.DlgGuildAppoint::m_byteRank -> A

	System.String [Client]System.String Game.UI.DlgGuildAppoint::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgGuildAppoint::layer -> dropped
}

[Client]Game.UI.DlgGemInlay skipped:  filtered
{
	[Client]Game.UI.DlgGemInlay::OnShow[0]( ) -> b
	[Client]Game.UI.DlgGemInlay::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgGemInlay::Init[0]( ) -> c
	[Client]Game.UI.DlgGemInlay::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGemInlay::OnButtonClickOk[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGemInlay::OnListSelectPart[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgGemInlay::OnListClickPart[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgGemInlay::OnListClickSocket[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgGemInlay::OnListClickBagItem[1]( Game.UI.UICommon.IXUIListItem ) -> b
	[Client]Game.UI.DlgGemInlay::ButtonClickInsertGem[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgGemInlay::OnTipAppendButtons[2]( Game.UI.UICommon.IXUIListItem, System.Collections.Generic.List`1<Game.TipButtonData>& ) -> A
	[Client]Game.UI.DlgGemInlay::GetSocketItemCanInsert[1]( Game.Msg.ClientSItemData ) -> A
	[Client]Game.UI.DlgGemInlay::OnButtonClickPickout[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgGemInlay::OnCheckAttack[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgGemInlay::OnCheckDefence[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgGemInlay::OnButtonInformationClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgGemInlay::ShowSocketGems[0]( ) -> e
	[Client]Game.UI.DlgGemInlay::ShowGemItems[0]( ) -> F
	[Client]Game.UI.DlgGemInlay::ShowMoney[0]( ) -> f
	[Client]Game.UI.DlgGemInlay::ShowPartInfo[0]( ) -> G
	[Client]Game.UI.DlgGemInlay::GetPartId[0]( ) -> g
	[Client]Game.UI.DlgGemInlay::CanInsertPart[2]( System.Int32, Game.Msg.enumEquipPart ) -> A

	[Client]Game.UI.DlgGemInlay::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGemInlay::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGemInlay::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGemInlay::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.UI.DlgGemInlay::m_PartNumPerPage -> A
	System.Byte [Client]System.Byte Game.UI.DlgGemInlay::m_SelectedPart -> a
	System.Byte[] [Client]System.Byte[] Game.UI.DlgGemInlay::m_PartIndexToId -> A

	System.String [Client]System.String Game.UI.DlgGemInlay::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgGemInlay::layer -> dropped
}

[Client]Game.UI.DlgFog skipped:  filtered
{
	[Client]Game.UI.DlgFog::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFog::Init[0]( ) -> c
	[Client]Game.UI.DlgFog::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFog::SetFogAlpha[1]( System.Int32 ) -> A

	[Client]Game.UI.DlgFog::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFog::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFog::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFog::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFog::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgFog::m_FogAlpha -> A

	System.String [Client]System.String Game.UI.DlgFog::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgFog::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgFog::Persist -> dropped
}

[Client]Game.UI.DlgAuctionMoney skipped:  filtered
{
	[Client]Game.UI.DlgAuctionMoney::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAuctionMoney::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAuctionMoney::RefreshBuyMoneyList[0]( ) -> e
	[Client]Game.UI.DlgAuctionMoney::RefreshSellMoneyList[0]( ) -> F
	[Client]Game.UI.DlgAuctionMoney::RefreshMoneyAndGold[0]( ) -> f
	[Client]Game.UI.DlgAuctionMoney::OnListBuyClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgAuctionMoney::OnListSellClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgAuctionMoney::OnCheckboxBuyCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgAuctionMoney::OnCheckboxSellCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgAuctionMoney::OnButtonSellMoneyClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAuctionMoney::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgAuctionMoney::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgAuctionMoney::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgAuctionMoney::OnCheckboxBuyGoldNumClick[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgAuctionMoney::OnCheckboxBuyUnitPriceClick[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgAuctionMoney::OnCheckboxBuySumPriceClick[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgAuctionMoney::OnCheckboxSellGoldNumClick[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.DlgAuctionMoney::OnCheckboxSellTimeClick[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.DlgAuctionMoney::OnCheckboxSellSumPriceClick[1]( Game.UI.UICommon.IXUICheckBox ) -> d
	[Client]Game.UI.DlgAuctionMoney::ResetBuySortFlag[0]( ) -> G
	[Client]Game.UI.DlgAuctionMoney::get_MaxPage[0]( ) -> g
	[Client]Game.UI.DlgAuctionMoney::get_BuyGoldListInCurPage[0]( ) -> H

	[Client]Game.UI.DlgAuctionMoney::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionMoney::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionMoney::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoney::MaxNumPerPage -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgAuctionMoney::m_SortBuyGoldNum -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgAuctionMoney::m_SortBuyUnitPrice -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgAuctionMoney::m_SortBuySumPrice -> B
	System.Boolean [Client]System.Boolean Game.UI.DlgAuctionMoney::m_SortSellGoldNum -> b
	System.Boolean [Client]System.Boolean Game.UI.DlgAuctionMoney::m_SortSellTime -> C
	System.Boolean [Client]System.Boolean Game.UI.DlgAuctionMoney::m_SortSellSumPrice -> c
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoney::m_CurPage -> a

	System.String [Client]System.String Game.UI.DlgAuctionMoney::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoney::layer -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoney::MaxPage -> dropped
	System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> [Client]System.Collections.Generic.List`1<Game.Msg.ClientGoldConsignInfo> Game.UI.DlgAuctionMoney::BuyGoldListInCurPage -> dropped
}

[Client]Game.UI.DlgTeamApplyList skipped:  filtered
{
	[Client]Game.UI.DlgTeamApplyList::OnShow[0]( ) -> b
	[Client]Game.UI.DlgTeamApplyList::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgTeamApplyList::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTeamApplyList::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgTeamApplyList::OnList_ApplyListClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgTeamApplyList::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTeamApplyList::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTeamApplyList::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgTeamApplyList::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgTeamApplyList::m_Selected -> A

	System.String [Client]System.String Game.UI.DlgTeamApplyList::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgTeamApplyList::layer -> dropped
}

[Client]Game.UI.DlgTarget skipped:  filtered
{
	[Client]Game.UI.DlgTarget::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgTarget::Init[0]( ) -> c
	[Client]Game.UI.DlgTarget::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTarget::OnImageButton_TargetClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgTarget::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTarget::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTarget::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgTarget::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgTarget::m_bVisible -> A

	System.String [Client]System.String Game.UI.DlgTarget::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgTarget::Persist -> dropped
}

[Client]Game.UI.DlgPet skipped:  filtered
{
	[Client]Game.UI.DlgPet::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPet::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPet::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPet::UpdatePetInfo[0]( ) -> e
	[Client]Game.UI.DlgPet::OnList_PetModelSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgPet::OnButtonBattleClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPet::OnButtonRecallClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPet::OnImageButton_FreeClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgPet::OnPetFreeHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgPet::OnImageButton_SelectClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgPet::OnInput_ChangeNameSubmit[1]( Game.UI.UICommon.IXUIInput ) -> A
	[Client]Game.UI.DlgPet::LoadHandler[1]( UnityEngine.Object ) -> A

	[Client]Game.UI.DlgPet::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPet::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPet::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgPet::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPet::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgPet::LockedHoleIcon -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPet::MaxStar -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgPet::m_LoadTaskId -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UI.DlgPet::m_Model -> A
	System.String [Client]System.String Game.UI.DlgPet::m_ModelFile -> a

	System.String [Client]System.String Game.UI.DlgPet::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgPet::layer -> dropped
}

[Client]Game.UI.DlgGuildRecruitment skipped:  filtered
{
	[Client]Game.UI.DlgGuildRecruitment::Init[0]( ) -> c
	[Client]Game.UI.DlgGuildRecruitment::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuildRecruitment::OnButtonOkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGuildRecruitment::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgGuildRecruitment::OnInputSubmit[1]( Game.UI.UICommon.IXUIInput ) -> A

	[Client]Game.UI.DlgGuildRecruitment::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildRecruitment::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildRecruitment::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildRecruitment::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgGuildRecruitment::m_strRecruitment -> A

	System.String [Client]System.String Game.UI.DlgGuildRecruitment::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgGuildRecruitment::layer -> dropped
}

[Client]Game.UI.DlgEquipTrans skipped:  filtered
{
	[Client]Game.UI.DlgEquipTrans::OnShow[0]( ) -> b
	[Client]Game.UI.DlgEquipTrans::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgEquipTrans::Init[0]( ) -> c
	[Client]Game.UI.DlgEquipTrans::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgEquipTrans::GetTargetItemId[0]( ) -> e
	[Client]Game.UI.DlgEquipTrans::OnListFirstClickEvent[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgEquipTrans::OnListScondClickEvent[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgEquipTrans::OnButtonClickHelp[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgEquipTrans::OnButtonClickSendMsg[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgEquipTrans::OnListClickBagItem[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgEquipTrans::RefreshBag[1]( Game.UI.UICommon.IXUIListItem ) -> b
	[Client]Game.UI.DlgEquipTrans::RefreshText[0]( ) -> F
	[Client]Game.UI.DlgEquipTrans::OnSoulChangeResult[0]( ) -> f
	[Client]Game.UI.DlgEquipTrans::GetSoulString[1]( System.UInt16 ) -> A

	[Client]Game.UI.DlgEquipTrans::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipTrans::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipTrans::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgEquipTrans::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipTrans::.ctor[0]( ) skipped:  special name

	System.Int64 [Client]System.Int64 Game.UI.DlgEquipTrans::m_TargetItemId -> A

	System.String [Client]System.String Game.UI.DlgEquipTrans::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgEquipTrans::layer -> dropped
}

[Client]Game.UI.DlgArenaOffLineBuy skipped:  filtered
{
	[Client]Game.UI.DlgArenaOffLineBuy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgArenaOffLineBuy::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgArenaOffLineBuy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgArenaOffLineBuy::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgArenaOffLineBuy::OnButton_BuyOneClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgArenaOffLineBuy::OnButton_BuyFiveClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgArenaOffLineBuy::OnButton_BuyAllClick[1]( Game.UI.UICommon.IXUIButton ) -> b

	[Client]Game.UI.DlgArenaOffLineBuy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLineBuy::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLineBuy::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgArenaOffLineBuy::BuyOne -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgArenaOffLineBuy::BuyFive -> a

	System.String [Client]System.String Game.UI.DlgArenaOffLineBuy::fileName -> dropped
}

[Client]Game.UI.DlgTipEquipStr skipped:  filtered
{
	[Client]Game.UI.DlgTipEquipStr::OnShow[0]( ) -> b
	[Client]Game.UI.DlgTipEquipStr::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgTipEquipStr::Init[0]( ) -> c
	[Client]Game.UI.DlgTipEquipStr::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTipEquipStr::OnButtonClickClose[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgTipEquipStr::Show[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgTipEquipStr::Show[2]( System.Int32, System.Boolean ) -> A
	[Client]Game.UI.DlgTipEquipStr::GetAttrString[3]( System.String, System.Single, System.String ) -> A
	[Client]Game.UI.DlgTipEquipStr::GetPartString[2]( System.Int32, System.Int32 ) -> A

	[Client]Game.UI.DlgTipEquipStr::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTipEquipStr::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTipEquipStr::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgTipEquipStr::m_nGrade -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgTipEquipStr::m_bPlayerRole -> A

	System.String [Client]System.String Game.UI.DlgTipEquipStr::fileName -> dropped
}

[Client]Game.UI.DlgSystem skipped:  filtered
{
	[Client]Game.UI.DlgSystem::OnShow[0]( ) -> b
	[Client]Game.UI.DlgSystem::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgSystem::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgSystem::OnButton_SetBattleHelperClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgSystem::OnButton_BindingClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgSystem::OnButton_CustomerClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgSystem::OnButton_ChangeLineClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgSystem::OnButton_ChangeRoleClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgSystem::OnChangeRoleHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgSystem::OnCheckbox_BarClick[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgSystem::OnCheckbox_ClickClick[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgSystem::OnButtonCellPhoneClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgSystem::OnButtonComputerClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgSystem::OnButton_SOSClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgSystem::OnCheckbox_VisualBestClick[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgSystem::OnCheckbox_PerformBestClick[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgSystem::OnButton_MoreSettingClick[1]( Game.UI.UICommon.IXUIButton ) -> E

	[Client]Game.UI.DlgSystem::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSystem::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSystem::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgSystem::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgSystem::OneHundred -> A

	System.String [Client]System.String Game.UI.DlgSystem::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgSystem::layer -> dropped
}

[Client]Game.UI.DlgSuccess skipped:  filtered
{
	[Client]Game.UI.DlgSuccess::OnShow[0]( ) -> b
	[Client]Game.UI.DlgSuccess::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgSuccess::Init[0]( ) -> c
	[Client]Game.UI.DlgSuccess::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgSuccess::Show[1]( System.Boolean ) -> A

	[Client]Game.UI.DlgSuccess::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSuccess::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSuccess::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgSuccess::m_Success -> A

	System.String [Client]System.String Game.UI.DlgSuccess::fileName -> dropped
}

[Client]Game.UI.DlgSeeShip skipped:  filtered
{
	[Client]Game.UI.DlgSeeShip::OnShow[0]( ) -> b
	[Client]Game.UI.DlgSeeShip::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgSeeShip::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgSeeShip::Show[1]( Game.Msg.MsgServerAckRankExpeditionInfo ) -> A
	[Client]Game.UI.DlgSeeShip::GetInfo[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgSeeShip::GetMemberListItem[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.UI.DlgSeeShip::GetXUIList[2]( Game.UI.UICommon.IXUIListItem, System.Int32 ) -> A
	[Client]Game.UI.DlgSeeShip::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgSeeShip::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSeeShip::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSeeShip::.ctor[0]( ) skipped:  special name

	Game.Msg.MsgServerAckRankExpeditionInfo [Client]Game.Msg.MsgServerAckRankExpeditionInfo Game.UI.DlgSeeShip::m_Info -> A

	System.String [Client]System.String Game.UI.DlgSeeShip::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgSeeShip::layer -> dropped
}

[Client]Game.UI.DlgMagicBox skipped:  filtered
{
	[Client]Game.UI.DlgMagicBox::OnShow[0]( ) -> b
	[Client]Game.UI.DlgMagicBox::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgMagicBox::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMagicBox::PutDownItems[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgMagicBox::PutDownItem[1]( System.UInt64 ) -> A
	[Client]Game.UI.DlgMagicBox::ShowResult[1]( System.UInt64 ) -> a
	[Client]Game.UI.DlgMagicBox::RemoveItem[1]( System.Int32 ) -> a
	[Client]Game.UI.DlgMagicBox::OnButton_BuyClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMagicBox::OnImageButton_QuickClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgMagicBox::OnImageButton_StartClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgMagicBox::OnButton_InformationClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgMagicBox::OnList_ItemClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgMagicBox::OnButton_BrushClick[1]( Game.UI.UICommon.IXUIButton ) -> C

	[Client]Game.UI.DlgMagicBox::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMagicBox::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMagicBox::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgMagicBox::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMagicBox::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgMagicBox::MaxItemNum -> A
	System.UInt64[] [Client]System.UInt64[] Game.UI.DlgMagicBox::m_ItemIds -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgMagicBox::m_FormulaId -> A
	System.UInt64 [Client]System.UInt64 Game.UI.DlgMagicBox::m_ResultId -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgMagicBox::m_ShowSuccess -> A

	System.String [Client]System.String Game.UI.DlgMagicBox::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMagicBox::layer -> dropped
}

[Client]Game.UI.DlgJoyStick1 skipped:  filtered
{
	[Client]Game.UI.DlgJoyStick1::Init[0]( ) -> c
	[Client]Game.UI.DlgJoyStick1::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgJoyStick1::Update[0]( ) -> E
	[Client]Game.UI.DlgJoyStick1::get_Enable[0]( ) -> A
	[Client]Game.UI.DlgJoyStick1::SetJoyEnable[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgJoyStick1::get_Pressed[0]( ) -> e
	[Client]Game.UI.DlgJoyStick1::OnSpriteMaskPress[1]( System.Boolean ) -> a
	[Client]Game.UI.DlgJoyStick1::OnSpriteMaskDrag[1]( UnityEngine.Vector2 ) -> A

	[Client]Game.UI.DlgJoyStick1::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick1::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick1::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgJoyStick1::MinDistance -> A
	System.Single [Client]System.Single Game.UI.DlgJoyStick1::MaxDistance -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1::m_bMoving -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.DlgJoyStick1::m_touchPosStart -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.DlgJoyStick1::m_totalDelta -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1::m_bPressed -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1::m_bEnable -> B

	System.String [Client]System.String Game.UI.DlgJoyStick1::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick1::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1::Pressed -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1::Enable -> dropped
}

[Client]Game.UI.DlgFashion skipped:  filtered
{
	[Client]Game.UI.DlgFashion::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFashion::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgFashion::Init[0]( ) -> c
	[Client]Game.UI.DlgFashion::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFashion::Update[0]( ) -> E
	[Client]Game.UI.DlgFashion::OnClickItemList[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgFashion::OnCheckShow[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgFashion::ShowEquipIcon[2]( Game.UI.UICommon.IXUIList, System.Byte[] ) -> A
	[Client]Game.UI.DlgFashion::RefreshModel[0]( ) -> e
	[Client]Game.UI.DlgFashion::DoRefreshModel[0]( ) -> F

	[Client]Game.UI.DlgFashion::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFashion::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgFashion::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFashion::.ctor[0]( ) skipped:  special name
	[Client]Game.UI.DlgFashion::.cctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.UI.DlgFashion::IconCount -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UI.DlgFashion::m_gameObjecMe -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgFashion::m_NeedRefreshModel -> A
	System.Byte[] [Client]System.Byte[] Game.UI.DlgFashion::LeftIconMapping -> A
	System.Byte[] [Client]System.Byte[] Game.UI.DlgFashion::RightIconMapping -> a

	System.String [Client]System.String Game.UI.DlgFashion::fileName -> dropped
}

[Client]Game.UI.DlgEquipIntensify skipped:  filtered
{
	[Client]Game.UI.DlgEquipIntensify::OnShow[0]( ) -> b
	[Client]Game.UI.DlgEquipIntensify::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgEquipIntensify::Init[0]( ) -> c
	[Client]Game.UI.DlgEquipIntensify::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgEquipIntensify::OnButtonClickOk[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgEquipIntensify::OnListSelectEquipPart[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgEquipIntensify::OnList0ClickEquipPart[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgEquipIntensify::OnList1ClickEquipPart[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgEquipIntensify::OnButtonInformationClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgEquipIntensify::OnCheckAttack[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgEquipIntensify::OnCheckDefence[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgEquipIntensify::OnCheckRune[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgEquipIntensify::ShowPartInfo[0]( ) -> e
	[Client]Game.UI.DlgEquipIntensify::ShowBoostItems[0]( ) -> F
	[Client]Game.UI.DlgEquipIntensify::GetPartIndex[0]( ) -> f
	[Client]Game.UI.DlgEquipIntensify::GetPartId[0]( ) -> G
	[Client]Game.UI.DlgEquipIntensify::GetItemListByIndexFromMaterialList[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgEquipIntensify::GetGemNumber[2]( System.Int32&, System.Int32& ) -> A
	[Client]Game.UI.DlgEquipIntensify::GetRuneNumber[2]( System.Int32&, System.Int32& ) -> a

	[Client]Game.UI.DlgEquipIntensify::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipIntensify::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipIntensify::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipIntensify::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgEquipIntensify::m_PartNumPerPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgEquipIntensify::m_SelectedListPage -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgEquipIntensify::m_UseImprint -> A
	System.Byte[] [Client]System.Byte[] Game.UI.DlgEquipIntensify::m_PartIndexToId -> A

	System.String [Client]System.String Game.UI.DlgEquipIntensify::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgEquipIntensify::layer -> dropped
}

[Client]Game.UI.DlgTeam skipped:  filtered
{
	[Client]Game.UI.DlgTeam::OnShow[0]( ) -> b
	[Client]Game.UI.DlgTeam::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgTeam::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTeam::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgTeam::OnImageButton_CreateClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgTeam::OnImageButton_DisbandClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgTeam::OnImageButton_AddClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgTeam::OnImageButton_ApplyClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgTeam::OnImageButton_ExitClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgTeam::OnImageButton_ExpelClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgTeam::OnImageButton_SeeClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgTeam::OnImageButton_TransClick[1]( Game.UI.UICommon.IXUIButton ) -> E

	[Client]Game.UI.DlgTeam::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTeam::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTeam::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgTeam::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.GameObject> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,UnityEngine.GameObject> Game.UI.DlgTeam::m_Models -> A

	System.String [Client]System.String Game.UI.DlgTeam::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgTeam::layer -> dropped
}

[Client]Game.UI.DlgPetReborn skipped:  filtered
{
	[Client]Game.UI.DlgPetReborn::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetReborn::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetReborn::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetReborn::OnButton_RebornClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetReborn::OnRebirthHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgPetReborn::OnButton_InformationClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgPetReborn::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetReborn::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetReborn::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetReborn::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgPetReborn::PetRebirthPercentParam -> A

	System.String [Client]System.String Game.UI.DlgPetReborn::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgPetReborn::layer -> dropped
}

[Client]Game.UI.DlgEquipFunction skipped:  filtered
{
	[Client]Game.UI.DlgEquipFunction::OnShow[0]( ) -> b
	[Client]Game.UI.DlgEquipFunction::Init[0]( ) -> c
	[Client]Game.UI.DlgEquipFunction::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgEquipFunction::OnCheckBoxIntensifyCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgEquipFunction::OnCheckBoxInsertGemCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgEquipFunction::OnCheckBoxEquipSoulCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgEquipFunction::OnCheckBoxEquipTransCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgEquipFunction::OnCheckBoxMagicBoxCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgEquipFunction::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgEquipFunction::OnButtonBackClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgEquipFunction::Change[1]( Game.UI.DlgEquipFunction/enumDlgType ) -> A
	[Client]Game.UI.DlgEquipFunction::SetVisible[2]( Game.UI.DlgEquipFunction/enumDlgType, System.Boolean ) -> A
	[Client]Game.UI.DlgEquipFunction::ShowUI[1]( Game.UI.DlgEquipFunction/enumDlgType ) -> a

	[Client]Game.UI.DlgEquipFunction::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipFunction::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipFunction::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgEquipFunction::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipFunction::.ctor[0]( ) skipped:  special name

	Game.UI.DlgEquipFunction/enumDlgType [Client]Game.UI.DlgEquipFunction/enumDlgType Game.UI.DlgEquipFunction::m_eDlgType -> A

	System.String [Client]System.String Game.UI.DlgEquipFunction::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgEquipFunction::layer -> dropped
}

[Client]Game.UI.DlgEquipFunction/enumDlgType skipped:  filtered
{
	Game.UI.DlgEquipFunction/enumDlgType [Client]Game.UI.DlgEquipFunction/enumDlgType Game.UI.DlgEquipFunction/enumDlgType::eDlgType_Intensify -> A
	Game.UI.DlgEquipFunction/enumDlgType [Client]Game.UI.DlgEquipFunction/enumDlgType Game.UI.DlgEquipFunction/enumDlgType::eDlgType_InsertGem -> a
	Game.UI.DlgEquipFunction/enumDlgType [Client]Game.UI.DlgEquipFunction/enumDlgType Game.UI.DlgEquipFunction/enumDlgType::eDlgType_EquipSoul -> B
	Game.UI.DlgEquipFunction/enumDlgType [Client]Game.UI.DlgEquipFunction/enumDlgType Game.UI.DlgEquipFunction/enumDlgType::eDlgType_EquipTrans -> b
	Game.UI.DlgEquipFunction/enumDlgType [Client]Game.UI.DlgEquipFunction/enumDlgType Game.UI.DlgEquipFunction/enumDlgType::eDlgType_MagicBox -> C

	System.Int32 [Client]System.Int32 Game.UI.DlgEquipFunction/enumDlgType::value__ skipped:  filtered
}

[Client]Game.UI.DlgEctypeDF skipped:  filtered
{
	[Client]Game.UI.DlgEctypeDF::OnShow[0]( ) -> b
	[Client]Game.UI.DlgEctypeDF::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgEctypeDF::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgEctypeDF::OnButton_OKClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgEctypeDF::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgEctypeDF::OnButton_BuyClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgEctypeDF::OnButton_RankListClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgEctypeDF::OnList_AwardItemClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgEctypeDF::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEctypeDF::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgEctypeDF::BuyItemId -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgEctypeDF::BaseMonsterId -> a

	System.String [Client]System.String Game.UI.DlgEctypeDF::fileName -> dropped
}

[Client]Game.UI.UICommon.AnimDirection skipped:  filtered
{

	System.Int32 [Client]System.Int32 Game.UI.UICommon.AnimDirection::value__ skipped:  filtered
	Game.UI.UICommon.AnimDirection [Client]Game.UI.UICommon.AnimDirection Game.UI.UICommon.AnimDirection::Reverse skipped:  filtered
	Game.UI.UICommon.AnimDirection [Client]Game.UI.UICommon.AnimDirection Game.UI.UICommon.AnimDirection::Toggle skipped:  filtered
	Game.UI.UICommon.AnimDirection [Client]Game.UI.UICommon.AnimDirection Game.UI.UICommon.AnimDirection::Forward skipped:  filtered
}

[Client]Game.UI.DlgTaskRoute skipped:  filtered
{
	[Client]Game.UI.DlgTaskRoute::OnShow[0]( ) -> b
	[Client]Game.UI.DlgTaskRoute::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgTaskRoute::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTaskRoute::SetStatus[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgTaskRoute::OnButton_TaskListClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgTaskRoute::OnImageButton_SpreadClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgTaskRoute::OnButton_TaskClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgTaskRoute::OnImageButton_MinClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgTaskRoute::OnMinClickHandler[1]( System.UInt32 ) -> A

	[Client]Game.UI.DlgTaskRoute::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTaskRoute::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTaskRoute::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgTaskRoute::BornTaskId -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgTaskRoute::m_ShowMin -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgTaskRoute::m_nStatus -> A

	System.String [Client]System.String Game.UI.DlgTaskRoute::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgTaskRoute::Persist -> dropped
}

[Client]Game.UI.DlgSkillStudy skipped:  filtered
{
	[Client]Game.UI.DlgSkillStudy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgSkillStudy::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgSkillStudy::Init[0]( ) -> c
	[Client]Game.UI.DlgSkillStudy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgSkillStudy::get_SelectSkillId[0]( ) -> e
	[Client]Game.UI.DlgSkillStudy::set_SelectSkillId[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgSkillStudy::UpdateSkillInfo[0]( ) -> F
	[Client]Game.UI.DlgSkillStudy::OnList_SkillSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgSkillStudy::OnButtonClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgSkillStudy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSkillStudy::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSkillStudy::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSkillStudy::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgSkillStudy::BasePassiveSkillIndex -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgSkillStudy::PassiveSkillStartIndex -> a
	System.String [Client]System.String Game.UI.DlgSkillStudy::RedColor -> A
	System.String [Client]System.String Game.UI.DlgSkillStudy::WhiteColor -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgSkillStudy::<SelectSkillId>k__BackingField -> B

	System.Int32 [Client]System.Int32 Game.UI.DlgSkillStudy::SelectSkillId -> dropped
	System.String [Client]System.String Game.UI.DlgSkillStudy::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgSkillStudy::layer -> dropped
}

[Client]Game.UI.DlgShipExplorationRoleAttr skipped:  filtered
{
	[Client]Game.UI.DlgShipExplorationRoleAttr::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShipExplorationRoleAttr::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShipExplorationRoleAttr::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShipExplorationRoleAttr::Show[4]( System.Int32, System.Int32, System.Int32, System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> ) -> A
	[Client]Game.UI.DlgShipExplorationRoleAttr::Show[5]( System.Int32, System.Int32, System.Int32, System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill>, System.UInt32 ) -> A
	[Client]Game.UI.DlgShipExplorationRoleAttr::Show[5]( System.Int32, System.Int32, System.Int32, System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill>, Game.UI.DlgShipExplorationRoleAttr/eOpenType ) -> A
	[Client]Game.UI.DlgShipExplorationRoleAttr::GenerateStrList[0]( ) -> e
	[Client]Game.UI.DlgShipExplorationRoleAttr::GetSkillString[1]( Game.DataExpeditionMonsterSkill ) -> A
	[Client]Game.UI.DlgShipExplorationRoleAttr::GenerateAttrString[0]( ) -> F
	[Client]Game.UI.DlgShipExplorationRoleAttr::SetPropertyValue[1]( System.String ) -> A
	[Client]Game.UI.DlgShipExplorationRoleAttr::SetPropertyValue[2]( System.String, System.String ) -> A
	[Client]Game.UI.DlgShipExplorationRoleAttr::OnCheckboxDetailCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgShipExplorationRoleAttr::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShipExplorationRoleAttr::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShipExplorationRoleAttr::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgShipExplorationRoleAttr::ResetData[0]( ) -> f
	[Client]Game.UI.DlgShipExplorationRoleAttr::OnButtonOKClickByDlgBaseProperty[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgShipExplorationRoleAttr::OnButtonOKClickByDlgSeePlayer[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgShipExplorationRoleAttr::get_CurCaption[0]( ) -> G
	[Client]Game.UI.DlgShipExplorationRoleAttr::get_CurShowList[0]( ) -> g
	[Client]Game.UI.DlgShipExplorationRoleAttr::get_SkillStrListInCurPage[0]( ) -> H
	[Client]Game.UI.DlgShipExplorationRoleAttr::get_MaxPage[0]( ) -> h

	[Client]Game.UI.DlgShipExplorationRoleAttr::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationRoleAttr::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationRoleAttr::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationRoleAttr::MaxNumPerPage -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgShipExplorationRoleAttr::m_ShowSkill -> A
	Game.UI.DlgShipExplorationRoleAttr/eOpenType [Client]Game.UI.DlgShipExplorationRoleAttr/eOpenType Game.UI.DlgShipExplorationRoleAttr::m_OpenType -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgShipExplorationRoleAttr::m_PlayerId -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationRoleAttr::m_CurPage -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationRoleAttr::m_Combat -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationRoleAttr::m_Explore -> b
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationRoleAttr::m_Wisdom -> C
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterSkill> Game.UI.DlgShipExplorationRoleAttr::m_SkillDataList -> A
	System.Collections.Generic.List`1<Game.DataExpeditionMonsterSkill> [Client]System.Collections.Generic.List`1<Game.DataExpeditionMonsterSkill> Game.UI.DlgShipExplorationRoleAttr::m_SkillCsvList -> A
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.UI.DlgShipExplorationRoleAttr::m_SkillStrList -> A
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.UI.DlgShipExplorationRoleAttr::m_AttrStrList -> a
	System.Collections.Generic.Dictionary`2<System.String,System.Single> [Client]System.Collections.Generic.Dictionary`2<System.String,System.Single> Game.UI.DlgShipExplorationRoleAttr::m_AttrDict -> A

	System.String [Client]System.String Game.UI.DlgShipExplorationRoleAttr::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationRoleAttr::layer -> dropped
	System.String [Client]System.String Game.UI.DlgShipExplorationRoleAttr::CurCaption -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.UI.DlgShipExplorationRoleAttr::CurShowList -> dropped
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.UI.DlgShipExplorationRoleAttr::SkillStrListInCurPage -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationRoleAttr::MaxPage -> dropped
}

[Client]Game.UI.DlgShipExplorationRoleAttr/eOpenType skipped:  filtered
{
	Game.UI.DlgShipExplorationRoleAttr/eOpenType [Client]Game.UI.DlgShipExplorationRoleAttr/eOpenType Game.UI.DlgShipExplorationRoleAttr/eOpenType::Expedition -> A
	Game.UI.DlgShipExplorationRoleAttr/eOpenType [Client]Game.UI.DlgShipExplorationRoleAttr/eOpenType Game.UI.DlgShipExplorationRoleAttr/eOpenType::DlgBaseProperty -> a
	Game.UI.DlgShipExplorationRoleAttr/eOpenType [Client]Game.UI.DlgShipExplorationRoleAttr/eOpenType Game.UI.DlgShipExplorationRoleAttr/eOpenType::DlgSeePlayer -> B

	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationRoleAttr/eOpenType::value__ skipped:  filtered
}

[Client]Game.UI.DlgSeePet skipped:  filtered
{
	[Client]Game.UI.DlgSeePet::OnShow[0]( ) -> b
	[Client]Game.UI.DlgSeePet::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgSeePet::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgSeePet::Show[2]( System.UInt32, System.UInt64 ) -> A
	[Client]Game.UI.DlgSeePet::Show[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgSeePet::SendRequest[0]( ) -> e
	[Client]Game.UI.DlgSeePet::OnListClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgSeePet::OnMsgServerLookBattlePetInfo[1]( Game.Msg.RecvMsgPacket ) -> A
	[Client]Game.UI.DlgSeePet::OnPlayerModelLoaded[1]( Game.Character ) -> A
	[Client]Game.UI.DlgSeePet::RefreshModel[0]( ) -> F
	[Client]Game.UI.DlgSeePet::OnButtonClose[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgSeePet::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSeePet::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgSeePet::.ctor[0]( ) skipped:  special name

	System.UInt64 [Client]System.UInt64 Game.UI.DlgSeePet::m_ulPetDBID -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgSeePet::m_unPlayerID -> A
	Game.Character [Client]Game.Character Game.UI.DlgSeePet::m_character -> A
	Game.Msg.MsgServerLookPetInfo [Client]Game.Msg.MsgServerLookPetInfo Game.UI.DlgSeePet::m_msg -> A
	Game.Msg.eLookBattlePetType [Client]Game.Msg.eLookBattlePetType Game.UI.DlgSeePet::m_eLookBattlePetType -> A

	System.String [Client]System.String Game.UI.DlgSeePet::fileName -> dropped
}

[Client]Game.UI.DlgRich skipped:  filtered
{
	[Client]Game.UI.DlgRich::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgRich::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRich::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgRich::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRich::Update[0]( ) -> E
	[Client]Game.UI.DlgRich::ShowResult[0]( ) -> e
	[Client]Game.UI.DlgRich::OnButton_DiceClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgRich::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgRich::OnButton_InformationClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgRich::OnButton_RecordClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgRich::OnItemList_EventClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgRich::OnCheckbox_AutoClick[1]( Game.UI.UICommon.IXUICheckBox ) -> A

	[Client]Game.UI.DlgRich::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRich::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgRich::MinDice -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgRich::MaxDice -> a
	System.Single [Client]System.Single Game.UI.DlgRich::MoveSpeed -> A
	System.Single [Client]System.Single Game.UI.DlgRich::DiceTime -> a
	System.String [Client]System.String Game.UI.DlgRich::DiceSpritePre -> A
	System.Single [Client]System.Single Game.UI.DlgRich::m_LastDiceTime -> B
	System.Boolean [Client]System.Boolean Game.UI.DlgRich::m_FirstTime -> A
	Game.UI.DlgRich/RichState [Client]Game.UI.DlgRich/RichState Game.UI.DlgRich::m_State -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgRich::m_DiceResult -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgRich::m_CurTargetPosition -> B

	System.String [Client]System.String Game.UI.DlgRich::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgRich::Cleanup -> dropped
}

[Client]Game.UI.DlgRich/RichState skipped:  filtered
{
	Game.UI.DlgRich/RichState [Client]Game.UI.DlgRich/RichState Game.UI.DlgRich/RichState::Ready -> A
	Game.UI.DlgRich/RichState [Client]Game.UI.DlgRich/RichState Game.UI.DlgRich/RichState::Dice -> a
	Game.UI.DlgRich/RichState [Client]Game.UI.DlgRich/RichState Game.UI.DlgRich/RichState::Move -> B
	Game.UI.DlgRich/RichState [Client]Game.UI.DlgRich/RichState Game.UI.DlgRich/RichState::Result -> b

	System.Int32 [Client]System.Int32 Game.UI.DlgRich/RichState::value__ skipped:  filtered
}

[Client]Game.UI.DlgPetSkillStudy skipped:  filtered
{
	[Client]Game.UI.DlgPetSkillStudy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetSkillStudy::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetSkillStudy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetSkillStudy::OnButton_CancelClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetSkillStudy::OnButton_SkillStudyOkClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPetSkillStudy::OnButton_LeftClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgPetSkillStudy::OnButton_RightClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgPetSkillStudy::OnBookListSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgPetSkillStudy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetSkillStudy::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkillStudy::ItemCountPerPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkillStudy::m_CurPage -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkillStudy::m_TotalPage -> B

	System.String [Client]System.String Game.UI.DlgPetSkillStudy::fileName -> dropped
}

[Client]Game.UI.DlgMailList skipped:  filtered
{
	[Client]Game.UI.DlgMailList::OnShow[0]( ) -> b
	[Client]Game.UI.DlgMailList::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMailList::get_MaxPage[0]( ) -> e
	[Client]Game.UI.DlgMailList::get_MailListInCurPage[0]( ) -> F
	[Client]Game.UI.DlgMailList::get_AttachementList[0]( ) -> f
	[Client]Game.UI.DlgMailList::Refresh[1]( Game.UI.DlgMailList/enumDlgType ) -> A
	[Client]Game.UI.DlgMailList::SetDlgType[1]( Game.UI.DlgMailList/enumDlgType ) -> a
	[Client]Game.UI.DlgMailList::Show[1]( Game.UI.DlgMailList/enumDlgType ) -> B
	[Client]Game.UI.DlgMailList::Show[0]( ) -> G
	[Client]Game.UI.DlgMailList::ChooseMailType[1]( Game.UI.DlgMailList/enumDlgType ) -> b
	[Client]Game.UI.DlgMailList::HandleInBox[0]( ) -> g
	[Client]Game.UI.DlgMailList::RefreshMailList[0]( ) -> H
	[Client]Game.UI.DlgMailList::HandleReadMail[0]( ) -> h
	[Client]Game.UI.DlgMailList::OnDeleteCheckedClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMailList::OnListMailItemClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgMailList::OnSelectAllClick[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgMailList::OnMailItemClick[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgMailList::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgMailList::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgMailList::SetFriendName[1]( System.String ) -> A

	[Client]Game.UI.DlgMailList::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMailList::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMailList::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgMailList::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgMailList::NumPerPage -> A
	System.Collections.Generic.List`1<System.Int64> [Client]System.Collections.Generic.List`1<System.Int64> Game.UI.DlgMailList::m_ListAttachment -> A
	System.Collections.Generic.List`1<Game.Msg.ClientRelation> [Client]System.Collections.Generic.List`1<Game.Msg.ClientRelation> Game.UI.DlgMailList::m_CurDisplayPersons -> A
	System.String [Client]System.String Game.UI.DlgMailList::ReceiverName -> A
	Game.UI.DlgMailList/enumDlgType [Client]Game.UI.DlgMailList/enumDlgType Game.UI.DlgMailList::m_DlgType -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgMailList::m_CurPage -> a

	System.Int32 [Client]System.Int32 Game.UI.DlgMailList::MaxPage -> dropped
	System.Collections.Generic.List`1<Game.Msg.ClientMailData> [Client]System.Collections.Generic.List`1<Game.Msg.ClientMailData> Game.UI.DlgMailList::MailListInCurPage -> dropped
	System.Collections.Generic.List`1<System.Int64> [Client]System.Collections.Generic.List`1<System.Int64> Game.UI.DlgMailList::AttachementList -> dropped
	System.String [Client]System.String Game.UI.DlgMailList::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMailList::layer -> dropped
}

[Client]Game.UI.DlgMailList/enumDlgType skipped:  filtered
{
	Game.UI.DlgMailList/enumDlgType [Client]Game.UI.DlgMailList/enumDlgType Game.UI.DlgMailList/enumDlgType::InBox -> A
	Game.UI.DlgMailList/enumDlgType [Client]Game.UI.DlgMailList/enumDlgType Game.UI.DlgMailList/enumDlgType::NewMail -> a
	Game.UI.DlgMailList/enumDlgType [Client]Game.UI.DlgMailList/enumDlgType Game.UI.DlgMailList/enumDlgType::ReplyMail -> B
	Game.UI.DlgMailList/enumDlgType [Client]Game.UI.DlgMailList/enumDlgType Game.UI.DlgMailList/enumDlgType::ReadMail -> b
	Game.UI.DlgMailList/enumDlgType [Client]Game.UI.DlgMailList/enumDlgType Game.UI.DlgMailList/enumDlgType::SendMail -> C

	System.Int32 [Client]System.Int32 Game.UI.DlgMailList/enumDlgType::value__ skipped:  filtered
}

[Client]Game.UI.DlgMailList/<>c__DisplayClass1 skipped:  filtered
{
	[Client]Game.UI.DlgMailList/<>c__DisplayClass1::<OnListMailItemClick>b__0[1]( Game.Msg.ClientMailData ) -> A

	[Client]Game.UI.DlgMailList/<>c__DisplayClass1::.ctor[0]( ) skipped:  special name

	Game.UI.UICommon.IXUIListItem [Client]Game.UI.UICommon.IXUIListItem Game.UI.DlgMailList/<>c__DisplayClass1::uiListItem -> A
}

[Client]Game.UI.DlgInstall skipped:  filtered
{
	[Client]Game.UI.DlgInstall::get_IsBundle[0]( ) -> A
	[Client]Game.UI.DlgInstall::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgInstall::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgInstall::Init[0]( ) -> c
	[Client]Game.UI.DlgInstall::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgInstall::Update[0]( ) -> E
	[Client]Game.UI.DlgInstall::get_Text[0]( ) -> e
	[Client]Game.UI.DlgInstall::set_Text[1]( System.String ) -> A
	[Client]Game.UI.DlgInstall::get_Progress[0]( ) -> F
	[Client]Game.UI.DlgInstall::set_Progress[1]( System.Int32 ) -> A

	[Client]Game.UI.DlgInstall::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgInstall::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgInstall::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgInstall::<Text>k__BackingField -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgInstall::<Progress>k__BackingField -> A

	System.String [Client]System.String Game.UI.DlgInstall::Text -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgInstall::Progress -> dropped
	System.String [Client]System.String Game.UI.DlgInstall::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgInstall::IsBundle -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgInstall::Cleanup -> dropped
}

[Client]Game.UI.DlgEquipSoul skipped:  filtered
{
	[Client]Game.UI.DlgEquipSoul::OnShow[0]( ) -> b
	[Client]Game.UI.DlgEquipSoul::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgEquipSoul::Init[0]( ) -> c
	[Client]Game.UI.DlgEquipSoul::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgEquipSoul::GetTargetItemId[0]( ) -> e
	[Client]Game.UI.DlgEquipSoul::OnListFirstClickEvent[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgEquipSoul::OnListScondClickEvent[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgEquipSoul::OnClickEventFirst1[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgEquipSoul::OnClickEventFirst2[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgEquipSoul::OnClickEventFirst3[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgEquipSoul::OnClickEventFirst4[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgEquipSoul::OnClickEventFirst5[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgEquipSoul::OnClickEventSecond1[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.DlgEquipSoul::OnClickEventSecond2[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.DlgEquipSoul::OnClickEventSecond3[1]( Game.UI.UICommon.IXUICheckBox ) -> d
	[Client]Game.UI.DlgEquipSoul::OnClickEventSecond4[1]( Game.UI.UICommon.IXUICheckBox ) -> E
	[Client]Game.UI.DlgEquipSoul::OnClickEventSecond5[1]( Game.UI.UICommon.IXUICheckBox ) -> e
	[Client]Game.UI.DlgEquipSoul::OnButtonClickHelp[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgEquipSoul::OnButtonClickSendMsg[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgEquipSoul::OnListClickPartItem[1]( System.Int64 ) -> A
	[Client]Game.UI.DlgEquipSoul::OnListClickBagItem[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgEquipSoul::RefreshBag[1]( Game.UI.UICommon.IXUIListItem ) -> b
	[Client]Game.UI.DlgEquipSoul::RefrshEquipItem[0]( ) -> F
	[Client]Game.UI.DlgEquipSoul::EquipItem[0]( ) -> f
	[Client]Game.UI.DlgEquipSoul::RefreshText[0]( ) -> G
	[Client]Game.UI.DlgEquipSoul::RefreshButton[0]( ) -> g
	[Client]Game.UI.DlgEquipSoul::OnSoulChangeResult[0]( ) -> H
	[Client]Game.UI.DlgEquipSoul::GetSoulString[1]( System.UInt16 ) -> A
	[Client]Game.UI.DlgEquipSoul::GetTwoSoulString[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.UI.DlgEquipSoul::GetSoulUpdateId[1]( System.Int32 ) -> A

	[Client]Game.UI.DlgEquipSoul::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipSoul::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipSoul::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgEquipSoul::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEquipSoul::.ctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.UI.DlgEquipSoul::m_MainIndex -> A
	System.Byte [Client]System.Byte Game.UI.DlgEquipSoul::m_SubIndex -> a
	System.Int64 [Client]System.Int64 Game.UI.DlgEquipSoul::m_ItemOnlyId -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgEquipSoul::m_NeedEquipItem -> A
	System.Int64 [Client]System.Int64 Game.UI.DlgEquipSoul::m_TargetItemId -> a

	System.String [Client]System.String Game.UI.DlgEquipSoul::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgEquipSoul::layer -> dropped
}

[Client]Game.UI.DlgEctypeAward skipped:  filtered
{
	[Client]Game.UI.DlgEctypeAward::OnShow[0]( ) -> b
	[Client]Game.UI.DlgEctypeAward::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgEctypeAward::Update[0]( ) -> E
	[Client]Game.UI.DlgEctypeAward::RefreshOnce[0]( ) -> e
	[Client]Game.UI.DlgEctypeAward::ShowGeneralAward[0]( ) -> F
	[Client]Game.UI.DlgEctypeAward::RefreshFeeAward[1]( System.Collections.Generic.List`1<Game.Msg.PhysicalBoxItemData> ) -> A
	[Client]Game.UI.DlgEctypeAward::RefreshVIPFeeAward[1]( System.Collections.Generic.List`1<Game.Msg.PhysicalBoxItemData> ) -> a
	[Client]Game.UI.DlgEctypeAward::OnCheckboxCard1Check[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgEctypeAward::OnCheckboxCard2Check[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgEctypeAward::OnCheckboxCard3Check[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgEctypeAward::OnButtonClickClose[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgEctypeAward::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEctypeAward::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEctypeAward::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgEctypeAward::m_AwardStartTime -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgEctypeAward::m_NeedCountdown -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgEctypeAward::m_TimeCountdown -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgEctypeAward::m_HasShowGeneralAward -> a

	System.String [Client]System.String Game.UI.DlgEctypeAward::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgEctypeAward::layer -> dropped
}

[Client]Game.UI.DlgAuctionSell skipped:  filtered
{
	[Client]Game.UI.DlgAuctionSell::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAuctionSell::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgAuctionSell::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAuctionSell::Show[1]( Game.Msg.ClientSItemData ) -> A
	[Client]Game.UI.DlgAuctionSell::UpdatePrice[0]( ) -> e
	[Client]Game.UI.DlgAuctionSell::OnImageButtonSellClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAuctionSell::OnImageButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgAuctionSell::OnPriceClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgAuctionSell::OnInputNumber[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgAuctionSell::OnCheckboxGoldCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgAuctionSell::OnCheckboxMoneyCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a

	[Client]Game.UI.DlgAuctionSell::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionSell::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionSell::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionSell::Price_Min -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionSell::Max_Price_Gold -> a
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionSell::Max_Price_Money -> B
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionSell::Min_Number -> b
	Game.Msg.ClientSItemData [Client]Game.Msg.ClientSItemData Game.UI.DlgAuctionSell::m_ItemData -> A
	Game.Msg.EAuctionMoneyType [Client]Game.Msg.EAuctionMoneyType Game.UI.DlgAuctionSell::m_MoneyType -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionSell::m_Price -> C

	System.String [Client]System.String Game.UI.DlgAuctionSell::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionSell::layer -> dropped
}

[Client]Game.UI.UICommon.enumDataType skipped:  filtered
{

	System.Int32 [Client]System.Int32 Game.UI.UICommon.enumDataType::value__ skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::Invalid skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::ItemCsv skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::ItemData skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::EquipPart skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::Skill skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::Task skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::Pet skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::Mail skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::Storage skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::OthersEquipPart skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::Expedition skipped:  filtered
	Game.UI.UICommon.enumDataType [Client]Game.UI.UICommon.enumDataType Game.UI.UICommon.enumDataType::Max skipped:  filtered
}

[Client]Game.UI.UICommon.enumQuality skipped:  filtered
{

	System.Int32 [Client]System.Int32 Game.UI.UICommon.enumQuality::value__ skipped:  filtered
	Game.UI.UICommon.enumQuality [Client]Game.UI.UICommon.enumQuality Game.UI.UICommon.enumQuality::eQuality_1 skipped:  filtered
	Game.UI.UICommon.enumQuality [Client]Game.UI.UICommon.enumQuality Game.UI.UICommon.enumQuality::eQuality_2 skipped:  filtered
	Game.UI.UICommon.enumQuality [Client]Game.UI.UICommon.enumQuality Game.UI.UICommon.enumQuality::eQuality_3 skipped:  filtered
	Game.UI.UICommon.enumQuality [Client]Game.UI.UICommon.enumQuality Game.UI.UICommon.enumQuality::eQuality_4 skipped:  filtered
	Game.UI.UICommon.enumQuality [Client]Game.UI.UICommon.enumQuality Game.UI.UICommon.enumQuality::eQuality_5 skipped:  filtered
	Game.UI.UICommon.enumQuality [Client]Game.UI.UICommon.enumQuality Game.UI.UICommon.enumQuality::eQuality_6 skipped:  filtered
	Game.UI.UICommon.enumQuality [Client]Game.UI.UICommon.enumQuality Game.UI.UICommon.enumQuality::eQuality_7 skipped:  filtered
}

[Client]Game.UI.eTipPivot skipped:  filtered
{
	Game.UI.eTipPivot [Client]Game.UI.eTipPivot Game.UI.eTipPivot::RightUp -> A
	Game.UI.eTipPivot [Client]Game.UI.eTipPivot Game.UI.eTipPivot::RightDown -> a
	Game.UI.eTipPivot [Client]Game.UI.eTipPivot Game.UI.eTipPivot::LeftUp -> B
	Game.UI.eTipPivot [Client]Game.UI.eTipPivot Game.UI.eTipPivot::LeftDown -> b
	Game.UI.eTipPivot [Client]Game.UI.eTipPivot Game.UI.eTipPivot::CenterLeft -> C
	Game.UI.eTipPivot [Client]Game.UI.eTipPivot Game.UI.eTipPivot::CenterRight -> c
	Game.UI.eTipPivot [Client]Game.UI.eTipPivot Game.UI.eTipPivot::Center -> D

	System.Int32 [Client]System.Int32 Game.UI.eTipPivot::value__ skipped:  filtered
}

[Client]Game.UI.DlgTip skipped:  filtered
{
	[Client]Game.UI.DlgTip::OnShow[0]( ) -> b
	[Client]Game.UI.DlgTip::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTip::Update[0]( ) -> E
	[Client]Game.UI.DlgTip::get_CanGenerateCompareTip[0]( ) -> e
	[Client]Game.UI.DlgTip::get_CanGenerateButtons[0]( ) -> F
	[Client]Game.UI.DlgTip::get_CompareTipActive[0]( ) -> f
	[Client]Game.UI.DlgTip::set_CompareTipActive[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgTip::ResetWidget[0]( ) -> G
	[Client]Game.UI.DlgTip::AddTrifleInfo[1]( System.String ) -> A
	[Client]Game.UI.DlgTip::AddString[1]( System.String ) -> a
	[Client]Game.UI.DlgTip::AddWhiteAttrString[1]( System.String ) -> B
	[Client]Game.UI.DlgTip::AddButton[1]( Game.TipButtonData ) -> A
	[Client]Game.UI.DlgTip::AddStar[1]( Game.UI.SCharEquipData ) -> A
	[Client]Game.UI.DlgTip::AddGem[1]( System.String ) -> b
	[Client]Game.UI.DlgTip::GenerateIntensifyDesp[0]( ) -> g
	[Client]Game.UI.DlgTip::AddTrifleInfoInCompareTip[1]( System.String ) -> C
	[Client]Game.UI.DlgTip::AddStringInCompareTip[1]( System.String ) -> c
	[Client]Game.UI.DlgTip::AddStarInCompareTip[1]( Game.UI.SCharEquipData ) -> a
	[Client]Game.UI.DlgTip::AddGemInCompareTip[1]( System.String ) -> D
	[Client]Game.UI.DlgTip::AddWhiteAttrStringInCompareTip[1]( System.String ) -> d
	[Client]Game.UI.DlgTip::GenerateIntensifyDespInCompareTip[0]( ) -> H
	[Client]Game.UI.DlgTip::HandleMultiFactor[2]( UnityEngine.Vector3, System.Boolean ) -> A
	[Client]Game.UI.DlgTip::AdjustSelf[0]( ) -> h
	[Client]Game.UI.DlgTip::HandleLabelSize[3]( Game.UI.UICommon.IXUILabel, UnityEngine.Vector2&, UnityEngine.Vector2& ) -> A
	[Client]Game.UI.DlgTip::HandleLabelSize[4]( Game.UI.UICommon.IXUILabel, UnityEngine.Vector3, UnityEngine.Vector2&, UnityEngine.Vector2& ) -> A
	[Client]Game.UI.DlgTip::HandleListSize[3]( Game.UI.UICommon.IXUIList, UnityEngine.Vector2&, UnityEngine.Vector2& ) -> A
	[Client]Game.UI.DlgTip::HandleButtonListSize[3]( Game.UI.UICommon.IXUIList, UnityEngine.Vector2&, UnityEngine.Vector2& ) -> a
	[Client]Game.UI.DlgTip::HandleSpriteSize[4]( Game.UI.UICommon.IXUISprite, UnityEngine.Vector2&, UnityEngine.Vector2&, System.Single ) -> A
	[Client]Game.UI.DlgTip::HandleWidgetSize[4]( UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2&, UnityEngine.Vector2& ) -> A
	[Client]Game.UI.DlgTip::AdjustSplitLine[0]( ) -> I
	[Client]Game.UI.DlgTip::AdjustEquipTag[2]( UnityEngine.Vector3, UnityEngine.Vector3 ) -> A
	[Client]Game.UI.DlgTip::Align[1]( UnityEngine.Vector2 ) -> A
	[Client]Game.UI.DlgTip::GetTipPivot[4]( UnityEngine.GameObject, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2 ) -> A
	[Client]Game.UI.DlgTip::KeepSameHeight[4]( UnityEngine.Vector2&, UnityEngine.Vector2&, UnityEngine.Vector2&, UnityEngine.Vector2& ) -> A

	[Client]Game.UI.DlgTip::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTip::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTip::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTip::.ctor[0]( ) skipped:  special name

	Game.UI.eTipPivot [Client]Game.UI.eTipPivot Game.UI.DlgTip::m_eTipPivot -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.DlgTip::m_incrementScale -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgTip::m_RefreshDoubleTime -> A
	System.Single [Client]System.Single Game.UI.DlgTip::m_Distance -> A
	System.Single [Client]System.Single Game.UI.DlgTip::m_MultiFactor -> a
	System.Single [Client]System.Single Game.UI.DlgTip::m_SplitLineIncrement -> B
	System.Boolean [Client]System.Boolean Game.UI.DlgTip::m_ResetPanel -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgTip::m_ResetComparePanel -> B

	System.Boolean [Client]System.Boolean Game.UI.DlgTip::CanGenerateCompareTip -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgTip::CanGenerateButtons -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgTip::CompareTipActive -> dropped
	System.String [Client]System.String Game.UI.DlgTip::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgTip::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgTip::Persist -> dropped
}

[Client]Game.UI.DlgPetStar skipped:  filtered
{
	[Client]Game.UI.DlgPetStar::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetStar::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetStar::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetStar::SetMaterial[3]( System.UInt64, System.Int32, Game.Msg.ePetAddStarSubType ) -> A
	[Client]Game.UI.DlgPetStar::OnButton_StarClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetStar::OnButton_SelectMatClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPetStar::OnButton_ChangeNumberClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgPetStar::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgPetStar::OnButton_CleanClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgPetStar::OnInputNumber[1]( System.UInt32 ) -> A

	[Client]Game.UI.DlgPetStar::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetStar::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetStar::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetStar::.ctor[0]( ) skipped:  special name

	System.UInt64 [Client]System.UInt64 Game.UI.DlgPetStar::m_ItemId -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPetStar::m_ItemNum -> A
	Game.Msg.ePetAddStarSubType [Client]Game.Msg.ePetAddStarSubType Game.UI.DlgPetStar::m_ItemType -> A

	System.String [Client]System.String Game.UI.DlgPetStar::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgPetStar::layer -> dropped
}

[Client]Game.UI.DlgMailReceive skipped:  filtered
{
	[Client]Game.UI.DlgMailReceive::OnShow[0]( ) -> b
	[Client]Game.UI.DlgMailReceive::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgMailReceive::Init[0]( ) -> c
	[Client]Game.UI.DlgMailReceive::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMailReceive::ShowMail[0]( ) -> e
	[Client]Game.UI.DlgMailReceive::OnButtonReceiveAllClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMailReceive::OnButtonDeleteClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgMailReceive::OnListAppendixClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgMailReceive::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMailReceive::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMailReceive::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMailReceive::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgMailReceive::m_uiID -> A

	System.String [Client]System.String Game.UI.DlgMailReceive::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMailReceive::layer -> dropped
}

[Client]Game.UI.DlgGuildInvite skipped:  filtered
{
	[Client]Game.UI.DlgGuildInvite::Init[0]( ) -> c
	[Client]Game.UI.DlgGuildInvite::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuildInvite::SetInvitePlayerName[1]( System.String ) -> A
	[Client]Game.UI.DlgGuildInvite::OnButtonInviteClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGuildInvite::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgGuildInvite::OnButtonSelectFriendClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgGuildInvite::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildInvite::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildInvite::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildInvite::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgGuildInvite::m_strPlayerName -> A

	System.String [Client]System.String Game.UI.DlgGuildInvite::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgGuildInvite::layer -> dropped
}

[Client]Game.UI.DlgChatMain skipped:  filtered
{
	[Client]Game.UI.DlgChatMain::OnShow[0]( ) -> b
	[Client]Game.UI.DlgChatMain::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgChatMain::Init[0]( ) -> c
	[Client]Game.UI.DlgChatMain::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgChatMain::SetStatus[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgChatMain::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.DlgChatMain::OnButtonMinClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgChatMain::OnTextListChatClick[1]( Game.UI.UICommon.IXUITextList ) -> A
	[Client]Game.UI.DlgChatMain::OnSpriteBGClick[1]( Game.UI.UICommon.IXUISprite ) -> A
	[Client]Game.UI.DlgChatMain::OnButtonSendClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgChatMain::OnEnter[0]( ) -> e

	[Client]Game.UI.DlgChatMain::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatMain::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatMain::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatMain::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgChatMain::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgChatMain::m_ShowTest -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgChatMain::m_nStatus -> A

	System.String [Client]System.String Game.UI.DlgChatMain::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgChatMain::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgChatMain::Persist -> dropped
}

[Client]Game.UI.DlgAuctionMoneyCancel skipped:  filtered
{
	[Client]Game.UI.DlgAuctionMoneyCancel::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAuctionMoneyCancel::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgAuctionMoneyCancel::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAuctionMoneyCancel::Show[1]( Game.Msg.ClientGoldConsignInfo ) -> A
	[Client]Game.UI.DlgAuctionMoneyCancel::OnButtonConsignCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAuctionMoneyCancel::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgAuctionMoneyCancel::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionMoneyCancel::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionMoneyCancel::.ctor[0]( ) skipped:  special name

	Game.Msg.ClientGoldConsignInfo [Client]Game.Msg.ClientGoldConsignInfo Game.UI.DlgAuctionMoneyCancel::m_GoldConsignInfo -> A

	System.String [Client]System.String Game.UI.DlgAuctionMoneyCancel::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoneyCancel::layer -> dropped
}

[Client]Game.UI.DlgAuctionCancel skipped:  filtered
{
	[Client]Game.UI.DlgAuctionCancel::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAuctionCancel::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgAuctionCancel::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAuctionCancel::Show[1]( Game.Msg.AuctionDetailSale ) -> A
	[Client]Game.UI.DlgAuctionCancel::OnImageButtonSellCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAuctionCancel::OnImageButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgAuctionCancel::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionCancel::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionCancel::.ctor[0]( ) skipped:  special name

	Game.Msg.AuctionDetailSale [Client]Game.Msg.AuctionDetailSale Game.UI.DlgAuctionCancel::m_SellItem -> A

	System.String [Client]System.String Game.UI.DlgAuctionCancel::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionCancel::layer -> dropped
}

[Client]Game.UI.DlgArenaInfo skipped:  filtered
{
	[Client]Game.UI.DlgArenaInfo::OnShow[0]( ) -> b
	[Client]Game.UI.DlgArenaInfo::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgArenaInfo::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgArenaInfo::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgArenaInfo::OnButton_SeeClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgArenaInfo::OnButton_RevengeClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgArenaInfo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaInfo::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgArenaInfo::RevengeRank -> A

	System.String [Client]System.String Game.UI.DlgArenaInfo::fileName -> dropped
}

[Client]Game.UI.DlgRelogin skipped:  filtered
{
	[Client]Game.UI.DlgRelogin::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRelogin::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRelogin::Update[0]( ) -> E
	[Client]Game.UI.DlgRelogin::Show[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgRelogin::ChangeStr[0]( ) -> e
	[Client]Game.UI.DlgRelogin::OnButtonReturnClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgRelogin::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRelogin::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRelogin::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgRelogin::m_IsCountingDown -> A
	System.Single [Client]System.Single Game.UI.DlgRelogin::m_StartTime -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgRelogin::m_CountDownTime -> A
	System.Single [Client]System.Single Game.UI.DlgRelogin::m_UpdateTime -> a
	System.String [Client]System.String Game.UI.DlgRelogin::m_StrCountDown -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgRelogin::m_QueueNum -> a

	System.String [Client]System.String Game.UI.DlgRelogin::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgRelogin::layer -> dropped
}

[Client]Game.UI.DlgPlayerCreate skipped:  filtered
{
	[Client]Game.UI.DlgPlayerCreate::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgPlayerCreate::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPlayerCreate::Init[0]( ) -> c
	[Client]Game.UI.DlgPlayerCreate::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPlayerCreate::ButtonClickCreate[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPlayerCreate::ButtonClickRandomName[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPlayerCreate::GetRandomName[1]( System.Byte ) -> A
	[Client]Game.UI.DlgPlayerCreate::InputOnChangeInput[1]( Game.UI.UICommon.IXUIInput ) -> A
	[Client]Game.UI.DlgPlayerCreate::ButtonClickBack[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgPlayerCreate::ListOnSelectRole[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgPlayerCreate::ListOnSelectHair[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgPlayerCreate::OnChangeProfession[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgPlayerCreate::AddPlayer[0]( ) -> e
	[Client]Game.UI.DlgPlayerCreate::OnObjectLoadedEventHandler[1]( Game.Character ) -> A
	[Client]Game.UI.DlgPlayerCreate::RemovePlayer[0]( ) -> F
	[Client]Game.UI.DlgPlayerCreate::ChangeHair[1]( System.Int32 ) -> a

	[Client]Game.UI.DlgPlayerCreate::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPlayerCreate::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPlayerCreate::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgPlayerCreate::m_MaxPlayerCount -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPlayerCreate::m_MaxHairCount -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgPlayerCreate::m_HairIndex -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgPlayerCreate::m_PreviousSex -> b

	System.String [Client]System.String Game.UI.DlgPlayerCreate::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgPlayerCreate::Cleanup -> dropped
}

[Client]Game.UI.DlgFunctionSystem skipped:  filtered
{
	[Client]Game.UI.DlgFunctionSystem::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFunctionSystem::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgFunctionSystem::Init[0]( ) -> c
	[Client]Game.UI.DlgFunctionSystem::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFunctionSystem::RefreshPage[0]( ) -> e
	[Client]Game.UI.DlgFunctionSystem::SetDefaultDlgType[1]( Game.UI.DlgFunctionSystem/enumDlgType ) -> A
	[Client]Game.UI.DlgFunctionSystem::Show[0]( ) -> F
	[Client]Game.UI.DlgFunctionSystem::Show[1]( Game.UI.DlgFunctionSystem/enumDlgType ) -> a
	[Client]Game.UI.DlgFunctionSystem::GetCheckBox[1]( Game.UI.DlgFunctionSystem/enumDlgType ) -> B
	[Client]Game.UI.DlgFunctionSystem::OnCheckBoxBattleHelpCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgFunctionSystem::OnCheckBoxSystemCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a

	[Client]Game.UI.DlgFunctionSystem::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFunctionSystem::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFunctionSystem::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgFunctionSystem::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFunctionSystem::.ctor[0]( ) skipped:  special name

	Game.UI.DlgFunctionSystem/enumDlgType [Client]Game.UI.DlgFunctionSystem/enumDlgType Game.UI.DlgFunctionSystem::m_eDlgType -> A

	System.String [Client]System.String Game.UI.DlgFunctionSystem::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgFunctionSystem::layer -> dropped
}

[Client]Game.UI.DlgFunctionSystem/enumDlgType skipped:  filtered
{
	Game.UI.DlgFunctionSystem/enumDlgType [Client]Game.UI.DlgFunctionSystem/enumDlgType Game.UI.DlgFunctionSystem/enumDlgType::eDlgType_System -> A
	Game.UI.DlgFunctionSystem/enumDlgType [Client]Game.UI.DlgFunctionSystem/enumDlgType Game.UI.DlgFunctionSystem/enumDlgType::eDlgType_BattleHelper -> a

	System.Int32 [Client]System.Int32 Game.UI.DlgFunctionSystem/enumDlgType::value__ skipped:  filtered
}

[Client]Game.UI.DlgAuction skipped:  filtered
{
	[Client]Game.UI.DlgAuction::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAuction::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAuction::InitPage[0]( ) -> e
	[Client]Game.UI.DlgAuction::RefreshBuyList[0]( ) -> F
	[Client]Game.UI.DlgAuction::RefreshSellList[0]( ) -> f
	[Client]Game.UI.DlgAuction::RefreshMoneyAndGold[0]( ) -> G
	[Client]Game.UI.DlgAuction::ResetButtons[0]( ) -> g
	[Client]Game.UI.DlgAuction::ResetButtonType[0]( ) -> H
	[Client]Game.UI.DlgAuction::ResetButtonKind[0]( ) -> h
	[Client]Game.UI.DlgAuction::ResetButtonLevel1[0]( ) -> I
	[Client]Game.UI.DlgAuction::ResetButtonLevel2[0]( ) -> i
	[Client]Game.UI.DlgAuction::ResetButtonLevel3[0]( ) -> J
	[Client]Game.UI.DlgAuction::InitButtonType[0]( ) -> j
	[Client]Game.UI.DlgAuction::InitButtonKind[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.UI.DlgAuction::InitButtonLevel1[2]( System.Int32, System.Int32 ) -> a
	[Client]Game.UI.DlgAuction::InitButtonLevel2[2]( System.Int32, System.Int32 ) -> B
	[Client]Game.UI.DlgAuction::InitButtonLevel3[0]( ) -> K
	[Client]Game.UI.DlgAuction::SelectData[2]( Game.UI.DlgAuction/enumButtonType, System.Int32 ) -> A
	[Client]Game.UI.DlgAuction::InitListWidget[0]( ) -> k
	[Client]Game.UI.DlgAuction::OnButtonTypeClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAuction::OnButtonKindClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgAuction::OnButtonLevel1Click[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgAuction::OnButtonLevel2Click[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgAuction::OnButtonLevel3Click[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgAuction::OnListTypeClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgAuction::SetButtonCaption[2]( Game.UI.DlgAuction/enumButtonType, System.String ) -> A
	[Client]Game.UI.DlgAuction::OnListBuyClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgAuction::OnListSellClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgAuction::OnCheckboxBuyCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgAuction::OnCheckboxSellCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgAuction::OnCheckboxGoldBuyCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgAuction::OnCheckboxMoneyBuyCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgAuction::SearchIfPossible[0]( ) -> L
	[Client]Game.UI.DlgAuction::OnButtonSearchClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgAuction::OnButtonSellClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgAuction::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgAuction::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgAuction::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> e
	[Client]Game.UI.DlgAuction::OnCheckBoxBuyQualityClick[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgAuction::OnCheckBoxLevelClick[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.DlgAuction::OnCheckBoxBuyPriceClick[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.DlgAuction::OnCheckBoxSellQualityClick[1]( Game.UI.UICommon.IXUICheckBox ) -> d
	[Client]Game.UI.DlgAuction::OnCheckBoxTimeClick[1]( Game.UI.UICommon.IXUICheckBox ) -> E
	[Client]Game.UI.DlgAuction::OnCheckBoxSellPriceClick[1]( Game.UI.UICommon.IXUICheckBox ) -> e
	[Client]Game.UI.DlgAuction::ShieldBlueSelection[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgAuction::ResetBuySortFlag[0]( ) -> l
	[Client]Game.UI.DlgAuction::UpdateArrow[0]( ) -> M
	[Client]Game.UI.DlgAuction::get_SortTypeBuy[0]( ) -> m
	[Client]Game.UI.DlgAuction::set_SortTypeBuy[1]( Game.Logic.Auction/enumSortType ) -> A
	[Client]Game.UI.DlgAuction::get_SortOrderBuy[0]( ) -> N
	[Client]Game.UI.DlgAuction::set_SortOrderBuy[1]( System.Boolean ) -> a
	[Client]Game.UI.DlgAuction::get_BuyMoneyType[0]( ) -> n
	[Client]Game.UI.DlgAuction::get_SellMoneyType[0]( ) -> O

	[Client]Game.UI.DlgAuction::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuction::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuction::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgAuction::MaxNum -> A
	Game.UI.DlgAuction/enumButtonType [Client]Game.UI.DlgAuction/enumButtonType Game.UI.DlgAuction::m_SelectedButton -> A
	Game.DataTradeCreate [Client]Game.DataTradeCreate Game.UI.DlgAuction::m_MainTypeData -> A
	System.Object [Client]System.Object Game.UI.DlgAuction::m_SubTypeData -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgAuction::m_LevelData -> a
	Game.DataSoulTrade [Client]Game.DataSoulTrade Game.UI.DlgAuction::m_SoulTradeData -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgAuction::m_SoulLevelData -> B
	System.Collections.Generic.List`1<Game.DataTradeCreate> [Client]System.Collections.Generic.List`1<Game.DataTradeCreate> Game.UI.DlgAuction::m_ListType -> A
	System.Collections.Generic.List`1<System.Object> [Client]System.Collections.Generic.List`1<System.Object> Game.UI.DlgAuction::m_ListKind -> A
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.UI.DlgAuction::m_ListLevel1 -> A
	System.Collections.Generic.List`1<Game.DataSoulTrade> [Client]System.Collections.Generic.List`1<Game.DataSoulTrade> Game.UI.DlgAuction::m_ListLevel2 -> A
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.UI.DlgAuction::m_ListLevel3 -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgAuction::m_ButtonTypeState -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgAuction::m_ButtonKindState -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgAuction::m_ButtonLevel1State -> B
	System.Boolean [Client]System.Boolean Game.UI.DlgAuction::m_ButtonLevel2State -> b
	System.Boolean [Client]System.Boolean Game.UI.DlgAuction::m_ButtonLevel3State -> C
	Game.Msg.AuctionBriefSale [Client]Game.Msg.AuctionBriefSale Game.UI.DlgAuction::m_SelectedBuyData -> A
	Game.Msg.AuctionDetailSale [Client]Game.Msg.AuctionDetailSale Game.UI.DlgAuction::m_SelectedSellData -> A
	Game.Msg.EAuctionMoneyType [Client]Game.Msg.EAuctionMoneyType Game.UI.DlgAuction::m_BuyMoneyType -> A
	Game.Msg.EAuctionMoneyType [Client]Game.Msg.EAuctionMoneyType Game.UI.DlgAuction::m_SellMoneyType -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgAuction::m_SortSellQuality -> c
	System.Boolean [Client]System.Boolean Game.UI.DlgAuction::m_SortTime -> D
	System.Boolean [Client]System.Boolean Game.UI.DlgAuction::m_SortSellPrice -> d
	System.Int32 [Client]System.Int32 Game.UI.DlgAuction::CurPage -> b

	System.String [Client]System.String Game.UI.DlgAuction::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAuction::layer -> dropped
	Game.Logic.Auction/enumSortType [Client]Game.Logic.Auction/enumSortType Game.UI.DlgAuction::SortTypeBuy -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgAuction::SortOrderBuy -> dropped
	Game.Msg.EAuctionMoneyType [Client]Game.Msg.EAuctionMoneyType Game.UI.DlgAuction::BuyMoneyType -> dropped
	Game.Msg.EAuctionMoneyType [Client]Game.Msg.EAuctionMoneyType Game.UI.DlgAuction::SellMoneyType -> dropped
}

[Client]Game.UI.DlgAuction/enumButtonType skipped:  filtered
{
	Game.UI.DlgAuction/enumButtonType [Client]Game.UI.DlgAuction/enumButtonType Game.UI.DlgAuction/enumButtonType::Default -> A
	Game.UI.DlgAuction/enumButtonType [Client]Game.UI.DlgAuction/enumButtonType Game.UI.DlgAuction/enumButtonType::Type -> a
	Game.UI.DlgAuction/enumButtonType [Client]Game.UI.DlgAuction/enumButtonType Game.UI.DlgAuction/enumButtonType::Kind -> B
	Game.UI.DlgAuction/enumButtonType [Client]Game.UI.DlgAuction/enumButtonType Game.UI.DlgAuction/enumButtonType::Level1 -> b
	Game.UI.DlgAuction/enumButtonType [Client]Game.UI.DlgAuction/enumButtonType Game.UI.DlgAuction/enumButtonType::Level2 -> C
	Game.UI.DlgAuction/enumButtonType [Client]Game.UI.DlgAuction/enumButtonType Game.UI.DlgAuction/enumButtonType::Level3 -> c

	System.Int32 [Client]System.Int32 Game.UI.DlgAuction/enumButtonType::value__ skipped:  filtered
}

[Client]Game.UI.DlgArenaOffLineStart skipped:  filtered
{
	[Client]Game.UI.DlgArenaOffLineStart::OnShow[0]( ) -> b
	[Client]Game.UI.DlgArenaOffLineStart::Init[0]( ) -> c
	[Client]Game.UI.DlgArenaOffLineStart::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgArenaOffLineStart::Update[0]( ) -> E

	[Client]Game.UI.DlgArenaOffLineStart::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLineStart::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLineStart::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgArenaOffLineStart::CloseTime -> A
	System.Single [Client]System.Single Game.UI.DlgArenaOffLineStart::m_StartTime -> a

	System.String [Client]System.String Game.UI.DlgArenaOffLineStart::fileName -> dropped
}

[Client]Game.UI.SCharEquipData skipped:  filtered
{

	[Client]Game.UI.SCharEquipData::.ctor[0]( ) skipped:  special name

	Game.Msg.SCharEquipPart [Client]Game.Msg.SCharEquipPart Game.UI.SCharEquipData::PartData -> A
	Game.Msg.SCharEquipItem [Client]Game.Msg.SCharEquipItem Game.UI.SCharEquipData::ItemData -> A
}

[Client]Game.UI.DlgBaseProperty skipped:  filtered
{
	[Client]Game.UI.DlgBaseProperty::OnShow[0]( ) -> b
	[Client]Game.UI.DlgBaseProperty::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgBaseProperty::Init[0]( ) -> c
	[Client]Game.UI.DlgBaseProperty::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgBaseProperty::Update[0]( ) -> E
	[Client]Game.UI.DlgBaseProperty::OnButtonClickStrengthInfo[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgBaseProperty::OnButtonLeftPress[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgBaseProperty::OnButtonRightPress[1]( System.Boolean ) -> a
	[Client]Game.UI.DlgBaseProperty::OnClickItemList[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgBaseProperty::ShowEquipIcon[2]( Game.UI.UICommon.IXUIList, System.Byte[] ) -> A
	[Client]Game.UI.DlgBaseProperty::RefreshModel[0]( ) -> e
	[Client]Game.UI.DlgBaseProperty::DoRefreshModel[0]( ) -> F
	[Client]Game.UI.DlgBaseProperty::OnButtonShipInfoClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgBaseProperty::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBaseProperty::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBaseProperty::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBaseProperty::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgBaseProperty::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBaseProperty::.ctor[0]( ) skipped:  special name
	[Client]Game.UI.DlgBaseProperty::.cctor[0]( ) skipped:  special name

	System.Byte [Client]System.Byte Game.UI.DlgBaseProperty::IconCount -> A
	System.Single [Client]System.Single Game.UI.DlgBaseProperty::m_fRotationSpeed -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UI.DlgBaseProperty::m_gameObjecMe -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgBaseProperty::m_NeedRefreshModel -> A
	System.Byte[] [Client]System.Byte[] Game.UI.DlgBaseProperty::LeftIconMapping -> A
	System.Byte[] [Client]System.Byte[] Game.UI.DlgBaseProperty::RightIconMapping -> a
	System.Single [Client]System.Single Game.UI.DlgBaseProperty::m_fRotation -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgBaseProperty::m_bLeftPressed -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgBaseProperty::m_bRightPressed -> B

	System.String [Client]System.String Game.UI.DlgBaseProperty::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgBaseProperty::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgBaseProperty::Persist -> dropped
}

[Client]Game.UI.DlgShipExplorationArea skipped:  filtered
{
	[Client]Game.UI.DlgShipExplorationArea::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgShipExplorationArea::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShipExplorationArea::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShipExplorationArea::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShipExplorationArea::ShowArea[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.UI.DlgShipExplorationArea::RefreshArea[1]( Game.DataExpeditionArea ) -> A
	[Client]Game.UI.DlgShipExplorationArea::GenerateAward[0]( ) -> e
	[Client]Game.UI.DlgShipExplorationArea::GenerateReqContent[0]( ) -> F
	[Client]Game.UI.DlgShipExplorationArea::MeetReq[1]( Game.DataExpeditionArea ) -> a
	[Client]Game.UI.DlgShipExplorationArea::RefreshAttrWidget[0]( ) -> f
	[Client]Game.UI.DlgShipExplorationArea::OnListMapClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgShipExplorationArea::OnListSkillClick[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgShipExplorationArea::OnCheckboxHour1Check[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgShipExplorationArea::OnCheckboxHour2Check[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgShipExplorationArea::OnCheckboxHour3Check[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgShipExplorationArea::OnCheckboxHour4Check[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgShipExplorationArea::OnButtonOKClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShipExplorationArea::OnConfirmExplore[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgShipExplorationArea::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShipExplorationArea::OnButtonInformationClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgShipExplorationArea::SortByBlockID[2]( Game.DataExpeditionArea, Game.DataExpeditionArea ) -> A

	[Client]Game.UI.DlgShipExplorationArea::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationArea::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationArea::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationArea::m_ShipId -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationArea::m_AreaId -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationArea::m_BlockId -> B
	Game.DataExpeditionArea [Client]Game.DataExpeditionArea Game.UI.DlgShipExplorationArea::m_AreaCsv -> A
	Game.Msg.EExpeditionExploreType [Client]Game.Msg.EExpeditionExploreType Game.UI.DlgShipExplorationArea::m_ExploreType -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationArea::m_Time -> b
	System.Int32[] [Client]System.Int32[] Game.UI.DlgShipExplorationArea::m_FixAwards -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationArea::combatReq -> C
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationArea::exploreReq -> c
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationArea::wisdomReq -> D

	System.String [Client]System.String Game.UI.DlgShipExplorationArea::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationArea::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgShipExplorationArea::Cleanup -> dropped
}

[Client]Game.UI.DlgRevive skipped:  filtered
{
	[Client]Game.UI.DlgRevive::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRevive::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRevive::Update[0]( ) -> E
	[Client]Game.UI.DlgRevive::get_DeathInfo[0]( ) -> e
	[Client]Game.UI.DlgRevive::set_DeathInfo[1]( Game.Msg.MsgServerAckUserDeath ) -> A
	[Client]Game.UI.DlgRevive::OnImageButton_NormalClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgRevive::OnImageButton_PerfectClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgRevive::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRevive::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRevive::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgRevive::m_StartTime -> A
	Game.Msg.MsgServerAckUserDeath [Client]Game.Msg.MsgServerAckUserDeath Game.UI.DlgRevive::<DeathInfo>k__BackingField -> A

	Game.Msg.MsgServerAckUserDeath [Client]Game.Msg.MsgServerAckUserDeath Game.UI.DlgRevive::DeathInfo -> dropped
	System.String [Client]System.String Game.UI.DlgRevive::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgRevive::layer -> dropped
}

[Client]Game.UI.DlgJoyStick2Dynamic skipped:  filtered
{
	[Client]Game.UI.DlgJoyStick2Dynamic::GetDlgDynamicInterface[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgJoyStick2Dynamic::get_Status[0]( ) -> A
	[Client]Game.UI.DlgJoyStick2Dynamic::get_IsShowAfk[0]( ) -> a
	[Client]Game.UI.DlgJoyStick2Dynamic::get_IsShowAfkExit[0]( ) -> b
	[Client]Game.UI.DlgJoyStick2Dynamic::OpenExpedition[0]( ) -> C
	[Client]Game.UI.DlgJoyStick2Dynamic::InformExpedition[0]( ) -> c
	[Client]Game.UI.DlgJoyStick2Dynamic::InformNewMail[0]( ) -> D
	[Client]Game.UI.DlgJoyStick2Dynamic::RefreshOnlineAwardTime[1]( System.TimeSpan ) -> A
	[Client]Game.UI.DlgJoyStick2Dynamic::RefreshAwardNum[0]( ) -> d
	[Client]Game.UI.DlgJoyStick2Dynamic::RefreshActivityNum[0]( ) -> E
	[Client]Game.UI.DlgJoyStick2Dynamic::UpdateSkillSprite[0]( ) -> e
	[Client]Game.UI.DlgJoyStick2Dynamic::UpdateItemIcon[0]( ) -> F
	[Client]Game.UI.DlgJoyStick2Dynamic::SetMode[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgJoyStick2Dynamic::JoyButtonA[0]( ) -> f
	[Client]Game.UI.DlgJoyStick2Dynamic::JoyButtonB[0]( ) -> G
	[Client]Game.UI.DlgJoyStick2Dynamic::JoyButtonX[0]( ) -> g
	[Client]Game.UI.DlgJoyStick2Dynamic::JoyButtonY[0]( ) -> H
	[Client]Game.UI.DlgJoyStick2Dynamic::JoyButtonR1[0]( ) -> h
	[Client]Game.UI.DlgJoyStick2Dynamic::JoyButtonAX[0]( ) -> I
	[Client]Game.UI.DlgJoyStick2Dynamic::Refresh[0]( ) -> i
	[Client]Game.UI.DlgJoyStick2Dynamic::SetStatus[1]( System.Int32 ) -> a
	[Client]Game.UI.DlgJoyStick2Dynamic::ShowAfk[2]( System.Boolean, System.Boolean ) -> A

	[Client]Game.UI.DlgJoyStick2Dynamic::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick2Dynamic::m_nStatus -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick2Dynamic::m_bShowAfk -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick2Dynamic::m_bShowAfkExit -> a

	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick2Dynamic::Status -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick2Dynamic::IsShowAfk -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick2Dynamic::IsShowAfkExit -> dropped
}

[Client]Game.UI.DlgJoyStick1Phone skipped:  filtered
{
	[Client]Game.UI.DlgJoyStick1Phone::Init[0]( ) -> c
	[Client]Game.UI.DlgJoyStick1Phone::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgJoyStick1Phone::Update[0]( ) -> E
	[Client]Game.UI.DlgJoyStick1Phone::get_Enable[0]( ) -> A
	[Client]Game.UI.DlgJoyStick1Phone::SetJoyEnable[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgJoyStick1Phone::get_Pressed[0]( ) -> e
	[Client]Game.UI.DlgJoyStick1Phone::OnSpriteMaskPress[1]( System.Boolean ) -> a
	[Client]Game.UI.DlgJoyStick1Phone::OnSpriteMaskDrag[1]( UnityEngine.Vector2 ) -> A

	[Client]Game.UI.DlgJoyStick1Phone::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick1Phone::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgJoyStick1Phone::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgJoyStick1Phone::MinDistance -> A
	System.Single [Client]System.Single Game.UI.DlgJoyStick1Phone::MaxDistance -> a
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.DlgJoyStick1Phone::m_touchPosStart -> A
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.DlgJoyStick1Phone::m_totalDelta -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1Phone::m_bPressed -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1Phone::m_bEnable -> a

	System.String [Client]System.String Game.UI.DlgJoyStick1Phone::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgJoyStick1Phone::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1Phone::Pressed -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1Phone::Enable -> dropped
}

[Client]Game.UI.DlgEctypeInfo skipped:  filtered
{
	[Client]Game.UI.DlgEctypeInfo::Update[0]( ) -> E
	[Client]Game.UI.DlgEctypeInfo::Show[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgEctypeInfo::GetTimeText[0]( ) -> e

	[Client]Game.UI.DlgEctypeInfo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEctypeInfo::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgEctypeInfo::UpdateCD -> A
	System.Single [Client]System.Single Game.UI.DlgEctypeInfo::m_LastUpdate -> a
	System.Single [Client]System.Single Game.UI.DlgEctypeInfo::m_Start -> B
	System.Single [Client]System.Single Game.UI.DlgEctypeInfo::m_Duration -> b

	System.String [Client]System.String Game.UI.DlgEctypeInfo::fileName -> dropped
}

[Client]Game.UI.DlgChatBubblePhone skipped:  filtered
{
	[Client]Game.UI.DlgChatBubblePhone::OnShow[0]( ) -> b
	[Client]Game.UI.DlgChatBubblePhone::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgChatBubblePhone::Init[0]( ) -> c
	[Client]Game.UI.DlgChatBubblePhone::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgChatBubblePhone::Update[0]( ) -> E
	[Client]Game.UI.DlgChatBubblePhone::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.DlgChatBubblePhone::SetStatus[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgChatBubblePhone::ShowBubble[1]( System.String ) -> A
	[Client]Game.UI.DlgChatBubblePhone::CloseBubble[0]( ) -> e
	[Client]Game.UI.DlgChatBubblePhone::OnButtonMaxClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgChatBubblePhone::OnTextListClick[1]( Game.UI.UICommon.IXUITextList ) -> A

	[Client]Game.UI.DlgChatBubblePhone::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatBubblePhone::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatBubblePhone::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatBubblePhone::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgChatBubblePhone::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatBubblePhone::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgChatBubblePhone::m_fTimeStart -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgChatBubblePhone::m_bBubbleClosed -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgChatBubblePhone::m_nStatus -> A

	System.String [Client]System.String Game.UI.DlgChatBubblePhone::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgChatBubblePhone::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgChatBubblePhone::Persist -> dropped
}

[Client]Game.UI.DlgChangeLine skipped:  filtered
{
	[Client]Game.UI.DlgChangeLine::OnShow[0]( ) -> b
	[Client]Game.UI.DlgChangeLine::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgChangeLine::get_Info[0]( ) -> e
	[Client]Game.UI.DlgChangeLine::set_Info[1]( Game.Msg.MsgServerLineInfo ) -> A
	[Client]Game.UI.DlgChangeLine::OnList_ChangeLineClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgChangeLine::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgChangeLine::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChangeLine::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChangeLine::.ctor[0]( ) skipped:  special name

	Game.Msg.MsgServerLineInfo [Client]Game.Msg.MsgServerLineInfo Game.UI.DlgChangeLine::<Info>k__BackingField -> A

	Game.Msg.MsgServerLineInfo [Client]Game.Msg.MsgServerLineInfo Game.UI.DlgChangeLine::Info -> dropped
	System.String [Client]System.String Game.UI.DlgChangeLine::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgChangeLine::layer -> dropped
}

[Client]Game.UI.DlgBag skipped:  filtered
{
	[Client]Game.UI.DlgBag::OnShow[0]( ) -> b
	[Client]Game.UI.DlgBag::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgBag::Init[0]( ) -> c
	[Client]Game.UI.DlgBag::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgBag::Update[0]( ) -> E
	[Client]Game.UI.DlgBag::OnListClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgBag::AppendTipButtons[2]( Game.UI.UICommon.IXUIListItem, System.Collections.Generic.List`1<Game.TipButtonData>& ) -> A
	[Client]Game.UI.DlgBag::AddItemByOtherUI[1]( System.Int64 ) -> A
	[Client]Game.UI.DlgBag::RemoveItemByOtherUI[1]( System.Int64 ) -> a
	[Client]Game.UI.DlgBag::GetListItemByData[1]( System.Int64 ) -> B
	[Client]Game.UI.DlgBag::OnCheckboxCheckGoods[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgBag::OnCheckboxCheckTasks[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgBag::OnButtonClickArrange[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgBag::OnButtonClickConsign[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgBag::OnButtonClickDivide[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgBag::OnButtonClickBuyBack[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgBag::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgBag::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgBag::RefreshPage[0]( ) -> e
	[Client]Game.UI.DlgBag::RefreshUnlock[0]( ) -> F
	[Client]Game.UI.DlgBag::NeedShowItems[0]( ) -> f
	[Client]Game.UI.DlgBag::ShowItems[0]( ) -> G
	[Client]Game.UI.DlgBag::ShowHighlightSelectedRow[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgBag::CheckBuyBag[1]( Game.UI.UICommon.IXUIListItem ) -> a

	[Client]Game.UI.DlgBag::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBag::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBag::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBag::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgBag::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBag::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgBag::m_nItemCountPerPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgBag::ItemCountPerLine -> a
	System.String [Client]System.String Game.UI.DlgBag::m_LockIconFilepath -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgBag::m_nItemPageMax -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgBag::m_nCurPage -> b
	System.Boolean [Client]System.Boolean Game.UI.DlgBag::m_NeedShowItems -> A

	System.String [Client]System.String Game.UI.DlgBag::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgBag::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgBag::Persist -> dropped
}

[Client]Game.UI.DlgAuctionMoneySell skipped:  filtered
{
	[Client]Game.UI.DlgAuctionMoneySell::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAuctionMoneySell::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgAuctionMoneySell::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAuctionMoneySell::UpdatePrice[0]( ) -> e
	[Client]Game.UI.DlgAuctionMoneySell::OnNumberClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAuctionMoneySell::OnInputNumber[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgAuctionMoneySell::OnPriceClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgAuctionMoneySell::OnInputPrice[1]( System.UInt32 ) -> a
	[Client]Game.UI.DlgAuctionMoneySell::OnButtonSellClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgAuctionMoneySell::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> b

	[Client]Game.UI.DlgAuctionMoneySell::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionMoneySell::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionMoneySell::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionMoneySell::Min_Number -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionMoneySell::Max_Number -> a
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionMoneySell::Min_PricePerUnitGold -> B
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionMoneySell::Max_PricePerUnitGold -> b
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionMoneySell::UnitGold -> C
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionMoneySell::m_InputNumber -> c
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAuctionMoneySell::m_InputPrice -> D

	System.String [Client]System.String Game.UI.DlgAuctionMoneySell::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoneySell::layer -> dropped
}

[Client]Game.UI.DlgAuctionMoneyBuy skipped:  filtered
{
	[Client]Game.UI.DlgAuctionMoneyBuy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAuctionMoneyBuy::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgAuctionMoneyBuy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAuctionMoneyBuy::Show[1]( Game.Msg.ClientGoldConsignInfo ) -> A
	[Client]Game.UI.DlgAuctionMoneyBuy::UpdatePrice[0]( ) -> e
	[Client]Game.UI.DlgAuctionMoneyBuy::OnNumberClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAuctionMoneyBuy::OnInputNumber[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgAuctionMoneyBuy::OnButtonBuyClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgAuctionMoneyBuy::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgAuctionMoneyBuy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionMoneyBuy::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionMoneyBuy::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoneyBuy::Min_Number -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoneyBuy::Unit_Gold -> a
	System.Single [Client]System.Single Game.UI.DlgAuctionMoneyBuy::feeFactor -> A
	Game.Msg.ClientGoldConsignInfo [Client]Game.Msg.ClientGoldConsignInfo Game.UI.DlgAuctionMoneyBuy::m_GoldConsignInfo -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoneyBuy::m_InputNumber -> B

	System.String [Client]System.String Game.UI.DlgAuctionMoneyBuy::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionMoneyBuy::layer -> dropped
}

[Client]Game.UI.DlgAuctionBuy skipped:  filtered
{
	[Client]Game.UI.DlgAuctionBuy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAuctionBuy::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgAuctionBuy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAuctionBuy::UpdatePrice[0]( ) -> e
	[Client]Game.UI.DlgAuctionBuy::OnNumberClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAuctionBuy::OnInputNumber[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgAuctionBuy::OnImageButtonBuyClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgAuctionBuy::OnImageButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgAuctionBuy::get_CurAuctionDetailSale[0]( ) -> F

	[Client]Game.UI.DlgAuctionBuy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionBuy::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAuctionBuy::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionBuy::Min_Number -> A
	System.Single [Client]System.Single Game.UI.DlgAuctionBuy::feeFactor -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionBuy::m_InputNumber -> a

	System.String [Client]System.String Game.UI.DlgAuctionBuy::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAuctionBuy::layer -> dropped
	Game.Msg.AuctionDetailSale [Client]Game.Msg.AuctionDetailSale Game.UI.DlgAuctionBuy::CurAuctionDetailSale -> dropped
}

[Client]Game.UI.DlgArenaOffLine skipped:  filtered
{
	[Client]Game.UI.DlgArenaOffLine::OnShow[0]( ) -> b
	[Client]Game.UI.DlgArenaOffLine::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgArenaOffLine::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgArenaOffLine::Update[0]( ) -> E
	[Client]Game.UI.DlgArenaOffLine::RefreshOther[0]( ) -> e
	[Client]Game.UI.DlgArenaOffLine::OnCharacterLoadedHandler[1]( Game.Character ) -> A
	[Client]Game.UI.DlgArenaOffLine::OnButton_AddClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgArenaOffLine::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgArenaOffLine::OnButton_ChallengeClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgArenaOffLine::OnButton_DetailClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgArenaOffLine::OnButton_GetAwardClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgArenaOffLine::OnButton_ShopClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgArenaOffLine::OnButton_RanklistClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgArenaOffLine::OnList_WinInfoClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgArenaOffLine::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLine::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLine::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgArenaOffLine::ShopNPCId -> A
	System.Single [Client]System.Single Game.UI.DlgArenaOffLine::UpdateCD -> A
	System.Single [Client]System.Single Game.UI.DlgArenaOffLine::m_LastUpdateTime -> a

	System.String [Client]System.String Game.UI.DlgArenaOffLine::fileName -> dropped
}

[Client]Game.UI.DlgShipExploration skipped:  filtered
{
	[Client]Game.UI.DlgShipExploration::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgShipExploration::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShipExploration::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShipExploration::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShipExploration::get_NewCabinDic[0]( ) -> e
	[Client]Game.UI.DlgShipExploration::get_CurExpeditionData[0]( ) -> F
	[Client]Game.UI.DlgShipExploration::get_IsDataReady[0]( ) -> f
	[Client]Game.UI.DlgShipExploration::get_MaxPage[0]( ) -> G
	[Client]Game.UI.DlgShipExploration::get_MonsterListInCurPage[0]( ) -> g
	[Client]Game.UI.DlgShipExploration::get_ShipType[0]( ) -> H
	[Client]Game.UI.DlgShipExploration::set_ShipType[1]( Game.Logic.ExpeditionShipType ) -> A
	[Client]Game.UI.DlgShipExploration::SetShipType[1]( Game.Logic.ExpeditionShipType ) -> a
	[Client]Game.UI.DlgShipExploration::Show[1]( Game.Logic.ExpeditionShipType ) -> B
	[Client]Game.UI.DlgShipExploration::OnCountDownFinished[0]( ) -> h
	[Client]Game.UI.DlgShipExploration::CanRefresh[0]( ) -> I
	[Client]Game.UI.DlgShipExploration::CanOperate[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgShipExploration::RefreshWorldList[0]( ) -> i
	[Client]Game.UI.DlgShipExploration::RefreshShipInfo[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgShipExploration::RefreshCurShipInfo[0]( ) -> J
	[Client]Game.UI.DlgShipExploration::RefreshExpeditionProgressBar[0]( ) -> j
	[Client]Game.UI.DlgShipExploration::RefreshMonsterExpProgressBar[0]( ) -> K
	[Client]Game.UI.DlgShipExploration::RefreshActionPoint[0]( ) -> k
	[Client]Game.UI.DlgShipExploration::RefreshWMShip[1]( System.Int32 ) -> a
	[Client]Game.UI.DlgShipExploration::RefreshCurWMShip[0]( ) -> L
	[Client]Game.UI.DlgShipExploration::RefreshStatus[0]( ) -> l
	[Client]Game.UI.DlgShipExploration::RefreshTaskList[0]( ) -> M
	[Client]Game.UI.DlgShipExploration::RefreshRecruitNum[0]( ) -> m
	[Client]Game.UI.DlgShipExploration::RefreshBoard[0]( ) -> N
	[Client]Game.UI.DlgShipExploration::GetFirstEmptyCabin[0]( ) -> n
	[Client]Game.UI.DlgShipExploration::RefreshDepositary[0]( ) -> O
	[Client]Game.UI.DlgShipExploration::RefreshSelectMonsterItem[1]( System.UInt64 ) -> A
	[Client]Game.UI.DlgShipExploration::RefreshLockState[1]( System.UInt64 ) -> a
	[Client]Game.UI.DlgShipExploration::RefreshMonsterInfo[1]( Game.Msg.ExpeditionMonsterData ) -> A
	[Client]Game.UI.DlgShipExploration::LoadedAction[1]( UnityEngine.Object ) -> A
	[Client]Game.UI.DlgShipExploration::OnListTaskClick[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgShipExploration::OnConfirmExecuteDelegateTask[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgShipExploration::RefreshCurTask[1]( Game.DataExpeditionTask ) -> A
	[Client]Game.UI.DlgShipExploration::OnListBoardClick[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgShipExploration::TryToUnlockCabin[2]( System.Int32, System.Int32 ) -> A
	[Client]Game.UI.DlgShipExploration::OnConfirmUnlockCabin[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> a
	[Client]Game.UI.DlgShipExploration::OnListMemberClick[1]( Game.UI.UICommon.IXUIListItem ) -> b
	[Client]Game.UI.DlgShipExploration::SelectSameItem[0]( ) -> o
	[Client]Game.UI.DlgShipExploration::SelectNewItem[1]( Game.UI.UICommon.IXUIListItem ) -> C
	[Client]Game.UI.DlgShipExploration::OnConfirmExchagePos[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> B
	[Client]Game.UI.DlgShipExploration::UpdateSelectedListItem[1]( Game.UI.UICommon.IXUIListItem ) -> c
	[Client]Game.UI.DlgShipExploration::OnMoveClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShipExploration::OnOffShipClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShipExploration::OnConfirmOffShip[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> b
	[Client]Game.UI.DlgShipExploration::OnShipClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgShipExploration::OnConfirmOnShip[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> C
	[Client]Game.UI.DlgShipExploration::OnEvolveClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgShipExploration::SetButtonState[2]( Game.UI.UICommon.IXUIListItem, System.Boolean ) -> A
	[Client]Game.UI.DlgShipExploration::OnCheckboxMapCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgShipExploration::OnCheckboxExploreShipCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgShipExploration::OnCheckboxRoleAttrClick[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgShipExploration::OnCheckboxBattleShipCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgShipExploration::OnRefreshTaskClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgShipExploration::OnConfirmRefreshTask[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> c
	[Client]Game.UI.DlgShipExploration::OnCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgShipExploration::OnConfirmClose[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> D
	[Client]Game.UI.DlgShipExploration::OnAbandonClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgShipExploration::OnLockClick[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgShipExploration::OnButtonRecruitClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgShipExploration::OnButtonBackClick[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgShipExploration::OnButtonInformationClick[1]( Game.UI.UICommon.IXUIButton ) -> e
	[Client]Game.UI.DlgShipExploration::OnButtonShiftClick[1]( Game.UI.UICommon.IXUIButton ) -> F
	[Client]Game.UI.DlgShipExploration::RefreshReturnHomeButtonState[0]( ) -> P
	[Client]Game.UI.DlgShipExploration::OnListSkillClick[1]( Game.UI.UICommon.IXUIListItem ) -> D
	[Client]Game.UI.DlgShipExploration::OnListWorldClick[1]( Game.UI.UICommon.IXUIListItem ) -> d
	[Client]Game.UI.DlgShipExploration::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> f
	[Client]Game.UI.DlgShipExploration::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> G
	[Client]Game.UI.DlgShipExploration::NoviceTaskDone[0]( ) -> p
	[Client]Game.UI.DlgShipExploration::SortByBlockID[2]( Game.DataExpeditionArea, Game.DataExpeditionArea ) -> A
	[Client]Game.UI.DlgShipExploration::SortDepositary[2]( Game.Msg.ExpeditionMonsterData, Game.Msg.ExpeditionMonsterData ) -> A

	[Client]Game.UI.DlgShipExploration::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExploration::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExploration::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgShipExploration::ForbiddenIconFile -> A
	System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> Game.UI.DlgShipExploration::LockedCabinDic -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExploration::CurSelectedShipId -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExploration::CurSelectedCabinId -> a
	Game.UI.UICommon.IXUIListItem [Client]Game.UI.UICommon.IXUIListItem Game.UI.DlgShipExploration::SelectedListItem -> A
	Game.UI.DlgShipExploration/ExplorationOperateState [Client]Game.UI.DlgShipExploration/ExplorationOperateState Game.UI.DlgShipExploration::CurOperateState -> A
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UI.DlgShipExploration::CurMonsterModel -> A
	System.String [Client]System.String Game.UI.DlgShipExploration::CurModelFile -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExploration::m_CurPage -> B
	Game.Logic.ExpeditionShipType [Client]Game.Logic.ExpeditionShipType Game.UI.DlgShipExploration::<ShipType>k__BackingField -> A

	System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> [Client]System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<System.Int32>> Game.UI.DlgShipExploration::NewCabinDic -> dropped
	Game.Msg.ExpeditionData [Client]Game.Msg.ExpeditionData Game.UI.DlgShipExploration::CurExpeditionData -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgShipExploration::IsDataReady -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExploration::MaxPage -> dropped
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> Game.UI.DlgShipExploration::MonsterListInCurPage -> dropped
	Game.Logic.ExpeditionShipType [Client]Game.Logic.ExpeditionShipType Game.UI.DlgShipExploration::ShipType -> dropped
	System.String [Client]System.String Game.UI.DlgShipExploration::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExploration::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgShipExploration::Cleanup -> dropped
}

[Client]Game.UI.DlgShipExploration/ExplorationOperateState skipped:  filtered
{
	Game.UI.DlgShipExploration/ExplorationOperateState [Client]Game.UI.DlgShipExploration/ExplorationOperateState Game.UI.DlgShipExploration/ExplorationOperateState::Default -> A
	Game.UI.DlgShipExploration/ExplorationOperateState [Client]Game.UI.DlgShipExploration/ExplorationOperateState Game.UI.DlgShipExploration/ExplorationOperateState::ExchangePos -> a
	Game.UI.DlgShipExploration/ExplorationOperateState [Client]Game.UI.DlgShipExploration/ExplorationOperateState Game.UI.DlgShipExploration/ExplorationOperateState::Evolve -> B
	Game.UI.DlgShipExploration/ExplorationOperateState [Client]Game.UI.DlgShipExploration/ExplorationOperateState Game.UI.DlgShipExploration/ExplorationOperateState::OnShip -> b

	System.Int32 [Client]System.Int32 Game.UI.DlgShipExploration/ExplorationOperateState::value__ skipped:  filtered
}

[Client]Game.UI.DlgShipExploration/<>c__DisplayClass2 skipped:  filtered
{
	[Client]Game.UI.DlgShipExploration/<>c__DisplayClass2::<RefreshBoard>b__0[1]( Game.Msg.ExpeditionShipMonsterData ) -> A

	[Client]Game.UI.DlgShipExploration/<>c__DisplayClass2::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgShipExploration/<>c__DisplayClass2::cabinIdx -> A
}

[Client]Game.UI.DlgRankingList skipped:  filtered
{
	[Client]Game.UI.DlgRankingList::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRankingList::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgRankingList::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRankingList::SetDlgType[1]( Game.Msg.ERankListType ) -> A
	[Client]Game.UI.DlgRankingList::ResetList[0]( ) -> e
	[Client]Game.UI.DlgRankingList::RefreshPersonalList[0]( ) -> F
	[Client]Game.UI.DlgRankingList::RefreshProfessionList[0]( ) -> f
	[Client]Game.UI.DlgRankingList::RefreshCiyuanList[0]( ) -> G
	[Client]Game.UI.DlgRankingList::RefreshExpeditionList[0]( ) -> g
	[Client]Game.UI.DlgRankingList::RefreshStatus[3]( Game.Msg.ERankListType, System.Int32, System.UInt32 ) -> A
	[Client]Game.UI.DlgRankingList::RefreshPersonalStatus[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgRankingList::RefreshProfessionStatus[1]( System.UInt32 ) -> a
	[Client]Game.UI.DlgRankingList::RefreshCiyuanStatus[1]( System.UInt32 ) -> B
	[Client]Game.UI.DlgRankingList::RefreshExpeditionStatus[1]( System.UInt32 ) -> b
	[Client]Game.UI.DlgRankingList::OnCheckboxPersonalCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgRankingList::OnCheckboxLevelCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgRankingList::OnCheckboxKillCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgRankingList::OnCheckboxProfessionCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgRankingList::OnCheckboxAllProfessionCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgRankingList::OnCheckboxWorriorCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.DlgRankingList::OnCheckboxMageCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.DlgRankingList::OnCheckboxPriestCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> d
	[Client]Game.UI.DlgRankingList::OnCheckboxCiyuanCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> E
	[Client]Game.UI.DlgRankingList::OnCheckboxShipCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> e
	[Client]Game.UI.DlgRankingList::OnListPersonalClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgRankingList::OnListProfessionClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgRankingList::OnListCiyuanClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgRankingList::OnListShipClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> b
	[Client]Game.UI.DlgRankingList::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgRankingList::OnButtonLeftToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgRankingList::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgRankingList::OnButtonRightToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgRankingList::OnButtonFriendClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgRankingList::OnButtonLookClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgRankingList::OnButtonChatClick[1]( Game.UI.UICommon.IXUIButton ) -> D

	[Client]Game.UI.DlgRankingList::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRankingList::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRankingList::.ctor[0]( ) skipped:  special name

	Game.Msg.ERankListType [Client]Game.Msg.ERankListType Game.UI.DlgRankingList::CurType -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgRankingList::CurPage -> A
	Game.Msg.ClientRankData [Client]Game.Msg.ClientRankData Game.UI.DlgRankingList::CurRankData -> A

	System.String [Client]System.String Game.UI.DlgRankingList::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgRankingList::layer -> dropped
}

[Client]Game.UI.DlgLogo skipped:  filtered
{
	[Client]Game.UI.DlgLogo::get_IsBundle[0]( ) -> A
	[Client]Game.UI.DlgLogo::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgLogo::OnShow[0]( ) -> b
	[Client]Game.UI.DlgLogo::Init[0]( ) -> c
	[Client]Game.UI.DlgLogo::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgLogo::Update[0]( ) -> E

	[Client]Game.UI.DlgLogo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgLogo::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgLogo::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgLogo::m_StartShowTime -> A

	System.String [Client]System.String Game.UI.DlgLogo::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgLogo::IsBundle -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgLogo::Cleanup -> dropped
}

[Client]Game.UI.DlgGuildBeInvited skipped:  filtered
{
	[Client]Game.UI.DlgGuildBeInvited::OnShow[0]( ) -> b
	[Client]Game.UI.DlgGuildBeInvited::Init[0]( ) -> c
	[Client]Game.UI.DlgGuildBeInvited::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuildBeInvited::Show[3]( System.UInt32, System.String, System.String ) -> A
	[Client]Game.UI.DlgGuildBeInvited::OnButtonOkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGuildBeInvited::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgGuildBeInvited::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildBeInvited::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildBeInvited::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgGuildBeInvited::m_unGuildID -> A
	System.String [Client]System.String Game.UI.DlgGuildBeInvited::m_strGuildName -> A
	System.String [Client]System.String Game.UI.DlgGuildBeInvited::m_strPlayerName -> a

	System.String [Client]System.String Game.UI.DlgGuildBeInvited::fileName -> dropped
}

[Client]Game.UI.DlgMain skipped:  filtered
{
	[Client]Game.UI.DlgMain::OnShow[0]( ) -> b
	[Client]Game.UI.DlgMain::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgMain::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMain::Show[1]( Game.UI.DlgMain/enumDlgType ) -> A
	[Client]Game.UI.DlgMain::GetCheckBox[1]( Game.UI.DlgMain/enumDlgType ) -> a
	[Client]Game.UI.DlgMain::OnCheckBoxRoleCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgMain::OnCheckBoxSystemCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgMain::OnCheckBoxFriendCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgMain::OnCheckBoxPetCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgMain::OnCheckBoxRideCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgMain::OnCheckBoxShopCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.DlgMain::OnCheckBoxTaskCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.DlgMain::OnCheckBoxActivityCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> d
	[Client]Game.UI.DlgMain::OnCheckBoxStrengthCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> E
	[Client]Game.UI.DlgMain::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMain::RefreshPage[0]( ) -> e
	[Client]Game.UI.DlgMain::OnList_PageReposition[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgMain::NoviceTaskDone[0]( ) -> F

	[Client]Game.UI.DlgMain::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMain::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMain::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMain::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgMain::.ctor[0]( ) skipped:  special name

	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain::m_eDlgType -> A

	System.String [Client]System.String Game.UI.DlgMain::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgMain::Persist -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMain::layer -> dropped
}

[Client]Game.UI.DlgMain/enumDlgType skipped:  filtered
{
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_Default -> A
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_Role -> a
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_Pet -> B
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_Strength -> b
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_Task -> C
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_Social -> c
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_Team -> D
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_Mail -> d
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_System -> E
	Game.UI.DlgMain/enumDlgType [Client]Game.UI.DlgMain/enumDlgType Game.UI.DlgMain/enumDlgType::eDlgType_None -> e

	System.Int32 [Client]System.Int32 Game.UI.DlgMain/enumDlgType::value__ skipped:  filtered
}

[Client]Game.UI.DlgShopBuy skipped:  filtered
{
	[Client]Game.UI.DlgShopBuy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShopBuy::Init[0]( ) -> c
	[Client]Game.UI.DlgShopBuy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShopBuy::ShowByItemId[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgShopBuy::Show[1]( System.Int32 ) -> a
	[Client]Game.UI.DlgShopBuy::EnableButtonBuy[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgShopBuy::OnButtonBuyClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShopBuy::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShopBuy::OnCheckBoxBindingGold[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgShopBuy::OnCheckBoxGoldCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgShopBuy::OnNumberClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgShopBuy::OnInputNumber[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgShopBuy::RefreshGoldInfo[0]( ) -> e
	[Client]Game.UI.DlgShopBuy::Validate[1]( System.String ) -> A

	[Client]Game.UI.DlgShopBuy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShopBuy::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShopBuy::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShopBuy::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgShopBuy::m_bUseBindGold -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShopBuy::m_nShopCommodityID -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgShopBuy::m_unNum -> A

	System.String [Client]System.String Game.UI.DlgShopBuy::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShopBuy::layer -> dropped
}

[Client]Game.UI.DlgShipExplorationSkill skipped:  filtered
{
	[Client]Game.UI.DlgShipExplorationSkill::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgShipExplorationSkill::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShipExplorationSkill::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShipExplorationSkill::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShipExplorationSkill::Show[1]( Game.Msg.ExpeditionMonsterData ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::Refresh[1]( Game.Msg.ExpeditionMonsterData ) -> a
	[Client]Game.UI.DlgShipExplorationSkill::Show[2]( Game.Msg.ExpeditionMonsterData, System.Int32 ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::ResetMonsterList[0]( ) -> e
	[Client]Game.UI.DlgShipExplorationSkill::RefreshWidgetByEvolveType[1]( Game.Msg.EExpeditionEvolutionType ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::RefreshMonster[2]( Game.Msg.ExpeditionMonsterData, Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::RefreshMasterMonsterNewLevel[0]( ) -> F
	[Client]Game.UI.DlgShipExplorationSkill::RefreshMemberList[0]( ) -> f
	[Client]Game.UI.DlgShipExplorationSkill::GetStarList[2]( Game.UI.UICommon.IXUIListItem, System.Int32 ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::FilterCondition[5]( Game.Msg.EExpeditionEvolutionType, Game.Msg.ExpeditionMonsterData, Game.Msg.ExpeditionMonsterData, Game.DataExpeditionMonster, Game.DataExpeditionMonster ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::RefreshBatchQuality[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::OnListMemberClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::OnListMonsterSkillClick[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonMasterBaseSkillClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonSlaveBaseSkillClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShipExplorationSkill::OnCheckboxMergeCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::OnCheckboxEvolveCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgShipExplorationSkill::OnCheckboxSkillCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgShipExplorationSkill::OnCheckboxModeClick[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonMergeQuality1Click[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonMergeQuality2Click[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonMergeQuality3Click[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonMergeQuality4Click[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonOKClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgShipExplorationSkill::OnConfirmEvolveClick[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::Evolve[0]( ) -> G
	[Client]Game.UI.DlgShipExplorationSkill::OnConfirmEvolveSkill[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> a
	[Client]Game.UI.DlgShipExplorationSkill::OnCheckboxSkillItemClick[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> e
	[Client]Game.UI.DlgShipExplorationSkill::OnButtonInformationClick[1]( Game.UI.UICommon.IXUIButton ) -> F
	[Client]Game.UI.DlgShipExplorationSkill::GetMaxEmptySkillSlot[1]( System.Int32 ) -> a
	[Client]Game.UI.DlgShipExplorationSkill::HasQuality[1]( System.Int32 ) -> B
	[Client]Game.UI.DlgShipExplorationSkill::MoneyExpend[2]( Game.Msg.ExpeditionMonsterData, System.Boolean ) -> A
	[Client]Game.UI.DlgShipExplorationSkill::get_SlaveList[0]( ) -> g
	[Client]Game.UI.DlgShipExplorationSkill::get_MaxPage[0]( ) -> H
	[Client]Game.UI.DlgShipExplorationSkill::get_SlaveListInCurPage[0]( ) -> h
	[Client]Game.UI.DlgShipExplorationSkill::get_MasterSkillData[0]( ) -> I
	[Client]Game.UI.DlgShipExplorationSkill::get_MasterSkillCsv[0]( ) -> i
	[Client]Game.UI.DlgShipExplorationSkill::get_SlaveCsv[0]( ) -> J
	[Client]Game.UI.DlgShipExplorationSkill::get_SlaveSkillData[0]( ) -> j
	[Client]Game.UI.DlgShipExplorationSkill::get_SlaveSkillCsv[0]( ) -> K
	[Client]Game.UI.DlgShipExplorationSkill::get_NeedChooseSkill[0]( ) -> k

	[Client]Game.UI.DlgShipExplorationSkill::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationSkill::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationSkill::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationSkill::MaxNumPerPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationSkill::m_ShipId -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationSkill::m_SkillSlot -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationSkill::m_CurPage -> b
	Game.Msg.EExpeditionEvolutionType [Client]Game.Msg.EExpeditionEvolutionType Game.UI.DlgShipExplorationSkill::m_EvolveType -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationSkill::m_BatchQuality -> C
	Game.Msg.ExpeditionMonsterData [Client]Game.Msg.ExpeditionMonsterData Game.UI.DlgShipExplorationSkill::m_MasterData -> A
	Game.DataExpeditionMonster [Client]Game.DataExpeditionMonster Game.UI.DlgShipExplorationSkill::m_MasterCsv -> A
	Game.Msg.ExpeditionMonsterData [Client]Game.Msg.ExpeditionMonsterData Game.UI.DlgShipExplorationSkill::m_SlaveData -> a

	System.String [Client]System.String Game.UI.DlgShipExplorationSkill::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationSkill::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgShipExplorationSkill::Cleanup -> dropped
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> Game.UI.DlgShipExplorationSkill::SlaveList -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationSkill::MaxPage -> dropped
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> Game.UI.DlgShipExplorationSkill::SlaveListInCurPage -> dropped
	Game.Msg.ExpeditionMonsterSkill [Client]Game.Msg.ExpeditionMonsterSkill Game.UI.DlgShipExplorationSkill::MasterSkillData -> dropped
	Game.DataExpeditionMonsterSkill [Client]Game.DataExpeditionMonsterSkill Game.UI.DlgShipExplorationSkill::MasterSkillCsv -> dropped
	Game.DataExpeditionMonster [Client]Game.DataExpeditionMonster Game.UI.DlgShipExplorationSkill::SlaveCsv -> dropped
	Game.Msg.ExpeditionMonsterSkill [Client]Game.Msg.ExpeditionMonsterSkill Game.UI.DlgShipExplorationSkill::SlaveSkillData -> dropped
	Game.DataExpeditionMonsterSkill [Client]Game.DataExpeditionMonsterSkill Game.UI.DlgShipExplorationSkill::SlaveSkillCsv -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgShipExplorationSkill::NeedChooseSkill -> dropped
}

[Client]Game.UI.DlgPrize skipped:  filtered
{
	[Client]Game.UI.DlgPrize::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPrize::Init[0]( ) -> c
	[Client]Game.UI.DlgPrize::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPrize::Show[1]( Game.UI.DlgPrize/eDlgType ) -> A
	[Client]Game.UI.DlgPrize::InitLoginAward[0]( ) -> e
	[Client]Game.UI.DlgPrize::RefreshLoginAward[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgPrize::RefreshLoginListItem[2]( Game.UI.UICommon.IXUIListItem, System.Boolean ) -> A
	[Client]Game.UI.DlgPrize::MoveToLoginListItem[0]( ) -> F
	[Client]Game.UI.DlgPrize::MoveToSerialLoginListItem[0]( ) -> f
	[Client]Game.UI.DlgPrize::InitVIPAward[0]( ) -> G
	[Client]Game.UI.DlgPrize::RefreshVIPAward[0]( ) -> g
	[Client]Game.UI.DlgPrize::InitLevelAward[0]( ) -> H
	[Client]Game.UI.DlgPrize::RefreshLevelAward[1]( System.Int32 ) -> a
	[Client]Game.UI.DlgPrize::InitOnlineAward[0]( ) -> h
	[Client]Game.UI.DlgPrize::ChangeToRich[0]( ) -> I
	[Client]Game.UI.DlgPrize::OnCheckboxTimeOpenRich[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgPrize::InitRechargeAward[0]( ) -> i
	[Client]Game.UI.DlgPrize::RefreshRechargeAward[1]( System.Int32 ) -> B
	[Client]Game.UI.DlgPrize::RefreshOnlineAwardNum[0]( ) -> J
	[Client]Game.UI.DlgPrize::RefreshLoginAwardNum[0]( ) -> j
	[Client]Game.UI.DlgPrize::RefreshLevelAwardNum[0]( ) -> K
	[Client]Game.UI.DlgPrize::RefreshRechargeAwardNum[0]( ) -> k
	[Client]Game.UI.DlgPrize::RefreshVIPAwardNum[0]( ) -> L
	[Client]Game.UI.DlgPrize::OnCheckboxLoginCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgPrize::OnCheckboxPayCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgPrize::OnCheckboxVIPCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgPrize::OnCheckboxLevelCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgPrize::OnCheckboxOnlineCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.DlgPrize::SelectTab[0]( ) -> l
	[Client]Game.UI.DlgPrize::OnButtonLoginClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPrize::OnImageButtonDisposableClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPrize::OnImageButtonWeekClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgPrize::OnImageButtonDayClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgPrize::OnButtonLevelClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgPrize::OnButtonOnlineClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgPrize::OnButtonRechargeClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgPrize::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgPrize::OnButton_OKClick[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgPrize::OnCountDownFinished[0]( ) -> M
	[Client]Game.UI.DlgPrize::OnPlayerModelLoaded[1]( Game.Character ) -> A
	[Client]Game.UI.DlgPrize::RefreshModel[0]( ) -> m

	[Client]Game.UI.DlgPrize::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPrize::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPrize::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgPrize::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgPrize::m_CurAwardID -> A
	Game.UI.UICommon.IXUIListItem [Client]Game.UI.UICommon.IXUIListItem Game.UI.DlgPrize::m_CurAwardListItem -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgPrize::m_FirstClickLogin -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgPrize::m_FirstClickPay -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgPrize::m_FirstClickVIP -> B
	System.Boolean [Client]System.Boolean Game.UI.DlgPrize::m_FirstClickLevel -> b
	Game.UI.DlgPrize/eDlgType [Client]Game.UI.DlgPrize/eDlgType Game.UI.DlgPrize::m_CurTabType -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPrize::m_LoginIdx -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgPrize::m_SerialLoginIdx -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgPrize::CONST_LOGINLIST_SHOWNUM -> b
	System.Int32 [Client]System.Int32 Game.UI.DlgPrize::CONST_SERIALLOGINLIST_SHOWNUM -> C
	Game.Character [Client]Game.Character Game.UI.DlgPrize::m_character -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgPrize::m_unCurAnimIndex -> A
	System.String[] [Client]System.String[] Game.UI.DlgPrize::m_arrayAnimName -> A

	System.String [Client]System.String Game.UI.DlgPrize::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgPrize::layer -> dropped
}

[Client]Game.UI.DlgPrize/eDlgType skipped:  filtered
{
	Game.UI.DlgPrize/eDlgType [Client]Game.UI.DlgPrize/eDlgType Game.UI.DlgPrize/eDlgType::Online -> A
	Game.UI.DlgPrize/eDlgType [Client]Game.UI.DlgPrize/eDlgType Game.UI.DlgPrize/eDlgType::Login -> a
	Game.UI.DlgPrize/eDlgType [Client]Game.UI.DlgPrize/eDlgType Game.UI.DlgPrize/eDlgType::Level -> B
	Game.UI.DlgPrize/eDlgType [Client]Game.UI.DlgPrize/eDlgType Game.UI.DlgPrize/eDlgType::Pay -> b
	Game.UI.DlgPrize/eDlgType [Client]Game.UI.DlgPrize/eDlgType Game.UI.DlgPrize/eDlgType::VIP -> C

	System.Int32 [Client]System.Int32 Game.UI.DlgPrize/eDlgType::value__ skipped:  filtered
}

[Client]Game.UI.DlgPKList skipped:  filtered
{
	[Client]Game.UI.DlgPKList::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPKList::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPKList::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPKList::Update[0]( ) -> E
	[Client]Game.UI.DlgPKList::Show[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgPKList::OnPKListItemClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgPKList::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPKList::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgPKList::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgPKList::UPDATE_PKLIST_TIME -> A
	System.Collections.Generic.List`1<System.UInt32> [Client]System.Collections.Generic.List`1<System.UInt32> Game.UI.DlgPKList::m_PKList -> A
	System.Single [Client]System.Single Game.UI.DlgPKList::m_LastUpdatePKListTime -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgPKList::m_ForceShow -> A

	System.String [Client]System.String Game.UI.DlgPKList::fileName -> dropped
}

[Client]Game.UI.DlgPetRestore skipped:  filtered
{
	[Client]Game.UI.DlgPetRestore::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetRestore::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetRestore::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetRestore::OnButton_OKClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetRestore::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgPetRestore::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetRestore::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgPetRestore::CostMoney -> A

	System.String [Client]System.String Game.UI.DlgPetRestore::fileName -> dropped
}

[Client]Game.UI.DlgPetFunction skipped:  filtered
{
	[Client]Game.UI.DlgPetFunction::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetFunction::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetFunction::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetFunction::Show[1]( Game.UI.DlgPetFunction/ShowType ) -> A
	[Client]Game.UI.DlgPetFunction::OnButton_BackClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetFunction::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPetFunction::OnCheckbox_PetAttributeCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgPetFunction::OnCheckbox_PetIntensifyCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgPetFunction::OnCheckbox_PetSkillCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgPetFunction::OnCheckbox_PetStarCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgPetFunction::OnCheckbox_PetRebirthCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> C

	[Client]Game.UI.DlgPetFunction::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetFunction::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetFunction::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgPetFunction::.ctor[0]( ) skipped:  special name

	Game.UI.DlgPetFunction/ShowType [Client]Game.UI.DlgPetFunction/ShowType Game.UI.DlgPetFunction::m_Type -> A

	System.String [Client]System.String Game.UI.DlgPetFunction::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgPetFunction::layer -> dropped
}

[Client]Game.UI.DlgPetFunction/ShowType skipped:  filtered
{
	Game.UI.DlgPetFunction/ShowType [Client]Game.UI.DlgPetFunction/ShowType Game.UI.DlgPetFunction/ShowType::Attributes -> A
	Game.UI.DlgPetFunction/ShowType [Client]Game.UI.DlgPetFunction/ShowType Game.UI.DlgPetFunction/ShowType::Intensify -> a
	Game.UI.DlgPetFunction/ShowType [Client]Game.UI.DlgPetFunction/ShowType Game.UI.DlgPetFunction/ShowType::Skill -> B
	Game.UI.DlgPetFunction/ShowType [Client]Game.UI.DlgPetFunction/ShowType Game.UI.DlgPetFunction/ShowType::Star -> b
	Game.UI.DlgPetFunction/ShowType [Client]Game.UI.DlgPetFunction/ShowType Game.UI.DlgPetFunction/ShowType::Rebirth -> C

	System.Int32 [Client]System.Int32 Game.UI.DlgPetFunction/ShowType::value__ skipped:  filtered
}

[Client]Game.UI.DlgMinimapRadar skipped:  filtered
{
	[Client]Game.UI.DlgMinimapRadar::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgMinimapRadar::Init[0]( ) -> c
	[Client]Game.UI.DlgMinimapRadar::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMinimapRadar::Update[0]( ) -> E
	[Client]Game.UI.DlgMinimapRadar::ChangeMap[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgMinimapRadar::SetAngleY[1]( System.Single ) -> A
	[Client]Game.UI.DlgMinimapRadar::OnSpriteRadarClick[1]( Game.UI.UICommon.IXUISprite ) -> A
	[Client]Game.UI.DlgMinimapRadar::OnButton_ChangeLineClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMinimapRadar::UpdateCharacters[0]( ) -> e
	[Client]Game.UI.DlgMinimapRadar::Translate[2]( Game.UI.UICommon.IXUIListItem, System.Boolean ) -> A

	[Client]Game.UI.DlgMinimapRadar::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadar::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadar::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadar::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadar::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapRadar::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgMinimapRadar::MinShowWorldMapLevel -> A
	System.Collections.Generic.Dictionary`2<System.UInt32,Game.UI.UICommon.IXUIListItem> [Client]System.Collections.Generic.Dictionary`2<System.UInt32,Game.UI.UICommon.IXUIListItem> Game.UI.DlgMinimapRadar::m_Items -> A
	System.Single [Client]System.Single Game.UI.DlgMinimapRadar::m_fTimeOld -> A

	System.String [Client]System.String Game.UI.DlgMinimapRadar::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMinimapRadar::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgMinimapRadar::Persist -> dropped
}

[Client]Game.UI.DlgGuildMemberInformation skipped:  filtered
{
	[Client]Game.UI.DlgGuildMemberInformation::OnShow[0]( ) -> b
	[Client]Game.UI.DlgGuildMemberInformation::Init[0]( ) -> c
	[Client]Game.UI.DlgGuildMemberInformation::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuildMemberInformation::Show[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgGuildMemberInformation::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGuildMemberInformation::OnButtonExpelClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgGuildMemberInformation::OnExpelCallBackEventHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgGuildMemberInformation::OnButtonChangeClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgGuildMemberInformation::OnButtonTransferClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgGuildMemberInformation::OnTransferCallBackEventHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> a
	[Client]Game.UI.DlgGuildMemberInformation::OnButtonTeamClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgGuildMemberInformation::OnButtonObserveClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgGuildMemberInformation::OnButtonFriendClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgGuildMemberInformation::OnButtonChatClick[1]( Game.UI.UICommon.IXUIButton ) -> d

	[Client]Game.UI.DlgGuildMemberInformation::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildMemberInformation::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildMemberInformation::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildMemberInformation::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgGuildMemberInformation::m_unMemberID -> A

	System.String [Client]System.String Game.UI.DlgGuildMemberInformation::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgGuildMemberInformation::layer -> dropped
}

[Client]Game.UI.DlgGuildList skipped:  filtered
{
	[Client]Game.UI.DlgGuildList::OnShow[0]( ) -> b
	[Client]Game.UI.DlgGuildList::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgGuildList::Init[0]( ) -> c
	[Client]Game.UI.DlgGuildList::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuildList::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGuildList::OnButtonApplyJoin[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgGuildList::OnButtonCancelJoin[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgGuildList::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgGuildList::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgGuildList::OnListSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgGuildList::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildList::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildList::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgGuildList::m_nCurPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgGuildList::m_nPageCount -> a

	System.String [Client]System.String Game.UI.DlgGuildList::fileName -> dropped
}

[Client]Game.UI.DlgFriendHelp skipped:  filtered
{
	[Client]Game.UI.DlgFriendHelp::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFriendHelp::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFriendHelp::FriendCompare[2]( Game.Msg.ClientRelation, Game.Msg.ClientRelation ) -> A
	[Client]Game.UI.DlgFriendHelp::OnList_FriendClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgFriendHelp::OnButton_CancelClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgFriendHelp::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgFriendHelp::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgFriendHelp::OnButton_InstructionClick[1]( Game.UI.UICommon.IXUIButton ) -> b

	[Client]Game.UI.DlgFriendHelp::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFriendHelp::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgFriendHelp::MaxLevelGap -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgFriendHelp::MaxShowNum -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgFriendHelp::RobotNum -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgFriendHelp::MaxRobotPlayerId -> b

	System.String [Client]System.String Game.UI.DlgFriendHelp::fileName -> dropped
}

[Client]Game.UI.DlgAFK skipped:  filtered
{
	[Client]Game.UI.DlgAFK::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAFK::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgAFK::Init[0]( ) -> c
	[Client]Game.UI.DlgAFK::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAFK::Update[0]( ) -> E
	[Client]Game.UI.DlgAFK::get_MaxAfkExp[0]( ) -> e
	[Client]Game.UI.DlgAFK::get_CurAfkExp[0]( ) -> F
	[Client]Game.UI.DlgAFK::Refresh[2]( System.UInt32, System.UInt32 ) -> A
	[Client]Game.UI.DlgAFK::Refresh[4]( System.UInt32, System.UInt32, System.UInt32, System.Boolean ) -> A
	[Client]Game.UI.DlgAFK::RefreshPage[0]( ) -> f
	[Client]Game.UI.DlgAFK::InitItem[0]( ) -> G
	[Client]Game.UI.DlgAFK::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAFK::OnButtonDoneClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgAFK::OnButtonFastClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgAFK::OnButtonGoClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgAFK::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgAFK::OnButtonLeftToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgAFK::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgAFK::OnButtonRightToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgAFK::OnButtonInformationClick[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgAFK::OnListSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgAFK::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAFK::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAFK::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgAFK::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAFK::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgAFK::m_nAfkMapId -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgAFK::m_nCurPageIndex -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgAFK::m_nPageCount -> B
	System.Single [Client]System.Single Game.UI.DlgAFK::m_fLastTime -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAFK::m_unCurAfkExp -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAFK::m_unMaxAfkExp -> a
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAFK::m_unDropLeftSeconds -> B
	System.Boolean [Client]System.Boolean Game.UI.DlgAFK::m_bInEctype -> A

	System.String [Client]System.String Game.UI.DlgAFK::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgAFK::layer -> dropped
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAFK::MaxAfkExp -> dropped
	System.UInt32 [Client]System.UInt32 Game.UI.DlgAFK::CurAfkExp -> dropped
}

[Client]Game.UI.DlgTask skipped:  filtered
{
	[Client]Game.UI.DlgTask::OnShow[0]( ) -> b
	[Client]Game.UI.DlgTask::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgTask::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTask::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgTask::OnTask_Title_HoriSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgTask::OnTask_Title_VertiSelect[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgTask::TaskCompare[2]( Game.Task, Game.Task ) -> A
	[Client]Game.UI.DlgTask::OnListItem_ButtonCancleClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgTask::OnListItem_ButtonSeekClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgTask::OnList_AwardItemClick[1]( Game.UI.UICommon.IXUIListItem ) -> B

	[Client]Game.UI.DlgTask::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTask::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTask::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTask::.ctor[0]( ) skipped:  special name
	[Client]Game.UI.DlgTask::.cctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgTask::MaxShowAwardItem -> A
	Game.TaskType[] [Client]Game.TaskType[] Game.UI.DlgTask::IndexToTaskType -> A
	Game.RoleTask/TaskAcceptState[] [Client]Game.RoleTask/TaskAcceptState[] Game.UI.DlgTask::IndexToTaskAccept -> A
	System.Collections.Generic.List`1<Game.Task> [Client]System.Collections.Generic.List`1<Game.Task> Game.UI.DlgTask::m_Tasks -> A

	System.String [Client]System.String Game.UI.DlgTask::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgTask::layer -> dropped
}

[Client]Game.UI.DlgStorage skipped:  filtered
{
	[Client]Game.UI.DlgStorage::OnShow[0]( ) -> b
	[Client]Game.UI.DlgStorage::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgStorage::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgStorage::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgStorage::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgStorage::CheckBuyBag[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgStorage::RefreshMoney[0]( ) -> e
	[Client]Game.UI.DlgStorage::OnListClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgStorage::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgStorage::OnButtonArrangeClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgStorage::OnButtonStoreClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgStorage::OnButtonWithdrawClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgStorage::OnEnterSaveMoney[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgStorage::OnEnterFetchMoney[1]( System.UInt32 ) -> a

	[Client]Game.UI.DlgStorage::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgStorage::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgStorage::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgStorage::m_nItemCountPerPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgStorage::m_nItemPageMax -> a
	System.String [Client]System.String Game.UI.DlgStorage::m_LockIconFilepath -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgStorage::m_CurPage -> B

	System.String [Client]System.String Game.UI.DlgStorage::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgStorage::layer -> dropped
}

[Client]Game.UI.DlgShopNpcBuy skipped:  filtered
{
	[Client]Game.UI.DlgShopNpcBuy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShopNpcBuy::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShopNpcBuy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShopNpcBuy::Show[3]( System.UInt32, System.Int32, Game.DataShoplist ) -> A
	[Client]Game.UI.DlgShopNpcBuy::OnButton_InputClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShopNpcBuy::OnInputNumber[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgShopNpcBuy::OnInputChange[1]( Game.UI.UICommon.IXUIInput ) -> A
	[Client]Game.UI.DlgShopNpcBuy::OnButton_BuyClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShopNpcBuy::OnButton_CancelClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgShopNpcBuy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShopNpcBuy::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgShopNpcBuy::m_NpcId -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShopNpcBuy::m_CsvId -> A
	Game.DataShoplist [Client]Game.DataShoplist Game.UI.DlgShopNpcBuy::m_Data -> A

	System.String [Client]System.String Game.UI.DlgShopNpcBuy::fileName -> dropped
}

[Client]Game.UI.DlgShop skipped:  filtered
{
	[Client]Game.UI.DlgShop::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShop::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShop::Init[0]( ) -> c
	[Client]Game.UI.DlgShop::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShop::Show[2]( Game.UI.DlgShop/enumCommodityType, System.Int32 ) -> A
	[Client]Game.UI.DlgShop::OnButton_ShopClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShop::OnButtonBuyGoldClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShop::OnButtonChangeGoldClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgShop::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgShop::OnButtonLeftToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgShop::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgShop::OnButtonRightToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgShop::OnItemListSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgShop::OnItemListHotSelect[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgShop::OnListTitleSelect[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgShop::OnListSubTitleSelect[1]( Game.UI.UICommon.IXUIListItem ) -> b
	[Client]Game.UI.DlgShop::RefreshAvatar[0]( ) -> e
	[Client]Game.UI.DlgShop::OnPlayerLoadedHandler[1]( Game.Character ) -> A
	[Client]Game.UI.DlgShop::InitItemHot[0]( ) -> F
	[Client]Game.UI.DlgShop::InitItem[0]( ) -> f
	[Client]Game.UI.DlgShop::RefreshPage[0]( ) -> G
	[Client]Game.UI.DlgShop::OnButtonBuy[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgShop::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgShop::OnListClick[1]( Game.UI.UICommon.IXUIListItem ) -> C
	[Client]Game.UI.DlgShop::OnTipButtonBuy[1]( Game.UI.UICommon.IXUIButton ) -> e
	[Client]Game.UI.DlgShop::OnTipButtonAvatar[1]( Game.UI.UICommon.IXUIButton ) -> F
	[Client]Game.UI.DlgShop::OnTipAppendButton[2]( Game.UI.UICommon.IXUIListItem, System.Collections.Generic.List`1<Game.TipButtonData>& ) -> A

	[Client]Game.UI.DlgShop::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShop::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShop::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgShop::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgShop::GemShopNpcId -> A
	System.Int16 [Client]System.Int16 Game.UI.DlgShop::m_nHotItemCountPerPage -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgShop::m_nType -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgShop::m_nSubType -> B
	System.Collections.Generic.List`1<Game.Msg.STCommodity> [Client]System.Collections.Generic.List`1<Game.Msg.STCommodity> Game.UI.DlgShop::m_listShopCommodity -> A
	System.Collections.Generic.List`1<Game.Msg.STCommodity> [Client]System.Collections.Generic.List`1<Game.Msg.STCommodity> Game.UI.DlgShop::m_listShopCommodityHot -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgShop::m_nMaxPageCount -> b
	System.Int32 [Client]System.Int32 Game.UI.DlgShop::m_nCurPage -> C
	System.Int32 [Client]System.Int32 Game.UI.DlgShop::m_nItemAvatarId -> c
	Game.Player [Client]Game.Player Game.UI.DlgShop::m_playerMe -> A

	System.String [Client]System.String Game.UI.DlgShop::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShop::layer -> dropped
}

[Client]Game.UI.DlgShop/enumCommodityType skipped:  filtered
{
	Game.UI.DlgShop/enumCommodityType [Client]Game.UI.DlgShop/enumCommodityType Game.UI.DlgShop/enumCommodityType::eType_Favourable -> A
	Game.UI.DlgShop/enumCommodityType [Client]Game.UI.DlgShop/enumCommodityType Game.UI.DlgShop/enumCommodityType::eType_Rare -> a
	Game.UI.DlgShop/enumCommodityType [Client]Game.UI.DlgShop/enumCommodityType Game.UI.DlgShop/enumCommodityType::eType_Intensify -> B
	Game.UI.DlgShop/enumCommodityType [Client]Game.UI.DlgShop/enumCommodityType Game.UI.DlgShop/enumCommodityType::eType_Pet -> b
	Game.UI.DlgShop/enumCommodityType [Client]Game.UI.DlgShop/enumCommodityType Game.UI.DlgShop/enumCommodityType::eType_Mount -> C
	Game.UI.DlgShop/enumCommodityType [Client]Game.UI.DlgShop/enumCommodityType Game.UI.DlgShop/enumCommodityType::eType_Dress -> c

	System.Int32 [Client]System.Int32 Game.UI.DlgShop/enumCommodityType::value__ skipped:  filtered
}

[Client]Game.UI.DlgShipExplorationGacha skipped:  filtered
{
	[Client]Game.UI.DlgShipExplorationGacha::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShipExplorationGacha::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShipExplorationGacha::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShipExplorationGacha::Show[1]( Game.Msg.MsgServerAckExpeditionRecruitInfo ) -> A
	[Client]Game.UI.DlgShipExplorationGacha::Show[1]( System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> ) -> A
	[Client]Game.UI.DlgShipExplorationGacha::RefreshPrice[0]( ) -> e
	[Client]Game.UI.DlgShipExplorationGacha::RefreshMonster[0]( ) -> F
	[Client]Game.UI.DlgShipExplorationGacha::ShowList[0]( ) -> f
	[Client]Game.UI.DlgShipExplorationGacha::OnListMemberClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgShipExplorationGacha::OnButtonGachaQuality3Click[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShipExplorationGacha::OnButtonGachaQuality4Click[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShipExplorationGacha::OnButtonGachaQuality5Click[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgShipExplorationGacha::OnButtonGachaTenQuality5Click[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgShipExplorationGacha::OnConfirmGachaNotTenByGold[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgShipExplorationGacha::OnConfirmGachaTenByGold[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> a
	[Client]Game.UI.DlgShipExplorationGacha::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgShipExplorationGacha::OnButtonInformationClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgShipExplorationGacha::GetRecruitDataByQuality[1]( Game.UI.DlgShipExplorationGacha/RecruitQuality ) -> A

	[Client]Game.UI.DlgShipExplorationGacha::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationGacha::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationGacha::.ctor[0]( ) skipped:  special name

	Game.Msg.EExpeditionRecruitType [Client]Game.Msg.EExpeditionRecruitType Game.UI.DlgShipExplorationGacha::m_RecruitType -> A
	Game.Msg.MsgServerAckExpeditionRecruitInfo [Client]Game.Msg.MsgServerAckExpeditionRecruitInfo Game.UI.DlgShipExplorationGacha::m_RecruitInfo -> A
	System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> [Client]System.Collections.Generic.List`1<Game.Msg.ExpeditionMonsterData> Game.UI.DlgShipExplorationGacha::m_RecruitList -> A

	System.String [Client]System.String Game.UI.DlgShipExplorationGacha::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationGacha::layer -> dropped
}

[Client]Game.UI.DlgShipExplorationGacha/RecruitQuality skipped:  filtered
{
	Game.UI.DlgShipExplorationGacha/RecruitQuality [Client]Game.UI.DlgShipExplorationGacha/RecruitQuality Game.UI.DlgShipExplorationGacha/RecruitQuality::Quality3 -> A
	Game.UI.DlgShipExplorationGacha/RecruitQuality [Client]Game.UI.DlgShipExplorationGacha/RecruitQuality Game.UI.DlgShipExplorationGacha/RecruitQuality::Quality4 -> a
	Game.UI.DlgShipExplorationGacha/RecruitQuality [Client]Game.UI.DlgShipExplorationGacha/RecruitQuality Game.UI.DlgShipExplorationGacha/RecruitQuality::Quality5 -> B

	System.Int32 [Client]System.Int32 Game.UI.DlgShipExplorationGacha/RecruitQuality::value__ skipped:  filtered
}

[Client]Game.UI.DlgPlayerSelect skipped:  filtered
{
	[Client]Game.UI.DlgPlayerSelect::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgPlayerSelect::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPlayerSelect::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPlayerSelect::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPlayerSelect::Update[0]( ) -> E
	[Client]Game.UI.DlgPlayerSelect::UpdateSelectedPlayer[0]( ) -> e
	[Client]Game.UI.DlgPlayerSelect::OnPlayerLoadedHandler[1]( Game.Character ) -> A
	[Client]Game.UI.DlgPlayerSelect::GetLeftTime[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgPlayerSelect::OnList_PlayerSelect[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgPlayerSelect::OnImageButton_StartClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPlayerSelect::OnImageButton_DeleteClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPlayerSelect::OnImageButton_CancelDeleteClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgPlayerSelect::OnImageButton_BackClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgPlayerSelect::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgPlayerSelect::OnImageButton_CreateClick[1]( Game.UI.UICommon.IXUIButton ) -> c

	[Client]Game.UI.DlgPlayerSelect::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPlayerSelect::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgPlayerSelect::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgPlayerSelect::HoursPerDay -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPlayerSelect::MinsPerHour -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgPlayerSelect::SecsPerMin -> B

	System.String [Client]System.String Game.UI.DlgPlayerSelect::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgPlayerSelect::Cleanup -> dropped
}

[Client]Game.UI.DlgMinimap skipped:  filtered
{
	[Client]Game.UI.DlgMinimap::Init[0]( ) -> c
	[Client]Game.UI.DlgMinimap::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMinimap::Update[0]( ) -> E
	[Client]Game.UI.DlgMinimap::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMinimap::ChangeMap[1]( System.String ) -> A
	[Client]Game.UI.DlgMinimap::UpdatePlayer[1]( Game.Character ) -> A

	[Client]Game.UI.DlgMinimap::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimap::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimap::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgMinimap::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimap::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgMinimap::m_strCurMapTexture -> A

	System.String [Client]System.String Game.UI.DlgMinimap::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMinimap::layer -> dropped
}

[Client]Game.UI.DlgGetSeniorEquip skipped:  filtered
{
	[Client]Game.UI.DlgGetSeniorEquip::OnShow[0]( ) -> b
	[Client]Game.UI.DlgGetSeniorEquip::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgGetSeniorEquip::Update[0]( ) -> E
	[Client]Game.UI.DlgGetSeniorEquip::Show[1]( System.UInt32 ) -> A

	[Client]Game.UI.DlgGetSeniorEquip::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGetSeniorEquip::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgGetSeniorEquip::ShowTime -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgGetSeniorEquip::m_ItemId -> A
	System.Single [Client]System.Single Game.UI.DlgGetSeniorEquip::m_BeginTime -> a

	System.String [Client]System.String Game.UI.DlgGetSeniorEquip::fileName -> dropped
}

[Client]Game.UI.DlgFunctionSocial skipped:  filtered
{
	[Client]Game.UI.DlgFunctionSocial::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFunctionSocial::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgFunctionSocial::Init[0]( ) -> c
	[Client]Game.UI.DlgFunctionSocial::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFunctionSocial::RefreshPage[0]( ) -> e
	[Client]Game.UI.DlgFunctionSocial::SetDefaultDlgType[1]( Game.UI.DlgFunctionSocial/enumDlgType ) -> A
	[Client]Game.UI.DlgFunctionSocial::Show[0]( ) -> F
	[Client]Game.UI.DlgFunctionSocial::Show[1]( Game.UI.DlgFunctionSocial/enumDlgType ) -> a
	[Client]Game.UI.DlgFunctionSocial::GetCheckBox[1]( Game.UI.DlgFunctionSocial/enumDlgType ) -> B
	[Client]Game.UI.DlgFunctionSocial::OnCheckBoxGuildCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgFunctionSocial::OnCheckBoxFriendCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgFunctionSocial::OnCheckBoxRankingListCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgFunctionSocial::OnCheckbox_InvitationCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b

	[Client]Game.UI.DlgFunctionSocial::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFunctionSocial::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFunctionSocial::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgFunctionSocial::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFunctionSocial::.ctor[0]( ) skipped:  special name

	Game.UI.DlgFunctionSocial/enumDlgType [Client]Game.UI.DlgFunctionSocial/enumDlgType Game.UI.DlgFunctionSocial::m_eDlgType -> A

	System.String [Client]System.String Game.UI.DlgFunctionSocial::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgFunctionSocial::layer -> dropped
}

[Client]Game.UI.DlgFunctionSocial/enumDlgType skipped:  filtered
{
	Game.UI.DlgFunctionSocial/enumDlgType [Client]Game.UI.DlgFunctionSocial/enumDlgType Game.UI.DlgFunctionSocial/enumDlgType::eDlgType_Guild -> A
	Game.UI.DlgFunctionSocial/enumDlgType [Client]Game.UI.DlgFunctionSocial/enumDlgType Game.UI.DlgFunctionSocial/enumDlgType::eDlgType_Friend -> a
	Game.UI.DlgFunctionSocial/enumDlgType [Client]Game.UI.DlgFunctionSocial/enumDlgType Game.UI.DlgFunctionSocial/enumDlgType::eDlgType_RankingList -> B
	Game.UI.DlgFunctionSocial/enumDlgType [Client]Game.UI.DlgFunctionSocial/enumDlgType Game.UI.DlgFunctionSocial/enumDlgType::eDlgType_Invite -> b

	System.Int32 [Client]System.Int32 Game.UI.DlgFunctionSocial/enumDlgType::value__ skipped:  filtered
}

[Client]Game.UI.DlgFriendHelpMin skipped:  filtered
{
	[Client]Game.UI.DlgFriendHelpMin::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFriendHelpMin::Update[0]( ) -> E
	[Client]Game.UI.DlgFriendHelpMin::OnSprite_MinimapButtonClick[1]( Game.UI.UICommon.IXUIPicture ) -> A

	[Client]Game.UI.DlgFriendHelpMin::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFriendHelpMin::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgFriendHelpMin::MaxRobotNum -> A

	System.String [Client]System.String Game.UI.DlgFriendHelpMin::fileName -> dropped
}

[Client]Game.UI.DlgFAQ skipped:  filtered
{
	[Client]Game.UI.DlgFAQ::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFAQ::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFAQ::Show[1]( Game.UI.DlgFAQ/eClassType ) -> A
	[Client]Game.UI.DlgFAQ::InitFirstGroup[0]( ) -> e
	[Client]Game.UI.DlgFAQ::OnListFunctionClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgFAQ::OnButtonActionClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgFAQ::OpenNpcDlg[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgFAQ::OnButtonBackClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgFAQ::OnButtonLeftClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgFAQ::OnButtonRightClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgFAQ::OnButtonLeftToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgFAQ::OnButtonRightToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgFAQ::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgFAQ::InitSecondGroup[0]( ) -> F
	[Client]Game.UI.DlgFAQ::FilterByLevel[1]( System.Collections.Generic.List`1<Game.DataFaq> ) -> A
	[Client]Game.UI.DlgFAQ::RefreshSecondGroup[0]( ) -> f
	[Client]Game.UI.DlgFAQ::IsEctypeFinished[1]( System.Int32 ) -> a
	[Client]Game.UI.DlgFAQ::SortByStarAndSubID[2]( Game.DataFaq, Game.DataFaq ) -> A

	[Client]Game.UI.DlgFAQ::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFAQ::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgFAQ::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgFAQ::MaxNumPerPage -> A
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ::m_ClassType -> A
	System.Collections.Generic.List`1<Game.DataFaq> [Client]System.Collections.Generic.List`1<Game.DataFaq> Game.UI.DlgFAQ::m_CurFaqList -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgFAQ::m_CurPage -> a

	System.String [Client]System.String Game.UI.DlgFAQ::fileName -> dropped
}

[Client]Game.UI.DlgFAQ/eClassType skipped:  filtered
{
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_None -> A
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_LevelUp -> a
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_SkillUp -> B
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_Item -> b
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_StrengthenItem -> C
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_Pet -> c
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_StrengthenPet -> D
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_Money -> d
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_Interactive -> E
	Game.UI.DlgFAQ/eClassType [Client]Game.UI.DlgFAQ/eClassType Game.UI.DlgFAQ/eClassType::eClass_CheckStrength -> e

	System.Int32 [Client]System.Int32 Game.UI.DlgFAQ/eClassType::value__ skipped:  filtered
}

[Client]Game.UI.DlgFAQ/eFunType skipped:  filtered
{
	Game.UI.DlgFAQ/eFunType [Client]Game.UI.DlgFAQ/eFunType Game.UI.DlgFAQ/eFunType::eFun_NPC -> A
	Game.UI.DlgFAQ/eFunType [Client]Game.UI.DlgFAQ/eFunType Game.UI.DlgFAQ/eFunType::eFun_Dlg -> a
	Game.UI.DlgFAQ/eFunType [Client]Game.UI.DlgFAQ/eFunType Game.UI.DlgFAQ/eFunType::eFun_Activity -> B
	Game.UI.DlgFAQ/eFunType [Client]Game.UI.DlgFAQ/eFunType Game.UI.DlgFAQ/eFunType::eFun_Ectype -> b

	System.Int32 [Client]System.Int32 Game.UI.DlgFAQ/eFunType::value__ skipped:  filtered
}

[Client]Game.UI.DlgFAQ/eDlg skipped:  filtered
{
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::None -> A
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Expedition -> a
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Task -> B
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Activity_Boss -> b
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Shop_Intensify_Crystal -> C
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Shop_Intensify_Gem -> c
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Shop_Pet -> D
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_VIP -> d
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Activity_Activeness -> E
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Auction -> e
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Guild -> F
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Team -> f
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Chat -> G
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_RankingList -> g
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Role_SkillStudy -> H
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_RichMan -> h
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Equip_Intensify -> I
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Equip_InsertGem -> i
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Pet_Intensify -> J
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Pet_Skill -> j
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Pet_Star -> K
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Pet_Rebirth -> k
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_AuctionMoney -> L
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Shop_Discount -> l
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Friend -> M
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Equip_Soul -> m
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_Equip_Magicbox -> N
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_AFK -> n
	Game.UI.DlgFAQ/eDlg [Client]Game.UI.DlgFAQ/eDlg Game.UI.DlgFAQ/eDlg::eDlg_ArenaOffline -> O

	System.Int32 [Client]System.Int32 Game.UI.DlgFAQ/eDlg::value__ skipped:  filtered
}

[Client]Game.UI.Hide.DlgChatPhone skipped:  filtered
{
	[Client]Game.UI.Hide.DlgChatPhone::OnShow[0]( ) -> b
	[Client]Game.UI.Hide.DlgChatPhone::RefreshImplement[0]( ) -> C
	[Client]Game.UI.Hide.DlgChatPhone::Init[0]( ) -> c
	[Client]Game.UI.Hide.DlgChatPhone::RegisterEvent[0]( ) -> D
	[Client]Game.UI.Hide.DlgChatPhone::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.Hide.DlgChatPhone::IsChanelEnable[1]( Game.Msg.EChatType ) -> A
	[Client]Game.UI.Hide.DlgChatPhone::AddInput[1]( System.String ) -> A
	[Client]Game.UI.Hide.DlgChatPhone::SendChat[2]( System.String, Game.Msg.EChatType ) -> A
	[Client]Game.UI.Hide.DlgChatPhone::ChangePrivateChat[1]( System.String ) -> a
	[Client]Game.UI.Hide.DlgChatPhone::ParseChatData[1]( Game.Logic.ChatData ) -> a
	[Client]Game.UI.Hide.DlgChatPhone::ChangeChatType[1]( Game.Msg.EChatType ) -> a
	[Client]Game.UI.Hide.DlgChatPhone::RefreshChatContent[0]( ) -> e
	[Client]Game.UI.Hide.DlgChatPhone::RefreshChannel[0]( ) -> F
	[Client]Game.UI.Hide.DlgChatPhone::OnPopupListSelectEventHanler[1]( System.Int16 ) -> A
	[Client]Game.UI.Hide.DlgChatPhone::OnCheckBoxWorldCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.Hide.DlgChatPhone::OnCheckBoxMapCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.Hide.DlgChatPhone::OnCheckBoxTeamCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.Hide.DlgChatPhone::OnCheckBoxPrivateCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.Hide.DlgChatPhone::OnCheckBoxSystemCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.Hide.DlgChatPhone::OnCheckBoxNewsCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.Hide.DlgChatPhone::OnCheckBoxGuildCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.Hide.DlgChatPhone::OnButtonBackClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.Hide.DlgChatPhone::CheckOperation[1]( Game.Msg.EChatType ) -> B
	[Client]Game.UI.Hide.DlgChatPhone::OnButtonSendClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.Hide.DlgChatPhone::OnButtonExpressClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.Hide.DlgChatPhone::OnButtonEquipClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.Hide.DlgChatPhone::OnButtonTeamClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.Hide.DlgChatPhone::OnListEmotionClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.Hide.DlgChatPhone::OnButtonCoordinateClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.Hide.DlgChatPhone::OnInputChange[1]( Game.UI.UICommon.IXUIInput ) -> A
	[Client]Game.UI.Hide.DlgChatPhone::OnButton_QuickClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.Hide.DlgChatPhone::OnButton_PetClick[1]( Game.UI.UICommon.IXUIButton ) -> d

	[Client]Game.UI.Hide.DlgChatPhone::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.Hide.DlgChatPhone::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.Hide.DlgChatPhone::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.Hide.DlgChatPhone::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.Hide.DlgChatPhone::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.HashSet`1<Game.Msg.EChatType> [Client]System.Collections.Generic.HashSet`1<Game.Msg.EChatType> Game.UI.Hide.DlgChatPhone::m_setChatType -> A
	Game.Msg.EChatType [Client]Game.Msg.EChatType Game.UI.Hide.DlgChatPhone::m_eChatTypeSelected -> A
	System.String [Client]System.String Game.UI.Hide.DlgChatPhone::m_strTargetName -> A
	System.Single [Client]System.Single Game.UI.Hide.DlgChatPhone::m_fTimeLastSendMsg -> A
	System.String [Client]System.String Game.UI.Hide.DlgChatPhone::m_strInputText -> a

	System.String [Client]System.String Game.UI.Hide.DlgChatPhone::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.Hide.DlgChatPhone::Persist -> dropped
	System.Int32 [Client]System.Int32 Game.UI.Hide.DlgChatPhone::layer -> dropped
}

[Client]Game.UI.DlgChatFunction skipped:  filtered
{
	[Client]Game.UI.DlgChatFunction::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgChatFunction::Show[2]( System.UInt32, System.String ) -> A
	[Client]Game.UI.DlgChatFunction::OnButton_AddClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgChatFunction::OnButton_BlacklistClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgChatFunction::OnButton_ChatClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgChatFunction::OnButton_GuildInviteClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgChatFunction::OnButton_PKClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgChatFunction::OnButton_SeeClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgChatFunction::OnButton_SeePetClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgChatFunction::OnButton_TeamClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgChatFunction::OnButton_TeamInviteClick[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgChatFunction::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> e

	[Client]Game.UI.DlgChatFunction::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatFunction::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgChatFunction::m_Id -> A
	System.String [Client]System.String Game.UI.DlgChatFunction::m_Name -> A

	System.String [Client]System.String Game.UI.DlgChatFunction::fileName -> dropped
}

[Client]Game.UI.DlgChatBubble skipped:  filtered
{
	[Client]Game.UI.DlgChatBubble::OnShow[0]( ) -> b
	[Client]Game.UI.DlgChatBubble::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgChatBubble::Init[0]( ) -> c
	[Client]Game.UI.DlgChatBubble::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgChatBubble::Update[0]( ) -> E
	[Client]Game.UI.DlgChatBubble::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.DlgChatBubble::SetStatus[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgChatBubble::ShowBubble[1]( System.String ) -> A
	[Client]Game.UI.DlgChatBubble::CloseBubble[0]( ) -> e
	[Client]Game.UI.DlgChatBubble::OnButtonMaxClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgChatBubble::OnTextListClick[1]( Game.UI.UICommon.IXUITextList ) -> A

	[Client]Game.UI.DlgChatBubble::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatBubble::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatBubble::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatBubble::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgChatBubble::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatBubble::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgChatBubble::m_fTimeStart -> A
	System.Boolean [Client]System.Boolean Game.UI.DlgChatBubble::m_bBubbleClosed -> A

	System.String [Client]System.String Game.UI.DlgChatBubble::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgChatBubble::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgChatBubble::Persist -> dropped
}

[Client]Game.UI.DlgBuyBag skipped:  filtered
{
	[Client]Game.UI.DlgBuyBag::OnShow[0]( ) -> b
	[Client]Game.UI.DlgBuyBag::Init[0]( ) -> c
	[Client]Game.UI.DlgBuyBag::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgBuyBag::OnButtonClickOk[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgBuyBag::OnButtonClickNo[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgBuyBag::OnButtonClickClose[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgBuyBag::Show[1]( Game.Msg.EClientBagType ) -> A

	[Client]Game.UI.DlgBuyBag::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBuyBag::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBuyBag::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBuyBag::.ctor[0]( ) skipped:  special name

	Game.Msg.EClientBagType [Client]Game.Msg.EClientBagType Game.UI.DlgBuyBag::m_PackType -> A

	System.String [Client]System.String Game.UI.DlgBuyBag::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgBuyBag::layer -> dropped
}

[Client]Game.UI.DlgActivity skipped:  filtered
{
	[Client]Game.UI.DlgActivity::OnShow[0]( ) -> b
	[Client]Game.UI.DlgActivity::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgActivity::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgActivity::get_CurNewList[0]( ) -> e
	[Client]Game.UI.DlgActivity::get_CurOpenList[0]( ) -> F
	[Client]Game.UI.DlgActivity::Show[1]( Game.UI.DlgActivity/eDlgActivityType ) -> A
	[Client]Game.UI.DlgActivity::RefreshNum[0]( ) -> f
	[Client]Game.UI.DlgActivity::RefreshActiveness[0]( ) -> G
	[Client]Game.UI.DlgActivity::RefreshActivenessAward[1]( Game.Msg.ActivePointData ) -> A
	[Client]Game.UI.DlgActivity::RefreshActivity[1]( Game.UI.DlgActivity/eDlgActivityType ) -> a
	[Client]Game.UI.DlgActivity::RefreshActivityAward[1]( Game.DataActivity ) -> A
	[Client]Game.UI.DlgActivity::RefreshActivityNum[0]( ) -> g
	[Client]Game.UI.DlgActivity::RefreshBoss[0]( ) -> H
	[Client]Game.UI.DlgActivity::RefreshBossAward[1]( Game.DataHuntBossInfo ) -> A
	[Client]Game.UI.DlgActivity::RefreshBossTime[0]( ) -> h
	[Client]Game.UI.DlgActivity::RefreshSystemTime[0]( ) -> I
	[Client]Game.UI.DlgActivity::OnListActivityItemClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgActivity::OnListBossClick[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgActivity::OnListActiveClick[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgActivity::OnCheckboxActivenessCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgActivity::OnCheckboxEctypeCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgActivity::OnCheckboxActivityCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgActivity::OnCheckboxBossCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgActivity::SendReq[1]( Game.UI.DlgActivity/eDlgActivityType ) -> B
	[Client]Game.UI.DlgActivity::OnButtonSoonCallBack[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgActivity::OnButton_SoonClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgActivity::OnImageButtonTakeClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgActivity::OnImageButtonTeamClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgActivity::OnImageButtonBossTakeClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgActivity::OnImageButtonBossTeamClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgActivity::OnImageButtonActiveTakeClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgActivity::OnImageButtonActiveTeamClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgActivity::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgActivity::SortByRecLevelAndID[2]( Game.DataActivity, Game.DataActivity ) -> A
	[Client]Game.UI.DlgActivity::SortByActiveness[2]( Game.DataAwardActivity, Game.DataAwardActivity ) -> A
	[Client]Game.UI.DlgActivity::SortByActivePoint[2]( Game.Msg.ActivePointData, Game.Msg.ActivePointData ) -> A

	[Client]Game.UI.DlgActivity::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgActivity::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgActivity::.ctor[0]( ) skipped:  special name

	Game.DataActivity [Client]Game.DataActivity Game.UI.DlgActivity::m_SelectedActivity -> A
	Game.DataHuntBossInfo [Client]Game.DataHuntBossInfo Game.UI.DlgActivity::m_SelectedBossInfo -> A
	Game.Msg.ActivePointData [Client]Game.Msg.ActivePointData Game.UI.DlgActivity::m_SelectedActiveness -> A
	Game.UI.DlgActivity/eDlgActivityType [Client]Game.UI.DlgActivity/eDlgActivityType Game.UI.DlgActivity::m_CurTabType -> A

	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.UI.DlgActivity::CurNewList -> dropped
	System.Collections.Generic.List`1<System.Int32> [Client]System.Collections.Generic.List`1<System.Int32> Game.UI.DlgActivity::CurOpenList -> dropped
	System.String [Client]System.String Game.UI.DlgActivity::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgActivity::layer -> dropped
}

[Client]Game.UI.DlgActivity/eDlgActivityType skipped:  filtered
{
	Game.UI.DlgActivity/eDlgActivityType [Client]Game.UI.DlgActivity/eDlgActivityType Game.UI.DlgActivity/eDlgActivityType::Activeness -> A
	Game.UI.DlgActivity/eDlgActivityType [Client]Game.UI.DlgActivity/eDlgActivityType Game.UI.DlgActivity/eDlgActivityType::Ectype -> a
	Game.UI.DlgActivity/eDlgActivityType [Client]Game.UI.DlgActivity/eDlgActivityType Game.UI.DlgActivity/eDlgActivityType::Activity -> B
	Game.UI.DlgActivity/eDlgActivityType [Client]Game.UI.DlgActivity/eDlgActivityType Game.UI.DlgActivity/eDlgActivityType::Boss -> b

	System.Int32 [Client]System.Int32 Game.UI.DlgActivity/eDlgActivityType::value__ skipped:  filtered
}

[Client]Game.UI.DlgShortcutButton skipped:  filtered
{
	[Client]Game.UI.DlgShortcutButton::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShortcutButton::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgShortcutButton::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShortcutButton::AddItem[1]( System.UInt64 ) -> A
	[Client]Game.UI.DlgShortcutButton::SetSkill[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgShortcutButton::OnEquipButtonClickHandler[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgShortcutButton::OnImageButton_EquipClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShortcutButton::OnImageButton_SkillClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgShortcutButton::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShortcutButton::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgShortcutButton::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShortcutButton::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgShortcutButton::SkillNoviceId -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgShortcutButton::m_SkillId -> A
	System.Collections.Generic.Stack`1<System.UInt64> [Client]System.Collections.Generic.Stack`1<System.UInt64> Game.UI.DlgShortcutButton::m_ItemIds -> A

	System.String [Client]System.String Game.UI.DlgShortcutButton::fileName -> dropped
}

[Client]Game.UI.DlgPetRebornSelect skipped:  filtered
{
	[Client]Game.UI.DlgPetRebornSelect::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetRebornSelect::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetRebornSelect::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetRebornSelect::get_RefreshByChoose[0]( ) -> e
	[Client]Game.UI.DlgPetRebornSelect::set_RefreshByChoose[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgPetRebornSelect::OnButton_ConfirmNewClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetRebornSelect::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPetRebornSelect::OnButton_RebornClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgPetRebornSelect::OnButton_InformationClick[1]( Game.UI.UICommon.IXUIButton ) -> b

	[Client]Game.UI.DlgPetRebornSelect::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetRebornSelect::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetRebornSelect::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgPetRebornSelect::<RefreshByChoose>k__BackingField -> A

	System.Boolean [Client]System.Boolean Game.UI.DlgPetRebornSelect::RefreshByChoose -> dropped
	System.String [Client]System.String Game.UI.DlgPetRebornSelect::fileName -> dropped
}

[Client]Game.UI.DlgNpcTalk skipped:  filtered
{
	[Client]Game.UI.DlgNpcTalk::OnShow[0]( ) -> b
	[Client]Game.UI.DlgNpcTalk::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgNpcTalk::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgNpcTalk::get_NpcId[0]( ) -> e
	[Client]Game.UI.DlgNpcTalk::set_NpcId[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgNpcTalk::get_Tasks[0]( ) -> F
	[Client]Game.UI.DlgNpcTalk::set_Tasks[1]( System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Task> ) -> A
	[Client]Game.UI.DlgNpcTalk::get_Scripts[0]( ) -> f
	[Client]Game.UI.DlgNpcTalk::set_Scripts[1]( System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Script> ) -> A
	[Client]Game.UI.DlgNpcTalk::get_Functions[0]( ) -> G
	[Client]Game.UI.DlgNpcTalk::set_Functions[1]( System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Function> ) -> A
	[Client]Game.UI.DlgNpcTalk::get_TalkTaskId[0]( ) -> g
	[Client]Game.UI.DlgNpcTalk::set_TalkTaskId[1]( System.UInt32 ) -> a
	[Client]Game.UI.DlgNpcTalk::get_TalkRound[0]( ) -> H
	[Client]Game.UI.DlgNpcTalk::set_TalkRound[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgNpcTalk::RemoveTask[1]( System.UInt32 ) -> B
	[Client]Game.UI.DlgNpcTalk::OnSprite_BGStretchClick[1]( Game.UI.UICommon.IXUISprite ) -> A
	[Client]Game.UI.DlgNpcTalk::OnList_AwardItemClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgNpcTalk::OnImageButton_UpgradeClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgNpcTalk::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgNpcTalk::OnList_TaskSelect[1]( Game.UI.UICommon.IXUIListItem ) -> a
	[Client]Game.UI.DlgNpcTalk::OnButton_NextClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgNpcTalk::JoyButtonL1[0]( ) -> h
	[Client]Game.UI.DlgNpcTalk::OnList_TaskClick[1]( Game.UI.UICommon.IXUIListItem ) -> B
	[Client]Game.UI.DlgNpcTalk::UpdateDialog[2]( Game.UI.UICommon.IXUIListItem, System.Boolean ) -> A
	[Client]Game.UI.DlgNpcTalk::OnDisbandGuildMessageBoxCallBackEventHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A

	[Client]Game.UI.DlgNpcTalk::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgNpcTalk::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgNpcTalk::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgNpcTalk::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgNpcTalk::MaxShowAwardItem -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgNpcTalk::FunctionBase -> a
	System.Collections.Generic.List`1<System.String> [Client]System.Collections.Generic.List`1<System.String> Game.UI.DlgNpcTalk::m_NpcStrings -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgNpcTalk::<NpcId>k__BackingField -> A
	System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Task> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Task> Game.UI.DlgNpcTalk::<Tasks>k__BackingField -> A
	System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Script> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Script> Game.UI.DlgNpcTalk::<Scripts>k__BackingField -> A
	System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Function> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Function> Game.UI.DlgNpcTalk::<Functions>k__BackingField -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgNpcTalk::<TalkTaskId>k__BackingField -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgNpcTalk::<TalkRound>k__BackingField -> B

	System.UInt32 [Client]System.UInt32 Game.UI.DlgNpcTalk::NpcId -> dropped
	System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Task> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Task> Game.UI.DlgNpcTalk::Tasks -> dropped
	System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Script> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Script> Game.UI.DlgNpcTalk::Scripts -> dropped
	System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Function> [Client]System.Collections.Generic.List`1<Game.Msg.MsgTaskAckNpc_Function> Game.UI.DlgNpcTalk::Functions -> dropped
	System.UInt32 [Client]System.UInt32 Game.UI.DlgNpcTalk::TalkTaskId -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgNpcTalk::TalkRound -> dropped
	System.String [Client]System.String Game.UI.DlgNpcTalk::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgNpcTalk::Persist -> dropped
}

[Client]Game.UI.DlgMePhone skipped:  filtered
{
	[Client]Game.UI.DlgMePhone::OnShow[0]( ) -> b
	[Client]Game.UI.DlgMePhone::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgMePhone::Init[0]( ) -> c
	[Client]Game.UI.DlgMePhone::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMePhone::Update[0]( ) -> E
	[Client]Game.UI.DlgMePhone::RefreshMailCount[0]( ) -> A
	[Client]Game.UI.DlgMePhone::ShowFireId[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgMePhone::RefreshCompensateButtonState[0]( ) -> a
	[Client]Game.UI.DlgMePhone::RefreshFirstBloodButtonState[0]( ) -> B
	[Client]Game.UI.DlgMePhone::RefreshBuffList[0]( ) -> d
	[Client]Game.UI.DlgMePhone::RefreshFPS[1]( System.String ) -> A
	[Client]Game.UI.DlgMePhone::SetStatus[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgMePhone::RefreshTeamInfo[0]( ) -> e
	[Client]Game.UI.DlgMePhone::RegisterCheckBox[2]( System.String, Game.UI.UICommon.CheckBoxOnClickEventHandler ) -> A
	[Client]Game.UI.DlgMePhone::UpdatePetInfo[0]( ) -> F
	[Client]Game.UI.DlgMePhone::OnFunctionButtonClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMePhone::OnButton_BackClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgMePhone::OnVIPButtonClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgMePhone::OnShopButtonClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgMePhone::OnSprite_AcceptbuttonClick[1]( Game.UI.UICommon.IXUISprite ) -> A
	[Client]Game.UI.DlgMePhone::OnButton_FireClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgMePhone::OnButtonFirstBloodClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgMePhone::OnButtonCompensateClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgMePhone::OnTexture_PetProClick[1]( Game.UI.UICommon.IXUIPicture ) -> A
	[Client]Game.UI.DlgMePhone::OnTexture_ProClick[1]( Game.UI.UICommon.IXUIPicture ) -> a
	[Client]Game.UI.DlgMePhone::OnSprite_headerClick[1]( Game.UI.UICommon.IXUISprite ) -> a
	[Client]Game.UI.DlgMePhone::OnList_PetReadyClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgMePhone::OnCheckbox_FriendClick[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgMePhone::OnCheckbox_PetClick[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgMePhone::OnCheckbox_RoleClick[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgMePhone::OnCheckbox_StrengthClick[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgMePhone::OnCheckbox_ShipClick[1]( Game.UI.UICommon.IXUICheckBox ) -> C
	[Client]Game.UI.DlgMePhone::OnCheckbox_GuildClick[1]( Game.UI.UICommon.IXUICheckBox ) -> c
	[Client]Game.UI.DlgMePhone::OnCheckbox_MailClick[1]( Game.UI.UICommon.IXUICheckBox ) -> D
	[Client]Game.UI.DlgMePhone::OnCheckbox_SystemClick[1]( Game.UI.UICommon.IXUICheckBox ) -> d
	[Client]Game.UI.DlgMePhone::OnCheckbox_TaskClick[1]( Game.UI.UICommon.IXUICheckBox ) -> E
	[Client]Game.UI.DlgMePhone::OnCheckbox_TeamClick[1]( Game.UI.UICommon.IXUICheckBox ) -> e

	[Client]Game.UI.DlgMePhone::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMePhone::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMePhone::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgMePhone::MaxShowNum -> A
	System.Single [Client]System.Single Game.UI.DlgMePhone::FireIdShowTime -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgMePhone::MaxBuffNum -> a
	Game.UI.UICommon.IXUIPicture[] [Client]Game.UI.UICommon.IXUIPicture[] Game.UI.DlgMePhone::m_HeadTexture -> A
	Game.UI.UICommon.IXUIProgress[] [Client]Game.UI.UICommon.IXUIProgress[] Game.UI.DlgMePhone::m_HpProgresses -> A
	Game.UI.UICommon.IXUILabel[] [Client]Game.UI.UICommon.IXUILabel[] Game.UI.DlgMePhone::m_NameLabels -> A
	Game.UI.UICommon.IXUISprite[] [Client]Game.UI.UICommon.IXUISprite[] Game.UI.DlgMePhone::m_TeamLeaderSprite -> A
	Game.UI.UICommon.IXUILabel[] [Client]Game.UI.UICommon.IXUILabel[] Game.UI.DlgMePhone::m_StateLabels -> a
	System.UInt32[] [Client]System.UInt32[] Game.UI.DlgMePhone::m_IDs -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgMePhone::m_FireId -> A
	System.Single [Client]System.Single Game.UI.DlgMePhone::m_FireBeginTime -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgMePhone::m_nStatus -> B

	System.String [Client]System.String Game.UI.DlgMePhone::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMePhone::layer -> dropped
}

[Client]Game.UI.DlgMailMoney skipped:  filtered
{
	[Client]Game.UI.DlgMailMoney::OnShow[0]( ) -> b
	[Client]Game.UI.DlgMailMoney::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMailMoney::Show[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgMailMoney::OnMoneyClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgMailMoney::OnInputMoney[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgMailMoney::OnButtonOKClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgMailMoney::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgMailMoney::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMailMoney::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMailMoney::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgMailMoney::m_Pay -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgMailMoney::m_Money -> A

	System.String [Client]System.String Game.UI.DlgMailMoney::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMailMoney::layer -> dropped
}

[Client]Game.UI.DlgFriendList skipped:  filtered
{
	[Client]Game.UI.DlgFriendList::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFriendList::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgFriendList::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFriendList::get_CurShowType[0]( ) -> e
	[Client]Game.UI.DlgFriendList::set_CurShowType[1]( Game.Msg.eRelationType ) -> A
	[Client]Game.UI.DlgFriendList::Show[1]( Game.UI.DlgFriendList/eDlgType ) -> A
	[Client]Game.UI.DlgFriendList::PersonCompare[2]( Game.Msg.ClientRelation, Game.Msg.ClientRelation ) -> A
	[Client]Game.UI.DlgFriendList::OnCheckbox_FriendClick[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgFriendList::OnCheckbox_ShieldClick[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgFriendList::OnCheckbox_TemporaryFriendClick[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgFriendList::OnButton_FindClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgFriendList::OnList_FriendClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgFriendList::OnButton_LeftClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgFriendList::OnButton_RightClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgFriendList::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFriendList::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFriendList::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgFriendList::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgFriendList::CountPerPage -> A
	System.Collections.Generic.List`1<Game.Msg.ClientRelation> [Client]System.Collections.Generic.List`1<Game.Msg.ClientRelation> Game.UI.DlgFriendList::m_CurDisplayPersons -> A
	Game.UI.DlgFriendList/eDlgType [Client]Game.UI.DlgFriendList/eDlgType Game.UI.DlgFriendList::m_DlgType -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgFriendList::m_CurPage -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgFriendList::m_TotalPage -> a
	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.UI.DlgFriendList::<CurShowType>k__BackingField -> A

	Game.Msg.eRelationType [Client]Game.Msg.eRelationType Game.UI.DlgFriendList::CurShowType -> dropped
	System.String [Client]System.String Game.UI.DlgFriendList::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgFriendList::layer -> dropped
}

[Client]Game.UI.DlgFriendList/eDlgType skipped:  filtered
{
	Game.UI.DlgFriendList/eDlgType [Client]Game.UI.DlgFriendList/eDlgType Game.UI.DlgFriendList/eDlgType::Default -> A
	Game.UI.DlgFriendList/eDlgType [Client]Game.UI.DlgFriendList/eDlgType Game.UI.DlgFriendList/eDlgType::DlgMailList -> a
	Game.UI.DlgFriendList/eDlgType [Client]Game.UI.DlgFriendList/eDlgType Game.UI.DlgFriendList/eDlgType::DlgGuildInvite -> B

	System.Int32 [Client]System.Int32 Game.UI.DlgFriendList/eDlgType::value__ skipped:  filtered
}

[Client]Game.UI.DlgAwardCard skipped:  filtered
{
	[Client]Game.UI.DlgAwardCard::OnShow[0]( ) -> b
	[Client]Game.UI.DlgAwardCard::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgAwardCard::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAwardCard::Update[0]( ) -> E
	[Client]Game.UI.DlgAwardCard::get_CardResult[0]( ) -> e
	[Client]Game.UI.DlgAwardCard::set_CardResult[1]( Game.Msg.MsgServerAckAwardCard ) -> A
	[Client]Game.UI.DlgAwardCard::Show[1]( Game.UI.DlgAwardCard/ShowState ) -> A
	[Client]Game.UI.DlgAwardCard::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgAwardCard::OnCardListClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgAwardCard::GetAwards[0]( ) -> F

	[Client]Game.UI.DlgAwardCard::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAwardCard::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgAwardCard::MaxShowCardNum -> A
	System.Single [Client]System.Single Game.UI.DlgAwardCard::LongTurningTime -> A
	System.Single [Client]System.Single Game.UI.DlgAwardCard::ShortTurningTime -> a
	Game.UI.DlgAwardCard/ShowState [Client]Game.UI.DlgAwardCard/ShowState Game.UI.DlgAwardCard::m_State -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgAwardCard::m_SelectIndex -> a
	System.Single [Client]System.Single Game.UI.DlgAwardCard::m_ResultBeginTime -> B
	Game.Msg.MsgServerAckAwardCard [Client]Game.Msg.MsgServerAckAwardCard Game.UI.DlgAwardCard::<CardResult>k__BackingField -> A

	Game.Msg.MsgServerAckAwardCard [Client]Game.Msg.MsgServerAckAwardCard Game.UI.DlgAwardCard::CardResult -> dropped
	System.String [Client]System.String Game.UI.DlgAwardCard::fileName -> dropped
}

[Client]Game.UI.DlgAwardCard/ShowState skipped:  filtered
{
	Game.UI.DlgAwardCard/ShowState [Client]Game.UI.DlgAwardCard/ShowState Game.UI.DlgAwardCard/ShowState::Card -> A
	Game.UI.DlgAwardCard/ShowState [Client]Game.UI.DlgAwardCard/ShowState Game.UI.DlgAwardCard/ShowState::Clicked -> a
	Game.UI.DlgAwardCard/ShowState [Client]Game.UI.DlgAwardCard/ShowState Game.UI.DlgAwardCard/ShowState::Result -> B
	Game.UI.DlgAwardCard/ShowState [Client]Game.UI.DlgAwardCard/ShowState Game.UI.DlgAwardCard/ShowState::AllResult -> b
	Game.UI.DlgAwardCard/ShowState [Client]Game.UI.DlgAwardCard/ShowState Game.UI.DlgAwardCard/ShowState::Over -> C

	System.Int32 [Client]System.Int32 Game.UI.DlgAwardCard/ShowState::value__ skipped:  filtered
}

[Client]Game.UI.DlgActMonsterInfo skipped:  filtered
{
	[Client]Game.UI.DlgActMonsterInfo::OnShow[0]( ) -> b
	[Client]Game.UI.DlgActMonsterInfo::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgActMonsterInfo::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgActMonsterInfo::Update[0]( ) -> E
	[Client]Game.UI.DlgActMonsterInfo::OnButton_BuyClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgActMonsterInfo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgActMonsterInfo::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.DlgActMonsterInfo::ChangeTypeCD -> A
	System.Single [Client]System.Single Game.UI.DlgActMonsterInfo::m_LastChangeTypeTime -> a
	System.Boolean [Client]System.Boolean Game.UI.DlgActMonsterInfo::m_ShowScore -> A

	System.String [Client]System.String Game.UI.DlgActMonsterInfo::fileName -> dropped
}

[Client]Game.UI.UICommon.UI_URL_ID_TYPE skipped:  filtered
{

	System.Int32 [Client]System.Int32 Game.UI.UICommon.UI_URL_ID_TYPE::value__ skipped:  filtered
	Game.UI.UICommon.UI_URL_ID_TYPE [Client]Game.UI.UICommon.UI_URL_ID_TYPE Game.UI.UICommon.UI_URL_ID_TYPE::UUIT_point skipped:  filtered
	Game.UI.UICommon.UI_URL_ID_TYPE [Client]Game.UI.UICommon.UI_URL_ID_TYPE Game.UI.UICommon.UI_URL_ID_TYPE::UUIT_player skipped:  filtered
	Game.UI.UICommon.UI_URL_ID_TYPE [Client]Game.UI.UICommon.UI_URL_ID_TYPE Game.UI.UICommon.UI_URL_ID_TYPE::UUIT_pet skipped:  filtered
	Game.UI.UICommon.UI_URL_ID_TYPE [Client]Game.UI.UICommon.UI_URL_ID_TYPE Game.UI.UICommon.UI_URL_ID_TYPE::UUIT_item skipped:  filtered
	Game.UI.UICommon.UI_URL_ID_TYPE [Client]Game.UI.UICommon.UI_URL_ID_TYPE Game.UI.UICommon.UI_URL_ID_TYPE::UUIT_Team skipped:  filtered
	Game.UI.UICommon.UI_URL_ID_TYPE [Client]Game.UI.UICommon.UI_URL_ID_TYPE Game.UI.UICommon.UI_URL_ID_TYPE::UUIT_Guild skipped:  filtered
	Game.UI.UICommon.UI_URL_ID_TYPE [Client]Game.UI.UICommon.UI_URL_ID_TYPE Game.UI.UICommon.UI_URL_ID_TYPE::UUIT_Emotion skipped:  filtered
	Game.UI.UICommon.UI_URL_ID_TYPE [Client]Game.UI.UICommon.UI_URL_ID_TYPE Game.UI.UICommon.UI_URL_ID_TYPE::UUIT_Max skipped:  filtered
}

[Client]Game.UI.UICommon.UrlData skipped:  filtered
{

	[Client]Game.UI.UICommon.UrlData::.ctor[0]( ) skipped:  filtered


	System.Byte [Client]System.Byte Game.UI.UICommon.UrlData::type skipped:  filtered
	System.UInt64 [Client]System.UInt64 Game.UI.UICommon.UrlData::nOnlyId skipped:  filtered
	System.UInt32 [Client]System.UInt32 Game.UI.UICommon.UrlData::unPlayerId skipped:  filtered
	System.String [Client]System.String Game.UI.UICommon.UrlData::strUrlText skipped:  filtered
	System.String [Client]System.String Game.UI.UICommon.UrlData::strUrlTextFull skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.UrlData::nOffsetX skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.UrlData::nOffsetY skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.UrlData::nWidth skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.UrlData::nHeight skipped:  filtered
}

[Client]Game.UI.Dlg_MessageBox skipped:  filtered
{
	[Client]Game.UI.Dlg_MessageBox::Init[0]( ) -> c
	[Client]Game.UI.Dlg_MessageBox::RegisterEvent[0]( ) -> D
	[Client]Game.UI.Dlg_MessageBox::Update[0]( ) -> E
	[Client]Game.UI.Dlg_MessageBox::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.Dlg_MessageBox::OnButton_NoClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.Dlg_MessageBox::OnButton_CancelClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.Dlg_MessageBox::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.Dlg_MessageBox::Show[11]( System.String, System.String, Game.UI.Dlg_MessageBox/MessageBoxType, System.String, System.String, System.String, Game.Msg.MsgBase, Game.UI.Dlg_MessageBox/CallBackEventHandler, System.Single, Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[7]( System.String, System.String, Game.Msg.MsgBase, Game.UI.Dlg_MessageBox/CallBackEventHandler, System.Single, Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[9]( System.String, System.String, Game.UI.Dlg_MessageBox/MessageBoxType, System.String, System.String, System.String, Game.UI.Dlg_MessageBox/CallBackEventHandler, Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[8]( System.String, System.String, Game.UI.Dlg_MessageBox/MessageBoxType, System.String, System.String, System.String, Game.UI.Dlg_MessageBox/CallBackEventHandler, System.Object ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[5]( System.String, System.String, Game.UI.Dlg_MessageBox/CallBackEventHandler, Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[4]( System.String, System.String, Game.UI.Dlg_MessageBox/CallBackEventHandler, System.Object ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[4]( System.String, System.String, System.Single, Game.UI.Dlg_MessageBox/CallBackEventHandler ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[3]( System.String, System.String, Game.UI.Dlg_MessageBox/CallBackEventHandler ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[3]( System.String, System.String, Game.Msg.MsgBase ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[5]( System.String, System.String, Game.Msg.MsgBase, System.Single, Game.UI.Dlg_MessageBox/MessageBoxReturn ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[3]( System.String, System.String, Game.UI.Dlg_MessageBox/MessageBoxReturn ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[3]( System.String, System.String, System.Single ) -> A
	[Client]Game.UI.Dlg_MessageBox::Show[2]( System.String, System.String ) -> A

	[Client]Game.UI.Dlg_MessageBox::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.Dlg_MessageBox::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.Dlg_MessageBox::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.Dlg_MessageBox::.ctor[0]( ) skipped:  special name

	System.Collections.Generic.List`1<Game.UI.Dlg_MessageBox/MessageItem> [Client]System.Collections.Generic.List`1<Game.UI.Dlg_MessageBox/MessageItem> Game.UI.Dlg_MessageBox::m_Messages -> A
	Game.UI.Dlg_MessageBox/MessageItem [Client]Game.UI.Dlg_MessageBox/MessageItem Game.UI.Dlg_MessageBox::m_CurDealItem -> A

	System.String [Client]System.String Game.UI.Dlg_MessageBox::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.Dlg_MessageBox::layer -> dropped
}

[Client]Game.UI.Dlg_MessageBox/MessageBoxType skipped:  filtered
{
	Game.UI.Dlg_MessageBox/MessageBoxType [Client]Game.UI.Dlg_MessageBox/MessageBoxType Game.UI.Dlg_MessageBox/MessageBoxType::OK -> A
	Game.UI.Dlg_MessageBox/MessageBoxType [Client]Game.UI.Dlg_MessageBox/MessageBoxType Game.UI.Dlg_MessageBox/MessageBoxType::YesNo -> a
	Game.UI.Dlg_MessageBox/MessageBoxType [Client]Game.UI.Dlg_MessageBox/MessageBoxType Game.UI.Dlg_MessageBox/MessageBoxType::YesNoCancle -> B

	System.Int32 [Client]System.Int32 Game.UI.Dlg_MessageBox/MessageBoxType::value__ skipped:  filtered
}

[Client]Game.UI.Dlg_MessageBox/MessageBoxReturn skipped:  filtered
{
	Game.UI.Dlg_MessageBox/MessageBoxReturn [Client]Game.UI.Dlg_MessageBox/MessageBoxReturn Game.UI.Dlg_MessageBox/MessageBoxReturn::OK -> A
	Game.UI.Dlg_MessageBox/MessageBoxReturn [Client]Game.UI.Dlg_MessageBox/MessageBoxReturn Game.UI.Dlg_MessageBox/MessageBoxReturn::Yes -> a
	Game.UI.Dlg_MessageBox/MessageBoxReturn [Client]Game.UI.Dlg_MessageBox/MessageBoxReturn Game.UI.Dlg_MessageBox/MessageBoxReturn::No -> B
	Game.UI.Dlg_MessageBox/MessageBoxReturn [Client]Game.UI.Dlg_MessageBox/MessageBoxReturn Game.UI.Dlg_MessageBox/MessageBoxReturn::Cancle -> b

	System.Int32 [Client]System.Int32 Game.UI.Dlg_MessageBox/MessageBoxReturn::value__ skipped:  filtered
}

[Client]Game.UI.Dlg_MessageBox/MessageItem skipped:  filtered
{
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_Title[0]( ) -> A
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_Title[1]( System.String ) -> A
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_Content[0]( ) -> a
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_Content[1]( System.String ) -> a
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_Yes[0]( ) -> B
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_Yes[1]( System.String ) -> B
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_No[0]( ) -> b
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_No[1]( System.String ) -> b
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_Cancle[0]( ) -> C
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_Cancle[1]( System.String ) -> C
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_Type[0]( ) -> c
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_Type[1]( Game.UI.Dlg_MessageBox/MessageBoxType ) -> A
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_Duration[0]( ) -> D
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_Duration[1]( System.Single ) -> A
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_DefaultReturn[0]( ) -> d
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_DefaultReturn[1]( Game.UI.Dlg_MessageBox/MessageBoxReturn ) -> A
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_CallBackHandler[0]( ) -> E
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_CallBackHandler[1]( Game.UI.Dlg_MessageBox/CallBackEventHandler ) -> A
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_SendMsg[0]( ) -> e
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_SendMsg[1]( Game.Msg.MsgBase ) -> A
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_ObjectData[0]( ) -> F
	[Client]Game.UI.Dlg_MessageBox/MessageItem::set_ObjectData[1]( System.Object ) -> A
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_TimeOut[0]( ) -> f
	[Client]Game.UI.Dlg_MessageBox/MessageItem::get_Elapse[0]( ) -> G

	[Client]Game.UI.Dlg_MessageBox/MessageItem::.ctor[0]( ) skipped:  special name

	System.Single [Client]System.Single Game.UI.Dlg_MessageBox/MessageItem::DefaultDuration -> A
	System.Single [Client]System.Single Game.UI.Dlg_MessageBox/MessageItem::m_Start -> a
	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::<Title>k__BackingField -> A
	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::<Content>k__BackingField -> a
	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::<Yes>k__BackingField -> B
	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::<No>k__BackingField -> b
	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::<Cancle>k__BackingField -> C
	Game.UI.Dlg_MessageBox/MessageBoxType [Client]Game.UI.Dlg_MessageBox/MessageBoxType Game.UI.Dlg_MessageBox/MessageItem::<Type>k__BackingField -> A
	System.Single [Client]System.Single Game.UI.Dlg_MessageBox/MessageItem::<Duration>k__BackingField -> B
	Game.UI.Dlg_MessageBox/MessageBoxReturn [Client]Game.UI.Dlg_MessageBox/MessageBoxReturn Game.UI.Dlg_MessageBox/MessageItem::<DefaultReturn>k__BackingField -> A
	Game.UI.Dlg_MessageBox/CallBackEventHandler [Client]Game.UI.Dlg_MessageBox/CallBackEventHandler Game.UI.Dlg_MessageBox/MessageItem::<CallBackHandler>k__BackingField -> A
	Game.Msg.MsgBase [Client]Game.Msg.MsgBase Game.UI.Dlg_MessageBox/MessageItem::<SendMsg>k__BackingField -> A
	System.Object [Client]System.Object Game.UI.Dlg_MessageBox/MessageItem::<ObjectData>k__BackingField -> A

	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::Title -> dropped
	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::Content -> dropped
	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::Yes -> dropped
	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::No -> dropped
	System.String [Client]System.String Game.UI.Dlg_MessageBox/MessageItem::Cancle -> dropped
	Game.UI.Dlg_MessageBox/MessageBoxType [Client]Game.UI.Dlg_MessageBox/MessageBoxType Game.UI.Dlg_MessageBox/MessageItem::Type -> dropped
	System.Single [Client]System.Single Game.UI.Dlg_MessageBox/MessageItem::Duration -> dropped
	Game.UI.Dlg_MessageBox/MessageBoxReturn [Client]Game.UI.Dlg_MessageBox/MessageBoxReturn Game.UI.Dlg_MessageBox/MessageItem::DefaultReturn -> dropped
	Game.UI.Dlg_MessageBox/CallBackEventHandler [Client]Game.UI.Dlg_MessageBox/CallBackEventHandler Game.UI.Dlg_MessageBox/MessageItem::CallBackHandler -> dropped
	Game.Msg.MsgBase [Client]Game.Msg.MsgBase Game.UI.Dlg_MessageBox/MessageItem::SendMsg -> dropped
	System.Object [Client]System.Object Game.UI.Dlg_MessageBox/MessageItem::ObjectData -> dropped
	System.Boolean [Client]System.Boolean Game.UI.Dlg_MessageBox/MessageItem::TimeOut -> dropped
	System.Single [Client]System.Single Game.UI.Dlg_MessageBox/MessageItem::Elapse -> dropped
}

[Client]Game.UI.DlgTargetFunction skipped:  filtered
{
	[Client]Game.UI.DlgTargetFunction::Init[0]( ) -> c
	[Client]Game.UI.DlgTargetFunction::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgTargetFunction::get_TargetID[0]( ) -> e
	[Client]Game.UI.DlgTargetFunction::set_TargetID[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgTargetFunction::get_TargetName[0]( ) -> F
	[Client]Game.UI.DlgTargetFunction::set_TargetName[1]( System.String ) -> A
	[Client]Game.UI.DlgTargetFunction::OnButtonSeePetClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgTargetFunction::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgTargetFunction::OnButton_AddClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgTargetFunction::OnButton_ChatClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgTargetFunction::OnButton_PKClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgTargetFunction::OnButton_SeeClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgTargetFunction::OnButton_TeamClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgTargetFunction::OnButton_TeamInviteClick[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgTargetFunction::OnButtonGuildInviteClick[1]( Game.UI.UICommon.IXUIButton ) -> E

	[Client]Game.UI.DlgTargetFunction::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTargetFunction::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgTargetFunction::.ctor[0]( ) skipped:  special name

	System.UInt32 [Client]System.UInt32 Game.UI.DlgTargetFunction::<TargetID>k__BackingField -> A
	System.String [Client]System.String Game.UI.DlgTargetFunction::<TargetName>k__BackingField -> A

	System.UInt32 [Client]System.UInt32 Game.UI.DlgTargetFunction::TargetID -> dropped
	System.String [Client]System.String Game.UI.DlgTargetFunction::TargetName -> dropped
	System.String [Client]System.String Game.UI.DlgTargetFunction::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgTargetFunction::layer -> dropped
}

[Client]Game.UI.DlgPetSkill skipped:  filtered
{
	[Client]Game.UI.DlgPetSkill::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetSkill::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetSkill::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetSkill::GetSelectSkillIndex[0]( ) -> e
	[Client]Game.UI.DlgPetSkill::OnButton_SkillStudyClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetSkill::OnButton_LeftClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPetSkill::OnButton_RightClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgPetSkill::OnList_SkillClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgPetSkill::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetSkill::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetSkill::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgPetSkill::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetSkill::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkill::ChangeHolePriceBase -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkill::StudySkillPriceBase -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkill::SkillTypeChangeShopId -> B
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkill::AutoOpenHoleLevel -> b
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkill::SkillCountPerPage -> C
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkill::MaxPage -> c
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkill::m_CurPage -> D

	System.String [Client]System.String Game.UI.DlgPetSkill::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgPetSkill::layer -> dropped
}

[Client]Game.UI.DlgPetAttribute skipped:  filtered
{
	[Client]Game.UI.DlgPetAttribute::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetAttribute::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetAttribute::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetAttribute::OnImageButton_RestoreClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetAttribute::OnImageButton_FreeClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPetAttribute::OnPetFreeHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A

	[Client]Game.UI.DlgPetAttribute::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetAttribute::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetAttribute::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetAttribute::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgPetAttribute::MaxPoint -> A
	System.Int32 [Client]System.Int32 Game.UI.DlgPetAttribute::PointShowParam -> a
	System.Int32 [Client]System.Int32 Game.UI.DlgPetAttribute::MajorLimit -> B

	System.String [Client]System.String Game.UI.DlgPetAttribute::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgPetAttribute::layer -> dropped
}

[Client]Game.UI.DlgNpcList/NpcType skipped:  filtered
{
	Game.UI.DlgNpcList/NpcType [Client]Game.UI.DlgNpcList/NpcType Game.UI.DlgNpcList/NpcType::Transmit -> A
	Game.UI.DlgNpcList/NpcType [Client]Game.UI.DlgNpcList/NpcType Game.UI.DlgNpcList/NpcType::Function -> a
	Game.UI.DlgNpcList/NpcType [Client]Game.UI.DlgNpcList/NpcType Game.UI.DlgNpcList/NpcType::Task -> B

	System.Int32 [Client]System.Int32 Game.UI.DlgNpcList/NpcType::value__ skipped:  filtered
}

[Client]Game.UI.DlgInputNumber skipped:  filtered
{
	[Client]Game.UI.DlgInputNumber::OnShow[0]( ) -> b
	[Client]Game.UI.DlgInputNumber::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgInputNumber::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgInputNumber::Show[3]( System.Action`1<System.UInt32>, System.UInt32, System.UInt32 ) -> A
	[Client]Game.UI.DlgInputNumber::Show[3]( Game.UI.DlgInputNumber/enumDlgType, System.Action`1<System.UInt32>, System.Boolean ) -> A
	[Client]Game.UI.DlgInputNumber::OnImageButtonMaxClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgInputNumber::OnImageButtonMinClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgInputNumber::OnImageButtonEnterClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgInputNumber::OnImageButtonClearClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgInputNumber::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgInputNumber::OnImageButton0Click[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgInputNumber::OnImageButton1Click[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgInputNumber::OnImageButton2Click[1]( Game.UI.UICommon.IXUIButton ) -> d
	[Client]Game.UI.DlgInputNumber::OnImageButton3Click[1]( Game.UI.UICommon.IXUIButton ) -> E
	[Client]Game.UI.DlgInputNumber::OnImageButton4Click[1]( Game.UI.UICommon.IXUIButton ) -> e
	[Client]Game.UI.DlgInputNumber::OnImageButton5Click[1]( Game.UI.UICommon.IXUIButton ) -> F
	[Client]Game.UI.DlgInputNumber::OnImageButton6Click[1]( Game.UI.UICommon.IXUIButton ) -> f
	[Client]Game.UI.DlgInputNumber::OnImageButton7Click[1]( Game.UI.UICommon.IXUIButton ) -> G
	[Client]Game.UI.DlgInputNumber::OnImageButton8Click[1]( Game.UI.UICommon.IXUIButton ) -> g
	[Client]Game.UI.DlgInputNumber::OnImageButton9Click[1]( Game.UI.UICommon.IXUIButton ) -> H
	[Client]Game.UI.DlgInputNumber::AddNumber[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgInputNumber::RemoveNumber[0]( ) -> e

	[Client]Game.UI.DlgInputNumber::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgInputNumber::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgInputNumber::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgInputNumber::m_FirstInput -> A
	Game.UI.DlgInputNumber/enumDlgType [Client]Game.UI.DlgInputNumber/enumDlgType Game.UI.DlgInputNumber::m_DlgType -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgInputNumber::m_InputNum -> A
	System.UInt32 [Client]System.UInt32 Game.UI.DlgInputNumber::m_MinVaue -> a
	System.UInt32 [Client]System.UInt32 Game.UI.DlgInputNumber::m_MaxVaue -> B
	System.Action`1<System.UInt32> [Client]System.Action`1<System.UInt32> Game.UI.DlgInputNumber::m_Action -> A

	System.String [Client]System.String Game.UI.DlgInputNumber::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgInputNumber::layer -> dropped
}

[Client]Game.UI.DlgInputNumber/enumDlgType skipped:  filtered
{
	Game.UI.DlgInputNumber/enumDlgType [Client]Game.UI.DlgInputNumber/enumDlgType Game.UI.DlgInputNumber/enumDlgType::Default -> A
	Game.UI.DlgInputNumber/enumDlgType [Client]Game.UI.DlgInputNumber/enumDlgType Game.UI.DlgInputNumber/enumDlgType::Storage -> a

	System.Int32 [Client]System.Int32 Game.UI.DlgInputNumber/enumDlgType::value__ skipped:  filtered
}

[Client]Game.UI.DlgFreeTalk skipped:  filtered
{
	[Client]Game.UI.DlgFreeTalk::OnShow[0]( ) -> b
	[Client]Game.UI.DlgFreeTalk::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFreeTalk::get_CurId[0]( ) -> e
	[Client]Game.UI.DlgFreeTalk::set_CurId[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgFreeTalk::UpdateTalk[0]( ) -> F
	[Client]Game.UI.DlgFreeTalk::OnSprite_BGStretchClick[1]( Game.UI.UICommon.IXUISprite ) -> A
	[Client]Game.UI.DlgFreeTalk::JoyButtonL1[0]( ) -> f
	[Client]Game.UI.DlgFreeTalk::OnList_ScriptClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgFreeTalk::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFreeTalk::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFreeTalk::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.DlgFreeTalk::.ctor[0]( ) skipped:  special name

	System.Int32 [Client]System.Int32 Game.UI.DlgFreeTalk::<CurId>k__BackingField -> A

	System.Int32 [Client]System.Int32 Game.UI.DlgFreeTalk::CurId -> dropped
	System.String [Client]System.String Game.UI.DlgFreeTalk::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgFreeTalk::Persist -> dropped
}

[Client]Game.UI.UICommon.IXUIObject skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIObject::get_RelativeSize[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::get_RealSize[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::get_gameObject[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::get_parent[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::set_parent[1]( Game.UI.UICommon.IXUIObject ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::IsVisible[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::OnFocus[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::Init[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::IsMouseIn[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIObject::GetUIObject[1]( System.String ) skipped:  filtered


	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.UICommon.IXUIObject::RelativeSize skipped:  filtered
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.UICommon.IXUIObject::RealSize skipped:  filtered
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UI.UICommon.IXUIObject::gameObject skipped:  filtered
	Game.UI.UICommon.IXUIObject [Client]Game.UI.UICommon.IXUIObject Game.UI.UICommon.IXUIObject::parent skipped:  filtered
}

[Client]Game.UI.UICommon.IXUICheckBox skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUICheckBox::get_bChecked[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUICheckBox::set_bChecked[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUICheckBox::SetEnable[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUICheckBox::RegisterOnCheckEventHandler[1]( Game.UI.UICommon.CheckBoxOnCheckEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUICheckBox::RegisterOnClickEventHandler[1]( Game.UI.UICommon.CheckBoxOnClickEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUICheckBox::SetCaption[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUICheckBox::SetRadioButtonRoot[1]( Game.UI.UICommon.IXUIObject ) skipped:  filtered


	System.Boolean [Client]System.Boolean Game.UI.UICommon.IXUICheckBox::bChecked skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIListItem skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIListItem::get_Id[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::set_Id[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_Index[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_DataType[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::set_DataType[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_Data[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::set_Data[1]( System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_BackgroundScale[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_UId[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::set_UId[1]( System.UInt32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetIconSprite[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetIconSprite[2]( System.String, System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetIconTexture[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetIconTextureAlpha[1]( System.Single ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::Clear[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetTip[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetColor[1]( UnityEngine.Color ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetQuality[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetText[2]( System.UInt32, System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetText[2]( System.String, System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetEnableSelect[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::SetEnable[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_Labels[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_Buttons[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_Sprites[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_Pictures[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_Progresss[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_CheckBox[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_Lists[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItem::get_Groups[0]( ) skipped:  filtered


	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUIListItem::Id skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUIListItem::Index skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUIListItem::DataType skipped:  filtered
	System.Object [Client]System.Object Game.UI.UICommon.IXUIListItem::Data skipped:  filtered
	UnityEngine.Vector3 [Client]UnityEngine.Vector3 Game.UI.UICommon.IXUIListItem::BackgroundScale skipped:  filtered
	System.UInt32 [Client]System.UInt32 Game.UI.UICommon.IXUIListItem::UId skipped:  filtered
	System.Collections.Generic.List`1<Game.UI.UICommon.IXUILabel> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUILabel> Game.UI.UICommon.IXUIListItem::Labels skipped:  filtered
	System.Collections.Generic.List`1<Game.UI.UICommon.IXUIButton> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUIButton> Game.UI.UICommon.IXUIListItem::Buttons skipped:  filtered
	System.Collections.Generic.List`1<Game.UI.UICommon.IXUISprite> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUISprite> Game.UI.UICommon.IXUIListItem::Sprites skipped:  filtered
	System.Collections.Generic.List`1<Game.UI.UICommon.IXUIPicture> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUIPicture> Game.UI.UICommon.IXUIListItem::Pictures skipped:  filtered
	System.Collections.Generic.List`1<Game.UI.UICommon.IXUIProgress> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUIProgress> Game.UI.UICommon.IXUIListItem::Progresss skipped:  filtered
	System.Collections.Generic.List`1<Game.UI.UICommon.IXUICheckBox> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUICheckBox> Game.UI.UICommon.IXUIListItem::CheckBox skipped:  filtered
	System.Collections.Generic.List`1<Game.UI.UICommon.IXUIList> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUIList> Game.UI.UICommon.IXUIListItem::Lists skipped:  filtered
	System.Collections.Generic.List`1<Game.UI.UICommon.IXUIGroup> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUIGroup> Game.UI.UICommon.IXUIListItem::Groups skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIListTaskItem skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIListTaskItem::get_Label_Kind[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTaskItem::get_Label_Level[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTaskItem::get_Label_Demand[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTaskItem::get_Label_Award[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTaskItem::get_Label_Trace[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTaskItem::get_Button_Cancel[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTaskItem::get_Button_Seek[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTaskItem::get_List_AwardItem[0]( ) skipped:  filtered


	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.UICommon.IXUIListTaskItem::Label_Kind skipped:  filtered
	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.UICommon.IXUIListTaskItem::Label_Level skipped:  filtered
	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.UICommon.IXUIListTaskItem::Label_Demand skipped:  filtered
	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.UICommon.IXUIListTaskItem::Label_Award skipped:  filtered
	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.UICommon.IXUIListTaskItem::Label_Trace skipped:  filtered
	Game.UI.UICommon.IXUIButton [Client]Game.UI.UICommon.IXUIButton Game.UI.UICommon.IXUIListTaskItem::Button_Cancel skipped:  filtered
	Game.UI.UICommon.IXUIButton [Client]Game.UI.UICommon.IXUIButton Game.UI.UICommon.IXUIListTaskItem::Button_Seek skipped:  filtered
	Game.UI.UICommon.IXUIList [Client]Game.UI.UICommon.IXUIList Game.UI.UICommon.IXUIListTaskItem::List_AwardItem skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIDlg skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIDlg::get_uiBehaviourInterface[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::get_LayerNew[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::get_Prepared[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::Load[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::UnLoad[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::IsVisible[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::SetDepthZ[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::BindReverse[1]( Game.UI.UICommon.IXUIPanel ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::_Update[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::LateUpdate[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::IsMouseIn[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDlg::_Init[1]( Game.UI.UICommon.XUIPanel ) skipped:  filtered


	Game.UI.UICommon.IXUIPanel [Client]Game.UI.UICommon.IXUIPanel Game.UI.UICommon.IXUIDlg::uiBehaviourInterface skipped:  filtered
	System.String [Client]System.String Game.UI.UICommon.IXUIDlg::fileName skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUIDlg::layer skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUIDlg::LayerNew skipped:  filtered
	System.Boolean [Client]System.Boolean Game.UI.UICommon.IXUIDlg::Persist skipped:  filtered
	System.Boolean [Client]System.Boolean Game.UI.UICommon.IXUIDlg::Prepared skipped:  filtered
}

[Client]Game.UI.DlgUpdateInfo skipped:  filtered
{
	[Client]Game.UI.DlgUpdateInfo::OnShow[0]( ) -> b
	[Client]Game.UI.DlgUpdateInfo::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgUpdateInfo::Init[0]( ) -> c
	[Client]Game.UI.DlgUpdateInfo::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgUpdateInfo::OnButtonClickClose[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgUpdateInfo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgUpdateInfo::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgUpdateInfo::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgUpdateInfo::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgUpdateInfo::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgUpdateInfo::layer -> dropped
}

[Client]Game.UI.DlgSystemEffect skipped:  filtered
{
	[Client]Game.UI.DlgSystemEffect::OnShow[0]( ) -> b
	[Client]Game.UI.DlgSystemEffect::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgSystemEffect::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgSystemEffect::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgSystemEffect::OnCheckbox_EffectCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgSystemEffect::OnCheckbox_OnlyTeamClick[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgSystemEffect::OnCheckbox_MuteMusicCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgSystemEffect::OnCheckbox_MuteVoiceCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> b
	[Client]Game.UI.DlgSystemEffect::OnSlider_NumberOfSreenChange[1]( Game.UI.UICommon.IXUISlider ) -> A
	[Client]Game.UI.DlgSystemEffect::OnCheckbox_ShieldCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> C

	[Client]Game.UI.DlgSystemEffect::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgSystemEffect::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgSystemEffect::fileName -> dropped
}

[Client]Game.UI.UICommon.IXUIPanel skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIPanel::get_uiDlgInterface[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPanel::get_uiChilds[0]( ) skipped:  filtered


	Game.UI.UICommon.IXUIDlg [Client]Game.UI.UICommon.IXUIDlg Game.UI.UICommon.IXUIPanel::uiDlgInterface skipped:  filtered
	Game.UI.UICommon.IXUIObject[] [Client]Game.UI.UICommon.IXUIObject[] Game.UI.UICommon.IXUIPanel::uiChilds skipped:  filtered
}

[Client]Game.UI.IDlgJoyStick1Dynamic skipped:  filtered
{
	[Client]Game.UI.IDlgJoyStick1Dynamic::get_Enable[0]( ) -> A
	[Client]Game.UI.IDlgJoyStick1Dynamic::SetJoyEnable[1]( System.Boolean ) -> A

	System.Boolean [Client]System.Boolean Game.UI.IDlgJoyStick1Dynamic::Enable -> dropped
}

[Client]Game.UI.DlgJoyStick1Dynamic skipped:  filtered
{
	[Client]Game.UI.DlgJoyStick1Dynamic::GetDlgDynamicInterface[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgJoyStick1Dynamic::get_Enable[0]( ) -> A
	[Client]Game.UI.DlgJoyStick1Dynamic::SetJoyEnable[1]( System.Boolean ) -> a
	[Client]Game.UI.DlgJoyStick1Dynamic::Refresh[0]( ) -> a

	[Client]Game.UI.DlgJoyStick1Dynamic::.ctor[0]( ) skipped:  special name

	System.Boolean [Client]System.Boolean Game.UI.DlgJoyStick1Dynamic::Enable -> dropped
}

[Client]Game.UI.DlgCDKey skipped:  filtered
{
	[Client]Game.UI.DlgCDKey::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgCDKey::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgCDKey::OnButton_OKClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgCDKey::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgCDKey::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgCDKey::fileName -> dropped
}

[Client]Game.UI.DlgArenaOffLineResult skipped:  filtered
{
	[Client]Game.UI.DlgArenaOffLineResult::OnShow[0]( ) -> b
	[Client]Game.UI.DlgArenaOffLineResult::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgArenaOffLineResult::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgArenaOffLineResult::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgArenaOffLineResult::OnButton_GetAwardClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgArenaOffLineResult::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLineResult::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLineResult::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgArenaOffLineResult::fileName -> dropped
}

[Client]Game.UI.UICommon.IXUISprite skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUISprite::get_uiAtlas[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::get_spriteName[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::get_Alpha[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::set_Alpha[1]( System.Single ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::get_Color[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::set_Color[1]( UnityEngine.Color ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::SetSprite[2]( System.String, System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::SetSprite[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::PlayFlash[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::StopFlash[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::SetEnable[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::RegisterSpriteClickEventHandler[1]( Game.UI.UICommon.SpriteClickEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::RegisterSpritePressEventHandler[1]( Game.UI.UICommon.SpritePressEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISprite::RegisterSpriteDragEventHandler[1]( Game.UI.UICommon.SpriteDragEventHandler ) skipped:  filtered


	Game.UI.UICommon.IXUIAtlas [Client]Game.UI.UICommon.IXUIAtlas Game.UI.UICommon.IXUISprite::uiAtlas skipped:  filtered
	System.String [Client]System.String Game.UI.UICommon.IXUISprite::spriteName skipped:  filtered
	System.Single [Client]System.Single Game.UI.UICommon.IXUISprite::Alpha skipped:  filtered
	UnityEngine.Color [Client]UnityEngine.Color Game.UI.UICommon.IXUISprite::Color skipped:  filtered
}

[Client]Game.UI.DlgRichSpecial2 skipped:  filtered
{
	[Client]Game.UI.DlgRichSpecial2::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRichSpecial2::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRichSpecial2::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgRichSpecial2::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgRichSpecial2::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRichSpecial2::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgRichSpecial2::fileName -> dropped
}

[Client]Game.UI.DlgRichInfo skipped:  filtered
{
	[Client]Game.UI.DlgRichInfo::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRichInfo::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRichInfo::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgRichInfo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRichInfo::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgRichInfo::fileName -> dropped
}

[Client]Game.UI.DlgMapLoading skipped:  filtered
{
	[Client]Game.UI.DlgMapLoading::Init[0]( ) -> c
	[Client]Game.UI.DlgMapLoading::RegisterEvent[0]( ) -> D

	[Client]Game.UI.DlgMapLoading::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMapLoading::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMapLoading::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMapLoading::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMapLoading::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgMapLoading::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMapLoading::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgMapLoading::Persist -> dropped
}

[Client]Game.UI.DlgFriendHelpInstruction skipped:  filtered
{
	[Client]Game.UI.DlgFriendHelpInstruction::Init[0]( ) -> c
	[Client]Game.UI.DlgFriendHelpInstruction::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgFriendHelpInstruction::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgFriendHelpInstruction::OnButton_OKClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgFriendHelpInstruction::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFriendHelpInstruction::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgFriendHelpInstruction::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgFriendHelpInstruction::fileName -> dropped
}

[Client]Game.UI.DlgCompensate skipped:  filtered
{
	[Client]Game.UI.DlgCompensate::OnShow[0]( ) -> b
	[Client]Game.UI.DlgCompensate::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgCompensate::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgCompensate::OnButtonAwardClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgCompensate::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgCompensate::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgCompensate::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgCompensate::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgCompensate::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgCompensate::layer -> dropped
}

[Client]Game.UI.UICommon.IXUILabel skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUILabel::get_AlphaVar[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUILabel::get_Alpha[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUILabel::set_Alpha[1]( System.Single ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUILabel::get_Color[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUILabel::set_Color[1]( UnityEngine.Color ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUILabel::GetText[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUILabel::SetText[1]( System.String ) skipped:  filtered


	System.Single [Client]System.Single Game.UI.UICommon.IXUILabel::AlphaVar skipped:  filtered
	System.Single [Client]System.Single Game.UI.UICommon.IXUILabel::Alpha skipped:  filtered
	UnityEngine.Color [Client]UnityEngine.Color Game.UI.UICommon.IXUILabel::Color skipped:  filtered
}

[Client]Game.UI.DlgRichSpecial1 skipped:  filtered
{
	[Client]Game.UI.DlgRichSpecial1::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRichSpecial1::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRichSpecial1::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgRichSpecial1::OnButton_ChangeClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgRichSpecial1::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRichSpecial1::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgRichSpecial1::fileName -> dropped
}

[Client]Game.UI.UICommon.IXUIScrollBar skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIScrollBar::get_value[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIScrollBar::set_value[1]( System.Single ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIScrollBar::get_size[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIScrollBar::set_size[1]( System.Single ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIScrollBar::RegisterScrollBarChangeEventHandler[1]( Game.UI.UICommon.ScrollBarChangeEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIScrollBar::RegisterScrollBarDragFinishedEventHandler[1]( Game.UI.UICommon.ScrollBarDragFinishedEventHandler ) skipped:  filtered


	System.Single [Client]System.Single Game.UI.UICommon.IXUIScrollBar::value skipped:  filtered
	System.Single [Client]System.Single Game.UI.UICommon.IXUIScrollBar::size skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIList skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIList::get_Count[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::get_CellSize[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::get_MaxPerLine[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::get_Arrangement[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::get_CenteredObject[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::get_CenteredListItem[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::SetEnableSelect[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::MoveToListItem[2]( System.Int32, System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::RecenterOnListItem[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::RecenterOnListItemQuickly[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::Refresh[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::GetSelectedIndex[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::SetSelectedIndex[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::GetSelectedItem[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::GetItemById[1]( System.UInt32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::GetItemByIndex[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::AddListItem[1]( UnityEngine.GameObject ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::AddListItem[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::Clear[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::DelListItem[1]( Game.UI.UICommon.IXUIListItem ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::Reposition[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::RegisterListOnSelectEventHandler[1]( Game.UI.UICommon.ListOnSelectEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::RegisterListOnClickEventHandler[1]( Game.UI.UICommon.ListOnClickEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::RegisterListOnDoubleClickEventHandler[1]( Game.UI.UICommon.ListOnDoubleClickEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::RegisterListTipGenerator[2]( Game.UI.UICommon.AppendTips, Game.UI.UICommon.AppendButtons ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::RegisterListTipGenerator[1]( Game.UI.UICommon.AppendButtons ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::RegisterListOnRepositionEventHandler[1]( Game.UI.UICommon.ListOnRepositionEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIList::RegisterListOnRecenterFinishedEventHandler[1]( Game.UI.UICommon.ListOnRecenterFinished ) skipped:  filtered


	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUIList::Count skipped:  filtered
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.UICommon.IXUIList::CellSize skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUIList::MaxPerLine skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUIList::Arrangement skipped:  filtered
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UI.UICommon.IXUIList::CenteredObject skipped:  filtered
	Game.UI.UICommon.IXUIListItem [Client]Game.UI.UICommon.IXUIListItem Game.UI.UICommon.IXUIList::CenteredListItem skipped:  filtered
}

[Client]Game.UI.DlgConnect skipped:  filtered
{
	[Client]Game.UI.DlgConnect::Init[0]( ) -> c
	[Client]Game.UI.DlgConnect::RegisterEvent[0]( ) -> D

	[Client]Game.UI.DlgConnect::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgConnect::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgConnect::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgConnect::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgConnect::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgConnect::layer -> dropped
}

[Client]Game.UI.DlgGuildBuild skipped:  filtered
{
	[Client]Game.UI.DlgGuildBuild::Init[0]( ) -> c
	[Client]Game.UI.DlgGuildBuild::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuildBuild::OnButtonOKClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGuildBuild::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgGuildBuild::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildBuild::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuildBuild::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgGuildBuild::fileName -> dropped
}

[Client]Game.UI.DlgGuide3 skipped:  filtered
{
	[Client]Game.UI.DlgGuide3::Init[0]( ) -> c
	[Client]Game.UI.DlgGuide3::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuide3::OnSpriteMaskClick[1]( Game.UI.UICommon.IXUISprite ) -> A

	[Client]Game.UI.DlgGuide3::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuide3::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuide3::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgGuide3::fileName -> dropped
}

[Client]Game.UI.DlgEctypeRating skipped:  filtered
{
	[Client]Game.UI.DlgEctypeRating::OnShow[0]( ) -> b
	[Client]Game.UI.DlgEctypeRating::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgEctypeRating::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgEctypeRating::Update[0]( ) -> E

	[Client]Game.UI.DlgEctypeRating::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEctypeRating::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgEctypeRating::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgEctypeRating::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgEctypeRating::layer -> dropped
}

[Client]Game.UI.DlgAFKExit skipped:  filtered
{
	[Client]Game.UI.DlgAFKExit::Init[0]( ) -> c
	[Client]Game.UI.DlgAFKExit::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgAFKExit::OnButtonAFKExit[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgAFKExit::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAFKExit::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgAFKExit::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgAFKExit::fileName -> dropped
}

[Client]Game.UI.UICommon.IXUIDynamicList skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIDynamicList::get_Count[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::Refresh[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::GetSelectedIndex[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::SetSelectedIndex[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::GetSelectedItem[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::GetItemByIndex[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::AddListItem[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::DelListItem[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::RegisterListOnSelectEventHandler[1]( Game.UI.UICommon.DynamicListOnSelectEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::RegisterListOnClickEventHandler[1]( Game.UI.UICommon.DynamicListOnClickEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::RegisterListOnDoubleClickEventHandler[1]( Game.UI.UICommon.DynamicListOnDoubleClickEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIDynamicList::Clear[0]( ) skipped:  filtered


	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUIDynamicList::Count skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIGroup skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIGroup::get_Labels[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIGroup::SetText[2]( System.String, System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIGroup::EnableDraggablePanel[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIGroup::SetPanelClipRange[4]( System.Single, System.Single, System.Single, System.Single ) skipped:  filtered


	System.Collections.Generic.List`1<Game.UI.UICommon.IXUILabel> [Client]System.Collections.Generic.List`1<Game.UI.UICommon.IXUILabel> Game.UI.UICommon.IXUIGroup::Labels skipped:  filtered
}

[Client]Game.UI.DlgListAct skipped:  filtered
{
	[Client]Game.UI.DlgListAct::OnShow[0]( ) -> b
	[Client]Game.UI.DlgListAct::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgListAct::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgListAct::OnButton_ReloadClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgListAct::OnList_ActClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgListAct::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgListAct::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgListAct::fileName -> dropped
}

[Client]Game.UI.DlgGuide2 skipped:  filtered
{
	[Client]Game.UI.DlgGuide2::Init[0]( ) -> c
	[Client]Game.UI.DlgGuide2::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuide2::OnClick[1]( Game.UI.UICommon.IXUIPicture ) -> A

	[Client]Game.UI.DlgGuide2::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuide2::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuide2::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuide2::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgGuide2::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgGuide2::layer -> dropped
}

[Client]Game.UI.UICommon.IXUIListItemHeadInfo skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIListItemHeadInfo::get_LabelName[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItemHeadInfo::get_Label_Title[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListItemHeadInfo::get_ProgressHp[0]( ) skipped:  filtered


	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.UICommon.IXUIListItemHeadInfo::LabelName skipped:  filtered
	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.UICommon.IXUIListItemHeadInfo::Label_Title skipped:  filtered
	Game.UI.UICommon.IXUIProgress [Client]Game.UI.UICommon.IXUIProgress Game.UI.UICommon.IXUIListItemHeadInfo::ProgressHp skipped:  filtered
}

[Client]Game.UI.DlgGuide1 skipped:  filtered
{
	[Client]Game.UI.DlgGuide1::Init[0]( ) -> c
	[Client]Game.UI.DlgGuide1::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuide1::OnSpriteBGPress[1]( System.Boolean ) -> A

	[Client]Game.UI.DlgGuide1::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuide1::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuide1::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuide1::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgGuide1::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgGuide1::layer -> dropped
}

[Client]Game.UI.UICommon.IXMouseOrTouch skipped:  filtered
{

	[Client]Game.UI.UICommon.IXMouseOrTouch::get_Pos[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXMouseOrTouch::get_Delta[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXMouseOrTouch::get_TotalDelta[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXMouseOrTouch::get_Current[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXMouseOrTouch::get_Pressed[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXMouseOrTouch::get_PressedCam[0]( ) skipped:  filtered


	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.UICommon.IXMouseOrTouch::Pos skipped:  filtered
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.UICommon.IXMouseOrTouch::Delta skipped:  filtered
	UnityEngine.Vector2 [Client]UnityEngine.Vector2 Game.UI.UICommon.IXMouseOrTouch::TotalDelta skipped:  filtered
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UI.UICommon.IXMouseOrTouch::Current skipped:  filtered
	UnityEngine.GameObject [Client]UnityEngine.GameObject Game.UI.UICommon.IXMouseOrTouch::Pressed skipped:  filtered
	UnityEngine.Camera [Client]UnityEngine.Camera Game.UI.UICommon.IXMouseOrTouch::PressedCam skipped:  filtered
}

[Client]Game.UI.UICommon.IXUITool skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUITool::SetActive[2]( UnityEngine.GameObject, System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::SetLayer[2]( UnityEngine.GameObject, System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::SetUIEventFallThrough[1]( UnityEngine.GameObject ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::SetUIEventGenericHandler[1]( Game.UI.UICommon.IXUIEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::SetAddLoadTaskEventHandler[1]( Game.UI.UICommon.AddLoadTaskEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::SetRemoveLoadTaskEventHandler[1]( Game.UI.UICommon.RemoveLoadTaskEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::SetUITipEventHandler[1]( Game.UI.UICommon.ShowTipsEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::GetHierarchy[1]( UnityEngine.GameObject ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::GetMouseOrTouch[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::GetUICamera[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::Play[3]( UnityEngine.Animation, Game.UI.UICommon.AnimDirection, System.EventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::IsAnyTouchInUI[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::get_IsInputHasFocus[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITool::get_ManualHeight[0]( ) skipped:  filtered


	System.Boolean [Client]System.Boolean Game.UI.UICommon.IXUITool::IsInputHasFocus skipped:  filtered
	System.Int32 [Client]System.Int32 Game.UI.UICommon.IXUITool::ManualHeight skipped:  filtered
}

[Client]Game.UI.DlgShipExplorationEnter skipped:  filtered
{
	[Client]Game.UI.DlgShipExplorationEnter::OnShow[0]( ) -> b
	[Client]Game.UI.DlgShipExplorationEnter::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgShipExplorationEnter::OnButtonOptionShipClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgShipExplorationEnter::OnButtonOptionRoleClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgShipExplorationEnter::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgShipExplorationEnter::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgShipExplorationEnter::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgShipExplorationEnter::fileName -> dropped
}

[Client]Game.UI.DlgPetStarFatigueBuy skipped:  filtered
{
	[Client]Game.UI.DlgPetStarFatigueBuy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetStarFatigueBuy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetStarFatigueBuy::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetStarFatigueBuy::OnButton_CancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgPetStarFatigueBuy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetStarFatigueBuy::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgPetStarFatigueBuy::fileName -> dropped
}

[Client]Game.UI.DlgPetSelectMaterial skipped:  filtered
{
	[Client]Game.UI.DlgPetSelectMaterial::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetSelectMaterial::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetSelectMaterial::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetSelectMaterial::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetSelectMaterial::OnItemList_MatClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgPetSelectMaterial::OnItemList_PetClick[1]( Game.UI.UICommon.IXUIListItem ) -> a

	[Client]Game.UI.DlgPetSelectMaterial::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetSelectMaterial::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgPetSelectMaterial::fileName -> dropped
}

[Client]Game.UI.DlgKill skipped:  filtered
{
	[Client]Game.UI.DlgKill::Init[0]( ) -> c
	[Client]Game.UI.DlgKill::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgKill::KillPlayer[0]( ) -> e
	[Client]Game.UI.DlgKill::ContinueKill[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgKill::ShowContinueKillResult[0]( ) -> F
	[Client]Game.UI.DlgKill::OnShowFinished[1]( System.UInt32 ) -> A

	[Client]Game.UI.DlgKill::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgKill::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgKill::get_Persist[0]( ) skipped:  filtered
	[Client]Game.UI.DlgKill::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgKill::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgKill::fileName -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgKill::Persist -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgKill::layer -> dropped
}

[Client]Game.UI.DlgRatingFive skipped:  filtered
{
	[Client]Game.UI.DlgRatingFive::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRatingFive::CloseHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgRatingFive::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgRatingFive::OnButton_Option1Click[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgRatingFive::OnButton_Option2Click[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgRatingFive::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRatingFive::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgRatingFive::fileName -> dropped
}

[Client]Game.UI.DlgMinimapButton skipped:  filtered
{
	[Client]Game.UI.DlgMinimapButton::Init[0]( ) -> c
	[Client]Game.UI.DlgMinimapButton::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgMinimapButton::OnSpriteMiniMapClick[1]( Game.UI.UICommon.IXUISprite ) -> A

	[Client]Game.UI.DlgMinimapButton::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapButton::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapButton::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMinimapButton::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgMinimapButton::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMinimapButton::layer -> dropped
}

[Client]Game.UI.DlgMask skipped:  filtered
{
	[Client]Game.UI.DlgMask::Init[0]( ) -> c
	[Client]Game.UI.DlgMask::RegisterEvent[0]( ) -> D

	[Client]Game.UI.DlgMask::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMask::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMask::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgMask::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgMask::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgMask::layer -> dropped
}

[Client]Game.UI.DlgIntroduction skipped:  filtered
{
	[Client]Game.UI.DlgIntroduction::Init[0]( ) -> c
	[Client]Game.UI.DlgIntroduction::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgIntroduction::OnButtonOkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgIntroduction::OnButtonCancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgIntroduction::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgIntroduction::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgIntroduction::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgIntroduction::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgIntroduction::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgIntroduction::layer -> dropped
}

[Client]Game.UI.DlgChatQuick skipped:  filtered
{
	[Client]Game.UI.DlgChatQuick::OnShow[0]( ) -> b
	[Client]Game.UI.DlgChatQuick::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgChatQuick::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgChatQuick::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgChatQuick::OnList_CustomClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgChatQuick::OnInputSubmit[1]( Game.UI.UICommon.IXUIInput ) -> A

	[Client]Game.UI.DlgChatQuick::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgChatQuick::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgChatQuick::fileName -> dropped
}

[Client]Game.UI.UICommon.IXUIPopupList skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIPopupList::get_Selection[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPopupList::set_Selection[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPopupList::get_SelectedIndex[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPopupList::set_SelectedIndex[1]( System.Int16 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPopupList::AddItem[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPopupList::AddItem[2]( System.String, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPopupList::GetDataByIndex[1]( System.Int32 ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPopupList::SetText[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPopupList::Clear[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPopupList::RegisterPopupListSelectEventHandler[1]( Game.UI.UICommon.PopupListSelectEventHanler ) skipped:  filtered


	System.String [Client]System.String Game.UI.UICommon.IXUIPopupList::Selection skipped:  filtered
	System.Int16 [Client]System.Int16 Game.UI.UICommon.IXUIPopupList::SelectedIndex skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIPicture skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIPicture::get_UVRect[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPicture::set_UVRect[1]( UnityEngine.Rect ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPicture::get_Alpha[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPicture::set_Alpha[1]( System.Single ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPicture::get_Color[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPicture::set_Color[1]( UnityEngine.Color ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPicture::SetTexture[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPicture::Clear[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIPicture::RegisterPictureClickEventHandler[1]( Game.UI.UICommon.PictureClickEventHandler ) skipped:  filtered


	UnityEngine.Rect [Client]UnityEngine.Rect Game.UI.UICommon.IXUIPicture::UVRect skipped:  filtered
	System.Single [Client]System.Single Game.UI.UICommon.IXUIPicture::Alpha skipped:  filtered
	UnityEngine.Color [Client]UnityEngine.Color Game.UI.UICommon.IXUIPicture::Color skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIListTeamItem skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIListTeamItem::get_Label_Name[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTeamItem::get_Label_Level[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTeamItem::get_Picture_Model[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIListTeamItem::get_Sprite_Leader[0]( ) skipped:  filtered


	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.UICommon.IXUIListTeamItem::Label_Name skipped:  filtered
	Game.UI.UICommon.IXUILabel [Client]Game.UI.UICommon.IXUILabel Game.UI.UICommon.IXUIListTeamItem::Label_Level skipped:  filtered
	Game.UI.UICommon.IXUIPicture [Client]Game.UI.UICommon.IXUIPicture Game.UI.UICommon.IXUIListTeamItem::Picture_Model skipped:  filtered
	Game.UI.UICommon.IXUISprite [Client]Game.UI.UICommon.IXUISprite Game.UI.UICommon.IXUIListTeamItem::Sprite_Leader skipped:  filtered
}

[Client]Game.UI.DlgVip1 skipped:  filtered
{
	[Client]Game.UI.DlgVip1::OnShow[0]( ) -> b
	[Client]Game.UI.DlgVip1::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgVip1::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgVip1::InitPrize[0]( ) -> e
	[Client]Game.UI.DlgVip1::RefreshPrize[0]( ) -> F
	[Client]Game.UI.DlgVip1::RefreshTime[0]( ) -> f
	[Client]Game.UI.DlgVip1::OnVipInformationClick[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgVip1::OnPrizeClick[1]( Game.UI.UICommon.IXUICheckBox ) -> a
	[Client]Game.UI.DlgVip1::OnTimeClick[1]( Game.UI.UICommon.IXUICheckBox ) -> B
	[Client]Game.UI.DlgVip1::OnImageButtonDisposableClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgVip1::OnImageButtonWeekClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgVip1::OnImageButtonDayClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgVip1::OnPayClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgVip1::OnCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> C

	[Client]Game.UI.DlgVip1::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgVip1::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgVip1::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgVip1::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgVip1::layer -> dropped
}

[Client]Game.UI.DlgRichBuy skipped:  filtered
{
	[Client]Game.UI.DlgRichBuy::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRichBuy::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRichBuy::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgRichBuy::OnButton_CancelClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgRichBuy::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRichBuy::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgRichBuy::fileName -> dropped
}

[Client]Game.UI.DlgArenaOffLineRankList skipped:  filtered
{
	[Client]Game.UI.DlgArenaOffLineRankList::OnShow[0]( ) -> b
	[Client]Game.UI.DlgArenaOffLineRankList::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgArenaOffLineRankList::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgArenaOffLineRankList::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgArenaOffLineRankList::OnButton_ChatClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgArenaOffLineRankList::OnButton_FriendClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgArenaOffLineRankList::OnButton_LookClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgArenaOffLineRankList::OnButton_LeftClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgArenaOffLineRankList::OnButton_RightClick[1]( Game.UI.UICommon.IXUIButton ) -> c
	[Client]Game.UI.DlgArenaOffLineRankList::OnButton_LeftToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> D
	[Client]Game.UI.DlgArenaOffLineRankList::OnButton_RightToEndClick[1]( Game.UI.UICommon.IXUIButton ) -> d

	[Client]Game.UI.DlgArenaOffLineRankList::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLineRankList::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgArenaOffLineRankList::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgArenaOffLineRankList::fileName -> dropped
}

[Client]Game.UI.UICommon.IXUIProgress skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIProgress::get_value[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIProgress::set_value[1]( System.Single ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIProgress::get_Color[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIProgress::set_Color[1]( UnityEngine.Color ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIProgress::StartCD[2]( System.Boolean, System.Single ) skipped:  filtered


	System.Single [Client]System.Single Game.UI.UICommon.IXUIProgress::value skipped:  filtered
	UnityEngine.Color [Client]UnityEngine.Color Game.UI.UICommon.IXUIProgress::Color skipped:  filtered
}

[Client]Game.UI.DlgRechargeFirstBlood skipped:  filtered
{
	[Client]Game.UI.DlgRechargeFirstBlood::get_Cleanup[0]( ) -> a
	[Client]Game.UI.DlgRechargeFirstBlood::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRechargeFirstBlood::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRechargeFirstBlood::OnButtonRechargeClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgRechargeFirstBlood::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a

	[Client]Game.UI.DlgRechargeFirstBlood::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRechargeFirstBlood::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRechargeFirstBlood::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgRechargeFirstBlood::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgRechargeFirstBlood::layer -> dropped
	System.Boolean [Client]System.Boolean Game.UI.DlgRechargeFirstBlood::Cleanup -> dropped
}

[Client]Game.UI.DlgPetStarSelect skipped:  filtered
{
	[Client]Game.UI.DlgPetStarSelect::OnShow[0]( ) -> b
	[Client]Game.UI.DlgPetStarSelect::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgPetStarSelect::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgPetStarSelect::OnButton_PetStarOkClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgPetStarSelect::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgPetStarSelect::OnCheckbox_SelectClick[1]( Game.UI.UICommon.IXUICheckBox ) -> A

	[Client]Game.UI.DlgPetStarSelect::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgPetStarSelect::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgPetStarSelect::fileName -> dropped
}

[Client]Game.UI.DlgCombo skipped:  filtered
{
	[Client]Game.UI.DlgCombo::Update[0]( ) -> E

	[Client]Game.UI.DlgCombo::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgCombo::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgCombo::fileName -> dropped
}

[Client]Game.UI.DlgInvitation skipped:  filtered
{
	[Client]Game.UI.DlgInvitation::OnShow[0]( ) -> b
	[Client]Game.UI.DlgInvitation::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgInvitation::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgInvitation::OnButton_OKClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgInvitation::OnList_AwardItemClick[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgInvitation::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgInvitation::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgInvitation::fileName -> dropped
}

[Client]Game.UI.DlgActivityMonsterRanklist skipped:  filtered
{
	[Client]Game.UI.DlgActivityMonsterRanklist::OnShow[0]( ) -> b
	[Client]Game.UI.DlgActivityMonsterRanklist::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgActivityMonsterRanklist::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgActivityMonsterRanklist::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgActivityMonsterRanklist::OnButton_FriendClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgActivityMonsterRanklist::OnButton_LookClick[1]( Game.UI.UICommon.IXUIButton ) -> B

	[Client]Game.UI.DlgActivityMonsterRanklist::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgActivityMonsterRanklist::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgActivityMonsterRanklist::fileName -> dropped
}

[Client]Game.UI.UICommon.IXUISlider skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUISlider::get_value[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISlider::set_value[1]( System.Single ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUISlider::RegisterValueChangeEventHandler[1]( Game.UI.UICommon.SliderValueChangeEventHandler ) skipped:  filtered


	System.Single [Client]System.Single Game.UI.UICommon.IXUISlider::value skipped:  filtered
}

[Client]Game.UI.DlgRichRecord skipped:  filtered
{
	[Client]Game.UI.DlgRichRecord::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRichRecord::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRichRecord::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgRichRecord::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRichRecord::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgRichRecord::fileName -> dropped
}

[Client]Game.UI.DlgGuild skipped:  filtered
{
	[Client]Game.UI.DlgGuild::OnShow[0]( ) -> b
	[Client]Game.UI.DlgGuild::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgGuild::Init[0]( ) -> c
	[Client]Game.UI.DlgGuild::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgGuild::RefreshMemberList[0]( ) -> e
	[Client]Game.UI.DlgGuild::RefreshInfo[0]( ) -> F
	[Client]Game.UI.DlgGuild::OnButtonCloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgGuild::OnButtonAddClick[1]( Game.UI.UICommon.IXUIButton ) -> a
	[Client]Game.UI.DlgGuild::OnButtonApplyClick[1]( Game.UI.UICommon.IXUIButton ) -> B
	[Client]Game.UI.DlgGuild::OnButtonQuitClick[1]( Game.UI.UICommon.IXUIButton ) -> b
	[Client]Game.UI.DlgGuild::OnQuitMessageBoxCallBackEventHandler[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) -> A
	[Client]Game.UI.DlgGuild::OnButtonRecruitClick[1]( Game.UI.UICommon.IXUIButton ) -> C
	[Client]Game.UI.DlgGuild::OnListDoubleClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgGuild::OnInputNoticeChange[1]( Game.UI.UICommon.IXUIInput ) -> A
	[Client]Game.UI.DlgGuild::OnCheckBoxShowCheck[1]( Game.UI.UICommon.IXUICheckBox ) -> A

	[Client]Game.UI.DlgGuild::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuild::get_layer[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuild::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgGuild::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgGuild::fileName -> dropped
	System.Int32 [Client]System.Int32 Game.UI.DlgGuild::layer -> dropped
}

[Client]Game.UI.DlgRichMulti skipped:  filtered
{
	[Client]Game.UI.DlgRichMulti::OnShow[0]( ) -> b
	[Client]Game.UI.DlgRichMulti::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgRichMulti::OnButton_OkClick[1]( Game.UI.UICommon.IXUIButton ) -> A

	[Client]Game.UI.DlgRichMulti::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgRichMulti::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgRichMulti::fileName -> dropped
}

[Client]Game.UI.DlgNpcList skipped:  filtered
{
	[Client]Game.UI.DlgNpcList::OnShow[0]( ) -> b
	[Client]Game.UI.DlgNpcList::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgNpcList::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgNpcList::CompareData[2]( Game.DataNpcList, Game.DataNpcList ) -> A
	[Client]Game.UI.DlgNpcList::OnButton_CloseClick[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgNpcList::OnItemList_NpcClick[1]( Game.UI.UICommon.IXUIListItem ) -> A
	[Client]Game.UI.DlgNpcList::OnCheckbox_FunctionChecked[1]( Game.UI.UICommon.IXUICheckBox ) -> A
	[Client]Game.UI.DlgNpcList::OnCheckbox_TaskChecked[1]( Game.UI.UICommon.IXUICheckBox ) -> a

	[Client]Game.UI.DlgNpcList::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgNpcList::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgNpcList::fileName -> dropped
}

[Client]Game.UI.DlgBuyBack skipped:  filtered
{
	[Client]Game.UI.DlgBuyBack::OnShow[0]( ) -> b
	[Client]Game.UI.DlgBuyBack::RefreshImplement[0]( ) -> C
	[Client]Game.UI.DlgBuyBack::Init[0]( ) -> c
	[Client]Game.UI.DlgBuyBack::RegisterEvent[0]( ) -> D
	[Client]Game.UI.DlgBuyBack::OnButtonClickClose[1]( Game.UI.UICommon.IXUIButton ) -> A
	[Client]Game.UI.DlgBuyBack::OnListClickItem[1]( Game.UI.UICommon.IXUIListItem ) -> A

	[Client]Game.UI.DlgBuyBack::get_fileName[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBuyBack::Reset[0]( ) skipped:  filtered
	[Client]Game.UI.DlgBuyBack::.ctor[0]( ) skipped:  special name

	System.String [Client]System.String Game.UI.DlgBuyBack::fileName -> dropped
}

[Client]Game.UI.UICommon.CheckBoxOnCheckEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.CheckBoxOnCheckEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.CheckBoxOnCheckEventHandler::Invoke[1]( Game.UI.UICommon.IXUICheckBox ) skipped:  filtered
	[Client]Game.UI.UICommon.CheckBoxOnCheckEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUICheckBox, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.CheckBoxOnCheckEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.CheckBoxOnClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.CheckBoxOnClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.CheckBoxOnClickEventHandler::Invoke[1]( Game.UI.UICommon.IXUICheckBox ) skipped:  filtered
	[Client]Game.UI.UICommon.CheckBoxOnClickEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUICheckBox, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.CheckBoxOnClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.XUIPanel skipped:  marked
{

	[Client]Game.UI.UICommon.XUIPanel::get_RelativeSize[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::get_RealSize[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::get_parent[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::set_parent[1]( Game.UI.UICommon.IXUIObject ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::IsVisible[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::OnFocus[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::Init[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::IsMouseIn[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::GetUIObject[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::get_uiDlgInterface[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::get_uiChilds[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::SetVisible[2]( System.Boolean, System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::set_uiDlgInterface[1]( Game.UI.UICommon.IXUIDlg ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::_Update[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::UnLoad[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::OnPress[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::OnPlayAnimFinish[2]( System.Object, System.EventArgs ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::FindUIObjects[3]( UnityEngine.Transform, System.Collections.Generic.Dictionary`2<System.String,XUIObjectBase>&, System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::FindUIObject[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::Start[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::.ctor[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.XUIPanel::Game.UI.UICommon.IXUIObject.get_gameObject[0]( ) skipped:  filtered
}

[Client]XUIObjectBase skipped:  marked
{

	[Client]XUIObjectBase::get_RelativeSize[0]( ) skipped:  filtered
	[Client]XUIObjectBase::get_RealSize[0]( ) skipped:  filtered
	[Client]XUIObjectBase::get_parent[0]( ) skipped:  filtered
	[Client]XUIObjectBase::set_parent[1]( Game.UI.UICommon.IXUIObject ) skipped:  filtered
	[Client]XUIObjectBase::IsVisible[0]( ) skipped:  filtered
	[Client]XUIObjectBase::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]XUIObjectBase::OnFocus[0]( ) skipped:  filtered
	[Client]XUIObjectBase::Init[0]( ) skipped:  filtered
	[Client]XUIObjectBase::IsMouseIn[0]( ) skipped:  filtered
	[Client]XUIObjectBase::GetUIObject[1]( System.String ) skipped:  filtered
	[Client]XUIObjectBase::OnPress[1]( System.Boolean ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::UnLoad[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::OnAwake[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::OnStart[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::OnUpdate[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::Awake[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::Start[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::Update[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::_Update[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::Game.UI.UICommon.IXUIObject.get_gameObject[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]XUIObjectBase::.cctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgBuyBagBehaviour skipped:  marked
{

	[Client]DlgBuyBagBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgBuyBagBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgBuyBagBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgEquipSoulBehaviour skipped:  marked
{

	[Client]DlgEquipSoulBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgEquipSoulBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgEquipSoulBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFreeTalkBehaviour skipped:  marked
{

	[Client]DlgFreeTalkBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFreeTalkBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFreeTalkBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFriendHelpInstructionBehaviour skipped:  marked
{

	[Client]DlgFriendHelpInstructionBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFriendHelpInstructionBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFriendHelpInstructionBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMapLoadingBehaviour skipped:  marked
{

	[Client]DlgMapLoadingBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMapLoadingBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMapLoadingBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMeBehaviour skipped:  marked
{

	[Client]DlgMeBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMeBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMeBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgNpcListBehaviour skipped:  marked
{

	[Client]DlgNpcListBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgNpcListBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgNpcListBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShortcutButtonPhoneBehaviour skipped:  marked
{

	[Client]DlgShortcutButtonPhoneBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShortcutButtonPhoneBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShortcutButtonPhoneBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTaskBehaviour skipped:  marked
{

	[Client]DlgTaskBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTaskBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTaskBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFogBehaviour skipped:  marked
{

	[Client]DlgFogBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFogBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFogBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuide3Behaviour skipped:  marked
{

	[Client]DlgGuide3Behaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuide3Behaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuide3Behaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuildAppointBehaviour skipped:  marked
{

	[Client]DlgGuildAppointBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuildAppointBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuildAppointBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuildInviteBehaviour skipped:  marked
{

	[Client]DlgGuildInviteBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuildInviteBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuildInviteBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMagicRecipeBehaviour skipped:  marked
{

	[Client]DlgMagicRecipeBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMagicRecipeBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMagicRecipeBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMinimapButtonBehaviour skipped:  marked
{

	[Client]DlgMinimapButtonBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMinimapButtonBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMinimapButtonBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetAttributeBehaviour skipped:  marked
{

	[Client]DlgPetAttributeBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetAttributeBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetAttributeBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetSkillHoleBehaviour skipped:  marked
{

	[Client]DlgPetSkillHoleBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetSkillHoleBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetSkillHoleBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRechargeFirstBloodBehaviour skipped:  marked
{

	[Client]DlgRechargeFirstBloodBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRechargeFirstBloodBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRechargeFirstBloodBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRichBuyBehaviour skipped:  marked
{

	[Client]DlgRichBuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRichBuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRichBuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRichSpecial2Behaviour skipped:  marked
{

	[Client]DlgRichSpecial2Behaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRichSpecial2Behaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRichSpecial2Behaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShipExplorationUpgradeBehaviour skipped:  marked
{

	[Client]DlgShipExplorationUpgradeBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShipExplorationUpgradeBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShipExplorationUpgradeBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShopNPCBehaviour skipped:  marked
{

	[Client]DlgShopNPCBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShopNPCBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShopNPCBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMainBehaviour skipped:  marked
{

	[Client]DlgMainBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMainBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMainBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgActivityMonsterRanklistBehaviour skipped:  marked
{

	[Client]DlgActivityMonsterRanklistBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgActivityMonsterRanklistBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgActivityMonsterRanklistBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgArenaOffLineRankListBehaviour skipped:  marked
{

	[Client]DlgArenaOffLineRankListBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgArenaOffLineRankListBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgArenaOffLineRankListBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAuctionCancelBehaviour skipped:  marked
{

	[Client]DlgAuctionCancelBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAuctionCancelBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAuctionCancelBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAwardCardBehaviour skipped:  marked
{

	[Client]DlgAwardCardBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAwardCardBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAwardCardBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgJoyStick1PhoneBehaviour skipped:  marked
{

	[Client]DlgJoyStick1PhoneBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgJoyStick1PhoneBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgJoyStick1PhoneBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgJoyStick2Behaviour skipped:  marked
{

	[Client]DlgJoyStick2Behaviour::Init[0]( ) skipped:  filtered
	[Client]DlgJoyStick2Behaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgJoyStick2Behaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgKillBehaviour skipped:  marked
{

	[Client]DlgKillBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgKillBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgKillBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMailReceiveBehaviour skipped:  marked
{

	[Client]DlgMailReceiveBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMailReceiveBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMailReceiveBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetStarBehaviour skipped:  marked
{

	[Client]DlgPetStarBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetStarBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetStarBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPlayerCreateBehaviour skipped:  marked
{

	[Client]DlgPlayerCreateBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPlayerCreateBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPlayerCreateBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPlayerSelectBehaviour skipped:  marked
{

	[Client]DlgPlayerSelectBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPlayerSelectBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPlayerSelectBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPrizeBehaviour skipped:  marked
{

	[Client]DlgPrizeBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPrizeBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPrizeBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRatingFiveBehaviour skipped:  marked
{

	[Client]DlgRatingFiveBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRatingFiveBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRatingFiveBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRichMultiBehaviour skipped:  marked
{

	[Client]DlgRichMultiBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRichMultiBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRichMultiBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShipExplorationAreaBehaviour skipped:  marked
{

	[Client]DlgShipExplorationAreaBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShipExplorationAreaBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShipExplorationAreaBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgVip1Behaviour skipped:  marked
{

	[Client]DlgVip1Behaviour::Init[0]( ) skipped:  filtered
	[Client]DlgVip1Behaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgVip1Behaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgChatBehaviour skipped:  marked
{

	[Client]DlgChatBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgChatBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgChatBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuildApplyListBehaviour skipped:  marked
{

	[Client]DlgGuildApplyListBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuildApplyListBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuildApplyListBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgInputNumberBehaviour skipped:  marked
{

	[Client]DlgInputNumberBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgInputNumberBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgInputNumberBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgLoginNewBehaviour skipped:  marked
{

	[Client]DlgLoginNewBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgLoginNewBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgLoginNewBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgLogoBehaviour skipped:  marked
{

	[Client]DlgLogoBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgLogoBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgLogoBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRechargeBehaviour skipped:  marked
{

	[Client]DlgRechargeBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRechargeBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRechargeBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRichInfoBehaviour skipped:  marked
{

	[Client]DlgRichInfoBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRichInfoBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRichInfoBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShipExplorationRoleAttrBehaviour skipped:  marked
{

	[Client]DlgShipExplorationRoleAttrBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShipExplorationRoleAttrBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShipExplorationRoleAttrBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTeamBehaviour skipped:  marked
{

	[Client]DlgTeamBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTeamBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTeamBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgActivityMonsterBuyBehaviour skipped:  marked
{

	[Client]DlgActivityMonsterBuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgActivityMonsterBuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgActivityMonsterBuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgChatBubblePhoneBehaviour skipped:  marked
{

	[Client]DlgChatBubblePhoneBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgChatBubblePhoneBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgChatBubblePhoneBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFriendInformationBehaviour skipped:  marked
{

	[Client]DlgFriendInformationBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFriendInformationBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFriendInformationBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgListActBehaviour skipped:  marked
{

	[Client]DlgListActBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgListActBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgListActBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetBehaviour skipped:  marked
{

	[Client]DlgPetBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetFunctionBehaviour skipped:  marked
{

	[Client]DlgPetFunctionBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetFunctionBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetFunctionBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRichBehaviour skipped:  marked
{

	[Client]DlgRichBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRichBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRichBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRichRecordBehaviour skipped:  marked
{

	[Client]DlgRichRecordBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRichRecordBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRichRecordBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgSeePlayerBehaviour skipped:  marked
{

	[Client]DlgSeePlayerBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgSeePlayerBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgSeePlayerBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgWorldMapBehaviour skipped:  marked
{

	[Client]DlgWorldMapBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgWorldMapBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgWorldMapBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgComboBehaviour skipped:  marked
{

	[Client]DlgComboBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgComboBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgComboBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgEctypeRatingBehaviour skipped:  marked
{

	[Client]DlgEctypeRatingBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgEctypeRatingBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgEctypeRatingBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFriendHelpBehaviour skipped:  marked
{

	[Client]DlgFriendHelpBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFriendHelpBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFriendHelpBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFunctionSystemBehaviour skipped:  marked
{

	[Client]DlgFunctionSystemBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFunctionSystemBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFunctionSystemBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuildBeInvitedBehaviour skipped:  marked
{

	[Client]DlgGuildBeInvitedBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuildBeInvitedBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuildBeInvitedBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuildMemberInformationBehaviour skipped:  marked
{

	[Client]DlgGuildMemberInformationBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuildMemberInformationBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuildMemberInformationBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetRestoreBehaviour skipped:  marked
{

	[Client]DlgPetRestoreBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetRestoreBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetRestoreBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShopBehaviour skipped:  marked
{

	[Client]DlgShopBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShopBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShopBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShopNpcBuyBehaviour skipped:  marked
{

	[Client]DlgShopNpcBuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShopNpcBuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShopNpcBuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTeamApplyListBehaviour skipped:  marked
{

	[Client]DlgTeamApplyListBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTeamApplyListBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTeamApplyListBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgVip1BuyBehaviour skipped:  marked
{

	[Client]DlgVip1BuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgVip1BuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgVip1BuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]Dlg_MessageBoxBehaviour skipped:  marked
{

	[Client]Dlg_MessageBoxBehaviour::Init[0]( ) skipped:  filtered
	[Client]Dlg_MessageBoxBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]Dlg_MessageBoxBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgArenaInfoBehaviour skipped:  marked
{

	[Client]DlgArenaInfoBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgArenaInfoBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgArenaInfoBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAuctionMoneyCancelBehaviour skipped:  marked
{

	[Client]DlgAuctionMoneyCancelBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAuctionMoneyCancelBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAuctionMoneyCancelBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgCDKeyBehaviour skipped:  marked
{

	[Client]DlgCDKeyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgCDKeyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgCDKeyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgChatBubbleBehaviour skipped:  marked
{

	[Client]DlgChatBubbleBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgChatBubbleBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgChatBubbleBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgEquipIntensifyBehaviour skipped:  marked
{

	[Client]DlgEquipIntensifyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgEquipIntensifyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgEquipIntensifyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgEquipTransBehaviour skipped:  marked
{

	[Client]DlgEquipTransBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgEquipTransBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgEquipTransBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFAQBehaviour skipped:  marked
{

	[Client]DlgFAQBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFAQBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFAQBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFunctionRoleBehaviour skipped:  marked
{

	[Client]DlgFunctionRoleBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFunctionRoleBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFunctionRoleBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRichSpecial1Behaviour skipped:  marked
{

	[Client]DlgRichSpecial1Behaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRichSpecial1Behaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRichSpecial1Behaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShipExplorationBehaviour skipped:  marked
{

	[Client]DlgShipExplorationBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShipExplorationBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShipExplorationBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShipExplorationEnterBehaviour skipped:  marked
{

	[Client]DlgShipExplorationEnterBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShipExplorationEnterBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShipExplorationEnterBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShopBuyBehaviour skipped:  marked
{

	[Client]DlgShopBuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShopBuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShopBuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTargetPetBehaviour skipped:  marked
{

	[Client]DlgTargetPetBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTargetPetBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTargetPetBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetSkillBehaviour skipped:  marked
{

	[Client]DlgPetSkillBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetSkillBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetSkillBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPKListBehaviour skipped:  marked
{

	[Client]DlgPKListBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPKListBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPKListBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShipExplorationMemberInfoBehaviour skipped:  marked
{

	[Client]DlgShipExplorationMemberInfoBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShipExplorationMemberInfoBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShipExplorationMemberInfoBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgSystemBehaviour skipped:  marked
{

	[Client]DlgSystemBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgSystemBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgSystemBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgSystemEffectBehaviour skipped:  marked
{

	[Client]DlgSystemEffectBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgSystemEffectBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgSystemEffectBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAFKExitBehaviour skipped:  marked
{

	[Client]DlgAFKExitBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAFKExitBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAFKExitBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgBagBehaviour skipped:  marked
{

	[Client]DlgBagBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgBagBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgBagBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgHeadInfoBehaviour skipped:  marked
{

	[Client]DlgHeadInfoBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgHeadInfoBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgHeadInfoBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgJoyStick1Behaviour skipped:  marked
{

	[Client]DlgJoyStick1Behaviour::Init[0]( ) skipped:  filtered
	[Client]DlgJoyStick1Behaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgJoyStick1Behaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFriendListBehaviour skipped:  marked
{

	[Client]DlgFriendListBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFriendListBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFriendListBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFunctionSocialBehaviour skipped:  marked
{

	[Client]DlgFunctionSocialBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFunctionSocialBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFunctionSocialBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuide1Behaviour skipped:  marked
{

	[Client]DlgGuide1Behaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuide1Behaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuide1Behaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgIntroductionBehaviour skipped:  marked
{

	[Client]DlgIntroductionBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgIntroductionBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgIntroductionBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgInvitationBehaviour skipped:  marked
{

	[Client]DlgInvitationBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgInvitationBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgInvitationBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMinimapRadarPhoneBehaviour skipped:  marked
{

	[Client]DlgMinimapRadarPhoneBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMinimapRadarPhoneBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMinimapRadarPhoneBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgSkillStudyBehaviour skipped:  marked
{

	[Client]DlgSkillStudyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgSkillStudyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgSkillStudyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgSuccessBehaviour skipped:  marked
{

	[Client]DlgSuccessBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgSuccessBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgSuccessBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTargetBehaviour skipped:  marked
{

	[Client]DlgTargetBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTargetBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTargetBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgArenaOffLineBuyBehaviour skipped:  marked
{

	[Client]DlgArenaOffLineBuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgArenaOffLineBuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgArenaOffLineBuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgArenaOffLineResultBehaviour skipped:  marked
{

	[Client]DlgArenaOffLineResultBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgArenaOffLineResultBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgArenaOffLineResultBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgBattleHelperBehaviour skipped:  marked
{

	[Client]DlgBattleHelperBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgBattleHelperBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgBattleHelperBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgReviveBehaviour skipped:  marked
{

	[Client]DlgReviveBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgReviveBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgReviveBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgSingBehaviour skipped:  marked
{

	[Client]DlgSingBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgSingBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgSingBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAuctionBuyBehaviour skipped:  marked
{

	[Client]DlgAuctionBuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAuctionBuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAuctionBuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgEctypeDFBehaviour skipped:  marked
{

	[Client]DlgEctypeDFBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgEctypeDFBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgEctypeDFBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuildBuildBehaviour skipped:  marked
{

	[Client]DlgGuildBuildBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuildBuildBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuildBuildBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMailListBehaviour skipped:  marked
{

	[Client]DlgMailListBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMailListBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMailListBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetIntensifyBehaviour skipped:  marked
{

	[Client]DlgPetIntensifyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetIntensifyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetIntensifyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetRebornBehaviour skipped:  marked
{

	[Client]DlgPetRebornBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetRebornBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetRebornBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgReloginBehaviour skipped:  marked
{

	[Client]DlgReloginBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgReloginBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgReloginBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuildRecruitmentBehaviour skipped:  marked
{

	[Client]DlgGuildRecruitmentBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuildRecruitmentBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuildRecruitmentBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgCompensateBehaviour skipped:  marked
{

	[Client]DlgCompensateBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgCompensateBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgCompensateBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgBuyBackBehaviour skipped:  marked
{

	[Client]DlgBuyBackBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgBuyBackBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgBuyBackBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgActivityBehaviour skipped:  marked
{

	[Client]DlgActivityBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgActivityBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgActivityBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgUpdateInfoBehaviour skipped:  marked
{

	[Client]DlgUpdateInfoBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgUpdateInfoBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgUpdateInfoBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTargetPhoneBehaviour skipped:  marked
{

	[Client]DlgTargetPhoneBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTargetPhoneBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTargetPhoneBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShipExplorationSkillBehaviour skipped:  marked
{

	[Client]DlgShipExplorationSkillBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShipExplorationSkillBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShipExplorationSkillBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetStarSelectBehaviour skipped:  marked
{

	[Client]DlgPetStarSelectBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetStarSelectBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetStarSelectBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMinimapRadarBehaviour skipped:  marked
{

	[Client]DlgMinimapRadarBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMinimapRadarBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMinimapRadarBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMinimapBehaviour skipped:  marked
{

	[Client]DlgMinimapBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMinimapBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMinimapBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFashionBehaviour skipped:  marked
{

	[Client]DlgFashionBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFashionBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFashionBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMaskBehaviour skipped:  marked
{

	[Client]DlgMaskBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMaskBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMaskBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMagicBoxBehaviour skipped:  marked
{

	[Client]DlgMagicBoxBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMagicBoxBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMagicBoxBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgHelpInfoBehaviour skipped:  marked
{

	[Client]DlgHelpInfoBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgHelpInfoBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgHelpInfoBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgEctypeInfoBehaviour skipped:  marked
{

	[Client]DlgEctypeInfoBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgEctypeInfoBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgEctypeInfoBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgConnectBehaviour skipped:  marked
{

	[Client]DlgConnectBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgConnectBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgConnectBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgChatQuickBehaviour skipped:  marked
{

	[Client]DlgChatQuickBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgChatQuickBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgChatQuickBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAFKBuyBehaviour skipped:  marked
{

	[Client]DlgAFKBuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAFKBuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAFKBuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAFKBehaviour skipped:  marked
{

	[Client]DlgAFKBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAFKBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAFKBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgStorageBehaviour skipped:  marked
{

	[Client]DlgStorageBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgStorageBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgStorageBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgSeeShipBehaviour skipped:  marked
{

	[Client]DlgSeeShipBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgSeeShipBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgSeeShipBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetStarFatigueBuyBehaviour skipped:  marked
{

	[Client]DlgPetStarFatigueBuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetStarFatigueBuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetStarFatigueBuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetRebornSelectBehaviour skipped:  marked
{

	[Client]DlgPetRebornSelectBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetRebornSelectBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetRebornSelectBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgInstallBehaviour skipped:  marked
{

	[Client]DlgInstallBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgInstallBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgInstallBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGetSeniorEquipBehaviour skipped:  marked
{

	[Client]DlgGetSeniorEquipBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGetSeniorEquipBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGetSeniorEquipBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFriendHelpMinBehaviour skipped:  marked
{

	[Client]DlgFriendHelpMinBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFriendHelpMinBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFriendHelpMinBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgFlyTextBehaviour skipped:  marked
{

	[Client]DlgFlyTextBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgFlyTextBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgFlyTextBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgEquipFunctionBehaviour skipped:  marked
{

	[Client]DlgEquipFunctionBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgEquipFunctionBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgEquipFunctionBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgEctypeAwardBehaviour skipped:  marked
{

	[Client]DlgEctypeAwardBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgEctypeAwardBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgEctypeAwardBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgChatFunctionBehaviour skipped:  marked
{

	[Client]DlgChatFunctionBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgChatFunctionBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgChatFunctionBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgChangeLineBehaviour skipped:  marked
{

	[Client]DlgChangeLineBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgChangeLineBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgChangeLineBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgArenaOffLineStartBehaviour skipped:  marked
{

	[Client]DlgArenaOffLineStartBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgArenaOffLineStartBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgArenaOffLineStartBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTipEquipStrBehaviour skipped:  marked
{

	[Client]DlgTipEquipStrBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTipEquipStrBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTipEquipStrBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTargetFunctionBehaviour skipped:  marked
{

	[Client]DlgTargetFunctionBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTargetFunctionBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTargetFunctionBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShortcutButtonBehaviour skipped:  marked
{

	[Client]DlgShortcutButtonBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShortcutButtonBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShortcutButtonBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgRankingListBehaviour skipped:  marked
{

	[Client]DlgRankingListBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgRankingListBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgRankingListBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgNoviceHelpBehaviour skipped:  marked
{

	[Client]DlgNoviceHelpBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgNoviceHelpBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgNoviceHelpBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMePhoneBehaviour skipped:  marked
{

	[Client]DlgMePhoneBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMePhoneBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMePhoneBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGemInlayBehaviour skipped:  marked
{

	[Client]DlgGemInlayBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGemInlayBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGemInlayBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgChatPhoneBehaviour skipped:  marked
{

	[Client]DlgChatPhoneBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgChatPhoneBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgChatPhoneBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAuctionMoneyBehaviour skipped:  marked
{

	[Client]DlgAuctionMoneyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAuctionMoneyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAuctionMoneyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAttributeBehaviour skipped:  marked
{

	[Client]DlgAttributeBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAttributeBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAttributeBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTipBehaviour skipped:  marked
{

	[Client]DlgTipBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTipBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTipBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgBasePropertyBehaviour skipped:  marked
{

	[Client]DlgBasePropertyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgBasePropertyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgBasePropertyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShipExplorationAwardBehaviour skipped:  marked
{

	[Client]DlgShipExplorationAwardBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShipExplorationAwardBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShipExplorationAwardBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetSkillStudyBehaviour skipped:  marked
{

	[Client]DlgPetSkillStudyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetSkillStudyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetSkillStudyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgNpcTalkBehaviour skipped:  marked
{

	[Client]DlgNpcTalkBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgNpcTalkBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgNpcTalkBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgMailMoneyBehaviour skipped:  marked
{

	[Client]DlgMailMoneyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgMailMoneyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgMailMoneyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuildBehaviour skipped:  marked
{

	[Client]DlgGuildBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuildBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuildBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuide2Behaviour skipped:  marked
{

	[Client]DlgGuide2Behaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuide2Behaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuide2Behaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAuctionMoneySellBehaviour skipped:  marked
{

	[Client]DlgAuctionMoneySellBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAuctionMoneySellBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAuctionMoneySellBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAuctionMoneyBuyBehaviour skipped:  marked
{

	[Client]DlgAuctionMoneyBuyBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAuctionMoneyBuyBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAuctionMoneyBuyBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgActMonsterInfoBehaviour skipped:  marked
{

	[Client]DlgActMonsterInfoBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgActMonsterInfoBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgActMonsterInfoBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAuctionSellBehaviour skipped:  marked
{

	[Client]DlgAuctionSellBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAuctionSellBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAuctionSellBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgArenaOffLineBehaviour skipped:  marked
{

	[Client]DlgArenaOffLineBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgArenaOffLineBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgArenaOffLineBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgTaskRouteBehaviour skipped:  marked
{

	[Client]DlgTaskRouteBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgTaskRouteBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgTaskRouteBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgShipExplorationGachaBehaviour skipped:  marked
{

	[Client]DlgShipExplorationGachaBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgShipExplorationGachaBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgShipExplorationGachaBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgSeePetBehaviour skipped:  marked
{

	[Client]DlgSeePetBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgSeePetBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgSeePetBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetSelectMaterialBehaviour skipped:  marked
{

	[Client]DlgPetSelectMaterialBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetSelectMaterialBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetSelectMaterialBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgPetSelectBehaviour skipped:  marked
{

	[Client]DlgPetSelectBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgPetSelectBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgPetSelectBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgListSfxBehaviour skipped:  marked
{

	[Client]DlgListSfxBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgListSfxBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgListSfxBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgJoyStick2PhoneBehaviour skipped:  marked
{

	[Client]DlgJoyStick2PhoneBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgJoyStick2PhoneBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgJoyStick2PhoneBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgGuildListBehaviour skipped:  marked
{

	[Client]DlgGuildListBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgGuildListBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgGuildListBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgChatMainBehaviour skipped:  marked
{

	[Client]DlgChatMainBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgChatMainBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgChatMainBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgAuctionBehaviour skipped:  marked
{

	[Client]DlgAuctionBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgAuctionBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgAuctionBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]DlgActivityMonsterBehaviour skipped:  marked
{

	[Client]DlgActivityMonsterBehaviour::Init[0]( ) skipped:  filtered
	[Client]DlgActivityMonsterBehaviour::HandleNullException[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]DlgActivityMonsterBehaviour::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]Game.UI.IDlgDynamic skipped:  filtered
{
	[Client]Game.UI.IDlgDynamic::Refresh[0]( ) -> B

	[Client]Game.UI.IDlgDynamic::SetVisible[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.IDlgDynamic::IsVisible[0]( ) skipped:  filtered
}

[Client]Game.UI.IDlgShortcutButtonDynamic skipped:  filtered
{
	[Client]Game.UI.IDlgShortcutButtonDynamic::AddItem[1]( System.UInt64 ) -> A
	[Client]Game.UI.IDlgShortcutButtonDynamic::SetSkill[1]( System.UInt32 ) -> A
	[Client]Game.UI.IDlgShortcutButtonDynamic::OnEquipButtonClickHandler[1]( System.Boolean ) -> A
}

[Client]Game.UI.IDlgMeDynamic skipped:  filtered
{
	[Client]Game.UI.IDlgMeDynamic::RefreshMailCount[0]( ) -> A
	[Client]Game.UI.IDlgMeDynamic::ShowFireId[1]( System.UInt32 ) -> A
	[Client]Game.UI.IDlgMeDynamic::RefreshCompensateButtonState[0]( ) -> a
	[Client]Game.UI.IDlgMeDynamic::RefreshFirstBloodButtonState[0]( ) -> B
	[Client]Game.UI.IDlgMeDynamic::RefreshBuffList[0]( ) -> d
	[Client]Game.UI.IDlgMeDynamic::RefreshFPS[1]( System.String ) -> A
	[Client]Game.UI.IDlgMeDynamic::SetStatus[1]( System.Int32 ) -> A
}

[Client]Game.UI.DlgTargetDynamic skipped:  filtered
{
	[Client]Game.UI.DlgTargetDynamic::GetDlgDynamicInterface[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgTargetDynamic::Refresh[0]( ) -> A

	[Client]Game.UI.DlgTargetDynamic::.ctor[0]( ) skipped:  special name
}

[Client]Game.UI.DlgMinimapRadarDynamic skipped:  filtered
{
	[Client]Game.UI.DlgMinimapRadarDynamic::GetDlgDynamicInterface[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgMinimapRadarDynamic::ChangeMap[1]( System.Int32 ) -> A
	[Client]Game.UI.DlgMinimapRadarDynamic::SetAngleY[1]( System.Single ) -> A
	[Client]Game.UI.DlgMinimapRadarDynamic::Refresh[0]( ) -> A

	[Client]Game.UI.DlgMinimapRadarDynamic::.ctor[0]( ) skipped:  special name
}

[Client]Game.UI.DlgChatDynamic skipped:  filtered
{
	[Client]Game.UI.DlgChatDynamic::GetDlgDynamicInterface[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgChatDynamic::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.DlgChatDynamic::IsChanelEnable[1]( Game.Msg.EChatType ) -> A
	[Client]Game.UI.DlgChatDynamic::AddInput[1]( System.String ) -> A
	[Client]Game.UI.DlgChatDynamic::SendChat[2]( System.String, Game.Msg.EChatType ) -> A
	[Client]Game.UI.DlgChatDynamic::ChangePrivateChat[1]( System.String ) -> a
	[Client]Game.UI.DlgChatDynamic::ParseChatData[1]( Game.Logic.ChatData ) -> a
	[Client]Game.UI.DlgChatDynamic::Refresh[0]( ) -> A

	[Client]Game.UI.DlgChatDynamic::.ctor[0]( ) skipped:  special name
}

[Client]Game.UI.DlgShortcutButtonDynamic skipped:  filtered
{
	[Client]Game.UI.DlgShortcutButtonDynamic::GetDlgDynamicInterface[1]( System.Boolean ) -> A
	[Client]Game.UI.DlgShortcutButtonDynamic::AddItem[1]( System.UInt64 ) -> A
	[Client]Game.UI.DlgShortcutButtonDynamic::SetSkill[1]( System.UInt32 ) -> A
	[Client]Game.UI.DlgShortcutButtonDynamic::OnEquipButtonClickHandler[1]( System.Boolean ) -> a
	[Client]Game.UI.DlgShortcutButtonDynamic::Refresh[0]( ) -> A

	[Client]Game.UI.DlgShortcutButtonDynamic::.ctor[0]( ) skipped:  special name
}

[Client]Game.UI.IDlgJoyStick2Dynamic skipped:  filtered
{
	[Client]Game.UI.IDlgJoyStick2Dynamic::OpenExpedition[0]( ) -> A
	[Client]Game.UI.IDlgJoyStick2Dynamic::InformExpedition[0]( ) -> a
	[Client]Game.UI.IDlgJoyStick2Dynamic::InformNewMail[0]( ) -> B
	[Client]Game.UI.IDlgJoyStick2Dynamic::RefreshOnlineAwardTime[1]( System.TimeSpan ) -> A
	[Client]Game.UI.IDlgJoyStick2Dynamic::RefreshAwardNum[0]( ) -> d
	[Client]Game.UI.IDlgJoyStick2Dynamic::RefreshActivityNum[0]( ) -> e
	[Client]Game.UI.IDlgJoyStick2Dynamic::UpdateSkillSprite[0]( ) -> F
	[Client]Game.UI.IDlgJoyStick2Dynamic::UpdateItemIcon[0]( ) -> f
	[Client]Game.UI.IDlgJoyStick2Dynamic::SetMode[1]( System.Int32 ) -> A
	[Client]Game.UI.IDlgJoyStick2Dynamic::JoyButtonA[0]( ) -> G
	[Client]Game.UI.IDlgJoyStick2Dynamic::JoyButtonB[0]( ) -> g
	[Client]Game.UI.IDlgJoyStick2Dynamic::JoyButtonX[0]( ) -> H
	[Client]Game.UI.IDlgJoyStick2Dynamic::JoyButtonY[0]( ) -> h
	[Client]Game.UI.IDlgJoyStick2Dynamic::JoyButtonAX[0]( ) -> I
	[Client]Game.UI.IDlgJoyStick2Dynamic::JoyButtonR1[0]( ) -> i
	[Client]Game.UI.IDlgJoyStick2Dynamic::SetStatus[1]( System.Int32 ) -> a
}

[Client]AnimationConfig skipped:  marked
{

	[Client]AnimationConfig::get_HurtFreezePointTime[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AnimationConfig::OnTriggerEnter[1]( UnityEngine.Collider ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AnimationConfig::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]AnimationEffect skipped:  marked
{

	[Client]AnimationEffect::GetIndex[1]( System.String ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AnimationEffect::StartAnimation[1]( System.String ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AnimationEffect::StopAnimation[1]( System.String ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AnimationEffect::StopAll[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AnimationEffect::UpdateAnimation[1]( System.String ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AnimationEffect::Update[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AnimationEffect::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]Game.UI.UICommon.SpriteClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.SpriteClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.SpriteClickEventHandler::Invoke[1]( Game.UI.UICommon.IXUISprite ) skipped:  filtered
	[Client]Game.UI.UICommon.SpriteClickEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUISprite, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.SpriteClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.SpritePressEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.SpritePressEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.SpritePressEventHandler::Invoke[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.SpritePressEventHandler::BeginInvoke[3]( System.Boolean, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.SpritePressEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.SpriteDragEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.SpriteDragEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.SpriteDragEventHandler::Invoke[1]( UnityEngine.Vector2 ) skipped:  filtered
	[Client]Game.UI.UICommon.SpriteDragEventHandler::BeginInvoke[3]( UnityEngine.Vector2, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.SpriteDragEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.DlgWorldMap/TransferFinishEventHandler skipped:  filtered
{

	[Client]Game.UI.DlgWorldMap/TransferFinishEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]Game.UI.DlgWorldMap/TransferFinishEventHandler::Invoke[0]( ) skipped:  runtime method
	[Client]Game.UI.DlgWorldMap/TransferFinishEventHandler::BeginInvoke[2]( System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]Game.UI.DlgWorldMap/TransferFinishEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]Game.UI.UICommon.IXUIDynamicLabel skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIDynamicLabel::SetText[2]( System.String, System.Single ) skipped:  filtered
}

[Client]Game.UI.IDlgChatDynamic skipped:  filtered
{
	[Client]Game.UI.IDlgChatDynamic::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.IDlgChatDynamic::IsChanelEnable[1]( Game.Msg.EChatType ) -> A
	[Client]Game.UI.IDlgChatDynamic::AddInput[1]( System.String ) -> A
	[Client]Game.UI.IDlgChatDynamic::SendChat[2]( System.String, Game.Msg.EChatType ) -> A
	[Client]Game.UI.IDlgChatDynamic::ChangePrivateChat[1]( System.String ) -> a
	[Client]Game.UI.IDlgChatDynamic::ParseChatData[1]( Game.Logic.ChatData ) -> a
}

[Client]Game.UI.UICommon.ScrollBarChangeEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.ScrollBarChangeEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ScrollBarChangeEventHandler::Invoke[1]( Game.UI.UICommon.IXUIScrollBar ) skipped:  filtered
	[Client]Game.UI.UICommon.ScrollBarChangeEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUIScrollBar, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ScrollBarChangeEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.ScrollBarDragFinishedEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.ScrollBarDragFinishedEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ScrollBarDragFinishedEventHandler::Invoke[1]( Game.UI.UICommon.IXUIScrollBar ) skipped:  filtered
	[Client]Game.UI.UICommon.ScrollBarDragFinishedEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUIScrollBar, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ScrollBarDragFinishedEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.IDlgMinimapRadarDynamic skipped:  filtered
{
	[Client]Game.UI.IDlgMinimapRadarDynamic::ChangeMap[1]( System.Int32 ) -> A
	[Client]Game.UI.IDlgMinimapRadarDynamic::SetAngleY[1]( System.Single ) -> A
}

[Client]Game.UI.IFlyTextManager skipped:  filtered
{
	[Client]Game.UI.IFlyTextManager::Add[1]( System.String ) -> A
	[Client]Game.UI.IFlyTextManager::Add[2]( System.String, Game.Character ) -> A
	[Client]Game.UI.IFlyTextManager::Update[0]( ) -> A
}

[Client]Game.UI.BCFlyTextManager skipped:  filtered
{
	[Client]Game.UI.BCFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A
	[Client]Game.UI.BCFlyTextManager::Translate[2]( Game.UI.FlyTextEntity&, System.Single ) -> A

	[Client]Game.UI.BCFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name
}

[Client]Game.UI.SystemInfoFlyTextManager skipped:  filtered
{
	[Client]Game.UI.SystemInfoFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A
	[Client]Game.UI.SystemInfoFlyTextManager::Translate[2]( Game.UI.FlyTextEntity&, System.Single ) -> A

	[Client]Game.UI.SystemInfoFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name
}

[Client]Game.UI.DodgeFlyTextManager skipped:  filtered
{
	[Client]Game.UI.DodgeFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A

	[Client]Game.UI.DodgeFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name
}

[Client]Game.UI.CureFlyTextManager skipped:  filtered
{
	[Client]Game.UI.CureFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A

	[Client]Game.UI.CureFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name
}

[Client]Game.UI.WardOffFlyTextManager skipped:  filtered
{
	[Client]Game.UI.WardOffFlyTextManager::InitFlyText[3]( Game.UI.FlyTextEntity, System.String, Game.Character ) -> A

	[Client]Game.UI.WardOffFlyTextManager::.ctor[1]( Game.UI.UICommon.IXUIList ) skipped:  special name
}

[Client]Game.UI.IDlgChatBubbleDynamic skipped:  filtered
{
	[Client]Game.UI.IDlgChatBubbleDynamic::AddChat[1]( Game.Logic.ChatData ) -> A
	[Client]Game.UI.IDlgChatBubbleDynamic::SetStatus[1]( System.Int32 ) -> A
}

[Client]Game.UI.UICommon.ListOnSelectEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.ListOnSelectEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnSelectEventHandler::Invoke[1]( Game.UI.UICommon.IXUIListItem ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnSelectEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUIListItem, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnSelectEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.ListOnClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.ListOnClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnClickEventHandler::Invoke[1]( Game.UI.UICommon.IXUIListItem ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnClickEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUIListItem, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.ListOnDoubleClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.ListOnDoubleClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnDoubleClickEventHandler::Invoke[1]( Game.UI.UICommon.IXUIListItem ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnDoubleClickEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUIListItem, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnDoubleClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.ListOnRepositionEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.ListOnRepositionEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnRepositionEventHandler::Invoke[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnRepositionEventHandler::BeginInvoke[2]( System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnRepositionEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.ListOnRecenterFinished skipped:  filtered
{

	[Client]Game.UI.UICommon.ListOnRecenterFinished::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnRecenterFinished::Invoke[1]( Game.UI.UICommon.IXUIListItem ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnRecenterFinished::BeginInvoke[3]( Game.UI.UICommon.IXUIListItem, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ListOnRecenterFinished::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIEventHandler::OnPress[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIEventHandler::OnClick[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIEventHandler::OnUIObjectAdd[1]( Game.UI.UICommon.IXUIObject ) skipped:  filtered
}

[Client]Game.UI.UICommon.DynamicListOnSelectEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.DynamicListOnSelectEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.DynamicListOnSelectEventHandler::Invoke[1]( UnityEngine.GameObject ) skipped:  filtered
	[Client]Game.UI.UICommon.DynamicListOnSelectEventHandler::BeginInvoke[3]( UnityEngine.GameObject, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.DynamicListOnSelectEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.DynamicListOnClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.DynamicListOnClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.DynamicListOnClickEventHandler::Invoke[1]( UnityEngine.GameObject ) skipped:  filtered
	[Client]Game.UI.UICommon.DynamicListOnClickEventHandler::BeginInvoke[3]( UnityEngine.GameObject, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.DynamicListOnClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.DynamicListOnDoubleClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.DynamicListOnDoubleClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.DynamicListOnDoubleClickEventHandler::Invoke[1]( UnityEngine.GameObject ) skipped:  filtered
	[Client]Game.UI.UICommon.DynamicListOnDoubleClickEventHandler::BeginInvoke[3]( UnityEngine.GameObject, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.DynamicListOnDoubleClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]GamePortal skipped:  marked
{

	[Client]GamePortal::get_Instance[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::Awake[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::Start[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::FixedUpdate[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::Update[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::LateUpdate[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::OnMessage[1]( System.String ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::OnMessageAppRecord[1]( System.String ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::OnMessageAppNotify[1]( System.String ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::OnMessageAppDebug[1]( System.String ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::OnApplicationFocus[1]( System.Boolean ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::OnApplicationPause[1]( System.Boolean ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::OnApplicationQuit[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::OnDrawGizmosSelected[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::OnClick[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::ProcessExceptionReport[3]( System.String, System.String, UnityEngine.LogType ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]GamePortal::.cctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]Game.UI.UICommon.AddLoadTaskEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.AddLoadTaskEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.AddLoadTaskEventHandler::Invoke[2]( System.String, System.Action`1<UnityEngine.Object> ) skipped:  filtered
	[Client]Game.UI.UICommon.AddLoadTaskEventHandler::BeginInvoke[4]( System.String, System.Action`1<UnityEngine.Object>, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.AddLoadTaskEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.RemoveLoadTaskEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.RemoveLoadTaskEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.RemoveLoadTaskEventHandler::Invoke[2]( System.UInt32, System.Action`1<UnityEngine.Object> ) skipped:  filtered
	[Client]Game.UI.UICommon.RemoveLoadTaskEventHandler::BeginInvoke[4]( System.UInt32, System.Action`1<UnityEngine.Object>, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.RemoveLoadTaskEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.AppendTips skipped:  filtered
{

	[Client]Game.UI.UICommon.AppendTips::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.AppendTips::Invoke[2]( Game.UI.UICommon.IXUIListItem, System.Collections.Generic.List`1<System.String>& ) skipped:  filtered
	[Client]Game.UI.UICommon.AppendTips::BeginInvoke[4]( Game.UI.UICommon.IXUIListItem, System.Collections.Generic.List`1<System.String>&, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.AppendTips::EndInvoke[2]( System.Collections.Generic.List`1<System.String>&, System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.AppendButtons skipped:  filtered
{

	[Client]Game.UI.UICommon.AppendButtons::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.AppendButtons::Invoke[2]( Game.UI.UICommon.IXUIListItem, System.Collections.Generic.List`1<Game.TipButtonData>& ) skipped:  filtered
	[Client]Game.UI.UICommon.AppendButtons::BeginInvoke[4]( Game.UI.UICommon.IXUIListItem, System.Collections.Generic.List`1<Game.TipButtonData>&, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.AppendButtons::EndInvoke[2]( System.Collections.Generic.List`1<Game.TipButtonData>&, System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.ShowTipsEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.ShowTipsEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ShowTipsEventHandler::Invoke[3]( Game.UI.UICommon.IXUIListItem, Game.UI.UICommon.AppendTips, Game.UI.UICommon.AppendButtons ) skipped:  filtered
	[Client]Game.UI.UICommon.ShowTipsEventHandler::BeginInvoke[5]( Game.UI.UICommon.IXUIListItem, Game.UI.UICommon.AppendTips, Game.UI.UICommon.AppendButtons, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ShowTipsEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.IXUITimerLabel skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUITimerLabel::SetTime[1]( System.TimeSpan ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITimerLabel::SetText[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITimerLabel::SetShowText[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITimerLabel::SetTime[2]( System.TimeSpan, System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITimerLabel::RegisterFinishTimingEventHandler[1]( System.Action ) skipped:  filtered
}

[Client]Game.UI.UICommon.PopupListSelectEventHanler skipped:  filtered
{

	[Client]Game.UI.UICommon.PopupListSelectEventHanler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.PopupListSelectEventHanler::Invoke[1]( System.Int16 ) skipped:  filtered
	[Client]Game.UI.UICommon.PopupListSelectEventHanler::BeginInvoke[3]( System.Int16, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.PopupListSelectEventHanler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.PictureClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.PictureClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.PictureClickEventHandler::Invoke[1]( Game.UI.UICommon.IXUIPicture ) skipped:  filtered
	[Client]Game.UI.UICommon.PictureClickEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUIPicture, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.PictureClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.InputOnChangeEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.InputOnChangeEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.InputOnChangeEventHandler::Invoke[1]( Game.UI.UICommon.IXUIInput ) skipped:  filtered
	[Client]Game.UI.UICommon.InputOnChangeEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUIInput, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.InputOnChangeEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.InputOnSubmitEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.InputOnSubmitEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.InputOnSubmitEventHandler::Invoke[1]( Game.UI.UICommon.IXUIInput ) skipped:  filtered
	[Client]Game.UI.UICommon.InputOnSubmitEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUIInput, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.InputOnSubmitEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIInput skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIInput::GetText[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIInput::SetText[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIInput::SetEnable[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIInput::RegisterInputOnChange[1]( Game.UI.UICommon.InputOnChangeEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIInput::RegisterInputOnSubmit[1]( Game.UI.UICommon.InputOnSubmitEventHandler ) skipped:  filtered
}

[Client]AttackAnimationParam skipped:  marked
{

	[Client]AttackAnimationParam::get_Name[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AttackAnimationParam::get_HitPoint[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AttackAnimationParam::get_StartTrailTime[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AttackAnimationParam::get_EndTrailTime[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AttackAnimationParam::get_StartAttackTime[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AttackAnimationParam::get_EndAttackTime[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]AttackAnimationParam::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]TriggerAIBorn skipped:  marked
{

	[Client]TriggerAIBorn::OnTriggerEnter[1]( UnityEngine.Collider ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]TriggerAIBorn::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]Game.UI.UICommon.SliderValueChangeEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.SliderValueChangeEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.SliderValueChangeEventHandler::Invoke[1]( Game.UI.UICommon.IXUISlider ) skipped:  filtered
	[Client]Game.UI.UICommon.SliderValueChangeEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUISlider, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.SliderValueChangeEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.ButtonClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.ButtonClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ButtonClickEventHandler::Invoke[1]( Game.UI.UICommon.IXUIButton ) skipped:  filtered
	[Client]Game.UI.UICommon.ButtonClickEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUIButton, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ButtonClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.ButtonPressEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.ButtonPressEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.ButtonPressEventHandler::Invoke[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.ButtonPressEventHandler::BeginInvoke[3]( System.Boolean, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.ButtonPressEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.IXUIButton skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUIButton::SetCaption[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIButton::SetEnable[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIButton::RegisterClickEventHandler[1]( Game.UI.UICommon.ButtonClickEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUIButton::RegisterPressEventHandler[1]( Game.UI.UICommon.ButtonPressEventHandler ) skipped:  filtered
}

[Client]WeaponTrail skipped:  marked
{

	[Client]WeaponTrail::Awake[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]WeaponTrail::StartTrail[2]( System.Single, System.Single ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]WeaponTrail::SetTime[3]( System.Single, System.Single, System.Single ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]WeaponTrail::FadeOut[1]( System.Single ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]WeaponTrail::SetTrailColor[1]( UnityEngine.Color ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]WeaponTrail::Itterate[1]( System.Single ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]WeaponTrail::UpdateTrail[2]( System.Single, System.Single ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]WeaponTrail::ClearTrail[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]WeaponTrail::.ctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
	[Client]WeaponTrail::.cctor[0]( ) skipped:  Obfuscar.ObfuscateAttribute found on type.
}

[Client]Game.UI.UICommon.UrlClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.UrlClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.UrlClickEventHandler::Invoke[2]( Game.UI.UICommon.IXUITextList, Game.UI.UICommon.UrlData ) skipped:  filtered
	[Client]Game.UI.UICommon.UrlClickEventHandler::BeginInvoke[4]( Game.UI.UICommon.IXUITextList, Game.UI.UICommon.UrlData, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.UrlClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.TextListClickEventHandler skipped:  filtered
{

	[Client]Game.UI.UICommon.TextListClickEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  filtered
	[Client]Game.UI.UICommon.TextListClickEventHandler::Invoke[1]( Game.UI.UICommon.IXUITextList ) skipped:  filtered
	[Client]Game.UI.UICommon.TextListClickEventHandler::BeginInvoke[3]( Game.UI.UICommon.IXUITextList, System.AsyncCallback, System.Object ) skipped:  filtered
	[Client]Game.UI.UICommon.TextListClickEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  filtered
}

[Client]Game.UI.UICommon.IXUITextList skipped:  filtered
{

	[Client]Game.UI.UICommon.IXUITextList::Clear[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITextList::Add[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITextList::AddLine[1]( System.String ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITextList::GotoFirstLine[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITextList::ResetScroll[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITextList::SetAutoScroll[1]( System.Boolean ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITextList::GotoLastLine[0]( ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITextList::RegisterUrlClickEventHandler[1]( Game.UI.UICommon.UrlClickEventHandler ) skipped:  filtered
	[Client]Game.UI.UICommon.IXUITextList::RegisterClickEventHandler[1]( Game.UI.UICommon.TextListClickEventHandler ) skipped:  filtered
}

[Client]Game.UI.Dlg_MessageBox/CallBackEventHandler skipped:  filtered
{

	[Client]Game.UI.Dlg_MessageBox/CallBackEventHandler::.ctor[2]( System.Object, System.IntPtr ) skipped:  runtime method
	[Client]Game.UI.Dlg_MessageBox/CallBackEventHandler::Invoke[2]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object ) skipped:  runtime method
	[Client]Game.UI.Dlg_MessageBox/CallBackEventHandler::BeginInvoke[4]( Game.UI.Dlg_MessageBox/MessageBoxReturn, System.Object, System.AsyncCallback, System.Object ) skipped:  runtime method
	[Client]Game.UI.Dlg_MessageBox/CallBackEventHandler::EndInvoke[1]( System.IAsyncResult ) skipped:  runtime method
}

[Client]Game.UI.UICommon.IXUIAtlas skipped:  filtered
{
}

[Client]Game.UI.IDlgTargetDynamic skipped:  filtered
{
}

Renamed Resources:


Skipped Resources:

